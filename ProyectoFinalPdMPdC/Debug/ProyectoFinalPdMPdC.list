
ProyectoFinalPdMPdC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004f98  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003e4  08005148  08005148  00015148  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800552c  0800552c  000200e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800552c  0800552c  0001552c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005534  08005534  000200e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005534  08005534  00015534  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005538  08005538  00015538  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000e0  20000000  0800553c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000200e0  2**0
                  CONTENTS
 10 .bss          000000d0  200000e0  200000e0  000200e0  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200001b0  200001b0  000200e0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000200e0  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000da42  00000000  00000000  00020110  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000222b  00000000  00000000  0002db52  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000b60  00000000  00000000  0002fd80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000a90  00000000  00000000  000308e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00004124  00000000  00000000  00031370  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00010ee4  00000000  00000000  00035494  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e4388  00000000  00000000  00046378  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0012a700  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003880  00000000  00000000  0012a750  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200000e0 	.word	0x200000e0
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08005130 	.word	0x08005130

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200000e4 	.word	0x200000e4
 80001ec:	08005130 	.word	0x08005130

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002b4:	f000 b974 	b.w	80005a0 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	4604      	mov	r4, r0
 80002d8:	468e      	mov	lr, r1
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d14d      	bne.n	800037a <__udivmoddi4+0xaa>
 80002de:	428a      	cmp	r2, r1
 80002e0:	4694      	mov	ip, r2
 80002e2:	d969      	bls.n	80003b8 <__udivmoddi4+0xe8>
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	b152      	cbz	r2, 8000300 <__udivmoddi4+0x30>
 80002ea:	fa01 f302 	lsl.w	r3, r1, r2
 80002ee:	f1c2 0120 	rsb	r1, r2, #32
 80002f2:	fa20 f101 	lsr.w	r1, r0, r1
 80002f6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002fa:	ea41 0e03 	orr.w	lr, r1, r3
 80002fe:	4094      	lsls	r4, r2
 8000300:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000304:	0c21      	lsrs	r1, r4, #16
 8000306:	fbbe f6f8 	udiv	r6, lr, r8
 800030a:	fa1f f78c 	uxth.w	r7, ip
 800030e:	fb08 e316 	mls	r3, r8, r6, lr
 8000312:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000316:	fb06 f107 	mul.w	r1, r6, r7
 800031a:	4299      	cmp	r1, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x64>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000326:	f080 811f 	bcs.w	8000568 <__udivmoddi4+0x298>
 800032a:	4299      	cmp	r1, r3
 800032c:	f240 811c 	bls.w	8000568 <__udivmoddi4+0x298>
 8000330:	3e02      	subs	r6, #2
 8000332:	4463      	add	r3, ip
 8000334:	1a5b      	subs	r3, r3, r1
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb3 f0f8 	udiv	r0, r3, r8
 800033c:	fb08 3310 	mls	r3, r8, r0, r3
 8000340:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000344:	fb00 f707 	mul.w	r7, r0, r7
 8000348:	42a7      	cmp	r7, r4
 800034a:	d90a      	bls.n	8000362 <__udivmoddi4+0x92>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000354:	f080 810a 	bcs.w	800056c <__udivmoddi4+0x29c>
 8000358:	42a7      	cmp	r7, r4
 800035a:	f240 8107 	bls.w	800056c <__udivmoddi4+0x29c>
 800035e:	4464      	add	r4, ip
 8000360:	3802      	subs	r0, #2
 8000362:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000366:	1be4      	subs	r4, r4, r7
 8000368:	2600      	movs	r6, #0
 800036a:	b11d      	cbz	r5, 8000374 <__udivmoddi4+0xa4>
 800036c:	40d4      	lsrs	r4, r2
 800036e:	2300      	movs	r3, #0
 8000370:	e9c5 4300 	strd	r4, r3, [r5]
 8000374:	4631      	mov	r1, r6
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	428b      	cmp	r3, r1
 800037c:	d909      	bls.n	8000392 <__udivmoddi4+0xc2>
 800037e:	2d00      	cmp	r5, #0
 8000380:	f000 80ef 	beq.w	8000562 <__udivmoddi4+0x292>
 8000384:	2600      	movs	r6, #0
 8000386:	e9c5 0100 	strd	r0, r1, [r5]
 800038a:	4630      	mov	r0, r6
 800038c:	4631      	mov	r1, r6
 800038e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000392:	fab3 f683 	clz	r6, r3
 8000396:	2e00      	cmp	r6, #0
 8000398:	d14a      	bne.n	8000430 <__udivmoddi4+0x160>
 800039a:	428b      	cmp	r3, r1
 800039c:	d302      	bcc.n	80003a4 <__udivmoddi4+0xd4>
 800039e:	4282      	cmp	r2, r0
 80003a0:	f200 80f9 	bhi.w	8000596 <__udivmoddi4+0x2c6>
 80003a4:	1a84      	subs	r4, r0, r2
 80003a6:	eb61 0303 	sbc.w	r3, r1, r3
 80003aa:	2001      	movs	r0, #1
 80003ac:	469e      	mov	lr, r3
 80003ae:	2d00      	cmp	r5, #0
 80003b0:	d0e0      	beq.n	8000374 <__udivmoddi4+0xa4>
 80003b2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003b6:	e7dd      	b.n	8000374 <__udivmoddi4+0xa4>
 80003b8:	b902      	cbnz	r2, 80003bc <__udivmoddi4+0xec>
 80003ba:	deff      	udf	#255	; 0xff
 80003bc:	fab2 f282 	clz	r2, r2
 80003c0:	2a00      	cmp	r2, #0
 80003c2:	f040 8092 	bne.w	80004ea <__udivmoddi4+0x21a>
 80003c6:	eba1 010c 	sub.w	r1, r1, ip
 80003ca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ce:	fa1f fe8c 	uxth.w	lr, ip
 80003d2:	2601      	movs	r6, #1
 80003d4:	0c20      	lsrs	r0, r4, #16
 80003d6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003da:	fb07 1113 	mls	r1, r7, r3, r1
 80003de:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003e2:	fb0e f003 	mul.w	r0, lr, r3
 80003e6:	4288      	cmp	r0, r1
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x12c>
 80003ea:	eb1c 0101 	adds.w	r1, ip, r1
 80003ee:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x12a>
 80003f4:	4288      	cmp	r0, r1
 80003f6:	f200 80cb 	bhi.w	8000590 <__udivmoddi4+0x2c0>
 80003fa:	4643      	mov	r3, r8
 80003fc:	1a09      	subs	r1, r1, r0
 80003fe:	b2a4      	uxth	r4, r4
 8000400:	fbb1 f0f7 	udiv	r0, r1, r7
 8000404:	fb07 1110 	mls	r1, r7, r0, r1
 8000408:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800040c:	fb0e fe00 	mul.w	lr, lr, r0
 8000410:	45a6      	cmp	lr, r4
 8000412:	d908      	bls.n	8000426 <__udivmoddi4+0x156>
 8000414:	eb1c 0404 	adds.w	r4, ip, r4
 8000418:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800041c:	d202      	bcs.n	8000424 <__udivmoddi4+0x154>
 800041e:	45a6      	cmp	lr, r4
 8000420:	f200 80bb 	bhi.w	800059a <__udivmoddi4+0x2ca>
 8000424:	4608      	mov	r0, r1
 8000426:	eba4 040e 	sub.w	r4, r4, lr
 800042a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800042e:	e79c      	b.n	800036a <__udivmoddi4+0x9a>
 8000430:	f1c6 0720 	rsb	r7, r6, #32
 8000434:	40b3      	lsls	r3, r6
 8000436:	fa22 fc07 	lsr.w	ip, r2, r7
 800043a:	ea4c 0c03 	orr.w	ip, ip, r3
 800043e:	fa20 f407 	lsr.w	r4, r0, r7
 8000442:	fa01 f306 	lsl.w	r3, r1, r6
 8000446:	431c      	orrs	r4, r3
 8000448:	40f9      	lsrs	r1, r7
 800044a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800044e:	fa00 f306 	lsl.w	r3, r0, r6
 8000452:	fbb1 f8f9 	udiv	r8, r1, r9
 8000456:	0c20      	lsrs	r0, r4, #16
 8000458:	fa1f fe8c 	uxth.w	lr, ip
 800045c:	fb09 1118 	mls	r1, r9, r8, r1
 8000460:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000464:	fb08 f00e 	mul.w	r0, r8, lr
 8000468:	4288      	cmp	r0, r1
 800046a:	fa02 f206 	lsl.w	r2, r2, r6
 800046e:	d90b      	bls.n	8000488 <__udivmoddi4+0x1b8>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000478:	f080 8088 	bcs.w	800058c <__udivmoddi4+0x2bc>
 800047c:	4288      	cmp	r0, r1
 800047e:	f240 8085 	bls.w	800058c <__udivmoddi4+0x2bc>
 8000482:	f1a8 0802 	sub.w	r8, r8, #2
 8000486:	4461      	add	r1, ip
 8000488:	1a09      	subs	r1, r1, r0
 800048a:	b2a4      	uxth	r4, r4
 800048c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000490:	fb09 1110 	mls	r1, r9, r0, r1
 8000494:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000498:	fb00 fe0e 	mul.w	lr, r0, lr
 800049c:	458e      	cmp	lr, r1
 800049e:	d908      	bls.n	80004b2 <__udivmoddi4+0x1e2>
 80004a0:	eb1c 0101 	adds.w	r1, ip, r1
 80004a4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80004a8:	d26c      	bcs.n	8000584 <__udivmoddi4+0x2b4>
 80004aa:	458e      	cmp	lr, r1
 80004ac:	d96a      	bls.n	8000584 <__udivmoddi4+0x2b4>
 80004ae:	3802      	subs	r0, #2
 80004b0:	4461      	add	r1, ip
 80004b2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004b6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ba:	eba1 010e 	sub.w	r1, r1, lr
 80004be:	42a1      	cmp	r1, r4
 80004c0:	46c8      	mov	r8, r9
 80004c2:	46a6      	mov	lr, r4
 80004c4:	d356      	bcc.n	8000574 <__udivmoddi4+0x2a4>
 80004c6:	d053      	beq.n	8000570 <__udivmoddi4+0x2a0>
 80004c8:	b15d      	cbz	r5, 80004e2 <__udivmoddi4+0x212>
 80004ca:	ebb3 0208 	subs.w	r2, r3, r8
 80004ce:	eb61 010e 	sbc.w	r1, r1, lr
 80004d2:	fa01 f707 	lsl.w	r7, r1, r7
 80004d6:	fa22 f306 	lsr.w	r3, r2, r6
 80004da:	40f1      	lsrs	r1, r6
 80004dc:	431f      	orrs	r7, r3
 80004de:	e9c5 7100 	strd	r7, r1, [r5]
 80004e2:	2600      	movs	r6, #0
 80004e4:	4631      	mov	r1, r6
 80004e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ea:	f1c2 0320 	rsb	r3, r2, #32
 80004ee:	40d8      	lsrs	r0, r3
 80004f0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f4:	fa21 f303 	lsr.w	r3, r1, r3
 80004f8:	4091      	lsls	r1, r2
 80004fa:	4301      	orrs	r1, r0
 80004fc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000500:	fa1f fe8c 	uxth.w	lr, ip
 8000504:	fbb3 f0f7 	udiv	r0, r3, r7
 8000508:	fb07 3610 	mls	r6, r7, r0, r3
 800050c:	0c0b      	lsrs	r3, r1, #16
 800050e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000512:	fb00 f60e 	mul.w	r6, r0, lr
 8000516:	429e      	cmp	r6, r3
 8000518:	fa04 f402 	lsl.w	r4, r4, r2
 800051c:	d908      	bls.n	8000530 <__udivmoddi4+0x260>
 800051e:	eb1c 0303 	adds.w	r3, ip, r3
 8000522:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000526:	d22f      	bcs.n	8000588 <__udivmoddi4+0x2b8>
 8000528:	429e      	cmp	r6, r3
 800052a:	d92d      	bls.n	8000588 <__udivmoddi4+0x2b8>
 800052c:	3802      	subs	r0, #2
 800052e:	4463      	add	r3, ip
 8000530:	1b9b      	subs	r3, r3, r6
 8000532:	b289      	uxth	r1, r1
 8000534:	fbb3 f6f7 	udiv	r6, r3, r7
 8000538:	fb07 3316 	mls	r3, r7, r6, r3
 800053c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000540:	fb06 f30e 	mul.w	r3, r6, lr
 8000544:	428b      	cmp	r3, r1
 8000546:	d908      	bls.n	800055a <__udivmoddi4+0x28a>
 8000548:	eb1c 0101 	adds.w	r1, ip, r1
 800054c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000550:	d216      	bcs.n	8000580 <__udivmoddi4+0x2b0>
 8000552:	428b      	cmp	r3, r1
 8000554:	d914      	bls.n	8000580 <__udivmoddi4+0x2b0>
 8000556:	3e02      	subs	r6, #2
 8000558:	4461      	add	r1, ip
 800055a:	1ac9      	subs	r1, r1, r3
 800055c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000560:	e738      	b.n	80003d4 <__udivmoddi4+0x104>
 8000562:	462e      	mov	r6, r5
 8000564:	4628      	mov	r0, r5
 8000566:	e705      	b.n	8000374 <__udivmoddi4+0xa4>
 8000568:	4606      	mov	r6, r0
 800056a:	e6e3      	b.n	8000334 <__udivmoddi4+0x64>
 800056c:	4618      	mov	r0, r3
 800056e:	e6f8      	b.n	8000362 <__udivmoddi4+0x92>
 8000570:	454b      	cmp	r3, r9
 8000572:	d2a9      	bcs.n	80004c8 <__udivmoddi4+0x1f8>
 8000574:	ebb9 0802 	subs.w	r8, r9, r2
 8000578:	eb64 0e0c 	sbc.w	lr, r4, ip
 800057c:	3801      	subs	r0, #1
 800057e:	e7a3      	b.n	80004c8 <__udivmoddi4+0x1f8>
 8000580:	4646      	mov	r6, r8
 8000582:	e7ea      	b.n	800055a <__udivmoddi4+0x28a>
 8000584:	4620      	mov	r0, r4
 8000586:	e794      	b.n	80004b2 <__udivmoddi4+0x1e2>
 8000588:	4640      	mov	r0, r8
 800058a:	e7d1      	b.n	8000530 <__udivmoddi4+0x260>
 800058c:	46d0      	mov	r8, sl
 800058e:	e77b      	b.n	8000488 <__udivmoddi4+0x1b8>
 8000590:	3b02      	subs	r3, #2
 8000592:	4461      	add	r1, ip
 8000594:	e732      	b.n	80003fc <__udivmoddi4+0x12c>
 8000596:	4630      	mov	r0, r6
 8000598:	e709      	b.n	80003ae <__udivmoddi4+0xde>
 800059a:	4464      	add	r4, ip
 800059c:	3802      	subs	r0, #2
 800059e:	e742      	b.n	8000426 <__udivmoddi4+0x156>

080005a0 <__aeabi_idiv0>:
 80005a0:	4770      	bx	lr
 80005a2:	bf00      	nop

080005a4 <uartInit>:
 * Inicializa la UART con los parámetros por defecto y envía por serial la configuración inicial.
 *
 * @fn bool_t uartInit()
 * @return true si se inicializó bien
 */
bool_t uartInit(){
 80005a4:	b580      	push	{r7, lr}
 80005a6:	af00      	add	r7, sp, #0
		                  BE CAREFUL : Program 7 data bits + 1 parity bit in PC HyperTerminal
	      - Stop Bit    = One Stop bit
	      - Parity      = ODD parity
	      - BaudRate    = 9600 baud
	      - Hardware flow control disabled (RTS and CTS signals) */
	  UartHandle.Instance        = USARTx;
 80005a8:	4b11      	ldr	r3, [pc, #68]	; (80005f0 <uartInit+0x4c>)
 80005aa:	4a12      	ldr	r2, [pc, #72]	; (80005f4 <uartInit+0x50>)
 80005ac:	601a      	str	r2, [r3, #0]

	  UartHandle.Init.BaudRate   = BAUD_RATE;
 80005ae:	4b10      	ldr	r3, [pc, #64]	; (80005f0 <uartInit+0x4c>)
 80005b0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80005b4:	605a      	str	r2, [r3, #4]
	  UartHandle.Init.WordLength = UART_WORDLENGTH_8B;
 80005b6:	4b0e      	ldr	r3, [pc, #56]	; (80005f0 <uartInit+0x4c>)
 80005b8:	2200      	movs	r2, #0
 80005ba:	609a      	str	r2, [r3, #8]
	  UartHandle.Init.StopBits   = UART_STOPBITS_1;
 80005bc:	4b0c      	ldr	r3, [pc, #48]	; (80005f0 <uartInit+0x4c>)
 80005be:	2200      	movs	r2, #0
 80005c0:	60da      	str	r2, [r3, #12]
	  UartHandle.Init.Parity     = UART_PARITY_NONE;
 80005c2:	4b0b      	ldr	r3, [pc, #44]	; (80005f0 <uartInit+0x4c>)
 80005c4:	2200      	movs	r2, #0
 80005c6:	611a      	str	r2, [r3, #16]
	  UartHandle.Init.HwFlowCtl  = UART_HWCONTROL_NONE;
 80005c8:	4b09      	ldr	r3, [pc, #36]	; (80005f0 <uartInit+0x4c>)
 80005ca:	2200      	movs	r2, #0
 80005cc:	619a      	str	r2, [r3, #24]
	  UartHandle.Init.Mode       = UART_MODE_TX_RX;
 80005ce:	4b08      	ldr	r3, [pc, #32]	; (80005f0 <uartInit+0x4c>)
 80005d0:	220c      	movs	r2, #12
 80005d2:	615a      	str	r2, [r3, #20]
	  UartHandle.Init.OverSampling = UART_OVERSAMPLING_16;
 80005d4:	4b06      	ldr	r3, [pc, #24]	; (80005f0 <uartInit+0x4c>)
 80005d6:	2200      	movs	r2, #0
 80005d8:	61da      	str	r2, [r3, #28]


	  if (HAL_UART_Init(&UartHandle) != HAL_OK)
 80005da:	4805      	ldr	r0, [pc, #20]	; (80005f0 <uartInit+0x4c>)
 80005dc:	f002 fd88 	bl	80030f0 <HAL_UART_Init>
 80005e0:	4603      	mov	r3, r0
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	d001      	beq.n	80005ea <uartInit+0x46>
	  {
	    return false;
 80005e6:	2300      	movs	r3, #0
 80005e8:	e000      	b.n	80005ec <uartInit+0x48>
	  }
	  return true;
 80005ea:	2301      	movs	r3, #1

}
 80005ec:	4618      	mov	r0, r3
 80005ee:	bd80      	pop	{r7, pc}
 80005f0:	200000fc 	.word	0x200000fc
 80005f4:	40004800 	.word	0x40004800

080005f8 <uartSendString>:
 * y luego lo envía usando la función de la HAL, calculando el
 * tamaño del string con strlen()
 *
 * @param pstring puntero al string, que debe terminar con \0
 */
void uartSendString(uint8_t * pstring){
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b082      	sub	sp, #8
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	6078      	str	r0, [r7, #4]

	assert(pstring != NULL);
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	2b00      	cmp	r3, #0
 8000604:	d105      	bne.n	8000612 <uartSendString+0x1a>
 8000606:	4b0a      	ldr	r3, [pc, #40]	; (8000630 <uartSendString+0x38>)
 8000608:	4a0a      	ldr	r2, [pc, #40]	; (8000634 <uartSendString+0x3c>)
 800060a:	2140      	movs	r1, #64	; 0x40
 800060c:	480a      	ldr	r0, [pc, #40]	; (8000638 <uartSendString+0x40>)
 800060e:	f003 fb89 	bl	8003d24 <__assert_func>
	HAL_UART_Transmit(&UartHandle, pstring, strlen(pstring), 0xFFFF);
 8000612:	6878      	ldr	r0, [r7, #4]
 8000614:	f7ff fdec 	bl	80001f0 <strlen>
 8000618:	4603      	mov	r3, r0
 800061a:	b29a      	uxth	r2, r3
 800061c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000620:	6879      	ldr	r1, [r7, #4]
 8000622:	4806      	ldr	r0, [pc, #24]	; (800063c <uartSendString+0x44>)
 8000624:	f002 fdb1 	bl	800318a <HAL_UART_Transmit>

}
 8000628:	bf00      	nop
 800062a:	3708      	adds	r7, #8
 800062c:	46bd      	mov	sp, r7
 800062e:	bd80      	pop	{r7, pc}
 8000630:	08005148 	.word	0x08005148
 8000634:	08005414 	.word	0x08005414
 8000638:	08005158 	.word	0x08005158
 800063c:	200000fc 	.word	0x200000fc

08000640 <BSP_LED_On>:
  * @param  Led: Specifies the Led to be set on. 
  *   This parameter can be one of following parameters:
  *     @arg LED2
  */
void BSP_LED_On(Led_TypeDef Led)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b082      	sub	sp, #8
 8000644:	af00      	add	r7, sp, #0
 8000646:	4603      	mov	r3, r0
 8000648:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET); 
 800064a:	79fb      	ldrb	r3, [r7, #7]
 800064c:	4a07      	ldr	r2, [pc, #28]	; (800066c <BSP_LED_On+0x2c>)
 800064e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000652:	79fb      	ldrb	r3, [r7, #7]
 8000654:	4a06      	ldr	r2, [pc, #24]	; (8000670 <BSP_LED_On+0x30>)
 8000656:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800065a:	2201      	movs	r2, #1
 800065c:	4619      	mov	r1, r3
 800065e:	f000 ffe3 	bl	8001628 <HAL_GPIO_WritePin>
}
 8000662:	bf00      	nop
 8000664:	3708      	adds	r7, #8
 8000666:	46bd      	mov	sp, r7
 8000668:	bd80      	pop	{r7, pc}
 800066a:	bf00      	nop
 800066c:	20000000 	.word	0x20000000
 8000670:	08005424 	.word	0x08005424

08000674 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000674:	b480      	push	{r7}
 8000676:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000678:	4b16      	ldr	r3, [pc, #88]	; (80006d4 <SystemInit+0x60>)
 800067a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800067e:	4a15      	ldr	r2, [pc, #84]	; (80006d4 <SystemInit+0x60>)
 8000680:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000684:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000688:	4b13      	ldr	r3, [pc, #76]	; (80006d8 <SystemInit+0x64>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	4a12      	ldr	r2, [pc, #72]	; (80006d8 <SystemInit+0x64>)
 800068e:	f043 0301 	orr.w	r3, r3, #1
 8000692:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000694:	4b10      	ldr	r3, [pc, #64]	; (80006d8 <SystemInit+0x64>)
 8000696:	2200      	movs	r2, #0
 8000698:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800069a:	4b0f      	ldr	r3, [pc, #60]	; (80006d8 <SystemInit+0x64>)
 800069c:	681b      	ldr	r3, [r3, #0]
 800069e:	4a0e      	ldr	r2, [pc, #56]	; (80006d8 <SystemInit+0x64>)
 80006a0:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80006a4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80006a8:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80006aa:	4b0b      	ldr	r3, [pc, #44]	; (80006d8 <SystemInit+0x64>)
 80006ac:	4a0b      	ldr	r2, [pc, #44]	; (80006dc <SystemInit+0x68>)
 80006ae:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80006b0:	4b09      	ldr	r3, [pc, #36]	; (80006d8 <SystemInit+0x64>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	4a08      	ldr	r2, [pc, #32]	; (80006d8 <SystemInit+0x64>)
 80006b6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80006ba:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80006bc:	4b06      	ldr	r3, [pc, #24]	; (80006d8 <SystemInit+0x64>)
 80006be:	2200      	movs	r2, #0
 80006c0:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80006c2:	4b04      	ldr	r3, [pc, #16]	; (80006d4 <SystemInit+0x60>)
 80006c4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80006c8:	609a      	str	r2, [r3, #8]
#endif
}
 80006ca:	bf00      	nop
 80006cc:	46bd      	mov	sp, r7
 80006ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d2:	4770      	bx	lr
 80006d4:	e000ed00 	.word	0xe000ed00
 80006d8:	40023800 	.word	0x40023800
 80006dc:	24003010 	.word	0x24003010

080006e0 <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 80006e0:	b480      	push	{r7}
 80006e2:	af00      	add	r7, sp, #0
}
 80006e4:	bf00      	nop
 80006e6:	46bd      	mov	sp, r7
 80006e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ec:	4770      	bx	lr

080006ee <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 80006ee:	b480      	push	{r7}
 80006f0:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 80006f2:	e7fe      	b.n	80006f2 <HardFault_Handler+0x4>

080006f4 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 80006f4:	b480      	push	{r7}
 80006f6:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 80006f8:	e7fe      	b.n	80006f8 <MemManage_Handler+0x4>

080006fa <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 80006fa:	b480      	push	{r7}
 80006fc:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 80006fe:	e7fe      	b.n	80006fe <BusFault_Handler+0x4>

08000700 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8000700:	b480      	push	{r7}
 8000702:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8000704:	e7fe      	b.n	8000704 <UsageFault_Handler+0x4>

08000706 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8000706:	b480      	push	{r7}
 8000708:	af00      	add	r7, sp, #0
}
 800070a:	bf00      	nop
 800070c:	46bd      	mov	sp, r7
 800070e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000712:	4770      	bx	lr

08000714 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8000714:	b480      	push	{r7}
 8000716:	af00      	add	r7, sp, #0
}
 8000718:	bf00      	nop
 800071a:	46bd      	mov	sp, r7
 800071c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000720:	4770      	bx	lr

08000722 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8000722:	b480      	push	{r7}
 8000724:	af00      	add	r7, sp, #0
}
 8000726:	bf00      	nop
 8000728:	46bd      	mov	sp, r7
 800072a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800072e:	4770      	bx	lr

08000730 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	af00      	add	r7, sp, #0
    HAL_IncTick();
 8000734:	f000 fca2 	bl	800107c <HAL_IncTick>
}
 8000738:	bf00      	nop
 800073a:	bd80      	pop	{r7, pc}

0800073c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800073c:	b480      	push	{r7}
 800073e:	af00      	add	r7, sp, #0
	return 1;
 8000740:	2301      	movs	r3, #1
}
 8000742:	4618      	mov	r0, r3
 8000744:	46bd      	mov	sp, r7
 8000746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800074a:	4770      	bx	lr

0800074c <_kill>:

int _kill(int pid, int sig)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b082      	sub	sp, #8
 8000750:	af00      	add	r7, sp, #0
 8000752:	6078      	str	r0, [r7, #4]
 8000754:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000756:	f003 fb03 	bl	8003d60 <__errno>
 800075a:	4603      	mov	r3, r0
 800075c:	2216      	movs	r2, #22
 800075e:	601a      	str	r2, [r3, #0]
	return -1;
 8000760:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000764:	4618      	mov	r0, r3
 8000766:	3708      	adds	r7, #8
 8000768:	46bd      	mov	sp, r7
 800076a:	bd80      	pop	{r7, pc}

0800076c <_exit>:

void _exit (int status)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b082      	sub	sp, #8
 8000770:	af00      	add	r7, sp, #0
 8000772:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000774:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000778:	6878      	ldr	r0, [r7, #4]
 800077a:	f7ff ffe7 	bl	800074c <_kill>
	while (1) {}		/* Make sure we hang here */
 800077e:	e7fe      	b.n	800077e <_exit+0x12>

08000780 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	b086      	sub	sp, #24
 8000784:	af00      	add	r7, sp, #0
 8000786:	60f8      	str	r0, [r7, #12]
 8000788:	60b9      	str	r1, [r7, #8]
 800078a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800078c:	2300      	movs	r3, #0
 800078e:	617b      	str	r3, [r7, #20]
 8000790:	e00a      	b.n	80007a8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000792:	f3af 8000 	nop.w
 8000796:	4601      	mov	r1, r0
 8000798:	68bb      	ldr	r3, [r7, #8]
 800079a:	1c5a      	adds	r2, r3, #1
 800079c:	60ba      	str	r2, [r7, #8]
 800079e:	b2ca      	uxtb	r2, r1
 80007a0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007a2:	697b      	ldr	r3, [r7, #20]
 80007a4:	3301      	adds	r3, #1
 80007a6:	617b      	str	r3, [r7, #20]
 80007a8:	697a      	ldr	r2, [r7, #20]
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	429a      	cmp	r2, r3
 80007ae:	dbf0      	blt.n	8000792 <_read+0x12>
	}

return len;
 80007b0:	687b      	ldr	r3, [r7, #4]
}
 80007b2:	4618      	mov	r0, r3
 80007b4:	3718      	adds	r7, #24
 80007b6:	46bd      	mov	sp, r7
 80007b8:	bd80      	pop	{r7, pc}

080007ba <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80007ba:	b580      	push	{r7, lr}
 80007bc:	b086      	sub	sp, #24
 80007be:	af00      	add	r7, sp, #0
 80007c0:	60f8      	str	r0, [r7, #12]
 80007c2:	60b9      	str	r1, [r7, #8]
 80007c4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007c6:	2300      	movs	r3, #0
 80007c8:	617b      	str	r3, [r7, #20]
 80007ca:	e009      	b.n	80007e0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80007cc:	68bb      	ldr	r3, [r7, #8]
 80007ce:	1c5a      	adds	r2, r3, #1
 80007d0:	60ba      	str	r2, [r7, #8]
 80007d2:	781b      	ldrb	r3, [r3, #0]
 80007d4:	4618      	mov	r0, r3
 80007d6:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007da:	697b      	ldr	r3, [r7, #20]
 80007dc:	3301      	adds	r3, #1
 80007de:	617b      	str	r3, [r7, #20]
 80007e0:	697a      	ldr	r2, [r7, #20]
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	429a      	cmp	r2, r3
 80007e6:	dbf1      	blt.n	80007cc <_write+0x12>
	}
	return len;
 80007e8:	687b      	ldr	r3, [r7, #4]
}
 80007ea:	4618      	mov	r0, r3
 80007ec:	3718      	adds	r7, #24
 80007ee:	46bd      	mov	sp, r7
 80007f0:	bd80      	pop	{r7, pc}

080007f2 <_close>:

int _close(int file)
{
 80007f2:	b480      	push	{r7}
 80007f4:	b083      	sub	sp, #12
 80007f6:	af00      	add	r7, sp, #0
 80007f8:	6078      	str	r0, [r7, #4]
	return -1;
 80007fa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80007fe:	4618      	mov	r0, r3
 8000800:	370c      	adds	r7, #12
 8000802:	46bd      	mov	sp, r7
 8000804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000808:	4770      	bx	lr

0800080a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800080a:	b480      	push	{r7}
 800080c:	b083      	sub	sp, #12
 800080e:	af00      	add	r7, sp, #0
 8000810:	6078      	str	r0, [r7, #4]
 8000812:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000814:	683b      	ldr	r3, [r7, #0]
 8000816:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800081a:	605a      	str	r2, [r3, #4]
	return 0;
 800081c:	2300      	movs	r3, #0
}
 800081e:	4618      	mov	r0, r3
 8000820:	370c      	adds	r7, #12
 8000822:	46bd      	mov	sp, r7
 8000824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000828:	4770      	bx	lr

0800082a <_isatty>:

int _isatty(int file)
{
 800082a:	b480      	push	{r7}
 800082c:	b083      	sub	sp, #12
 800082e:	af00      	add	r7, sp, #0
 8000830:	6078      	str	r0, [r7, #4]
	return 1;
 8000832:	2301      	movs	r3, #1
}
 8000834:	4618      	mov	r0, r3
 8000836:	370c      	adds	r7, #12
 8000838:	46bd      	mov	sp, r7
 800083a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800083e:	4770      	bx	lr

08000840 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000840:	b480      	push	{r7}
 8000842:	b085      	sub	sp, #20
 8000844:	af00      	add	r7, sp, #0
 8000846:	60f8      	str	r0, [r7, #12]
 8000848:	60b9      	str	r1, [r7, #8]
 800084a:	607a      	str	r2, [r7, #4]
	return 0;
 800084c:	2300      	movs	r3, #0
}
 800084e:	4618      	mov	r0, r3
 8000850:	3714      	adds	r7, #20
 8000852:	46bd      	mov	sp, r7
 8000854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000858:	4770      	bx	lr
	...

0800085c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b086      	sub	sp, #24
 8000860:	af00      	add	r7, sp, #0
 8000862:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000864:	4a14      	ldr	r2, [pc, #80]	; (80008b8 <_sbrk+0x5c>)
 8000866:	4b15      	ldr	r3, [pc, #84]	; (80008bc <_sbrk+0x60>)
 8000868:	1ad3      	subs	r3, r2, r3
 800086a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800086c:	697b      	ldr	r3, [r7, #20]
 800086e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000870:	4b13      	ldr	r3, [pc, #76]	; (80008c0 <_sbrk+0x64>)
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	2b00      	cmp	r3, #0
 8000876:	d102      	bne.n	800087e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000878:	4b11      	ldr	r3, [pc, #68]	; (80008c0 <_sbrk+0x64>)
 800087a:	4a12      	ldr	r2, [pc, #72]	; (80008c4 <_sbrk+0x68>)
 800087c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800087e:	4b10      	ldr	r3, [pc, #64]	; (80008c0 <_sbrk+0x64>)
 8000880:	681a      	ldr	r2, [r3, #0]
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	4413      	add	r3, r2
 8000886:	693a      	ldr	r2, [r7, #16]
 8000888:	429a      	cmp	r2, r3
 800088a:	d207      	bcs.n	800089c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800088c:	f003 fa68 	bl	8003d60 <__errno>
 8000890:	4603      	mov	r3, r0
 8000892:	220c      	movs	r2, #12
 8000894:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000896:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800089a:	e009      	b.n	80008b0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800089c:	4b08      	ldr	r3, [pc, #32]	; (80008c0 <_sbrk+0x64>)
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80008a2:	4b07      	ldr	r3, [pc, #28]	; (80008c0 <_sbrk+0x64>)
 80008a4:	681a      	ldr	r2, [r3, #0]
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	4413      	add	r3, r2
 80008aa:	4a05      	ldr	r2, [pc, #20]	; (80008c0 <_sbrk+0x64>)
 80008ac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80008ae:	68fb      	ldr	r3, [r7, #12]
}
 80008b0:	4618      	mov	r0, r3
 80008b2:	3718      	adds	r7, #24
 80008b4:	46bd      	mov	sp, r7
 80008b6:	bd80      	pop	{r7, pc}
 80008b8:	20030000 	.word	0x20030000
 80008bc:	00000400 	.word	0x00000400
 80008c0:	20000140 	.word	0x20000140
 80008c4:	200001b0 	.word	0x200001b0

080008c8 <arrays_equal>:
		0x0D,
		0xE0, //DCS TFI+CMDN=X00
		0x00
};

static bool arrays_equal(uint8_t* arr1, uint8_t* arr2, uint8_t len) {
 80008c8:	b480      	push	{r7}
 80008ca:	b087      	sub	sp, #28
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	60f8      	str	r0, [r7, #12]
 80008d0:	60b9      	str	r1, [r7, #8]
 80008d2:	4613      	mov	r3, r2
 80008d4:	71fb      	strb	r3, [r7, #7]
    for (uint8_t i = 0; i < len; i++) {
 80008d6:	2300      	movs	r3, #0
 80008d8:	75fb      	strb	r3, [r7, #23]
 80008da:	e00e      	b.n	80008fa <arrays_equal+0x32>
        if (arr1[i] != arr2[i]) {
 80008dc:	7dfb      	ldrb	r3, [r7, #23]
 80008de:	68fa      	ldr	r2, [r7, #12]
 80008e0:	4413      	add	r3, r2
 80008e2:	781a      	ldrb	r2, [r3, #0]
 80008e4:	7dfb      	ldrb	r3, [r7, #23]
 80008e6:	68b9      	ldr	r1, [r7, #8]
 80008e8:	440b      	add	r3, r1
 80008ea:	781b      	ldrb	r3, [r3, #0]
 80008ec:	429a      	cmp	r2, r3
 80008ee:	d001      	beq.n	80008f4 <arrays_equal+0x2c>
            return false;
 80008f0:	2300      	movs	r3, #0
 80008f2:	e007      	b.n	8000904 <arrays_equal+0x3c>
    for (uint8_t i = 0; i < len; i++) {
 80008f4:	7dfb      	ldrb	r3, [r7, #23]
 80008f6:	3301      	adds	r3, #1
 80008f8:	75fb      	strb	r3, [r7, #23]
 80008fa:	7dfa      	ldrb	r2, [r7, #23]
 80008fc:	79fb      	ldrb	r3, [r7, #7]
 80008fe:	429a      	cmp	r2, r3
 8000900:	d3ec      	bcc.n	80008dc <arrays_equal+0x14>
        }
    }
    return true;
 8000902:	2301      	movs	r3, #1
}
 8000904:	4618      	mov	r0, r3
 8000906:	371c      	adds	r7, #28
 8000908:	46bd      	mov	sp, r7
 800090a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090e:	4770      	bx	lr

08000910 <pn532Driver_I2C_init>:

void set_pn532_address(uint8_t address){
	pn532_address = address;
}

bool pn532Driver_I2C_init(){
 8000910:	b580      	push	{r7, lr}
 8000912:	af00      	add	r7, sp, #0
	pn532Driver_I2C_portNucleo_init();
 8000914:	f000 fa60 	bl	8000dd8 <pn532Driver_I2C_portNucleo_init>
	pn532Driver_initialized=true;
 8000918:	4b02      	ldr	r3, [pc, #8]	; (8000924 <pn532Driver_I2C_init+0x14>)
 800091a:	2201      	movs	r2, #1
 800091c:	701a      	strb	r2, [r3, #0]
}
 800091e:	bf00      	nop
 8000920:	4618      	mov	r0, r3
 8000922:	bd80      	pop	{r7, pc}
 8000924:	20000144 	.word	0x20000144

08000928 <receive_ACK>:
bool pn532Driver_I2C_deinit(){
	pn532Driver_I2C_portNucleo_deinit();
	pn532Driver_initialized=false;
}

static bool receive_ACK(){
 8000928:	b580      	push	{r7, lr}
 800092a:	b082      	sub	sp, #8
 800092c:	af00      	add	r7, sp, #0
	uint8_t ackBuffer[7]={0};
 800092e:	2300      	movs	r3, #0
 8000930:	603b      	str	r3, [r7, #0]
 8000932:	1d3b      	adds	r3, r7, #4
 8000934:	2100      	movs	r1, #0
 8000936:	460a      	mov	r2, r1
 8000938:	801a      	strh	r2, [r3, #0]
 800093a:	460a      	mov	r2, r1
 800093c:	709a      	strb	r2, [r3, #2]

	if(!pn532Driver_I2C_portNucleo_receiveToBuffer(ackBuffer, LENGTH_OF_ACK_FRAME, pn532_address)){
 800093e:	4b10      	ldr	r3, [pc, #64]	; (8000980 <receive_ACK+0x58>)
 8000940:	781b      	ldrb	r3, [r3, #0]
 8000942:	461a      	mov	r2, r3
 8000944:	463b      	mov	r3, r7
 8000946:	2107      	movs	r1, #7
 8000948:	4618      	mov	r0, r3
 800094a:	f000 fab1 	bl	8000eb0 <pn532Driver_I2C_portNucleo_receiveToBuffer>
 800094e:	4603      	mov	r3, r0
 8000950:	2b00      	cmp	r3, #0
 8000952:	d101      	bne.n	8000958 <receive_ACK+0x30>
		return false;
 8000954:	2300      	movs	r3, #0
 8000956:	e00e      	b.n	8000976 <receive_ACK+0x4e>
	}
	if(!arrays_equal(pn532AckFrame,ackBuffer, LENGTH_OF_ACK_FRAME )){
 8000958:	463b      	mov	r3, r7
 800095a:	2207      	movs	r2, #7
 800095c:	4619      	mov	r1, r3
 800095e:	4809      	ldr	r0, [pc, #36]	; (8000984 <receive_ACK+0x5c>)
 8000960:	f7ff ffb2 	bl	80008c8 <arrays_equal>
 8000964:	4603      	mov	r3, r0
 8000966:	f083 0301 	eor.w	r3, r3, #1
 800096a:	b2db      	uxtb	r3, r3
 800096c:	2b00      	cmp	r3, #0
 800096e:	d001      	beq.n	8000974 <receive_ACK+0x4c>
		return false;
 8000970:	2300      	movs	r3, #0
 8000972:	e000      	b.n	8000976 <receive_ACK+0x4e>
	}
	return true;
 8000974:	2301      	movs	r3, #1
}
 8000976:	4618      	mov	r0, r3
 8000978:	3708      	adds	r7, #8
 800097a:	46bd      	mov	sp, r7
 800097c:	bd80      	pop	{r7, pc}
 800097e:	bf00      	nop
 8000980:	20000010 	.word	0x20000010
 8000984:	08005450 	.word	0x08005450

08000988 <pn532Driver_I2C_getFirmware>:

PN532_response_t pn532Driver_I2C_getFirmware(PN532_firmware_t* firmware){
 8000988:	b580      	push	{r7, lr}
 800098a:	b086      	sub	sp, #24
 800098c:	af00      	add	r7, sp, #0
 800098e:	6078      	str	r0, [r7, #4]

	uint8_t responseBuffer[LENGTH_OF_FIRMWARE_RESPONSE+LENGTH_OF_PREAMBLE+LENGTH_LEN_LCS+LENGTH_OF_FIRMWARE_RESPONSE_CODE+LENGTH_OF_POSTAMBLE];

	if(!pn532Driver_I2C_portNucleo_sendCommand(commandGetFirmware, sizeof(commandGetFirmware), pn532_address)){
 8000990:	4b2b      	ldr	r3, [pc, #172]	; (8000a40 <pn532Driver_I2C_getFirmware+0xb8>)
 8000992:	781b      	ldrb	r3, [r3, #0]
 8000994:	461a      	mov	r2, r3
 8000996:	2109      	movs	r1, #9
 8000998:	482a      	ldr	r0, [pc, #168]	; (8000a44 <pn532Driver_I2C_getFirmware+0xbc>)
 800099a:	f000 fa6b 	bl	8000e74 <pn532Driver_I2C_portNucleo_sendCommand>
 800099e:	4603      	mov	r3, r0
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d101      	bne.n	80009a8 <pn532Driver_I2C_getFirmware+0x20>
		return PN532_CMD_ERROR;
 80009a4:	2301      	movs	r3, #1
 80009a6:	e047      	b.n	8000a38 <pn532Driver_I2C_getFirmware+0xb0>
	}

	portNucleo_Delay(1);
 80009a8:	2001      	movs	r0, #1
 80009aa:	f000 fa57 	bl	8000e5c <portNucleo_Delay>

	if(!receive_ACK()){
 80009ae:	f7ff ffbb 	bl	8000928 <receive_ACK>
 80009b2:	4603      	mov	r3, r0
 80009b4:	f083 0301 	eor.w	r3, r3, #1
 80009b8:	b2db      	uxtb	r3, r3
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d001      	beq.n	80009c2 <pn532Driver_I2C_getFirmware+0x3a>
		return PN532_ACK_NOT_RECEIVED;
 80009be:	2302      	movs	r3, #2
 80009c0:	e03a      	b.n	8000a38 <pn532Driver_I2C_getFirmware+0xb0>
	}

	portNucleo_Delay(1);
 80009c2:	2001      	movs	r0, #1
 80009c4:	f000 fa4a 	bl	8000e5c <portNucleo_Delay>

	if(!pn532Driver_I2C_portNucleo_receiveToBuffer(responseBuffer, sizeof(responseBuffer), pn532_address)){
 80009c8:	4b1d      	ldr	r3, [pc, #116]	; (8000a40 <pn532Driver_I2C_getFirmware+0xb8>)
 80009ca:	781b      	ldrb	r3, [r3, #0]
 80009cc:	461a      	mov	r2, r3
 80009ce:	f107 0308 	add.w	r3, r7, #8
 80009d2:	210d      	movs	r1, #13
 80009d4:	4618      	mov	r0, r3
 80009d6:	f000 fa6b 	bl	8000eb0 <pn532Driver_I2C_portNucleo_receiveToBuffer>
 80009da:	4603      	mov	r3, r0
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d101      	bne.n	80009e4 <pn532Driver_I2C_getFirmware+0x5c>
		return PN532_RESPONSE_ERROR;
 80009e0:	2304      	movs	r3, #4
 80009e2:	e029      	b.n	8000a38 <pn532Driver_I2C_getFirmware+0xb0>
	}
	if(!arrays_equal(preamble, responseBuffer, LENGTH_OF_PREAMBLE)
 80009e4:	f107 0308 	add.w	r3, r7, #8
 80009e8:	2204      	movs	r2, #4
 80009ea:	4619      	mov	r1, r3
 80009ec:	4816      	ldr	r0, [pc, #88]	; (8000a48 <pn532Driver_I2C_getFirmware+0xc0>)
 80009ee:	f7ff ff6b 	bl	80008c8 <arrays_equal>
 80009f2:	4603      	mov	r3, r0
 80009f4:	f083 0301 	eor.w	r3, r3, #1
 80009f8:	b2db      	uxtb	r3, r3
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d10d      	bne.n	8000a1a <pn532Driver_I2C_getFirmware+0x92>
			|| !arrays_equal(firmware_response_code, responseBuffer+(LENGTH_LEN_LCS+LENGTH_OF_PREAMBLE)*sizeof(uint8_t), LENGTH_OF_FIRMWARE_RESPONSE_CODE)) {
 80009fe:	f107 0308 	add.w	r3, r7, #8
 8000a02:	3306      	adds	r3, #6
 8000a04:	2202      	movs	r2, #2
 8000a06:	4619      	mov	r1, r3
 8000a08:	4810      	ldr	r0, [pc, #64]	; (8000a4c <pn532Driver_I2C_getFirmware+0xc4>)
 8000a0a:	f7ff ff5d 	bl	80008c8 <arrays_equal>
 8000a0e:	4603      	mov	r3, r0
 8000a10:	f083 0301 	eor.w	r3, r3, #1
 8000a14:	b2db      	uxtb	r3, r3
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d001      	beq.n	8000a1e <pn532Driver_I2C_getFirmware+0x96>
		return PN532_RESPONSE_ERROR;
 8000a1a:	2304      	movs	r3, #4
 8000a1c:	e00c      	b.n	8000a38 <pn532Driver_I2C_getFirmware+0xb0>
	}

	firmware->IC=responseBuffer[LENGTH_OF_PREAMBLE+LENGTH_LEN_LCS+LENGTH_OF_FIRMWARE_RESPONSE_CODE];
 8000a1e:	7c3a      	ldrb	r2, [r7, #16]
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	701a      	strb	r2, [r3, #0]
	firmware->version=responseBuffer[LENGTH_OF_PREAMBLE+LENGTH_LEN_LCS+LENGTH_OF_FIRMWARE_RESPONSE_CODE+1];
 8000a24:	7c7a      	ldrb	r2, [r7, #17]
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	705a      	strb	r2, [r3, #1]
	firmware->revision=responseBuffer[LENGTH_OF_PREAMBLE+LENGTH_LEN_LCS+LENGTH_OF_FIRMWARE_RESPONSE_CODE+2];
 8000a2a:	7cba      	ldrb	r2, [r7, #18]
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	709a      	strb	r2, [r3, #2]
	firmware->support=responseBuffer[LENGTH_OF_PREAMBLE+LENGTH_LEN_LCS+LENGTH_OF_FIRMWARE_RESPONSE_CODE+3];
 8000a30:	7cfa      	ldrb	r2, [r7, #19]
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	70da      	strb	r2, [r3, #3]

	return PN532_OK;
 8000a36:	2300      	movs	r3, #0
}
 8000a38:	4618      	mov	r0, r3
 8000a3a:	3718      	adds	r7, #24
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	bd80      	pop	{r7, pc}
 8000a40:	20000010 	.word	0x20000010
 8000a44:	08005444 	.word	0x08005444
 8000a48:	20000060 	.word	0x20000060
 8000a4c:	20000064 	.word	0x20000064

08000a50 <pn532Driver_I2C_configureSAM>:

PN532_response_t pn532Driver_I2C_configureSAM(){
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b084      	sub	sp, #16
 8000a54:	af00      	add	r7, sp, #0

	uint8_t responseBuffer[9];

	if(!pn532Driver_I2C_portNucleo_sendCommand(command_configure_SAM, sizeof(command_configure_SAM), pn532_address)){
 8000a56:	4b24      	ldr	r3, [pc, #144]	; (8000ae8 <pn532Driver_I2C_configureSAM+0x98>)
 8000a58:	781b      	ldrb	r3, [r3, #0]
 8000a5a:	461a      	mov	r2, r3
 8000a5c:	210c      	movs	r1, #12
 8000a5e:	4823      	ldr	r0, [pc, #140]	; (8000aec <pn532Driver_I2C_configureSAM+0x9c>)
 8000a60:	f000 fa08 	bl	8000e74 <pn532Driver_I2C_portNucleo_sendCommand>
 8000a64:	4603      	mov	r3, r0
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d101      	bne.n	8000a6e <pn532Driver_I2C_configureSAM+0x1e>
		return PN532_CMD_ERROR;
 8000a6a:	2301      	movs	r3, #1
 8000a6c:	e038      	b.n	8000ae0 <pn532Driver_I2C_configureSAM+0x90>
	}
	portNucleo_Delay(1);
 8000a6e:	2001      	movs	r0, #1
 8000a70:	f000 f9f4 	bl	8000e5c <portNucleo_Delay>

	if(!receive_ACK()){
 8000a74:	f7ff ff58 	bl	8000928 <receive_ACK>
 8000a78:	4603      	mov	r3, r0
 8000a7a:	f083 0301 	eor.w	r3, r3, #1
 8000a7e:	b2db      	uxtb	r3, r3
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d001      	beq.n	8000a88 <pn532Driver_I2C_configureSAM+0x38>
		return PN532_ACK_NOT_RECEIVED;
 8000a84:	2302      	movs	r3, #2
 8000a86:	e02b      	b.n	8000ae0 <pn532Driver_I2C_configureSAM+0x90>
	}

	portNucleo_Delay(1);
 8000a88:	2001      	movs	r0, #1
 8000a8a:	f000 f9e7 	bl	8000e5c <portNucleo_Delay>

	if(!pn532Driver_I2C_portNucleo_receiveToBuffer(responseBuffer, sizeof(responseBuffer), pn532_address)){
 8000a8e:	4b16      	ldr	r3, [pc, #88]	; (8000ae8 <pn532Driver_I2C_configureSAM+0x98>)
 8000a90:	781b      	ldrb	r3, [r3, #0]
 8000a92:	461a      	mov	r2, r3
 8000a94:	1d3b      	adds	r3, r7, #4
 8000a96:	2109      	movs	r1, #9
 8000a98:	4618      	mov	r0, r3
 8000a9a:	f000 fa09 	bl	8000eb0 <pn532Driver_I2C_portNucleo_receiveToBuffer>
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d101      	bne.n	8000aa8 <pn532Driver_I2C_configureSAM+0x58>
		return PN532_RESPONSE_ERROR;
 8000aa4:	2304      	movs	r3, #4
 8000aa6:	e01b      	b.n	8000ae0 <pn532Driver_I2C_configureSAM+0x90>
	}
	if(!arrays_equal(preamble, responseBuffer, LENGTH_OF_PREAMBLE)
 8000aa8:	1d3b      	adds	r3, r7, #4
 8000aaa:	2204      	movs	r2, #4
 8000aac:	4619      	mov	r1, r3
 8000aae:	4810      	ldr	r0, [pc, #64]	; (8000af0 <pn532Driver_I2C_configureSAM+0xa0>)
 8000ab0:	f7ff ff0a 	bl	80008c8 <arrays_equal>
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	f083 0301 	eor.w	r3, r3, #1
 8000aba:	b2db      	uxtb	r3, r3
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d10c      	bne.n	8000ada <pn532Driver_I2C_configureSAM+0x8a>
			|| !arrays_equal(SAM_configure_response_code, responseBuffer+(LENGTH_LEN_LCS+LENGTH_OF_PREAMBLE)*sizeof(uint8_t), LENGTH_OF_SAM_CONFIGURE_RESPONSE_CODE)) {
 8000ac0:	1d3b      	adds	r3, r7, #4
 8000ac2:	3306      	adds	r3, #6
 8000ac4:	2202      	movs	r2, #2
 8000ac6:	4619      	mov	r1, r3
 8000ac8:	480a      	ldr	r0, [pc, #40]	; (8000af4 <pn532Driver_I2C_configureSAM+0xa4>)
 8000aca:	f7ff fefd 	bl	80008c8 <arrays_equal>
 8000ace:	4603      	mov	r3, r0
 8000ad0:	f083 0301 	eor.w	r3, r3, #1
 8000ad4:	b2db      	uxtb	r3, r3
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d001      	beq.n	8000ade <pn532Driver_I2C_configureSAM+0x8e>
		return PN532_RESPONSE_ERROR;
 8000ada:	2304      	movs	r3, #4
 8000adc:	e000      	b.n	8000ae0 <pn532Driver_I2C_configureSAM+0x90>
	}
	return PN532_OK;
 8000ade:	2300      	movs	r3, #0
}
 8000ae0:	4618      	mov	r0, r3
 8000ae2:	3710      	adds	r7, #16
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	bd80      	pop	{r7, pc}
 8000ae8:	20000010 	.word	0x20000010
 8000aec:	20000014 	.word	0x20000014
 8000af0:	20000060 	.word	0x20000060
 8000af4:	20000068 	.word	0x20000068

08000af8 <pn532Driver_I2C_listPassiveTarget>:

PN532_response_t pn532Driver_I2C_listPassiveTarget(PN532_target_t * target){
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b088      	sub	sp, #32
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]

	uint8_t responseBuffer[20];

	if(!searchingTarget){
 8000b00:	4b2d      	ldr	r3, [pc, #180]	; (8000bb8 <pn532Driver_I2C_listPassiveTarget+0xc0>)
 8000b02:	781b      	ldrb	r3, [r3, #0]
 8000b04:	f083 0301 	eor.w	r3, r3, #1
 8000b08:	b2db      	uxtb	r3, r3
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d01b      	beq.n	8000b46 <pn532Driver_I2C_listPassiveTarget+0x4e>
		if(!pn532Driver_I2C_portNucleo_sendCommand(command_inListPassiveTarget, sizeof(command_inListPassiveTarget), pn532_address)){
 8000b0e:	4b2b      	ldr	r3, [pc, #172]	; (8000bbc <pn532Driver_I2C_listPassiveTarget+0xc4>)
 8000b10:	781b      	ldrb	r3, [r3, #0]
 8000b12:	461a      	mov	r2, r3
 8000b14:	210b      	movs	r1, #11
 8000b16:	482a      	ldr	r0, [pc, #168]	; (8000bc0 <pn532Driver_I2C_listPassiveTarget+0xc8>)
 8000b18:	f000 f9ac 	bl	8000e74 <pn532Driver_I2C_portNucleo_sendCommand>
 8000b1c:	4603      	mov	r3, r0
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d101      	bne.n	8000b26 <pn532Driver_I2C_listPassiveTarget+0x2e>
			return PN532_CMD_ERROR;
 8000b22:	2301      	movs	r3, #1
 8000b24:	e044      	b.n	8000bb0 <pn532Driver_I2C_listPassiveTarget+0xb8>
		}

		portNucleo_Delay(1);
 8000b26:	2001      	movs	r0, #1
 8000b28:	f000 f998 	bl	8000e5c <portNucleo_Delay>

		if(!receive_ACK()){
 8000b2c:	f7ff fefc 	bl	8000928 <receive_ACK>
 8000b30:	4603      	mov	r3, r0
 8000b32:	f083 0301 	eor.w	r3, r3, #1
 8000b36:	b2db      	uxtb	r3, r3
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d001      	beq.n	8000b40 <pn532Driver_I2C_listPassiveTarget+0x48>
			return PN532_ACK_NOT_RECEIVED;
 8000b3c:	2302      	movs	r3, #2
 8000b3e:	e037      	b.n	8000bb0 <pn532Driver_I2C_listPassiveTarget+0xb8>
		}
		searchingTarget=true;
 8000b40:	4b1d      	ldr	r3, [pc, #116]	; (8000bb8 <pn532Driver_I2C_listPassiveTarget+0xc0>)
 8000b42:	2201      	movs	r2, #1
 8000b44:	701a      	strb	r2, [r3, #0]
	}


	portNucleo_Delay(1);
 8000b46:	2001      	movs	r0, #1
 8000b48:	f000 f988 	bl	8000e5c <portNucleo_Delay>
	if(!pn532Driver_I2C_portNucleo_receiveToBuffer(responseBuffer, sizeof(responseBuffer), pn532_address)){
 8000b4c:	4b1b      	ldr	r3, [pc, #108]	; (8000bbc <pn532Driver_I2C_listPassiveTarget+0xc4>)
 8000b4e:	781b      	ldrb	r3, [r3, #0]
 8000b50:	461a      	mov	r2, r3
 8000b52:	f107 030c 	add.w	r3, r7, #12
 8000b56:	2114      	movs	r1, #20
 8000b58:	4618      	mov	r0, r3
 8000b5a:	f000 f9a9 	bl	8000eb0 <pn532Driver_I2C_portNucleo_receiveToBuffer>
 8000b5e:	4603      	mov	r3, r0
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d101      	bne.n	8000b68 <pn532Driver_I2C_listPassiveTarget+0x70>
		return PN532_RESPONSE_ERROR;
 8000b64:	2304      	movs	r3, #4
 8000b66:	e023      	b.n	8000bb0 <pn532Driver_I2C_listPassiveTarget+0xb8>
	}
	if(responseBuffer[0]==0x00){
 8000b68:	7b3b      	ldrb	r3, [r7, #12]
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d101      	bne.n	8000b72 <pn532Driver_I2C_listPassiveTarget+0x7a>
		return PN532_EMPTY;
 8000b6e:	2306      	movs	r3, #6
 8000b70:	e01e      	b.n	8000bb0 <pn532Driver_I2C_listPassiveTarget+0xb8>
	}

	target->logical_number = responseBuffer[1+LENGTH_OF_PREAMBLE+LENGTH_LEN_LCS+LENGTH_OF_FIRMWARE_RESPONSE_CODE];
 8000b72:	7d7a      	ldrb	r2, [r7, #21]
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	701a      	strb	r2, [r3, #0]
	target->SENS_RES[0] = responseBuffer[2+LENGTH_OF_PREAMBLE+LENGTH_LEN_LCS+LENGTH_OF_FIRMWARE_RESPONSE_CODE];
 8000b78:	7dba      	ldrb	r2, [r7, #22]
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	705a      	strb	r2, [r3, #1]
	target->SENS_RES[1] = responseBuffer[3+LENGTH_OF_PREAMBLE+LENGTH_LEN_LCS+LENGTH_OF_FIRMWARE_RESPONSE_CODE];
 8000b7e:	7dfa      	ldrb	r2, [r7, #23]
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	709a      	strb	r2, [r3, #2]
	target->SEL_RES = responseBuffer[4+LENGTH_OF_PREAMBLE+LENGTH_LEN_LCS+LENGTH_OF_FIRMWARE_RESPONSE_CODE];
 8000b84:	7e3a      	ldrb	r2, [r7, #24]
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	70da      	strb	r2, [r3, #3]
	target->NFCID_length = responseBuffer[5+LENGTH_OF_PREAMBLE+LENGTH_LEN_LCS+LENGTH_OF_FIRMWARE_RESPONSE_CODE];
 8000b8a:	7e7a      	ldrb	r2, [r7, #25]
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	711a      	strb	r2, [r3, #4]
	target->NFCID[0] = responseBuffer[6+LENGTH_OF_PREAMBLE+LENGTH_LEN_LCS+LENGTH_OF_FIRMWARE_RESPONSE_CODE];
 8000b90:	7eba      	ldrb	r2, [r7, #26]
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	715a      	strb	r2, [r3, #5]
	target->NFCID[1] = responseBuffer[7+LENGTH_OF_PREAMBLE+LENGTH_LEN_LCS+LENGTH_OF_FIRMWARE_RESPONSE_CODE];
 8000b96:	7efa      	ldrb	r2, [r7, #27]
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	719a      	strb	r2, [r3, #6]
	target->NFCID[2] = responseBuffer[8+LENGTH_OF_PREAMBLE+LENGTH_LEN_LCS+LENGTH_OF_FIRMWARE_RESPONSE_CODE];
 8000b9c:	7f3a      	ldrb	r2, [r7, #28]
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	71da      	strb	r2, [r3, #7]
	target->NFCID[3] = responseBuffer[9+LENGTH_OF_PREAMBLE+LENGTH_LEN_LCS+LENGTH_OF_FIRMWARE_RESPONSE_CODE];
 8000ba2:	7f7a      	ldrb	r2, [r7, #29]
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	721a      	strb	r2, [r3, #8]
	searchingTarget=false;
 8000ba8:	4b03      	ldr	r3, [pc, #12]	; (8000bb8 <pn532Driver_I2C_listPassiveTarget+0xc0>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	701a      	strb	r2, [r3, #0]
	return PN532_OK;
 8000bae:	2300      	movs	r3, #0
}
 8000bb0:	4618      	mov	r0, r3
 8000bb2:	3720      	adds	r7, #32
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	bd80      	pop	{r7, pc}
 8000bb8:	20000145 	.word	0x20000145
 8000bbc:	20000010 	.word	0x20000010
 8000bc0:	20000020 	.word	0x20000020

08000bc4 <pn532Driver_I2C_readMifareData>:

PN532_response_t pn532Driver_I2C_readMifareData(uint8_t* buffer, uint8_t len, PN532_target_t target){
 8000bc4:	b082      	sub	sp, #8
 8000bc6:	b580      	push	{r7, lr}
 8000bc8:	b09c      	sub	sp, #112	; 0x70
 8000bca:	af00      	add	r7, sp, #0
 8000bcc:	6078      	str	r0, [r7, #4]
 8000bce:	f107 0078 	add.w	r0, r7, #120	; 0x78
 8000bd2:	e880 000c 	stmia.w	r0, {r2, r3}
 8000bd6:	460b      	mov	r3, r1
 8000bd8:	70fb      	strb	r3, [r7, #3]

	uint8_t responseBuffer[100]={0x00};
 8000bda:	2300      	movs	r3, #0
 8000bdc:	60bb      	str	r3, [r7, #8]
 8000bde:	f107 030c 	add.w	r3, r7, #12
 8000be2:	2260      	movs	r2, #96	; 0x60
 8000be4:	2100      	movs	r1, #0
 8000be6:	4618      	mov	r0, r3
 8000be8:	f003 f8fe 	bl	8003de8 <memset>

	if(!pn532Driver_I2C_portNucleo_sendCommand(command_auth1, sizeof(command_auth1), pn532_address)){
 8000bec:	4b46      	ldr	r3, [pc, #280]	; (8000d08 <pn532Driver_I2C_readMifareData+0x144>)
 8000bee:	781b      	ldrb	r3, [r3, #0]
 8000bf0:	461a      	mov	r2, r3
 8000bf2:	2116      	movs	r1, #22
 8000bf4:	4845      	ldr	r0, [pc, #276]	; (8000d0c <pn532Driver_I2C_readMifareData+0x148>)
 8000bf6:	f000 f93d 	bl	8000e74 <pn532Driver_I2C_portNucleo_sendCommand>
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d101      	bne.n	8000c04 <pn532Driver_I2C_readMifareData+0x40>
		return PN532_CMD_ERROR;
 8000c00:	2301      	movs	r3, #1
 8000c02:	e07a      	b.n	8000cfa <pn532Driver_I2C_readMifareData+0x136>
	}

	portNucleo_Delay(1);
 8000c04:	2001      	movs	r0, #1
 8000c06:	f000 f929 	bl	8000e5c <portNucleo_Delay>

	if(!receive_ACK()){
 8000c0a:	f7ff fe8d 	bl	8000928 <receive_ACK>
 8000c0e:	4603      	mov	r3, r0
 8000c10:	f083 0301 	eor.w	r3, r3, #1
 8000c14:	b2db      	uxtb	r3, r3
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d001      	beq.n	8000c1e <pn532Driver_I2C_readMifareData+0x5a>
		return PN532_ACK_NOT_RECEIVED;
 8000c1a:	2302      	movs	r3, #2
 8000c1c:	e06d      	b.n	8000cfa <pn532Driver_I2C_readMifareData+0x136>
	}

	portNucleo_Delay(10);
 8000c1e:	200a      	movs	r0, #10
 8000c20:	f000 f91c 	bl	8000e5c <portNucleo_Delay>

	if(!pn532Driver_I2C_portNucleo_receiveToBuffer(responseBuffer, sizeof(responseBuffer), pn532_address)){
 8000c24:	4b38      	ldr	r3, [pc, #224]	; (8000d08 <pn532Driver_I2C_readMifareData+0x144>)
 8000c26:	781b      	ldrb	r3, [r3, #0]
 8000c28:	461a      	mov	r2, r3
 8000c2a:	f107 0308 	add.w	r3, r7, #8
 8000c2e:	2164      	movs	r1, #100	; 0x64
 8000c30:	4618      	mov	r0, r3
 8000c32:	f000 f93d 	bl	8000eb0 <pn532Driver_I2C_portNucleo_receiveToBuffer>
 8000c36:	4603      	mov	r3, r0
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d101      	bne.n	8000c40 <pn532Driver_I2C_readMifareData+0x7c>
		return PN532_RESPONSE_ERROR;
 8000c3c:	2304      	movs	r3, #4
 8000c3e:	e05c      	b.n	8000cfa <pn532Driver_I2C_readMifareData+0x136>
	}

	if(!pn532Driver_I2C_portNucleo_sendCommand(command_inDataExchange, sizeof(command_inDataExchange), pn532_address)){
 8000c40:	4b31      	ldr	r3, [pc, #196]	; (8000d08 <pn532Driver_I2C_readMifareData+0x144>)
 8000c42:	781b      	ldrb	r3, [r3, #0]
 8000c44:	461a      	mov	r2, r3
 8000c46:	210c      	movs	r1, #12
 8000c48:	4831      	ldr	r0, [pc, #196]	; (8000d10 <pn532Driver_I2C_readMifareData+0x14c>)
 8000c4a:	f000 f913 	bl	8000e74 <pn532Driver_I2C_portNucleo_sendCommand>
 8000c4e:	4603      	mov	r3, r0
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d101      	bne.n	8000c58 <pn532Driver_I2C_readMifareData+0x94>
		return PN532_CMD_ERROR;
 8000c54:	2301      	movs	r3, #1
 8000c56:	e050      	b.n	8000cfa <pn532Driver_I2C_readMifareData+0x136>
	}

	portNucleo_Delay(1);
 8000c58:	2001      	movs	r0, #1
 8000c5a:	f000 f8ff 	bl	8000e5c <portNucleo_Delay>

	if(!receive_ACK()){
 8000c5e:	f7ff fe63 	bl	8000928 <receive_ACK>
 8000c62:	4603      	mov	r3, r0
 8000c64:	f083 0301 	eor.w	r3, r3, #1
 8000c68:	b2db      	uxtb	r3, r3
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d001      	beq.n	8000c72 <pn532Driver_I2C_readMifareData+0xae>
		return PN532_ACK_NOT_RECEIVED;
 8000c6e:	2302      	movs	r3, #2
 8000c70:	e043      	b.n	8000cfa <pn532Driver_I2C_readMifareData+0x136>
	}

	portNucleo_Delay(200);
 8000c72:	20c8      	movs	r0, #200	; 0xc8
 8000c74:	f000 f8f2 	bl	8000e5c <portNucleo_Delay>

	if(!pn532Driver_I2C_portNucleo_receiveToBuffer(responseBuffer, sizeof(responseBuffer), pn532_address)){
 8000c78:	4b23      	ldr	r3, [pc, #140]	; (8000d08 <pn532Driver_I2C_readMifareData+0x144>)
 8000c7a:	781b      	ldrb	r3, [r3, #0]
 8000c7c:	461a      	mov	r2, r3
 8000c7e:	f107 0308 	add.w	r3, r7, #8
 8000c82:	2164      	movs	r1, #100	; 0x64
 8000c84:	4618      	mov	r0, r3
 8000c86:	f000 f913 	bl	8000eb0 <pn532Driver_I2C_portNucleo_receiveToBuffer>
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d101      	bne.n	8000c94 <pn532Driver_I2C_readMifareData+0xd0>
		return PN532_RESPONSE_ERROR;
 8000c90:	2304      	movs	r3, #4
 8000c92:	e032      	b.n	8000cfa <pn532Driver_I2C_readMifareData+0x136>
	}
	if(!arrays_equal(preamble, responseBuffer, LENGTH_OF_PREAMBLE)
 8000c94:	f107 0308 	add.w	r3, r7, #8
 8000c98:	2204      	movs	r2, #4
 8000c9a:	4619      	mov	r1, r3
 8000c9c:	481d      	ldr	r0, [pc, #116]	; (8000d14 <pn532Driver_I2C_readMifareData+0x150>)
 8000c9e:	f7ff fe13 	bl	80008c8 <arrays_equal>
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	f083 0301 	eor.w	r3, r3, #1
 8000ca8:	b2db      	uxtb	r3, r3
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d10d      	bne.n	8000cca <pn532Driver_I2C_readMifareData+0x106>
			|| !arrays_equal(inDataExchange_response_code, responseBuffer+(LENGTH_LEN_LCS+LENGTH_OF_PREAMBLE)*sizeof(uint8_t), LENGTH_OF_FIRMWARE_RESPONSE_CODE)) {
 8000cae:	f107 0308 	add.w	r3, r7, #8
 8000cb2:	3306      	adds	r3, #6
 8000cb4:	2202      	movs	r2, #2
 8000cb6:	4619      	mov	r1, r3
 8000cb8:	4817      	ldr	r0, [pc, #92]	; (8000d18 <pn532Driver_I2C_readMifareData+0x154>)
 8000cba:	f7ff fe05 	bl	80008c8 <arrays_equal>
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	f083 0301 	eor.w	r3, r3, #1
 8000cc4:	b2db      	uxtb	r3, r3
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d001      	beq.n	8000cce <pn532Driver_I2C_readMifareData+0x10a>
		return PN532_RESPONSE_ERROR;
 8000cca:	2304      	movs	r3, #4
 8000ccc:	e015      	b.n	8000cfa <pn532Driver_I2C_readMifareData+0x136>
	}

	for(int i = 0; i<len-LENGTH_OF_PREAMBLE+LENGTH_LEN_LCS+LENGTH_OF_FIRMWARE_RESPONSE_CODE; i++){
 8000cce:	2300      	movs	r3, #0
 8000cd0:	66fb      	str	r3, [r7, #108]	; 0x6c
 8000cd2:	e00d      	b.n	8000cf0 <pn532Driver_I2C_readMifareData+0x12c>
		buffer[i] = responseBuffer[LENGTH_OF_PREAMBLE+LENGTH_LEN_LCS+LENGTH_OF_FIRMWARE_RESPONSE_CODE+i];
 8000cd4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000cd6:	f103 0208 	add.w	r2, r3, #8
 8000cda:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000cdc:	6879      	ldr	r1, [r7, #4]
 8000cde:	440b      	add	r3, r1
 8000ce0:	3270      	adds	r2, #112	; 0x70
 8000ce2:	443a      	add	r2, r7
 8000ce4:	f812 2c68 	ldrb.w	r2, [r2, #-104]
 8000ce8:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i<len-LENGTH_OF_PREAMBLE+LENGTH_LEN_LCS+LENGTH_OF_FIRMWARE_RESPONSE_CODE; i++){
 8000cea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000cec:	3301      	adds	r3, #1
 8000cee:	66fb      	str	r3, [r7, #108]	; 0x6c
 8000cf0:	78fb      	ldrb	r3, [r7, #3]
 8000cf2:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8000cf4:	429a      	cmp	r2, r3
 8000cf6:	dbed      	blt.n	8000cd4 <pn532Driver_I2C_readMifareData+0x110>
	}

	return PN532_OK;
 8000cf8:	2300      	movs	r3, #0

}
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	3770      	adds	r7, #112	; 0x70
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000d04:	b002      	add	sp, #8
 8000d06:	4770      	bx	lr
 8000d08:	20000010 	.word	0x20000010
 8000d0c:	20000038 	.word	0x20000038
 8000d10:	2000002c 	.word	0x2000002c
 8000d14:	20000060 	.word	0x20000060
 8000d18:	2000006c 	.word	0x2000006c

08000d1c <pn532Driver_I2C_configureTiming>:

PN532_response_t pn532Driver_I2C_configureTiming(){
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b09a      	sub	sp, #104	; 0x68
 8000d20:	af00      	add	r7, sp, #0

	uint8_t responseBuffer[100]={0x00};
 8000d22:	2300      	movs	r3, #0
 8000d24:	607b      	str	r3, [r7, #4]
 8000d26:	f107 0308 	add.w	r3, r7, #8
 8000d2a:	2260      	movs	r2, #96	; 0x60
 8000d2c:	2100      	movs	r1, #0
 8000d2e:	4618      	mov	r0, r3
 8000d30:	f003 f85a 	bl	8003de8 <memset>

	if(!pn532Driver_I2C_portNucleo_sendCommand(command_configureTiming, sizeof(command_configureTiming), pn532_address)){
 8000d34:	4b24      	ldr	r3, [pc, #144]	; (8000dc8 <pn532Driver_I2C_configureTiming+0xac>)
 8000d36:	781b      	ldrb	r3, [r3, #0]
 8000d38:	461a      	mov	r2, r3
 8000d3a:	210d      	movs	r1, #13
 8000d3c:	4823      	ldr	r0, [pc, #140]	; (8000dcc <pn532Driver_I2C_configureTiming+0xb0>)
 8000d3e:	f000 f899 	bl	8000e74 <pn532Driver_I2C_portNucleo_sendCommand>
 8000d42:	4603      	mov	r3, r0
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d101      	bne.n	8000d4c <pn532Driver_I2C_configureTiming+0x30>
		return PN532_CMD_ERROR;
 8000d48:	2301      	movs	r3, #1
 8000d4a:	e038      	b.n	8000dbe <pn532Driver_I2C_configureTiming+0xa2>
	}

	portNucleo_Delay(1);
 8000d4c:	2001      	movs	r0, #1
 8000d4e:	f000 f885 	bl	8000e5c <portNucleo_Delay>

	if(!receive_ACK()){
 8000d52:	f7ff fde9 	bl	8000928 <receive_ACK>
 8000d56:	4603      	mov	r3, r0
 8000d58:	f083 0301 	eor.w	r3, r3, #1
 8000d5c:	b2db      	uxtb	r3, r3
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d001      	beq.n	8000d66 <pn532Driver_I2C_configureTiming+0x4a>
		return PN532_ACK_NOT_RECEIVED;
 8000d62:	2302      	movs	r3, #2
 8000d64:	e02b      	b.n	8000dbe <pn532Driver_I2C_configureTiming+0xa2>
	}

	portNucleo_Delay(1);
 8000d66:	2001      	movs	r0, #1
 8000d68:	f000 f878 	bl	8000e5c <portNucleo_Delay>

	if(!pn532Driver_I2C_portNucleo_receiveToBuffer(responseBuffer, sizeof(responseBuffer), pn532_address)){
 8000d6c:	4b16      	ldr	r3, [pc, #88]	; (8000dc8 <pn532Driver_I2C_configureTiming+0xac>)
 8000d6e:	781b      	ldrb	r3, [r3, #0]
 8000d70:	461a      	mov	r2, r3
 8000d72:	1d3b      	adds	r3, r7, #4
 8000d74:	2164      	movs	r1, #100	; 0x64
 8000d76:	4618      	mov	r0, r3
 8000d78:	f000 f89a 	bl	8000eb0 <pn532Driver_I2C_portNucleo_receiveToBuffer>
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d101      	bne.n	8000d86 <pn532Driver_I2C_configureTiming+0x6a>
		return PN532_RESPONSE_ERROR;
 8000d82:	2304      	movs	r3, #4
 8000d84:	e01b      	b.n	8000dbe <pn532Driver_I2C_configureTiming+0xa2>
	}
	if(!arrays_equal(preamble, responseBuffer, LENGTH_OF_PREAMBLE)
 8000d86:	1d3b      	adds	r3, r7, #4
 8000d88:	2204      	movs	r2, #4
 8000d8a:	4619      	mov	r1, r3
 8000d8c:	4810      	ldr	r0, [pc, #64]	; (8000dd0 <pn532Driver_I2C_configureTiming+0xb4>)
 8000d8e:	f7ff fd9b 	bl	80008c8 <arrays_equal>
 8000d92:	4603      	mov	r3, r0
 8000d94:	f083 0301 	eor.w	r3, r3, #1
 8000d98:	b2db      	uxtb	r3, r3
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d10c      	bne.n	8000db8 <pn532Driver_I2C_configureTiming+0x9c>
			|| !arrays_equal(configTiming_response_code, responseBuffer+(LENGTH_LEN_LCS+LENGTH_OF_PREAMBLE)*sizeof(uint8_t), LENGTH_OF_FIRMWARE_RESPONSE_CODE)) {
 8000d9e:	1d3b      	adds	r3, r7, #4
 8000da0:	3306      	adds	r3, #6
 8000da2:	2202      	movs	r2, #2
 8000da4:	4619      	mov	r1, r3
 8000da6:	480b      	ldr	r0, [pc, #44]	; (8000dd4 <pn532Driver_I2C_configureTiming+0xb8>)
 8000da8:	f7ff fd8e 	bl	80008c8 <arrays_equal>
 8000dac:	4603      	mov	r3, r0
 8000dae:	f083 0301 	eor.w	r3, r3, #1
 8000db2:	b2db      	uxtb	r3, r3
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d001      	beq.n	8000dbc <pn532Driver_I2C_configureTiming+0xa0>
		return PN532_RESPONSE_ERROR;
 8000db8:	2304      	movs	r3, #4
 8000dba:	e000      	b.n	8000dbe <pn532Driver_I2C_configureTiming+0xa2>
	}


	return PN532_OK;
 8000dbc:	2300      	movs	r3, #0

}
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	3768      	adds	r7, #104	; 0x68
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	bd80      	pop	{r7, pc}
 8000dc6:	bf00      	nop
 8000dc8:	20000010 	.word	0x20000010
 8000dcc:	20000050 	.word	0x20000050
 8000dd0:	20000060 	.word	0x20000060
 8000dd4:	20000070 	.word	0x20000070

08000dd8 <pn532Driver_I2C_portNucleo_init>:
static I2C_HandleTypeDef hi2c1;



bool pn532Driver_I2C_portNucleo_init(void)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	af00      	add	r7, sp, #0
  hi2c1.Instance = I2C1;
 8000ddc:	4b1c      	ldr	r3, [pc, #112]	; (8000e50 <pn532Driver_I2C_portNucleo_init+0x78>)
 8000dde:	4a1d      	ldr	r2, [pc, #116]	; (8000e54 <pn532Driver_I2C_portNucleo_init+0x7c>)
 8000de0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000de2:	4b1b      	ldr	r3, [pc, #108]	; (8000e50 <pn532Driver_I2C_portNucleo_init+0x78>)
 8000de4:	4a1c      	ldr	r2, [pc, #112]	; (8000e58 <pn532Driver_I2C_portNucleo_init+0x80>)
 8000de6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000de8:	4b19      	ldr	r3, [pc, #100]	; (8000e50 <pn532Driver_I2C_portNucleo_init+0x78>)
 8000dea:	2200      	movs	r2, #0
 8000dec:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000dee:	4b18      	ldr	r3, [pc, #96]	; (8000e50 <pn532Driver_I2C_portNucleo_init+0x78>)
 8000df0:	2200      	movs	r2, #0
 8000df2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000df4:	4b16      	ldr	r3, [pc, #88]	; (8000e50 <pn532Driver_I2C_portNucleo_init+0x78>)
 8000df6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000dfa:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000dfc:	4b14      	ldr	r3, [pc, #80]	; (8000e50 <pn532Driver_I2C_portNucleo_init+0x78>)
 8000dfe:	2200      	movs	r2, #0
 8000e00:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000e02:	4b13      	ldr	r3, [pc, #76]	; (8000e50 <pn532Driver_I2C_portNucleo_init+0x78>)
 8000e04:	2200      	movs	r2, #0
 8000e06:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000e08:	4b11      	ldr	r3, [pc, #68]	; (8000e50 <pn532Driver_I2C_portNucleo_init+0x78>)
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000e0e:	4b10      	ldr	r3, [pc, #64]	; (8000e50 <pn532Driver_I2C_portNucleo_init+0x78>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000e14:	480e      	ldr	r0, [pc, #56]	; (8000e50 <pn532Driver_I2C_portNucleo_init+0x78>)
 8000e16:	f000 fc21 	bl	800165c <HAL_I2C_Init>
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d001      	beq.n	8000e24 <pn532Driver_I2C_portNucleo_init+0x4c>
  {
    return false;
 8000e20:	2300      	movs	r3, #0
 8000e22:	e012      	b.n	8000e4a <pn532Driver_I2C_portNucleo_init+0x72>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000e24:	2100      	movs	r1, #0
 8000e26:	480a      	ldr	r0, [pc, #40]	; (8000e50 <pn532Driver_I2C_portNucleo_init+0x78>)
 8000e28:	f001 fbad 	bl	8002586 <HAL_I2CEx_ConfigAnalogFilter>
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d001      	beq.n	8000e36 <pn532Driver_I2C_portNucleo_init+0x5e>
  {
    return false;
 8000e32:	2300      	movs	r3, #0
 8000e34:	e009      	b.n	8000e4a <pn532Driver_I2C_portNucleo_init+0x72>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000e36:	2100      	movs	r1, #0
 8000e38:	4805      	ldr	r0, [pc, #20]	; (8000e50 <pn532Driver_I2C_portNucleo_init+0x78>)
 8000e3a:	f001 fbe0 	bl	80025fe <HAL_I2CEx_ConfigDigitalFilter>
 8000e3e:	4603      	mov	r3, r0
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d001      	beq.n	8000e48 <pn532Driver_I2C_portNucleo_init+0x70>
  {
    return false;
 8000e44:	2300      	movs	r3, #0
 8000e46:	e000      	b.n	8000e4a <pn532Driver_I2C_portNucleo_init+0x72>
  }
  return true;
 8000e48:	2301      	movs	r3, #1

}
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	bd80      	pop	{r7, pc}
 8000e4e:	bf00      	nop
 8000e50:	20000148 	.word	0x20000148
 8000e54:	40005400 	.word	0x40005400
 8000e58:	000186a0 	.word	0x000186a0

08000e5c <portNucleo_Delay>:
bool pn532Driver_I2C_portNucleo_deinit(void)
{
	HAL_I2C_DeInit(&hi2c1);
}

void portNucleo_Delay(uint32_t delay){
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b082      	sub	sp, #8
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
	HAL_Delay(delay);
 8000e64:	6878      	ldr	r0, [r7, #4]
 8000e66:	f000 f929 	bl	80010bc <HAL_Delay>
}
 8000e6a:	bf00      	nop
 8000e6c:	3708      	adds	r7, #8
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bd80      	pop	{r7, pc}
	...

08000e74 <pn532Driver_I2C_portNucleo_sendCommand>:

bool pn532Driver_I2C_portNucleo_sendCommand(uint8_t* command, uint16_t size, uint8_t address){
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b084      	sub	sp, #16
 8000e78:	af02      	add	r7, sp, #8
 8000e7a:	6078      	str	r0, [r7, #4]
 8000e7c:	460b      	mov	r3, r1
 8000e7e:	807b      	strh	r3, [r7, #2]
 8000e80:	4613      	mov	r3, r2
 8000e82:	707b      	strb	r3, [r7, #1]
	return HAL_OK == HAL_I2C_Master_Transmit(&hi2c1, address, command, size, HAL_MAX_DELAY);
 8000e84:	787b      	ldrb	r3, [r7, #1]
 8000e86:	b299      	uxth	r1, r3
 8000e88:	887b      	ldrh	r3, [r7, #2]
 8000e8a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000e8e:	9200      	str	r2, [sp, #0]
 8000e90:	687a      	ldr	r2, [r7, #4]
 8000e92:	4806      	ldr	r0, [pc, #24]	; (8000eac <pn532Driver_I2C_portNucleo_sendCommand+0x38>)
 8000e94:	f000 fd26 	bl	80018e4 <HAL_I2C_Master_Transmit>
 8000e98:	4603      	mov	r3, r0
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	bf0c      	ite	eq
 8000e9e:	2301      	moveq	r3, #1
 8000ea0:	2300      	movne	r3, #0
 8000ea2:	b2db      	uxtb	r3, r3
}
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	3708      	adds	r7, #8
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	bd80      	pop	{r7, pc}
 8000eac:	20000148 	.word	0x20000148

08000eb0 <pn532Driver_I2C_portNucleo_receiveToBuffer>:



bool pn532Driver_I2C_portNucleo_receiveToBuffer(uint8_t * buffer, uint16_t size, uint8_t address){
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b084      	sub	sp, #16
 8000eb4:	af02      	add	r7, sp, #8
 8000eb6:	6078      	str	r0, [r7, #4]
 8000eb8:	460b      	mov	r3, r1
 8000eba:	807b      	strh	r3, [r7, #2]
 8000ebc:	4613      	mov	r3, r2
 8000ebe:	707b      	strb	r3, [r7, #1]
	return HAL_OK == HAL_I2C_Master_Receive(&hi2c1, address, buffer, size, HAL_MAX_DELAY);
 8000ec0:	787b      	ldrb	r3, [r7, #1]
 8000ec2:	b299      	uxth	r1, r3
 8000ec4:	887b      	ldrh	r3, [r7, #2]
 8000ec6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000eca:	9200      	str	r2, [sp, #0]
 8000ecc:	687a      	ldr	r2, [r7, #4]
 8000ece:	4806      	ldr	r0, [pc, #24]	; (8000ee8 <pn532Driver_I2C_portNucleo_receiveToBuffer+0x38>)
 8000ed0:	f000 fe06 	bl	8001ae0 <HAL_I2C_Master_Receive>
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	bf0c      	ite	eq
 8000eda:	2301      	moveq	r3, #1
 8000edc:	2300      	movne	r3, #0
 8000ede:	b2db      	uxtb	r3, r3
}
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	3708      	adds	r7, #8
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	bd80      	pop	{r7, pc}
 8000ee8:	20000148 	.word	0x20000148

08000eec <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b08a      	sub	sp, #40	; 0x28
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ef4:	f107 0314 	add.w	r3, r7, #20
 8000ef8:	2200      	movs	r2, #0
 8000efa:	601a      	str	r2, [r3, #0]
 8000efc:	605a      	str	r2, [r3, #4]
 8000efe:	609a      	str	r2, [r3, #8]
 8000f00:	60da      	str	r2, [r3, #12]
 8000f02:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	4a1f      	ldr	r2, [pc, #124]	; (8000f88 <HAL_I2C_MspInit+0x9c>)
 8000f0a:	4293      	cmp	r3, r2
 8000f0c:	d138      	bne.n	8000f80 <HAL_I2C_MspInit+0x94>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f0e:	2300      	movs	r3, #0
 8000f10:	613b      	str	r3, [r7, #16]
 8000f12:	4b1e      	ldr	r3, [pc, #120]	; (8000f8c <HAL_I2C_MspInit+0xa0>)
 8000f14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f16:	4a1d      	ldr	r2, [pc, #116]	; (8000f8c <HAL_I2C_MspInit+0xa0>)
 8000f18:	f043 0302 	orr.w	r3, r3, #2
 8000f1c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f1e:	4b1b      	ldr	r3, [pc, #108]	; (8000f8c <HAL_I2C_MspInit+0xa0>)
 8000f20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f22:	f003 0302 	and.w	r3, r3, #2
 8000f26:	613b      	str	r3, [r7, #16]
 8000f28:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000f2a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000f2e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f30:	2312      	movs	r3, #18
 8000f32:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f34:	2300      	movs	r3, #0
 8000f36:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f38:	2303      	movs	r3, #3
 8000f3a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000f3c:	2304      	movs	r3, #4
 8000f3e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f40:	f107 0314 	add.w	r3, r7, #20
 8000f44:	4619      	mov	r1, r3
 8000f46:	4812      	ldr	r0, [pc, #72]	; (8000f90 <HAL_I2C_MspInit+0xa4>)
 8000f48:	f000 f9c2 	bl	80012d0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	60fb      	str	r3, [r7, #12]
 8000f50:	4b0e      	ldr	r3, [pc, #56]	; (8000f8c <HAL_I2C_MspInit+0xa0>)
 8000f52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f54:	4a0d      	ldr	r2, [pc, #52]	; (8000f8c <HAL_I2C_MspInit+0xa0>)
 8000f56:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000f5a:	6413      	str	r3, [r2, #64]	; 0x40
 8000f5c:	4b0b      	ldr	r3, [pc, #44]	; (8000f8c <HAL_I2C_MspInit+0xa0>)
 8000f5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f60:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f64:	60fb      	str	r3, [r7, #12]
 8000f66:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_I2C1_FORCE_RESET();
 8000f68:	4b08      	ldr	r3, [pc, #32]	; (8000f8c <HAL_I2C_MspInit+0xa0>)
 8000f6a:	6a1b      	ldr	r3, [r3, #32]
 8000f6c:	4a07      	ldr	r2, [pc, #28]	; (8000f8c <HAL_I2C_MspInit+0xa0>)
 8000f6e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000f72:	6213      	str	r3, [r2, #32]
    __HAL_RCC_I2C1_RELEASE_RESET();
 8000f74:	4b05      	ldr	r3, [pc, #20]	; (8000f8c <HAL_I2C_MspInit+0xa0>)
 8000f76:	6a1b      	ldr	r3, [r3, #32]
 8000f78:	4a04      	ldr	r2, [pc, #16]	; (8000f8c <HAL_I2C_MspInit+0xa0>)
 8000f7a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8000f7e:	6213      	str	r3, [r2, #32]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000f80:	bf00      	nop
 8000f82:	3728      	adds	r7, #40	; 0x28
 8000f84:	46bd      	mov	sp, r7
 8000f86:	bd80      	pop	{r7, pc}
 8000f88:	40005400 	.word	0x40005400
 8000f8c:	40023800 	.word	0x40023800
 8000f90:	40020400 	.word	0x40020400

08000f94 <HAL_MspInit>:

/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f94:	b480      	push	{r7}
 8000f96:	b083      	sub	sp, #12
 8000f98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	607b      	str	r3, [r7, #4]
 8000f9e:	4b10      	ldr	r3, [pc, #64]	; (8000fe0 <HAL_MspInit+0x4c>)
 8000fa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fa2:	4a0f      	ldr	r2, [pc, #60]	; (8000fe0 <HAL_MspInit+0x4c>)
 8000fa4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fa8:	6453      	str	r3, [r2, #68]	; 0x44
 8000faa:	4b0d      	ldr	r3, [pc, #52]	; (8000fe0 <HAL_MspInit+0x4c>)
 8000fac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000fb2:	607b      	str	r3, [r7, #4]
 8000fb4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	603b      	str	r3, [r7, #0]
 8000fba:	4b09      	ldr	r3, [pc, #36]	; (8000fe0 <HAL_MspInit+0x4c>)
 8000fbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fbe:	4a08      	ldr	r2, [pc, #32]	; (8000fe0 <HAL_MspInit+0x4c>)
 8000fc0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fc4:	6413      	str	r3, [r2, #64]	; 0x40
 8000fc6:	4b06      	ldr	r3, [pc, #24]	; (8000fe0 <HAL_MspInit+0x4c>)
 8000fc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fce:	603b      	str	r3, [r7, #0]
 8000fd0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fd2:	bf00      	nop
 8000fd4:	370c      	adds	r7, #12
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fdc:	4770      	bx	lr
 8000fde:	bf00      	nop
 8000fe0:	40023800 	.word	0x40023800

08000fe4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000fe8:	4b0b      	ldr	r3, [pc, #44]	; (8001018 <HAL_Init+0x34>)
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	4a0a      	ldr	r2, [pc, #40]	; (8001018 <HAL_Init+0x34>)
 8000fee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ff2:	6013      	str	r3, [r2, #0]
#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ff4:	4b08      	ldr	r3, [pc, #32]	; (8001018 <HAL_Init+0x34>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	4a07      	ldr	r2, [pc, #28]	; (8001018 <HAL_Init+0x34>)
 8000ffa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ffe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001000:	2003      	movs	r0, #3
 8001002:	f000 f931 	bl	8001268 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001006:	200f      	movs	r0, #15
 8001008:	f000 f808 	bl	800101c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800100c:	f7ff ffc2 	bl	8000f94 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001010:	2300      	movs	r3, #0
}
 8001012:	4618      	mov	r0, r3
 8001014:	bd80      	pop	{r7, pc}
 8001016:	bf00      	nop
 8001018:	40023c00 	.word	0x40023c00

0800101c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b082      	sub	sp, #8
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001024:	4b12      	ldr	r3, [pc, #72]	; (8001070 <HAL_InitTick+0x54>)
 8001026:	681a      	ldr	r2, [r3, #0]
 8001028:	4b12      	ldr	r3, [pc, #72]	; (8001074 <HAL_InitTick+0x58>)
 800102a:	781b      	ldrb	r3, [r3, #0]
 800102c:	4619      	mov	r1, r3
 800102e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001032:	fbb3 f3f1 	udiv	r3, r3, r1
 8001036:	fbb2 f3f3 	udiv	r3, r2, r3
 800103a:	4618      	mov	r0, r3
 800103c:	f000 f93b 	bl	80012b6 <HAL_SYSTICK_Config>
 8001040:	4603      	mov	r3, r0
 8001042:	2b00      	cmp	r3, #0
 8001044:	d001      	beq.n	800104a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001046:	2301      	movs	r3, #1
 8001048:	e00e      	b.n	8001068 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	2b0f      	cmp	r3, #15
 800104e:	d80a      	bhi.n	8001066 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001050:	2200      	movs	r2, #0
 8001052:	6879      	ldr	r1, [r7, #4]
 8001054:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001058:	f000 f911 	bl	800127e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800105c:	4a06      	ldr	r2, [pc, #24]	; (8001078 <HAL_InitTick+0x5c>)
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001062:	2300      	movs	r3, #0
 8001064:	e000      	b.n	8001068 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001066:	2301      	movs	r3, #1
}
 8001068:	4618      	mov	r0, r3
 800106a:	3708      	adds	r7, #8
 800106c:	46bd      	mov	sp, r7
 800106e:	bd80      	pop	{r7, pc}
 8001070:	2000000c 	.word	0x2000000c
 8001074:	20000078 	.word	0x20000078
 8001078:	20000074 	.word	0x20000074

0800107c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800107c:	b480      	push	{r7}
 800107e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001080:	4b06      	ldr	r3, [pc, #24]	; (800109c <HAL_IncTick+0x20>)
 8001082:	781b      	ldrb	r3, [r3, #0]
 8001084:	461a      	mov	r2, r3
 8001086:	4b06      	ldr	r3, [pc, #24]	; (80010a0 <HAL_IncTick+0x24>)
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	4413      	add	r3, r2
 800108c:	4a04      	ldr	r2, [pc, #16]	; (80010a0 <HAL_IncTick+0x24>)
 800108e:	6013      	str	r3, [r2, #0]
}
 8001090:	bf00      	nop
 8001092:	46bd      	mov	sp, r7
 8001094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001098:	4770      	bx	lr
 800109a:	bf00      	nop
 800109c:	20000078 	.word	0x20000078
 80010a0:	2000019c 	.word	0x2000019c

080010a4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010a4:	b480      	push	{r7}
 80010a6:	af00      	add	r7, sp, #0
  return uwTick;
 80010a8:	4b03      	ldr	r3, [pc, #12]	; (80010b8 <HAL_GetTick+0x14>)
 80010aa:	681b      	ldr	r3, [r3, #0]
}
 80010ac:	4618      	mov	r0, r3
 80010ae:	46bd      	mov	sp, r7
 80010b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b4:	4770      	bx	lr
 80010b6:	bf00      	nop
 80010b8:	2000019c 	.word	0x2000019c

080010bc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b084      	sub	sp, #16
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80010c4:	f7ff ffee 	bl	80010a4 <HAL_GetTick>
 80010c8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010ce:	68fb      	ldr	r3, [r7, #12]
 80010d0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80010d4:	d005      	beq.n	80010e2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80010d6:	4b0a      	ldr	r3, [pc, #40]	; (8001100 <HAL_Delay+0x44>)
 80010d8:	781b      	ldrb	r3, [r3, #0]
 80010da:	461a      	mov	r2, r3
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	4413      	add	r3, r2
 80010e0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80010e2:	bf00      	nop
 80010e4:	f7ff ffde 	bl	80010a4 <HAL_GetTick>
 80010e8:	4602      	mov	r2, r0
 80010ea:	68bb      	ldr	r3, [r7, #8]
 80010ec:	1ad3      	subs	r3, r2, r3
 80010ee:	68fa      	ldr	r2, [r7, #12]
 80010f0:	429a      	cmp	r2, r3
 80010f2:	d8f7      	bhi.n	80010e4 <HAL_Delay+0x28>
  {
  }
}
 80010f4:	bf00      	nop
 80010f6:	bf00      	nop
 80010f8:	3710      	adds	r7, #16
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bd80      	pop	{r7, pc}
 80010fe:	bf00      	nop
 8001100:	20000078 	.word	0x20000078

08001104 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001104:	b480      	push	{r7}
 8001106:	b085      	sub	sp, #20
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	f003 0307 	and.w	r3, r3, #7
 8001112:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001114:	4b0c      	ldr	r3, [pc, #48]	; (8001148 <__NVIC_SetPriorityGrouping+0x44>)
 8001116:	68db      	ldr	r3, [r3, #12]
 8001118:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800111a:	68ba      	ldr	r2, [r7, #8]
 800111c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001120:	4013      	ands	r3, r2
 8001122:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001128:	68bb      	ldr	r3, [r7, #8]
 800112a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800112c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001130:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001134:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001136:	4a04      	ldr	r2, [pc, #16]	; (8001148 <__NVIC_SetPriorityGrouping+0x44>)
 8001138:	68bb      	ldr	r3, [r7, #8]
 800113a:	60d3      	str	r3, [r2, #12]
}
 800113c:	bf00      	nop
 800113e:	3714      	adds	r7, #20
 8001140:	46bd      	mov	sp, r7
 8001142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001146:	4770      	bx	lr
 8001148:	e000ed00 	.word	0xe000ed00

0800114c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800114c:	b480      	push	{r7}
 800114e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001150:	4b04      	ldr	r3, [pc, #16]	; (8001164 <__NVIC_GetPriorityGrouping+0x18>)
 8001152:	68db      	ldr	r3, [r3, #12]
 8001154:	0a1b      	lsrs	r3, r3, #8
 8001156:	f003 0307 	and.w	r3, r3, #7
}
 800115a:	4618      	mov	r0, r3
 800115c:	46bd      	mov	sp, r7
 800115e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001162:	4770      	bx	lr
 8001164:	e000ed00 	.word	0xe000ed00

08001168 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001168:	b480      	push	{r7}
 800116a:	b083      	sub	sp, #12
 800116c:	af00      	add	r7, sp, #0
 800116e:	4603      	mov	r3, r0
 8001170:	6039      	str	r1, [r7, #0]
 8001172:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001174:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001178:	2b00      	cmp	r3, #0
 800117a:	db0a      	blt.n	8001192 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800117c:	683b      	ldr	r3, [r7, #0]
 800117e:	b2da      	uxtb	r2, r3
 8001180:	490c      	ldr	r1, [pc, #48]	; (80011b4 <__NVIC_SetPriority+0x4c>)
 8001182:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001186:	0112      	lsls	r2, r2, #4
 8001188:	b2d2      	uxtb	r2, r2
 800118a:	440b      	add	r3, r1
 800118c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001190:	e00a      	b.n	80011a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001192:	683b      	ldr	r3, [r7, #0]
 8001194:	b2da      	uxtb	r2, r3
 8001196:	4908      	ldr	r1, [pc, #32]	; (80011b8 <__NVIC_SetPriority+0x50>)
 8001198:	79fb      	ldrb	r3, [r7, #7]
 800119a:	f003 030f 	and.w	r3, r3, #15
 800119e:	3b04      	subs	r3, #4
 80011a0:	0112      	lsls	r2, r2, #4
 80011a2:	b2d2      	uxtb	r2, r2
 80011a4:	440b      	add	r3, r1
 80011a6:	761a      	strb	r2, [r3, #24]
}
 80011a8:	bf00      	nop
 80011aa:	370c      	adds	r7, #12
 80011ac:	46bd      	mov	sp, r7
 80011ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b2:	4770      	bx	lr
 80011b4:	e000e100 	.word	0xe000e100
 80011b8:	e000ed00 	.word	0xe000ed00

080011bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011bc:	b480      	push	{r7}
 80011be:	b089      	sub	sp, #36	; 0x24
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	60f8      	str	r0, [r7, #12]
 80011c4:	60b9      	str	r1, [r7, #8]
 80011c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	f003 0307 	and.w	r3, r3, #7
 80011ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011d0:	69fb      	ldr	r3, [r7, #28]
 80011d2:	f1c3 0307 	rsb	r3, r3, #7
 80011d6:	2b04      	cmp	r3, #4
 80011d8:	bf28      	it	cs
 80011da:	2304      	movcs	r3, #4
 80011dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011de:	69fb      	ldr	r3, [r7, #28]
 80011e0:	3304      	adds	r3, #4
 80011e2:	2b06      	cmp	r3, #6
 80011e4:	d902      	bls.n	80011ec <NVIC_EncodePriority+0x30>
 80011e6:	69fb      	ldr	r3, [r7, #28]
 80011e8:	3b03      	subs	r3, #3
 80011ea:	e000      	b.n	80011ee <NVIC_EncodePriority+0x32>
 80011ec:	2300      	movs	r3, #0
 80011ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011f0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80011f4:	69bb      	ldr	r3, [r7, #24]
 80011f6:	fa02 f303 	lsl.w	r3, r2, r3
 80011fa:	43da      	mvns	r2, r3
 80011fc:	68bb      	ldr	r3, [r7, #8]
 80011fe:	401a      	ands	r2, r3
 8001200:	697b      	ldr	r3, [r7, #20]
 8001202:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001204:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001208:	697b      	ldr	r3, [r7, #20]
 800120a:	fa01 f303 	lsl.w	r3, r1, r3
 800120e:	43d9      	mvns	r1, r3
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001214:	4313      	orrs	r3, r2
         );
}
 8001216:	4618      	mov	r0, r3
 8001218:	3724      	adds	r7, #36	; 0x24
 800121a:	46bd      	mov	sp, r7
 800121c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001220:	4770      	bx	lr
	...

08001224 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b082      	sub	sp, #8
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	3b01      	subs	r3, #1
 8001230:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001234:	d301      	bcc.n	800123a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001236:	2301      	movs	r3, #1
 8001238:	e00f      	b.n	800125a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800123a:	4a0a      	ldr	r2, [pc, #40]	; (8001264 <SysTick_Config+0x40>)
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	3b01      	subs	r3, #1
 8001240:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001242:	210f      	movs	r1, #15
 8001244:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001248:	f7ff ff8e 	bl	8001168 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800124c:	4b05      	ldr	r3, [pc, #20]	; (8001264 <SysTick_Config+0x40>)
 800124e:	2200      	movs	r2, #0
 8001250:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001252:	4b04      	ldr	r3, [pc, #16]	; (8001264 <SysTick_Config+0x40>)
 8001254:	2207      	movs	r2, #7
 8001256:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001258:	2300      	movs	r3, #0
}
 800125a:	4618      	mov	r0, r3
 800125c:	3708      	adds	r7, #8
 800125e:	46bd      	mov	sp, r7
 8001260:	bd80      	pop	{r7, pc}
 8001262:	bf00      	nop
 8001264:	e000e010 	.word	0xe000e010

08001268 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b082      	sub	sp, #8
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001270:	6878      	ldr	r0, [r7, #4]
 8001272:	f7ff ff47 	bl	8001104 <__NVIC_SetPriorityGrouping>
}
 8001276:	bf00      	nop
 8001278:	3708      	adds	r7, #8
 800127a:	46bd      	mov	sp, r7
 800127c:	bd80      	pop	{r7, pc}

0800127e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800127e:	b580      	push	{r7, lr}
 8001280:	b086      	sub	sp, #24
 8001282:	af00      	add	r7, sp, #0
 8001284:	4603      	mov	r3, r0
 8001286:	60b9      	str	r1, [r7, #8]
 8001288:	607a      	str	r2, [r7, #4]
 800128a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800128c:	2300      	movs	r3, #0
 800128e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001290:	f7ff ff5c 	bl	800114c <__NVIC_GetPriorityGrouping>
 8001294:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001296:	687a      	ldr	r2, [r7, #4]
 8001298:	68b9      	ldr	r1, [r7, #8]
 800129a:	6978      	ldr	r0, [r7, #20]
 800129c:	f7ff ff8e 	bl	80011bc <NVIC_EncodePriority>
 80012a0:	4602      	mov	r2, r0
 80012a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012a6:	4611      	mov	r1, r2
 80012a8:	4618      	mov	r0, r3
 80012aa:	f7ff ff5d 	bl	8001168 <__NVIC_SetPriority>
}
 80012ae:	bf00      	nop
 80012b0:	3718      	adds	r7, #24
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bd80      	pop	{r7, pc}

080012b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012b6:	b580      	push	{r7, lr}
 80012b8:	b082      	sub	sp, #8
 80012ba:	af00      	add	r7, sp, #0
 80012bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012be:	6878      	ldr	r0, [r7, #4]
 80012c0:	f7ff ffb0 	bl	8001224 <SysTick_Config>
 80012c4:	4603      	mov	r3, r0
}
 80012c6:	4618      	mov	r0, r3
 80012c8:	3708      	adds	r7, #8
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bd80      	pop	{r7, pc}
	...

080012d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012d0:	b480      	push	{r7}
 80012d2:	b089      	sub	sp, #36	; 0x24
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
 80012d8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80012da:	2300      	movs	r3, #0
 80012dc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80012de:	2300      	movs	r3, #0
 80012e0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80012e2:	2300      	movs	r3, #0
 80012e4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80012e6:	2300      	movs	r3, #0
 80012e8:	61fb      	str	r3, [r7, #28]
 80012ea:	e177      	b.n	80015dc <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80012ec:	2201      	movs	r2, #1
 80012ee:	69fb      	ldr	r3, [r7, #28]
 80012f0:	fa02 f303 	lsl.w	r3, r2, r3
 80012f4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80012f6:	683b      	ldr	r3, [r7, #0]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	697a      	ldr	r2, [r7, #20]
 80012fc:	4013      	ands	r3, r2
 80012fe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001300:	693a      	ldr	r2, [r7, #16]
 8001302:	697b      	ldr	r3, [r7, #20]
 8001304:	429a      	cmp	r2, r3
 8001306:	f040 8166 	bne.w	80015d6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800130a:	683b      	ldr	r3, [r7, #0]
 800130c:	685b      	ldr	r3, [r3, #4]
 800130e:	f003 0303 	and.w	r3, r3, #3
 8001312:	2b01      	cmp	r3, #1
 8001314:	d005      	beq.n	8001322 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001316:	683b      	ldr	r3, [r7, #0]
 8001318:	685b      	ldr	r3, [r3, #4]
 800131a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800131e:	2b02      	cmp	r3, #2
 8001320:	d130      	bne.n	8001384 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	689b      	ldr	r3, [r3, #8]
 8001326:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001328:	69fb      	ldr	r3, [r7, #28]
 800132a:	005b      	lsls	r3, r3, #1
 800132c:	2203      	movs	r2, #3
 800132e:	fa02 f303 	lsl.w	r3, r2, r3
 8001332:	43db      	mvns	r3, r3
 8001334:	69ba      	ldr	r2, [r7, #24]
 8001336:	4013      	ands	r3, r2
 8001338:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800133a:	683b      	ldr	r3, [r7, #0]
 800133c:	68da      	ldr	r2, [r3, #12]
 800133e:	69fb      	ldr	r3, [r7, #28]
 8001340:	005b      	lsls	r3, r3, #1
 8001342:	fa02 f303 	lsl.w	r3, r2, r3
 8001346:	69ba      	ldr	r2, [r7, #24]
 8001348:	4313      	orrs	r3, r2
 800134a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	69ba      	ldr	r2, [r7, #24]
 8001350:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	685b      	ldr	r3, [r3, #4]
 8001356:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001358:	2201      	movs	r2, #1
 800135a:	69fb      	ldr	r3, [r7, #28]
 800135c:	fa02 f303 	lsl.w	r3, r2, r3
 8001360:	43db      	mvns	r3, r3
 8001362:	69ba      	ldr	r2, [r7, #24]
 8001364:	4013      	ands	r3, r2
 8001366:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001368:	683b      	ldr	r3, [r7, #0]
 800136a:	685b      	ldr	r3, [r3, #4]
 800136c:	091b      	lsrs	r3, r3, #4
 800136e:	f003 0201 	and.w	r2, r3, #1
 8001372:	69fb      	ldr	r3, [r7, #28]
 8001374:	fa02 f303 	lsl.w	r3, r2, r3
 8001378:	69ba      	ldr	r2, [r7, #24]
 800137a:	4313      	orrs	r3, r2
 800137c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	69ba      	ldr	r2, [r7, #24]
 8001382:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001384:	683b      	ldr	r3, [r7, #0]
 8001386:	685b      	ldr	r3, [r3, #4]
 8001388:	f003 0303 	and.w	r3, r3, #3
 800138c:	2b03      	cmp	r3, #3
 800138e:	d017      	beq.n	80013c0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	68db      	ldr	r3, [r3, #12]
 8001394:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001396:	69fb      	ldr	r3, [r7, #28]
 8001398:	005b      	lsls	r3, r3, #1
 800139a:	2203      	movs	r2, #3
 800139c:	fa02 f303 	lsl.w	r3, r2, r3
 80013a0:	43db      	mvns	r3, r3
 80013a2:	69ba      	ldr	r2, [r7, #24]
 80013a4:	4013      	ands	r3, r2
 80013a6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80013a8:	683b      	ldr	r3, [r7, #0]
 80013aa:	689a      	ldr	r2, [r3, #8]
 80013ac:	69fb      	ldr	r3, [r7, #28]
 80013ae:	005b      	lsls	r3, r3, #1
 80013b0:	fa02 f303 	lsl.w	r3, r2, r3
 80013b4:	69ba      	ldr	r2, [r7, #24]
 80013b6:	4313      	orrs	r3, r2
 80013b8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	69ba      	ldr	r2, [r7, #24]
 80013be:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80013c0:	683b      	ldr	r3, [r7, #0]
 80013c2:	685b      	ldr	r3, [r3, #4]
 80013c4:	f003 0303 	and.w	r3, r3, #3
 80013c8:	2b02      	cmp	r3, #2
 80013ca:	d123      	bne.n	8001414 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80013cc:	69fb      	ldr	r3, [r7, #28]
 80013ce:	08da      	lsrs	r2, r3, #3
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	3208      	adds	r2, #8
 80013d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80013d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80013da:	69fb      	ldr	r3, [r7, #28]
 80013dc:	f003 0307 	and.w	r3, r3, #7
 80013e0:	009b      	lsls	r3, r3, #2
 80013e2:	220f      	movs	r2, #15
 80013e4:	fa02 f303 	lsl.w	r3, r2, r3
 80013e8:	43db      	mvns	r3, r3
 80013ea:	69ba      	ldr	r2, [r7, #24]
 80013ec:	4013      	ands	r3, r2
 80013ee:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80013f0:	683b      	ldr	r3, [r7, #0]
 80013f2:	691a      	ldr	r2, [r3, #16]
 80013f4:	69fb      	ldr	r3, [r7, #28]
 80013f6:	f003 0307 	and.w	r3, r3, #7
 80013fa:	009b      	lsls	r3, r3, #2
 80013fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001400:	69ba      	ldr	r2, [r7, #24]
 8001402:	4313      	orrs	r3, r2
 8001404:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001406:	69fb      	ldr	r3, [r7, #28]
 8001408:	08da      	lsrs	r2, r3, #3
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	3208      	adds	r2, #8
 800140e:	69b9      	ldr	r1, [r7, #24]
 8001410:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800141a:	69fb      	ldr	r3, [r7, #28]
 800141c:	005b      	lsls	r3, r3, #1
 800141e:	2203      	movs	r2, #3
 8001420:	fa02 f303 	lsl.w	r3, r2, r3
 8001424:	43db      	mvns	r3, r3
 8001426:	69ba      	ldr	r2, [r7, #24]
 8001428:	4013      	ands	r3, r2
 800142a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800142c:	683b      	ldr	r3, [r7, #0]
 800142e:	685b      	ldr	r3, [r3, #4]
 8001430:	f003 0203 	and.w	r2, r3, #3
 8001434:	69fb      	ldr	r3, [r7, #28]
 8001436:	005b      	lsls	r3, r3, #1
 8001438:	fa02 f303 	lsl.w	r3, r2, r3
 800143c:	69ba      	ldr	r2, [r7, #24]
 800143e:	4313      	orrs	r3, r2
 8001440:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	69ba      	ldr	r2, [r7, #24]
 8001446:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001448:	683b      	ldr	r3, [r7, #0]
 800144a:	685b      	ldr	r3, [r3, #4]
 800144c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001450:	2b00      	cmp	r3, #0
 8001452:	f000 80c0 	beq.w	80015d6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001456:	2300      	movs	r3, #0
 8001458:	60fb      	str	r3, [r7, #12]
 800145a:	4b66      	ldr	r3, [pc, #408]	; (80015f4 <HAL_GPIO_Init+0x324>)
 800145c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800145e:	4a65      	ldr	r2, [pc, #404]	; (80015f4 <HAL_GPIO_Init+0x324>)
 8001460:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001464:	6453      	str	r3, [r2, #68]	; 0x44
 8001466:	4b63      	ldr	r3, [pc, #396]	; (80015f4 <HAL_GPIO_Init+0x324>)
 8001468:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800146a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800146e:	60fb      	str	r3, [r7, #12]
 8001470:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001472:	4a61      	ldr	r2, [pc, #388]	; (80015f8 <HAL_GPIO_Init+0x328>)
 8001474:	69fb      	ldr	r3, [r7, #28]
 8001476:	089b      	lsrs	r3, r3, #2
 8001478:	3302      	adds	r3, #2
 800147a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800147e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001480:	69fb      	ldr	r3, [r7, #28]
 8001482:	f003 0303 	and.w	r3, r3, #3
 8001486:	009b      	lsls	r3, r3, #2
 8001488:	220f      	movs	r2, #15
 800148a:	fa02 f303 	lsl.w	r3, r2, r3
 800148e:	43db      	mvns	r3, r3
 8001490:	69ba      	ldr	r2, [r7, #24]
 8001492:	4013      	ands	r3, r2
 8001494:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	4a58      	ldr	r2, [pc, #352]	; (80015fc <HAL_GPIO_Init+0x32c>)
 800149a:	4293      	cmp	r3, r2
 800149c:	d037      	beq.n	800150e <HAL_GPIO_Init+0x23e>
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	4a57      	ldr	r2, [pc, #348]	; (8001600 <HAL_GPIO_Init+0x330>)
 80014a2:	4293      	cmp	r3, r2
 80014a4:	d031      	beq.n	800150a <HAL_GPIO_Init+0x23a>
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	4a56      	ldr	r2, [pc, #344]	; (8001604 <HAL_GPIO_Init+0x334>)
 80014aa:	4293      	cmp	r3, r2
 80014ac:	d02b      	beq.n	8001506 <HAL_GPIO_Init+0x236>
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	4a55      	ldr	r2, [pc, #340]	; (8001608 <HAL_GPIO_Init+0x338>)
 80014b2:	4293      	cmp	r3, r2
 80014b4:	d025      	beq.n	8001502 <HAL_GPIO_Init+0x232>
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	4a54      	ldr	r2, [pc, #336]	; (800160c <HAL_GPIO_Init+0x33c>)
 80014ba:	4293      	cmp	r3, r2
 80014bc:	d01f      	beq.n	80014fe <HAL_GPIO_Init+0x22e>
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	4a53      	ldr	r2, [pc, #332]	; (8001610 <HAL_GPIO_Init+0x340>)
 80014c2:	4293      	cmp	r3, r2
 80014c4:	d019      	beq.n	80014fa <HAL_GPIO_Init+0x22a>
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	4a52      	ldr	r2, [pc, #328]	; (8001614 <HAL_GPIO_Init+0x344>)
 80014ca:	4293      	cmp	r3, r2
 80014cc:	d013      	beq.n	80014f6 <HAL_GPIO_Init+0x226>
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	4a51      	ldr	r2, [pc, #324]	; (8001618 <HAL_GPIO_Init+0x348>)
 80014d2:	4293      	cmp	r3, r2
 80014d4:	d00d      	beq.n	80014f2 <HAL_GPIO_Init+0x222>
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	4a50      	ldr	r2, [pc, #320]	; (800161c <HAL_GPIO_Init+0x34c>)
 80014da:	4293      	cmp	r3, r2
 80014dc:	d007      	beq.n	80014ee <HAL_GPIO_Init+0x21e>
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	4a4f      	ldr	r2, [pc, #316]	; (8001620 <HAL_GPIO_Init+0x350>)
 80014e2:	4293      	cmp	r3, r2
 80014e4:	d101      	bne.n	80014ea <HAL_GPIO_Init+0x21a>
 80014e6:	2309      	movs	r3, #9
 80014e8:	e012      	b.n	8001510 <HAL_GPIO_Init+0x240>
 80014ea:	230a      	movs	r3, #10
 80014ec:	e010      	b.n	8001510 <HAL_GPIO_Init+0x240>
 80014ee:	2308      	movs	r3, #8
 80014f0:	e00e      	b.n	8001510 <HAL_GPIO_Init+0x240>
 80014f2:	2307      	movs	r3, #7
 80014f4:	e00c      	b.n	8001510 <HAL_GPIO_Init+0x240>
 80014f6:	2306      	movs	r3, #6
 80014f8:	e00a      	b.n	8001510 <HAL_GPIO_Init+0x240>
 80014fa:	2305      	movs	r3, #5
 80014fc:	e008      	b.n	8001510 <HAL_GPIO_Init+0x240>
 80014fe:	2304      	movs	r3, #4
 8001500:	e006      	b.n	8001510 <HAL_GPIO_Init+0x240>
 8001502:	2303      	movs	r3, #3
 8001504:	e004      	b.n	8001510 <HAL_GPIO_Init+0x240>
 8001506:	2302      	movs	r3, #2
 8001508:	e002      	b.n	8001510 <HAL_GPIO_Init+0x240>
 800150a:	2301      	movs	r3, #1
 800150c:	e000      	b.n	8001510 <HAL_GPIO_Init+0x240>
 800150e:	2300      	movs	r3, #0
 8001510:	69fa      	ldr	r2, [r7, #28]
 8001512:	f002 0203 	and.w	r2, r2, #3
 8001516:	0092      	lsls	r2, r2, #2
 8001518:	4093      	lsls	r3, r2
 800151a:	69ba      	ldr	r2, [r7, #24]
 800151c:	4313      	orrs	r3, r2
 800151e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001520:	4935      	ldr	r1, [pc, #212]	; (80015f8 <HAL_GPIO_Init+0x328>)
 8001522:	69fb      	ldr	r3, [r7, #28]
 8001524:	089b      	lsrs	r3, r3, #2
 8001526:	3302      	adds	r3, #2
 8001528:	69ba      	ldr	r2, [r7, #24]
 800152a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800152e:	4b3d      	ldr	r3, [pc, #244]	; (8001624 <HAL_GPIO_Init+0x354>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001534:	693b      	ldr	r3, [r7, #16]
 8001536:	43db      	mvns	r3, r3
 8001538:	69ba      	ldr	r2, [r7, #24]
 800153a:	4013      	ands	r3, r2
 800153c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800153e:	683b      	ldr	r3, [r7, #0]
 8001540:	685b      	ldr	r3, [r3, #4]
 8001542:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001546:	2b00      	cmp	r3, #0
 8001548:	d003      	beq.n	8001552 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800154a:	69ba      	ldr	r2, [r7, #24]
 800154c:	693b      	ldr	r3, [r7, #16]
 800154e:	4313      	orrs	r3, r2
 8001550:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001552:	4a34      	ldr	r2, [pc, #208]	; (8001624 <HAL_GPIO_Init+0x354>)
 8001554:	69bb      	ldr	r3, [r7, #24]
 8001556:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001558:	4b32      	ldr	r3, [pc, #200]	; (8001624 <HAL_GPIO_Init+0x354>)
 800155a:	685b      	ldr	r3, [r3, #4]
 800155c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800155e:	693b      	ldr	r3, [r7, #16]
 8001560:	43db      	mvns	r3, r3
 8001562:	69ba      	ldr	r2, [r7, #24]
 8001564:	4013      	ands	r3, r2
 8001566:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001568:	683b      	ldr	r3, [r7, #0]
 800156a:	685b      	ldr	r3, [r3, #4]
 800156c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001570:	2b00      	cmp	r3, #0
 8001572:	d003      	beq.n	800157c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001574:	69ba      	ldr	r2, [r7, #24]
 8001576:	693b      	ldr	r3, [r7, #16]
 8001578:	4313      	orrs	r3, r2
 800157a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800157c:	4a29      	ldr	r2, [pc, #164]	; (8001624 <HAL_GPIO_Init+0x354>)
 800157e:	69bb      	ldr	r3, [r7, #24]
 8001580:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001582:	4b28      	ldr	r3, [pc, #160]	; (8001624 <HAL_GPIO_Init+0x354>)
 8001584:	689b      	ldr	r3, [r3, #8]
 8001586:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001588:	693b      	ldr	r3, [r7, #16]
 800158a:	43db      	mvns	r3, r3
 800158c:	69ba      	ldr	r2, [r7, #24]
 800158e:	4013      	ands	r3, r2
 8001590:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001592:	683b      	ldr	r3, [r7, #0]
 8001594:	685b      	ldr	r3, [r3, #4]
 8001596:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800159a:	2b00      	cmp	r3, #0
 800159c:	d003      	beq.n	80015a6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800159e:	69ba      	ldr	r2, [r7, #24]
 80015a0:	693b      	ldr	r3, [r7, #16]
 80015a2:	4313      	orrs	r3, r2
 80015a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80015a6:	4a1f      	ldr	r2, [pc, #124]	; (8001624 <HAL_GPIO_Init+0x354>)
 80015a8:	69bb      	ldr	r3, [r7, #24]
 80015aa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80015ac:	4b1d      	ldr	r3, [pc, #116]	; (8001624 <HAL_GPIO_Init+0x354>)
 80015ae:	68db      	ldr	r3, [r3, #12]
 80015b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015b2:	693b      	ldr	r3, [r7, #16]
 80015b4:	43db      	mvns	r3, r3
 80015b6:	69ba      	ldr	r2, [r7, #24]
 80015b8:	4013      	ands	r3, r2
 80015ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80015bc:	683b      	ldr	r3, [r7, #0]
 80015be:	685b      	ldr	r3, [r3, #4]
 80015c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d003      	beq.n	80015d0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80015c8:	69ba      	ldr	r2, [r7, #24]
 80015ca:	693b      	ldr	r3, [r7, #16]
 80015cc:	4313      	orrs	r3, r2
 80015ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80015d0:	4a14      	ldr	r2, [pc, #80]	; (8001624 <HAL_GPIO_Init+0x354>)
 80015d2:	69bb      	ldr	r3, [r7, #24]
 80015d4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80015d6:	69fb      	ldr	r3, [r7, #28]
 80015d8:	3301      	adds	r3, #1
 80015da:	61fb      	str	r3, [r7, #28]
 80015dc:	69fb      	ldr	r3, [r7, #28]
 80015de:	2b0f      	cmp	r3, #15
 80015e0:	f67f ae84 	bls.w	80012ec <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80015e4:	bf00      	nop
 80015e6:	bf00      	nop
 80015e8:	3724      	adds	r7, #36	; 0x24
 80015ea:	46bd      	mov	sp, r7
 80015ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f0:	4770      	bx	lr
 80015f2:	bf00      	nop
 80015f4:	40023800 	.word	0x40023800
 80015f8:	40013800 	.word	0x40013800
 80015fc:	40020000 	.word	0x40020000
 8001600:	40020400 	.word	0x40020400
 8001604:	40020800 	.word	0x40020800
 8001608:	40020c00 	.word	0x40020c00
 800160c:	40021000 	.word	0x40021000
 8001610:	40021400 	.word	0x40021400
 8001614:	40021800 	.word	0x40021800
 8001618:	40021c00 	.word	0x40021c00
 800161c:	40022000 	.word	0x40022000
 8001620:	40022400 	.word	0x40022400
 8001624:	40013c00 	.word	0x40013c00

08001628 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001628:	b480      	push	{r7}
 800162a:	b083      	sub	sp, #12
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
 8001630:	460b      	mov	r3, r1
 8001632:	807b      	strh	r3, [r7, #2]
 8001634:	4613      	mov	r3, r2
 8001636:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001638:	787b      	ldrb	r3, [r7, #1]
 800163a:	2b00      	cmp	r3, #0
 800163c:	d003      	beq.n	8001646 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800163e:	887a      	ldrh	r2, [r7, #2]
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001644:	e003      	b.n	800164e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001646:	887b      	ldrh	r3, [r7, #2]
 8001648:	041a      	lsls	r2, r3, #16
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	619a      	str	r2, [r3, #24]
}
 800164e:	bf00      	nop
 8001650:	370c      	adds	r7, #12
 8001652:	46bd      	mov	sp, r7
 8001654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001658:	4770      	bx	lr
	...

0800165c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b084      	sub	sp, #16
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	2b00      	cmp	r3, #0
 8001668:	d101      	bne.n	800166e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800166a:	2301      	movs	r3, #1
 800166c:	e12b      	b.n	80018c6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001674:	b2db      	uxtb	r3, r3
 8001676:	2b00      	cmp	r3, #0
 8001678:	d106      	bne.n	8001688 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	2200      	movs	r2, #0
 800167e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001682:	6878      	ldr	r0, [r7, #4]
 8001684:	f7ff fc32 	bl	8000eec <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	2224      	movs	r2, #36	; 0x24
 800168c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	681a      	ldr	r2, [r3, #0]
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	f022 0201 	bic.w	r2, r2, #1
 800169e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	681a      	ldr	r2, [r3, #0]
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80016ae:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	681a      	ldr	r2, [r3, #0]
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80016be:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80016c0:	f001 fcee 	bl	80030a0 <HAL_RCC_GetPCLK1Freq>
 80016c4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	685b      	ldr	r3, [r3, #4]
 80016ca:	4a81      	ldr	r2, [pc, #516]	; (80018d0 <HAL_I2C_Init+0x274>)
 80016cc:	4293      	cmp	r3, r2
 80016ce:	d807      	bhi.n	80016e0 <HAL_I2C_Init+0x84>
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	4a80      	ldr	r2, [pc, #512]	; (80018d4 <HAL_I2C_Init+0x278>)
 80016d4:	4293      	cmp	r3, r2
 80016d6:	bf94      	ite	ls
 80016d8:	2301      	movls	r3, #1
 80016da:	2300      	movhi	r3, #0
 80016dc:	b2db      	uxtb	r3, r3
 80016de:	e006      	b.n	80016ee <HAL_I2C_Init+0x92>
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	4a7d      	ldr	r2, [pc, #500]	; (80018d8 <HAL_I2C_Init+0x27c>)
 80016e4:	4293      	cmp	r3, r2
 80016e6:	bf94      	ite	ls
 80016e8:	2301      	movls	r3, #1
 80016ea:	2300      	movhi	r3, #0
 80016ec:	b2db      	uxtb	r3, r3
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d001      	beq.n	80016f6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80016f2:	2301      	movs	r3, #1
 80016f4:	e0e7      	b.n	80018c6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	4a78      	ldr	r2, [pc, #480]	; (80018dc <HAL_I2C_Init+0x280>)
 80016fa:	fba2 2303 	umull	r2, r3, r2, r3
 80016fe:	0c9b      	lsrs	r3, r3, #18
 8001700:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	685b      	ldr	r3, [r3, #4]
 8001708:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	68ba      	ldr	r2, [r7, #8]
 8001712:	430a      	orrs	r2, r1
 8001714:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	6a1b      	ldr	r3, [r3, #32]
 800171c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	685b      	ldr	r3, [r3, #4]
 8001724:	4a6a      	ldr	r2, [pc, #424]	; (80018d0 <HAL_I2C_Init+0x274>)
 8001726:	4293      	cmp	r3, r2
 8001728:	d802      	bhi.n	8001730 <HAL_I2C_Init+0xd4>
 800172a:	68bb      	ldr	r3, [r7, #8]
 800172c:	3301      	adds	r3, #1
 800172e:	e009      	b.n	8001744 <HAL_I2C_Init+0xe8>
 8001730:	68bb      	ldr	r3, [r7, #8]
 8001732:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001736:	fb02 f303 	mul.w	r3, r2, r3
 800173a:	4a69      	ldr	r2, [pc, #420]	; (80018e0 <HAL_I2C_Init+0x284>)
 800173c:	fba2 2303 	umull	r2, r3, r2, r3
 8001740:	099b      	lsrs	r3, r3, #6
 8001742:	3301      	adds	r3, #1
 8001744:	687a      	ldr	r2, [r7, #4]
 8001746:	6812      	ldr	r2, [r2, #0]
 8001748:	430b      	orrs	r3, r1
 800174a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	69db      	ldr	r3, [r3, #28]
 8001752:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001756:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	685b      	ldr	r3, [r3, #4]
 800175e:	495c      	ldr	r1, [pc, #368]	; (80018d0 <HAL_I2C_Init+0x274>)
 8001760:	428b      	cmp	r3, r1
 8001762:	d819      	bhi.n	8001798 <HAL_I2C_Init+0x13c>
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	1e59      	subs	r1, r3, #1
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	685b      	ldr	r3, [r3, #4]
 800176c:	005b      	lsls	r3, r3, #1
 800176e:	fbb1 f3f3 	udiv	r3, r1, r3
 8001772:	1c59      	adds	r1, r3, #1
 8001774:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001778:	400b      	ands	r3, r1
 800177a:	2b00      	cmp	r3, #0
 800177c:	d00a      	beq.n	8001794 <HAL_I2C_Init+0x138>
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	1e59      	subs	r1, r3, #1
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	685b      	ldr	r3, [r3, #4]
 8001786:	005b      	lsls	r3, r3, #1
 8001788:	fbb1 f3f3 	udiv	r3, r1, r3
 800178c:	3301      	adds	r3, #1
 800178e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001792:	e051      	b.n	8001838 <HAL_I2C_Init+0x1dc>
 8001794:	2304      	movs	r3, #4
 8001796:	e04f      	b.n	8001838 <HAL_I2C_Init+0x1dc>
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	689b      	ldr	r3, [r3, #8]
 800179c:	2b00      	cmp	r3, #0
 800179e:	d111      	bne.n	80017c4 <HAL_I2C_Init+0x168>
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	1e58      	subs	r0, r3, #1
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	6859      	ldr	r1, [r3, #4]
 80017a8:	460b      	mov	r3, r1
 80017aa:	005b      	lsls	r3, r3, #1
 80017ac:	440b      	add	r3, r1
 80017ae:	fbb0 f3f3 	udiv	r3, r0, r3
 80017b2:	3301      	adds	r3, #1
 80017b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	bf0c      	ite	eq
 80017bc:	2301      	moveq	r3, #1
 80017be:	2300      	movne	r3, #0
 80017c0:	b2db      	uxtb	r3, r3
 80017c2:	e012      	b.n	80017ea <HAL_I2C_Init+0x18e>
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	1e58      	subs	r0, r3, #1
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	6859      	ldr	r1, [r3, #4]
 80017cc:	460b      	mov	r3, r1
 80017ce:	009b      	lsls	r3, r3, #2
 80017d0:	440b      	add	r3, r1
 80017d2:	0099      	lsls	r1, r3, #2
 80017d4:	440b      	add	r3, r1
 80017d6:	fbb0 f3f3 	udiv	r3, r0, r3
 80017da:	3301      	adds	r3, #1
 80017dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	bf0c      	ite	eq
 80017e4:	2301      	moveq	r3, #1
 80017e6:	2300      	movne	r3, #0
 80017e8:	b2db      	uxtb	r3, r3
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d001      	beq.n	80017f2 <HAL_I2C_Init+0x196>
 80017ee:	2301      	movs	r3, #1
 80017f0:	e022      	b.n	8001838 <HAL_I2C_Init+0x1dc>
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	689b      	ldr	r3, [r3, #8]
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d10e      	bne.n	8001818 <HAL_I2C_Init+0x1bc>
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	1e58      	subs	r0, r3, #1
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	6859      	ldr	r1, [r3, #4]
 8001802:	460b      	mov	r3, r1
 8001804:	005b      	lsls	r3, r3, #1
 8001806:	440b      	add	r3, r1
 8001808:	fbb0 f3f3 	udiv	r3, r0, r3
 800180c:	3301      	adds	r3, #1
 800180e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001812:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001816:	e00f      	b.n	8001838 <HAL_I2C_Init+0x1dc>
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	1e58      	subs	r0, r3, #1
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	6859      	ldr	r1, [r3, #4]
 8001820:	460b      	mov	r3, r1
 8001822:	009b      	lsls	r3, r3, #2
 8001824:	440b      	add	r3, r1
 8001826:	0099      	lsls	r1, r3, #2
 8001828:	440b      	add	r3, r1
 800182a:	fbb0 f3f3 	udiv	r3, r0, r3
 800182e:	3301      	adds	r3, #1
 8001830:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001834:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001838:	6879      	ldr	r1, [r7, #4]
 800183a:	6809      	ldr	r1, [r1, #0]
 800183c:	4313      	orrs	r3, r2
 800183e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	69da      	ldr	r2, [r3, #28]
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	6a1b      	ldr	r3, [r3, #32]
 8001852:	431a      	orrs	r2, r3
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	430a      	orrs	r2, r1
 800185a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	689b      	ldr	r3, [r3, #8]
 8001862:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001866:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800186a:	687a      	ldr	r2, [r7, #4]
 800186c:	6911      	ldr	r1, [r2, #16]
 800186e:	687a      	ldr	r2, [r7, #4]
 8001870:	68d2      	ldr	r2, [r2, #12]
 8001872:	4311      	orrs	r1, r2
 8001874:	687a      	ldr	r2, [r7, #4]
 8001876:	6812      	ldr	r2, [r2, #0]
 8001878:	430b      	orrs	r3, r1
 800187a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	68db      	ldr	r3, [r3, #12]
 8001882:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	695a      	ldr	r2, [r3, #20]
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	699b      	ldr	r3, [r3, #24]
 800188e:	431a      	orrs	r2, r3
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	430a      	orrs	r2, r1
 8001896:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	681a      	ldr	r2, [r3, #0]
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f042 0201 	orr.w	r2, r2, #1
 80018a6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	2200      	movs	r2, #0
 80018ac:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	2220      	movs	r2, #32
 80018b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	2200      	movs	r2, #0
 80018ba:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	2200      	movs	r2, #0
 80018c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80018c4:	2300      	movs	r3, #0
}
 80018c6:	4618      	mov	r0, r3
 80018c8:	3710      	adds	r7, #16
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bd80      	pop	{r7, pc}
 80018ce:	bf00      	nop
 80018d0:	000186a0 	.word	0x000186a0
 80018d4:	001e847f 	.word	0x001e847f
 80018d8:	003d08ff 	.word	0x003d08ff
 80018dc:	431bde83 	.word	0x431bde83
 80018e0:	10624dd3 	.word	0x10624dd3

080018e4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b088      	sub	sp, #32
 80018e8:	af02      	add	r7, sp, #8
 80018ea:	60f8      	str	r0, [r7, #12]
 80018ec:	607a      	str	r2, [r7, #4]
 80018ee:	461a      	mov	r2, r3
 80018f0:	460b      	mov	r3, r1
 80018f2:	817b      	strh	r3, [r7, #10]
 80018f4:	4613      	mov	r3, r2
 80018f6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80018f8:	f7ff fbd4 	bl	80010a4 <HAL_GetTick>
 80018fc:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001904:	b2db      	uxtb	r3, r3
 8001906:	2b20      	cmp	r3, #32
 8001908:	f040 80e0 	bne.w	8001acc <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800190c:	697b      	ldr	r3, [r7, #20]
 800190e:	9300      	str	r3, [sp, #0]
 8001910:	2319      	movs	r3, #25
 8001912:	2201      	movs	r2, #1
 8001914:	4970      	ldr	r1, [pc, #448]	; (8001ad8 <HAL_I2C_Master_Transmit+0x1f4>)
 8001916:	68f8      	ldr	r0, [r7, #12]
 8001918:	f000 fc58 	bl	80021cc <I2C_WaitOnFlagUntilTimeout>
 800191c:	4603      	mov	r3, r0
 800191e:	2b00      	cmp	r3, #0
 8001920:	d001      	beq.n	8001926 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001922:	2302      	movs	r3, #2
 8001924:	e0d3      	b.n	8001ace <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800192c:	2b01      	cmp	r3, #1
 800192e:	d101      	bne.n	8001934 <HAL_I2C_Master_Transmit+0x50>
 8001930:	2302      	movs	r3, #2
 8001932:	e0cc      	b.n	8001ace <HAL_I2C_Master_Transmit+0x1ea>
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	2201      	movs	r2, #1
 8001938:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f003 0301 	and.w	r3, r3, #1
 8001946:	2b01      	cmp	r3, #1
 8001948:	d007      	beq.n	800195a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	681a      	ldr	r2, [r3, #0]
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	f042 0201 	orr.w	r2, r2, #1
 8001958:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	681a      	ldr	r2, [r3, #0]
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001968:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	2221      	movs	r2, #33	; 0x21
 800196e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	2210      	movs	r2, #16
 8001976:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	2200      	movs	r2, #0
 800197e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	687a      	ldr	r2, [r7, #4]
 8001984:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	893a      	ldrh	r2, [r7, #8]
 800198a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001990:	b29a      	uxth	r2, r3
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	4a50      	ldr	r2, [pc, #320]	; (8001adc <HAL_I2C_Master_Transmit+0x1f8>)
 800199a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800199c:	8979      	ldrh	r1, [r7, #10]
 800199e:	697b      	ldr	r3, [r7, #20]
 80019a0:	6a3a      	ldr	r2, [r7, #32]
 80019a2:	68f8      	ldr	r0, [r7, #12]
 80019a4:	f000 fac2 	bl	8001f2c <I2C_MasterRequestWrite>
 80019a8:	4603      	mov	r3, r0
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d001      	beq.n	80019b2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80019ae:	2301      	movs	r3, #1
 80019b0:	e08d      	b.n	8001ace <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80019b2:	2300      	movs	r3, #0
 80019b4:	613b      	str	r3, [r7, #16]
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	695b      	ldr	r3, [r3, #20]
 80019bc:	613b      	str	r3, [r7, #16]
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	699b      	ldr	r3, [r3, #24]
 80019c4:	613b      	str	r3, [r7, #16]
 80019c6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80019c8:	e066      	b.n	8001a98 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80019ca:	697a      	ldr	r2, [r7, #20]
 80019cc:	6a39      	ldr	r1, [r7, #32]
 80019ce:	68f8      	ldr	r0, [r7, #12]
 80019d0:	f000 fcd2 	bl	8002378 <I2C_WaitOnTXEFlagUntilTimeout>
 80019d4:	4603      	mov	r3, r0
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d00d      	beq.n	80019f6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019de:	2b04      	cmp	r3, #4
 80019e0:	d107      	bne.n	80019f2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	681a      	ldr	r2, [r3, #0]
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80019f0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80019f2:	2301      	movs	r3, #1
 80019f4:	e06b      	b.n	8001ace <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019fa:	781a      	ldrb	r2, [r3, #0]
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a06:	1c5a      	adds	r2, r3, #1
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a10:	b29b      	uxth	r3, r3
 8001a12:	3b01      	subs	r3, #1
 8001a14:	b29a      	uxth	r2, r3
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a1e:	3b01      	subs	r3, #1
 8001a20:	b29a      	uxth	r2, r3
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	695b      	ldr	r3, [r3, #20]
 8001a2c:	f003 0304 	and.w	r3, r3, #4
 8001a30:	2b04      	cmp	r3, #4
 8001a32:	d11b      	bne.n	8001a6c <HAL_I2C_Master_Transmit+0x188>
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d017      	beq.n	8001a6c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a40:	781a      	ldrb	r2, [r3, #0]
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a4c:	1c5a      	adds	r2, r3, #1
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a56:	b29b      	uxth	r3, r3
 8001a58:	3b01      	subs	r3, #1
 8001a5a:	b29a      	uxth	r2, r3
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a64:	3b01      	subs	r3, #1
 8001a66:	b29a      	uxth	r2, r3
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001a6c:	697a      	ldr	r2, [r7, #20]
 8001a6e:	6a39      	ldr	r1, [r7, #32]
 8001a70:	68f8      	ldr	r0, [r7, #12]
 8001a72:	f000 fcc2 	bl	80023fa <I2C_WaitOnBTFFlagUntilTimeout>
 8001a76:	4603      	mov	r3, r0
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d00d      	beq.n	8001a98 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a80:	2b04      	cmp	r3, #4
 8001a82:	d107      	bne.n	8001a94 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	681a      	ldr	r2, [r3, #0]
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001a92:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001a94:	2301      	movs	r3, #1
 8001a96:	e01a      	b.n	8001ace <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d194      	bne.n	80019ca <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	681a      	ldr	r2, [r3, #0]
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001aae:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	2220      	movs	r2, #32
 8001ab4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	2200      	movs	r2, #0
 8001abc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001ac8:	2300      	movs	r3, #0
 8001aca:	e000      	b.n	8001ace <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001acc:	2302      	movs	r3, #2
  }
}
 8001ace:	4618      	mov	r0, r3
 8001ad0:	3718      	adds	r7, #24
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	bd80      	pop	{r7, pc}
 8001ad6:	bf00      	nop
 8001ad8:	00100002 	.word	0x00100002
 8001adc:	ffff0000 	.word	0xffff0000

08001ae0 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b08c      	sub	sp, #48	; 0x30
 8001ae4:	af02      	add	r7, sp, #8
 8001ae6:	60f8      	str	r0, [r7, #12]
 8001ae8:	607a      	str	r2, [r7, #4]
 8001aea:	461a      	mov	r2, r3
 8001aec:	460b      	mov	r3, r1
 8001aee:	817b      	strh	r3, [r7, #10]
 8001af0:	4613      	mov	r3, r2
 8001af2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001af4:	f7ff fad6 	bl	80010a4 <HAL_GetTick>
 8001af8:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b00:	b2db      	uxtb	r3, r3
 8001b02:	2b20      	cmp	r3, #32
 8001b04:	f040 820b 	bne.w	8001f1e <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001b08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b0a:	9300      	str	r3, [sp, #0]
 8001b0c:	2319      	movs	r3, #25
 8001b0e:	2201      	movs	r2, #1
 8001b10:	497c      	ldr	r1, [pc, #496]	; (8001d04 <HAL_I2C_Master_Receive+0x224>)
 8001b12:	68f8      	ldr	r0, [r7, #12]
 8001b14:	f000 fb5a 	bl	80021cc <I2C_WaitOnFlagUntilTimeout>
 8001b18:	4603      	mov	r3, r0
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d001      	beq.n	8001b22 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8001b1e:	2302      	movs	r3, #2
 8001b20:	e1fe      	b.n	8001f20 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001b28:	2b01      	cmp	r3, #1
 8001b2a:	d101      	bne.n	8001b30 <HAL_I2C_Master_Receive+0x50>
 8001b2c:	2302      	movs	r3, #2
 8001b2e:	e1f7      	b.n	8001f20 <HAL_I2C_Master_Receive+0x440>
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	2201      	movs	r2, #1
 8001b34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f003 0301 	and.w	r3, r3, #1
 8001b42:	2b01      	cmp	r3, #1
 8001b44:	d007      	beq.n	8001b56 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	681a      	ldr	r2, [r3, #0]
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f042 0201 	orr.w	r2, r2, #1
 8001b54:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	681a      	ldr	r2, [r3, #0]
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001b64:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	2222      	movs	r2, #34	; 0x22
 8001b6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	2210      	movs	r2, #16
 8001b72:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	2200      	movs	r2, #0
 8001b7a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	687a      	ldr	r2, [r7, #4]
 8001b80:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	893a      	ldrh	r2, [r7, #8]
 8001b86:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b8c:	b29a      	uxth	r2, r3
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	4a5c      	ldr	r2, [pc, #368]	; (8001d08 <HAL_I2C_Master_Receive+0x228>)
 8001b96:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001b98:	8979      	ldrh	r1, [r7, #10]
 8001b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b9c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001b9e:	68f8      	ldr	r0, [r7, #12]
 8001ba0:	f000 fa46 	bl	8002030 <I2C_MasterRequestRead>
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d001      	beq.n	8001bae <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8001baa:	2301      	movs	r3, #1
 8001bac:	e1b8      	b.n	8001f20 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d113      	bne.n	8001bde <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	623b      	str	r3, [r7, #32]
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	695b      	ldr	r3, [r3, #20]
 8001bc0:	623b      	str	r3, [r7, #32]
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	699b      	ldr	r3, [r3, #24]
 8001bc8:	623b      	str	r3, [r7, #32]
 8001bca:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	681a      	ldr	r2, [r3, #0]
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001bda:	601a      	str	r2, [r3, #0]
 8001bdc:	e18c      	b.n	8001ef8 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001be2:	2b01      	cmp	r3, #1
 8001be4:	d11b      	bne.n	8001c1e <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	681a      	ldr	r2, [r3, #0]
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001bf4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	61fb      	str	r3, [r7, #28]
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	695b      	ldr	r3, [r3, #20]
 8001c00:	61fb      	str	r3, [r7, #28]
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	699b      	ldr	r3, [r3, #24]
 8001c08:	61fb      	str	r3, [r7, #28]
 8001c0a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	681a      	ldr	r2, [r3, #0]
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001c1a:	601a      	str	r2, [r3, #0]
 8001c1c:	e16c      	b.n	8001ef8 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c22:	2b02      	cmp	r3, #2
 8001c24:	d11b      	bne.n	8001c5e <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	681a      	ldr	r2, [r3, #0]
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001c34:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	681a      	ldr	r2, [r3, #0]
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001c44:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001c46:	2300      	movs	r3, #0
 8001c48:	61bb      	str	r3, [r7, #24]
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	695b      	ldr	r3, [r3, #20]
 8001c50:	61bb      	str	r3, [r7, #24]
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	699b      	ldr	r3, [r3, #24]
 8001c58:	61bb      	str	r3, [r7, #24]
 8001c5a:	69bb      	ldr	r3, [r7, #24]
 8001c5c:	e14c      	b.n	8001ef8 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	681a      	ldr	r2, [r3, #0]
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001c6c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001c6e:	2300      	movs	r3, #0
 8001c70:	617b      	str	r3, [r7, #20]
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	695b      	ldr	r3, [r3, #20]
 8001c78:	617b      	str	r3, [r7, #20]
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	699b      	ldr	r3, [r3, #24]
 8001c80:	617b      	str	r3, [r7, #20]
 8001c82:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8001c84:	e138      	b.n	8001ef8 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c8a:	2b03      	cmp	r3, #3
 8001c8c:	f200 80f1 	bhi.w	8001e72 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c94:	2b01      	cmp	r3, #1
 8001c96:	d123      	bne.n	8001ce0 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001c98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c9a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001c9c:	68f8      	ldr	r0, [r7, #12]
 8001c9e:	f000 fbed 	bl	800247c <I2C_WaitOnRXNEFlagUntilTimeout>
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d001      	beq.n	8001cac <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8001ca8:	2301      	movs	r3, #1
 8001caa:	e139      	b.n	8001f20 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	691a      	ldr	r2, [r3, #16]
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cb6:	b2d2      	uxtb	r2, r2
 8001cb8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cbe:	1c5a      	adds	r2, r3, #1
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001cc8:	3b01      	subs	r3, #1
 8001cca:	b29a      	uxth	r2, r3
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001cd4:	b29b      	uxth	r3, r3
 8001cd6:	3b01      	subs	r3, #1
 8001cd8:	b29a      	uxth	r2, r3
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001cde:	e10b      	b.n	8001ef8 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ce4:	2b02      	cmp	r3, #2
 8001ce6:	d14e      	bne.n	8001d86 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001ce8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cea:	9300      	str	r3, [sp, #0]
 8001cec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001cee:	2200      	movs	r2, #0
 8001cf0:	4906      	ldr	r1, [pc, #24]	; (8001d0c <HAL_I2C_Master_Receive+0x22c>)
 8001cf2:	68f8      	ldr	r0, [r7, #12]
 8001cf4:	f000 fa6a 	bl	80021cc <I2C_WaitOnFlagUntilTimeout>
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d008      	beq.n	8001d10 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8001cfe:	2301      	movs	r3, #1
 8001d00:	e10e      	b.n	8001f20 <HAL_I2C_Master_Receive+0x440>
 8001d02:	bf00      	nop
 8001d04:	00100002 	.word	0x00100002
 8001d08:	ffff0000 	.word	0xffff0000
 8001d0c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	681a      	ldr	r2, [r3, #0]
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001d1e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	691a      	ldr	r2, [r3, #16]
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d2a:	b2d2      	uxtb	r2, r2
 8001d2c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d32:	1c5a      	adds	r2, r3, #1
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d3c:	3b01      	subs	r3, #1
 8001d3e:	b29a      	uxth	r2, r3
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d48:	b29b      	uxth	r3, r3
 8001d4a:	3b01      	subs	r3, #1
 8001d4c:	b29a      	uxth	r2, r3
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	691a      	ldr	r2, [r3, #16]
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d5c:	b2d2      	uxtb	r2, r2
 8001d5e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d64:	1c5a      	adds	r2, r3, #1
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d6e:	3b01      	subs	r3, #1
 8001d70:	b29a      	uxth	r2, r3
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d7a:	b29b      	uxth	r3, r3
 8001d7c:	3b01      	subs	r3, #1
 8001d7e:	b29a      	uxth	r2, r3
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001d84:	e0b8      	b.n	8001ef8 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001d86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d88:	9300      	str	r3, [sp, #0]
 8001d8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	4966      	ldr	r1, [pc, #408]	; (8001f28 <HAL_I2C_Master_Receive+0x448>)
 8001d90:	68f8      	ldr	r0, [r7, #12]
 8001d92:	f000 fa1b 	bl	80021cc <I2C_WaitOnFlagUntilTimeout>
 8001d96:	4603      	mov	r3, r0
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d001      	beq.n	8001da0 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8001d9c:	2301      	movs	r3, #1
 8001d9e:	e0bf      	b.n	8001f20 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	681a      	ldr	r2, [r3, #0]
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001dae:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	691a      	ldr	r2, [r3, #16]
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dba:	b2d2      	uxtb	r2, r2
 8001dbc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dc2:	1c5a      	adds	r2, r3, #1
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001dcc:	3b01      	subs	r3, #1
 8001dce:	b29a      	uxth	r2, r3
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001dd8:	b29b      	uxth	r3, r3
 8001dda:	3b01      	subs	r3, #1
 8001ddc:	b29a      	uxth	r2, r3
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001de2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001de4:	9300      	str	r3, [sp, #0]
 8001de6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001de8:	2200      	movs	r2, #0
 8001dea:	494f      	ldr	r1, [pc, #316]	; (8001f28 <HAL_I2C_Master_Receive+0x448>)
 8001dec:	68f8      	ldr	r0, [r7, #12]
 8001dee:	f000 f9ed 	bl	80021cc <I2C_WaitOnFlagUntilTimeout>
 8001df2:	4603      	mov	r3, r0
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d001      	beq.n	8001dfc <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8001df8:	2301      	movs	r3, #1
 8001dfa:	e091      	b.n	8001f20 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	681a      	ldr	r2, [r3, #0]
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001e0a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	691a      	ldr	r2, [r3, #16]
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e16:	b2d2      	uxtb	r2, r2
 8001e18:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e1e:	1c5a      	adds	r2, r3, #1
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e28:	3b01      	subs	r3, #1
 8001e2a:	b29a      	uxth	r2, r3
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e34:	b29b      	uxth	r3, r3
 8001e36:	3b01      	subs	r3, #1
 8001e38:	b29a      	uxth	r2, r3
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	691a      	ldr	r2, [r3, #16]
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e48:	b2d2      	uxtb	r2, r2
 8001e4a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e50:	1c5a      	adds	r2, r3, #1
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e5a:	3b01      	subs	r3, #1
 8001e5c:	b29a      	uxth	r2, r3
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e66:	b29b      	uxth	r3, r3
 8001e68:	3b01      	subs	r3, #1
 8001e6a:	b29a      	uxth	r2, r3
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001e70:	e042      	b.n	8001ef8 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001e72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e74:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001e76:	68f8      	ldr	r0, [r7, #12]
 8001e78:	f000 fb00 	bl	800247c <I2C_WaitOnRXNEFlagUntilTimeout>
 8001e7c:	4603      	mov	r3, r0
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d001      	beq.n	8001e86 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8001e82:	2301      	movs	r3, #1
 8001e84:	e04c      	b.n	8001f20 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	691a      	ldr	r2, [r3, #16]
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e90:	b2d2      	uxtb	r2, r2
 8001e92:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e98:	1c5a      	adds	r2, r3, #1
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ea2:	3b01      	subs	r3, #1
 8001ea4:	b29a      	uxth	r2, r3
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001eae:	b29b      	uxth	r3, r3
 8001eb0:	3b01      	subs	r3, #1
 8001eb2:	b29a      	uxth	r2, r3
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	695b      	ldr	r3, [r3, #20]
 8001ebe:	f003 0304 	and.w	r3, r3, #4
 8001ec2:	2b04      	cmp	r3, #4
 8001ec4:	d118      	bne.n	8001ef8 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	691a      	ldr	r2, [r3, #16]
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ed0:	b2d2      	uxtb	r2, r2
 8001ed2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ed8:	1c5a      	adds	r2, r3, #1
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ee2:	3b01      	subs	r3, #1
 8001ee4:	b29a      	uxth	r2, r3
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001eee:	b29b      	uxth	r3, r3
 8001ef0:	3b01      	subs	r3, #1
 8001ef2:	b29a      	uxth	r2, r3
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	f47f aec2 	bne.w	8001c86 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	2220      	movs	r2, #32
 8001f06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	2200      	movs	r2, #0
 8001f16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	e000      	b.n	8001f20 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8001f1e:	2302      	movs	r3, #2
  }
}
 8001f20:	4618      	mov	r0, r3
 8001f22:	3728      	adds	r7, #40	; 0x28
 8001f24:	46bd      	mov	sp, r7
 8001f26:	bd80      	pop	{r7, pc}
 8001f28:	00010004 	.word	0x00010004

08001f2c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b088      	sub	sp, #32
 8001f30:	af02      	add	r7, sp, #8
 8001f32:	60f8      	str	r0, [r7, #12]
 8001f34:	607a      	str	r2, [r7, #4]
 8001f36:	603b      	str	r3, [r7, #0]
 8001f38:	460b      	mov	r3, r1
 8001f3a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f40:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001f42:	697b      	ldr	r3, [r7, #20]
 8001f44:	2b08      	cmp	r3, #8
 8001f46:	d006      	beq.n	8001f56 <I2C_MasterRequestWrite+0x2a>
 8001f48:	697b      	ldr	r3, [r7, #20]
 8001f4a:	2b01      	cmp	r3, #1
 8001f4c:	d003      	beq.n	8001f56 <I2C_MasterRequestWrite+0x2a>
 8001f4e:	697b      	ldr	r3, [r7, #20]
 8001f50:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001f54:	d108      	bne.n	8001f68 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	681a      	ldr	r2, [r3, #0]
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001f64:	601a      	str	r2, [r3, #0]
 8001f66:	e00b      	b.n	8001f80 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f6c:	2b12      	cmp	r3, #18
 8001f6e:	d107      	bne.n	8001f80 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	681a      	ldr	r2, [r3, #0]
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001f7e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001f80:	683b      	ldr	r3, [r7, #0]
 8001f82:	9300      	str	r3, [sp, #0]
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	2200      	movs	r2, #0
 8001f88:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001f8c:	68f8      	ldr	r0, [r7, #12]
 8001f8e:	f000 f91d 	bl	80021cc <I2C_WaitOnFlagUntilTimeout>
 8001f92:	4603      	mov	r3, r0
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d00d      	beq.n	8001fb4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fa2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001fa6:	d103      	bne.n	8001fb0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001fae:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001fb0:	2303      	movs	r3, #3
 8001fb2:	e035      	b.n	8002020 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	691b      	ldr	r3, [r3, #16]
 8001fb8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001fbc:	d108      	bne.n	8001fd0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001fbe:	897b      	ldrh	r3, [r7, #10]
 8001fc0:	b2db      	uxtb	r3, r3
 8001fc2:	461a      	mov	r2, r3
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001fcc:	611a      	str	r2, [r3, #16]
 8001fce:	e01b      	b.n	8002008 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001fd0:	897b      	ldrh	r3, [r7, #10]
 8001fd2:	11db      	asrs	r3, r3, #7
 8001fd4:	b2db      	uxtb	r3, r3
 8001fd6:	f003 0306 	and.w	r3, r3, #6
 8001fda:	b2db      	uxtb	r3, r3
 8001fdc:	f063 030f 	orn	r3, r3, #15
 8001fe0:	b2da      	uxtb	r2, r3
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	687a      	ldr	r2, [r7, #4]
 8001fec:	490e      	ldr	r1, [pc, #56]	; (8002028 <I2C_MasterRequestWrite+0xfc>)
 8001fee:	68f8      	ldr	r0, [r7, #12]
 8001ff0:	f000 f943 	bl	800227a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001ff4:	4603      	mov	r3, r0
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d001      	beq.n	8001ffe <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8001ffa:	2301      	movs	r3, #1
 8001ffc:	e010      	b.n	8002020 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001ffe:	897b      	ldrh	r3, [r7, #10]
 8002000:	b2da      	uxtb	r2, r3
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	687a      	ldr	r2, [r7, #4]
 800200c:	4907      	ldr	r1, [pc, #28]	; (800202c <I2C_MasterRequestWrite+0x100>)
 800200e:	68f8      	ldr	r0, [r7, #12]
 8002010:	f000 f933 	bl	800227a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002014:	4603      	mov	r3, r0
 8002016:	2b00      	cmp	r3, #0
 8002018:	d001      	beq.n	800201e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800201a:	2301      	movs	r3, #1
 800201c:	e000      	b.n	8002020 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800201e:	2300      	movs	r3, #0
}
 8002020:	4618      	mov	r0, r3
 8002022:	3718      	adds	r7, #24
 8002024:	46bd      	mov	sp, r7
 8002026:	bd80      	pop	{r7, pc}
 8002028:	00010008 	.word	0x00010008
 800202c:	00010002 	.word	0x00010002

08002030 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	b088      	sub	sp, #32
 8002034:	af02      	add	r7, sp, #8
 8002036:	60f8      	str	r0, [r7, #12]
 8002038:	607a      	str	r2, [r7, #4]
 800203a:	603b      	str	r3, [r7, #0]
 800203c:	460b      	mov	r3, r1
 800203e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002044:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	681a      	ldr	r2, [r3, #0]
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002054:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002056:	697b      	ldr	r3, [r7, #20]
 8002058:	2b08      	cmp	r3, #8
 800205a:	d006      	beq.n	800206a <I2C_MasterRequestRead+0x3a>
 800205c:	697b      	ldr	r3, [r7, #20]
 800205e:	2b01      	cmp	r3, #1
 8002060:	d003      	beq.n	800206a <I2C_MasterRequestRead+0x3a>
 8002062:	697b      	ldr	r3, [r7, #20]
 8002064:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002068:	d108      	bne.n	800207c <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	681a      	ldr	r2, [r3, #0]
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002078:	601a      	str	r2, [r3, #0]
 800207a:	e00b      	b.n	8002094 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002080:	2b11      	cmp	r3, #17
 8002082:	d107      	bne.n	8002094 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	681a      	ldr	r2, [r3, #0]
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002092:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002094:	683b      	ldr	r3, [r7, #0]
 8002096:	9300      	str	r3, [sp, #0]
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	2200      	movs	r2, #0
 800209c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80020a0:	68f8      	ldr	r0, [r7, #12]
 80020a2:	f000 f893 	bl	80021cc <I2C_WaitOnFlagUntilTimeout>
 80020a6:	4603      	mov	r3, r0
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d00d      	beq.n	80020c8 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80020ba:	d103      	bne.n	80020c4 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	f44f 7200 	mov.w	r2, #512	; 0x200
 80020c2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80020c4:	2303      	movs	r3, #3
 80020c6:	e079      	b.n	80021bc <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	691b      	ldr	r3, [r3, #16]
 80020cc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80020d0:	d108      	bne.n	80020e4 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80020d2:	897b      	ldrh	r3, [r7, #10]
 80020d4:	b2db      	uxtb	r3, r3
 80020d6:	f043 0301 	orr.w	r3, r3, #1
 80020da:	b2da      	uxtb	r2, r3
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	611a      	str	r2, [r3, #16]
 80020e2:	e05f      	b.n	80021a4 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80020e4:	897b      	ldrh	r3, [r7, #10]
 80020e6:	11db      	asrs	r3, r3, #7
 80020e8:	b2db      	uxtb	r3, r3
 80020ea:	f003 0306 	and.w	r3, r3, #6
 80020ee:	b2db      	uxtb	r3, r3
 80020f0:	f063 030f 	orn	r3, r3, #15
 80020f4:	b2da      	uxtb	r2, r3
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	687a      	ldr	r2, [r7, #4]
 8002100:	4930      	ldr	r1, [pc, #192]	; (80021c4 <I2C_MasterRequestRead+0x194>)
 8002102:	68f8      	ldr	r0, [r7, #12]
 8002104:	f000 f8b9 	bl	800227a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002108:	4603      	mov	r3, r0
 800210a:	2b00      	cmp	r3, #0
 800210c:	d001      	beq.n	8002112 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800210e:	2301      	movs	r3, #1
 8002110:	e054      	b.n	80021bc <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002112:	897b      	ldrh	r3, [r7, #10]
 8002114:	b2da      	uxtb	r2, r3
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	687a      	ldr	r2, [r7, #4]
 8002120:	4929      	ldr	r1, [pc, #164]	; (80021c8 <I2C_MasterRequestRead+0x198>)
 8002122:	68f8      	ldr	r0, [r7, #12]
 8002124:	f000 f8a9 	bl	800227a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002128:	4603      	mov	r3, r0
 800212a:	2b00      	cmp	r3, #0
 800212c:	d001      	beq.n	8002132 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800212e:	2301      	movs	r3, #1
 8002130:	e044      	b.n	80021bc <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002132:	2300      	movs	r3, #0
 8002134:	613b      	str	r3, [r7, #16]
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	695b      	ldr	r3, [r3, #20]
 800213c:	613b      	str	r3, [r7, #16]
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	699b      	ldr	r3, [r3, #24]
 8002144:	613b      	str	r3, [r7, #16]
 8002146:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	681a      	ldr	r2, [r3, #0]
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002156:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	9300      	str	r3, [sp, #0]
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	2200      	movs	r2, #0
 8002160:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002164:	68f8      	ldr	r0, [r7, #12]
 8002166:	f000 f831 	bl	80021cc <I2C_WaitOnFlagUntilTimeout>
 800216a:	4603      	mov	r3, r0
 800216c:	2b00      	cmp	r3, #0
 800216e:	d00d      	beq.n	800218c <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800217a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800217e:	d103      	bne.n	8002188 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002186:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8002188:	2303      	movs	r3, #3
 800218a:	e017      	b.n	80021bc <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 800218c:	897b      	ldrh	r3, [r7, #10]
 800218e:	11db      	asrs	r3, r3, #7
 8002190:	b2db      	uxtb	r3, r3
 8002192:	f003 0306 	and.w	r3, r3, #6
 8002196:	b2db      	uxtb	r3, r3
 8002198:	f063 030e 	orn	r3, r3, #14
 800219c:	b2da      	uxtb	r2, r3
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80021a4:	683b      	ldr	r3, [r7, #0]
 80021a6:	687a      	ldr	r2, [r7, #4]
 80021a8:	4907      	ldr	r1, [pc, #28]	; (80021c8 <I2C_MasterRequestRead+0x198>)
 80021aa:	68f8      	ldr	r0, [r7, #12]
 80021ac:	f000 f865 	bl	800227a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80021b0:	4603      	mov	r3, r0
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d001      	beq.n	80021ba <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80021b6:	2301      	movs	r3, #1
 80021b8:	e000      	b.n	80021bc <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80021ba:	2300      	movs	r3, #0
}
 80021bc:	4618      	mov	r0, r3
 80021be:	3718      	adds	r7, #24
 80021c0:	46bd      	mov	sp, r7
 80021c2:	bd80      	pop	{r7, pc}
 80021c4:	00010008 	.word	0x00010008
 80021c8:	00010002 	.word	0x00010002

080021cc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b084      	sub	sp, #16
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	60f8      	str	r0, [r7, #12]
 80021d4:	60b9      	str	r1, [r7, #8]
 80021d6:	603b      	str	r3, [r7, #0]
 80021d8:	4613      	mov	r3, r2
 80021da:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80021dc:	e025      	b.n	800222a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80021de:	683b      	ldr	r3, [r7, #0]
 80021e0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80021e4:	d021      	beq.n	800222a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80021e6:	f7fe ff5d 	bl	80010a4 <HAL_GetTick>
 80021ea:	4602      	mov	r2, r0
 80021ec:	69bb      	ldr	r3, [r7, #24]
 80021ee:	1ad3      	subs	r3, r2, r3
 80021f0:	683a      	ldr	r2, [r7, #0]
 80021f2:	429a      	cmp	r2, r3
 80021f4:	d302      	bcc.n	80021fc <I2C_WaitOnFlagUntilTimeout+0x30>
 80021f6:	683b      	ldr	r3, [r7, #0]
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d116      	bne.n	800222a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	2200      	movs	r2, #0
 8002200:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	2220      	movs	r2, #32
 8002206:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	2200      	movs	r2, #0
 800220e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002216:	f043 0220 	orr.w	r2, r3, #32
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	2200      	movs	r2, #0
 8002222:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002226:	2301      	movs	r3, #1
 8002228:	e023      	b.n	8002272 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800222a:	68bb      	ldr	r3, [r7, #8]
 800222c:	0c1b      	lsrs	r3, r3, #16
 800222e:	b2db      	uxtb	r3, r3
 8002230:	2b01      	cmp	r3, #1
 8002232:	d10d      	bne.n	8002250 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	695b      	ldr	r3, [r3, #20]
 800223a:	43da      	mvns	r2, r3
 800223c:	68bb      	ldr	r3, [r7, #8]
 800223e:	4013      	ands	r3, r2
 8002240:	b29b      	uxth	r3, r3
 8002242:	2b00      	cmp	r3, #0
 8002244:	bf0c      	ite	eq
 8002246:	2301      	moveq	r3, #1
 8002248:	2300      	movne	r3, #0
 800224a:	b2db      	uxtb	r3, r3
 800224c:	461a      	mov	r2, r3
 800224e:	e00c      	b.n	800226a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	699b      	ldr	r3, [r3, #24]
 8002256:	43da      	mvns	r2, r3
 8002258:	68bb      	ldr	r3, [r7, #8]
 800225a:	4013      	ands	r3, r2
 800225c:	b29b      	uxth	r3, r3
 800225e:	2b00      	cmp	r3, #0
 8002260:	bf0c      	ite	eq
 8002262:	2301      	moveq	r3, #1
 8002264:	2300      	movne	r3, #0
 8002266:	b2db      	uxtb	r3, r3
 8002268:	461a      	mov	r2, r3
 800226a:	79fb      	ldrb	r3, [r7, #7]
 800226c:	429a      	cmp	r2, r3
 800226e:	d0b6      	beq.n	80021de <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002270:	2300      	movs	r3, #0
}
 8002272:	4618      	mov	r0, r3
 8002274:	3710      	adds	r7, #16
 8002276:	46bd      	mov	sp, r7
 8002278:	bd80      	pop	{r7, pc}

0800227a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800227a:	b580      	push	{r7, lr}
 800227c:	b084      	sub	sp, #16
 800227e:	af00      	add	r7, sp, #0
 8002280:	60f8      	str	r0, [r7, #12]
 8002282:	60b9      	str	r1, [r7, #8]
 8002284:	607a      	str	r2, [r7, #4]
 8002286:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002288:	e051      	b.n	800232e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	695b      	ldr	r3, [r3, #20]
 8002290:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002294:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002298:	d123      	bne.n	80022e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	681a      	ldr	r2, [r3, #0]
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80022a8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80022b2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	2200      	movs	r2, #0
 80022b8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	2220      	movs	r2, #32
 80022be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	2200      	movs	r2, #0
 80022c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ce:	f043 0204 	orr.w	r2, r3, #4
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	2200      	movs	r2, #0
 80022da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80022de:	2301      	movs	r3, #1
 80022e0:	e046      	b.n	8002370 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80022e8:	d021      	beq.n	800232e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80022ea:	f7fe fedb 	bl	80010a4 <HAL_GetTick>
 80022ee:	4602      	mov	r2, r0
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	1ad3      	subs	r3, r2, r3
 80022f4:	687a      	ldr	r2, [r7, #4]
 80022f6:	429a      	cmp	r2, r3
 80022f8:	d302      	bcc.n	8002300 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d116      	bne.n	800232e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	2200      	movs	r2, #0
 8002304:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	2220      	movs	r2, #32
 800230a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	2200      	movs	r2, #0
 8002312:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800231a:	f043 0220 	orr.w	r2, r3, #32
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	2200      	movs	r2, #0
 8002326:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800232a:	2301      	movs	r3, #1
 800232c:	e020      	b.n	8002370 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800232e:	68bb      	ldr	r3, [r7, #8]
 8002330:	0c1b      	lsrs	r3, r3, #16
 8002332:	b2db      	uxtb	r3, r3
 8002334:	2b01      	cmp	r3, #1
 8002336:	d10c      	bne.n	8002352 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	695b      	ldr	r3, [r3, #20]
 800233e:	43da      	mvns	r2, r3
 8002340:	68bb      	ldr	r3, [r7, #8]
 8002342:	4013      	ands	r3, r2
 8002344:	b29b      	uxth	r3, r3
 8002346:	2b00      	cmp	r3, #0
 8002348:	bf14      	ite	ne
 800234a:	2301      	movne	r3, #1
 800234c:	2300      	moveq	r3, #0
 800234e:	b2db      	uxtb	r3, r3
 8002350:	e00b      	b.n	800236a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	699b      	ldr	r3, [r3, #24]
 8002358:	43da      	mvns	r2, r3
 800235a:	68bb      	ldr	r3, [r7, #8]
 800235c:	4013      	ands	r3, r2
 800235e:	b29b      	uxth	r3, r3
 8002360:	2b00      	cmp	r3, #0
 8002362:	bf14      	ite	ne
 8002364:	2301      	movne	r3, #1
 8002366:	2300      	moveq	r3, #0
 8002368:	b2db      	uxtb	r3, r3
 800236a:	2b00      	cmp	r3, #0
 800236c:	d18d      	bne.n	800228a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800236e:	2300      	movs	r3, #0
}
 8002370:	4618      	mov	r0, r3
 8002372:	3710      	adds	r7, #16
 8002374:	46bd      	mov	sp, r7
 8002376:	bd80      	pop	{r7, pc}

08002378 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	b084      	sub	sp, #16
 800237c:	af00      	add	r7, sp, #0
 800237e:	60f8      	str	r0, [r7, #12]
 8002380:	60b9      	str	r1, [r7, #8]
 8002382:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002384:	e02d      	b.n	80023e2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002386:	68f8      	ldr	r0, [r7, #12]
 8002388:	f000 f8ce 	bl	8002528 <I2C_IsAcknowledgeFailed>
 800238c:	4603      	mov	r3, r0
 800238e:	2b00      	cmp	r3, #0
 8002390:	d001      	beq.n	8002396 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002392:	2301      	movs	r3, #1
 8002394:	e02d      	b.n	80023f2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002396:	68bb      	ldr	r3, [r7, #8]
 8002398:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800239c:	d021      	beq.n	80023e2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800239e:	f7fe fe81 	bl	80010a4 <HAL_GetTick>
 80023a2:	4602      	mov	r2, r0
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	1ad3      	subs	r3, r2, r3
 80023a8:	68ba      	ldr	r2, [r7, #8]
 80023aa:	429a      	cmp	r2, r3
 80023ac:	d302      	bcc.n	80023b4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80023ae:	68bb      	ldr	r3, [r7, #8]
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d116      	bne.n	80023e2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	2200      	movs	r2, #0
 80023b8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	2220      	movs	r2, #32
 80023be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	2200      	movs	r2, #0
 80023c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ce:	f043 0220 	orr.w	r2, r3, #32
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	2200      	movs	r2, #0
 80023da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80023de:	2301      	movs	r3, #1
 80023e0:	e007      	b.n	80023f2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	695b      	ldr	r3, [r3, #20]
 80023e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023ec:	2b80      	cmp	r3, #128	; 0x80
 80023ee:	d1ca      	bne.n	8002386 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80023f0:	2300      	movs	r3, #0
}
 80023f2:	4618      	mov	r0, r3
 80023f4:	3710      	adds	r7, #16
 80023f6:	46bd      	mov	sp, r7
 80023f8:	bd80      	pop	{r7, pc}

080023fa <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80023fa:	b580      	push	{r7, lr}
 80023fc:	b084      	sub	sp, #16
 80023fe:	af00      	add	r7, sp, #0
 8002400:	60f8      	str	r0, [r7, #12]
 8002402:	60b9      	str	r1, [r7, #8]
 8002404:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002406:	e02d      	b.n	8002464 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002408:	68f8      	ldr	r0, [r7, #12]
 800240a:	f000 f88d 	bl	8002528 <I2C_IsAcknowledgeFailed>
 800240e:	4603      	mov	r3, r0
 8002410:	2b00      	cmp	r3, #0
 8002412:	d001      	beq.n	8002418 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002414:	2301      	movs	r3, #1
 8002416:	e02d      	b.n	8002474 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002418:	68bb      	ldr	r3, [r7, #8]
 800241a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800241e:	d021      	beq.n	8002464 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002420:	f7fe fe40 	bl	80010a4 <HAL_GetTick>
 8002424:	4602      	mov	r2, r0
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	1ad3      	subs	r3, r2, r3
 800242a:	68ba      	ldr	r2, [r7, #8]
 800242c:	429a      	cmp	r2, r3
 800242e:	d302      	bcc.n	8002436 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002430:	68bb      	ldr	r3, [r7, #8]
 8002432:	2b00      	cmp	r3, #0
 8002434:	d116      	bne.n	8002464 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	2200      	movs	r2, #0
 800243a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	2220      	movs	r2, #32
 8002440:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	2200      	movs	r2, #0
 8002448:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002450:	f043 0220 	orr.w	r2, r3, #32
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	2200      	movs	r2, #0
 800245c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002460:	2301      	movs	r3, #1
 8002462:	e007      	b.n	8002474 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	695b      	ldr	r3, [r3, #20]
 800246a:	f003 0304 	and.w	r3, r3, #4
 800246e:	2b04      	cmp	r3, #4
 8002470:	d1ca      	bne.n	8002408 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002472:	2300      	movs	r3, #0
}
 8002474:	4618      	mov	r0, r3
 8002476:	3710      	adds	r7, #16
 8002478:	46bd      	mov	sp, r7
 800247a:	bd80      	pop	{r7, pc}

0800247c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	b084      	sub	sp, #16
 8002480:	af00      	add	r7, sp, #0
 8002482:	60f8      	str	r0, [r7, #12]
 8002484:	60b9      	str	r1, [r7, #8]
 8002486:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002488:	e042      	b.n	8002510 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	695b      	ldr	r3, [r3, #20]
 8002490:	f003 0310 	and.w	r3, r3, #16
 8002494:	2b10      	cmp	r3, #16
 8002496:	d119      	bne.n	80024cc <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f06f 0210 	mvn.w	r2, #16
 80024a0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	2200      	movs	r2, #0
 80024a6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	2220      	movs	r2, #32
 80024ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	2200      	movs	r2, #0
 80024b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	2200      	movs	r2, #0
 80024c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80024c8:	2301      	movs	r3, #1
 80024ca:	e029      	b.n	8002520 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80024cc:	f7fe fdea 	bl	80010a4 <HAL_GetTick>
 80024d0:	4602      	mov	r2, r0
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	1ad3      	subs	r3, r2, r3
 80024d6:	68ba      	ldr	r2, [r7, #8]
 80024d8:	429a      	cmp	r2, r3
 80024da:	d302      	bcc.n	80024e2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80024dc:	68bb      	ldr	r3, [r7, #8]
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d116      	bne.n	8002510 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	2200      	movs	r2, #0
 80024e6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	2220      	movs	r2, #32
 80024ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	2200      	movs	r2, #0
 80024f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024fc:	f043 0220 	orr.w	r2, r3, #32
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	2200      	movs	r2, #0
 8002508:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800250c:	2301      	movs	r3, #1
 800250e:	e007      	b.n	8002520 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	695b      	ldr	r3, [r3, #20]
 8002516:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800251a:	2b40      	cmp	r3, #64	; 0x40
 800251c:	d1b5      	bne.n	800248a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800251e:	2300      	movs	r3, #0
}
 8002520:	4618      	mov	r0, r3
 8002522:	3710      	adds	r7, #16
 8002524:	46bd      	mov	sp, r7
 8002526:	bd80      	pop	{r7, pc}

08002528 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002528:	b480      	push	{r7}
 800252a:	b083      	sub	sp, #12
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	695b      	ldr	r3, [r3, #20]
 8002536:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800253a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800253e:	d11b      	bne.n	8002578 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002548:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	2200      	movs	r2, #0
 800254e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	2220      	movs	r2, #32
 8002554:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	2200      	movs	r2, #0
 800255c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002564:	f043 0204 	orr.w	r2, r3, #4
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	2200      	movs	r2, #0
 8002570:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002574:	2301      	movs	r3, #1
 8002576:	e000      	b.n	800257a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002578:	2300      	movs	r3, #0
}
 800257a:	4618      	mov	r0, r3
 800257c:	370c      	adds	r7, #12
 800257e:	46bd      	mov	sp, r7
 8002580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002584:	4770      	bx	lr

08002586 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002586:	b480      	push	{r7}
 8002588:	b083      	sub	sp, #12
 800258a:	af00      	add	r7, sp, #0
 800258c:	6078      	str	r0, [r7, #4]
 800258e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002596:	b2db      	uxtb	r3, r3
 8002598:	2b20      	cmp	r3, #32
 800259a:	d129      	bne.n	80025f0 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	2224      	movs	r2, #36	; 0x24
 80025a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	681a      	ldr	r2, [r3, #0]
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f022 0201 	bic.w	r2, r2, #1
 80025b2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f022 0210 	bic.w	r2, r2, #16
 80025c2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	683a      	ldr	r2, [r7, #0]
 80025d0:	430a      	orrs	r2, r1
 80025d2:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	681a      	ldr	r2, [r3, #0]
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f042 0201 	orr.w	r2, r2, #1
 80025e2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	2220      	movs	r2, #32
 80025e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80025ec:	2300      	movs	r3, #0
 80025ee:	e000      	b.n	80025f2 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 80025f0:	2302      	movs	r3, #2
  }
}
 80025f2:	4618      	mov	r0, r3
 80025f4:	370c      	adds	r7, #12
 80025f6:	46bd      	mov	sp, r7
 80025f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fc:	4770      	bx	lr

080025fe <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80025fe:	b480      	push	{r7}
 8002600:	b085      	sub	sp, #20
 8002602:	af00      	add	r7, sp, #0
 8002604:	6078      	str	r0, [r7, #4]
 8002606:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8002608:	2300      	movs	r3, #0
 800260a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002612:	b2db      	uxtb	r3, r3
 8002614:	2b20      	cmp	r3, #32
 8002616:	d12a      	bne.n	800266e <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	2224      	movs	r2, #36	; 0x24
 800261c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	681a      	ldr	r2, [r3, #0]
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f022 0201 	bic.w	r2, r2, #1
 800262e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002636:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8002638:	89fb      	ldrh	r3, [r7, #14]
 800263a:	f023 030f 	bic.w	r3, r3, #15
 800263e:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	b29a      	uxth	r2, r3
 8002644:	89fb      	ldrh	r3, [r7, #14]
 8002646:	4313      	orrs	r3, r2
 8002648:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	89fa      	ldrh	r2, [r7, #14]
 8002650:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	681a      	ldr	r2, [r3, #0]
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f042 0201 	orr.w	r2, r2, #1
 8002660:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	2220      	movs	r2, #32
 8002666:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800266a:	2300      	movs	r3, #0
 800266c:	e000      	b.n	8002670 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 800266e:	2302      	movs	r3, #2
  }
}
 8002670:	4618      	mov	r0, r3
 8002672:	3714      	adds	r7, #20
 8002674:	46bd      	mov	sp, r7
 8002676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267a:	4770      	bx	lr

0800267c <HAL_UART_MspInit>:
  *           - Peripheral's GPIO Configuration
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	b08a      	sub	sp, #40	; 0x28
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  GPIO_InitStruct;


  /*##-1- Enable peripherals and GPIO Clocks #################################*/
  /* Enable GPIO TX/RX clock */
  USARTx_TX_GPIO_CLK_ENABLE();
 8002684:	2300      	movs	r3, #0
 8002686:	613b      	str	r3, [r7, #16]
 8002688:	4b23      	ldr	r3, [pc, #140]	; (8002718 <HAL_UART_MspInit+0x9c>)
 800268a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800268c:	4a22      	ldr	r2, [pc, #136]	; (8002718 <HAL_UART_MspInit+0x9c>)
 800268e:	f043 0308 	orr.w	r3, r3, #8
 8002692:	6313      	str	r3, [r2, #48]	; 0x30
 8002694:	4b20      	ldr	r3, [pc, #128]	; (8002718 <HAL_UART_MspInit+0x9c>)
 8002696:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002698:	f003 0308 	and.w	r3, r3, #8
 800269c:	613b      	str	r3, [r7, #16]
 800269e:	693b      	ldr	r3, [r7, #16]
  USARTx_RX_GPIO_CLK_ENABLE();
 80026a0:	2300      	movs	r3, #0
 80026a2:	60fb      	str	r3, [r7, #12]
 80026a4:	4b1c      	ldr	r3, [pc, #112]	; (8002718 <HAL_UART_MspInit+0x9c>)
 80026a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026a8:	4a1b      	ldr	r2, [pc, #108]	; (8002718 <HAL_UART_MspInit+0x9c>)
 80026aa:	f043 0308 	orr.w	r3, r3, #8
 80026ae:	6313      	str	r3, [r2, #48]	; 0x30
 80026b0:	4b19      	ldr	r3, [pc, #100]	; (8002718 <HAL_UART_MspInit+0x9c>)
 80026b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026b4:	f003 0308 	and.w	r3, r3, #8
 80026b8:	60fb      	str	r3, [r7, #12]
 80026ba:	68fb      	ldr	r3, [r7, #12]


  /* Enable USARTx clock */
  USARTx_CLK_ENABLE();
 80026bc:	2300      	movs	r3, #0
 80026be:	60bb      	str	r3, [r7, #8]
 80026c0:	4b15      	ldr	r3, [pc, #84]	; (8002718 <HAL_UART_MspInit+0x9c>)
 80026c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026c4:	4a14      	ldr	r2, [pc, #80]	; (8002718 <HAL_UART_MspInit+0x9c>)
 80026c6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80026ca:	6413      	str	r3, [r2, #64]	; 0x40
 80026cc:	4b12      	ldr	r3, [pc, #72]	; (8002718 <HAL_UART_MspInit+0x9c>)
 80026ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026d0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80026d4:	60bb      	str	r3, [r7, #8]
 80026d6:	68bb      	ldr	r3, [r7, #8]

  /*##-2- Configure peripheral GPIO ##########################################*/
  /* UART TX GPIO pin configuration  */
  GPIO_InitStruct.Pin       = USARTx_TX_PIN;
 80026d8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80026dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 80026de:	2302      	movs	r3, #2
 80026e0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull      = GPIO_PULLUP;
 80026e2:	2301      	movs	r3, #1
 80026e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 80026e6:	2303      	movs	r3, #3
 80026e8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = USARTx_TX_AF;
 80026ea:	2307      	movs	r3, #7
 80026ec:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_GPIO_Init(USARTx_TX_GPIO_PORT, &GPIO_InitStruct);
 80026ee:	f107 0314 	add.w	r3, r7, #20
 80026f2:	4619      	mov	r1, r3
 80026f4:	4809      	ldr	r0, [pc, #36]	; (800271c <HAL_UART_MspInit+0xa0>)
 80026f6:	f7fe fdeb 	bl	80012d0 <HAL_GPIO_Init>

  /* UART RX GPIO pin configuration  */
  GPIO_InitStruct.Pin = USARTx_RX_PIN;
 80026fa:	f44f 7300 	mov.w	r3, #512	; 0x200
 80026fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = USARTx_RX_AF;
 8002700:	2307      	movs	r3, #7
 8002702:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_GPIO_Init(USARTx_RX_GPIO_PORT, &GPIO_InitStruct);
 8002704:	f107 0314 	add.w	r3, r7, #20
 8002708:	4619      	mov	r1, r3
 800270a:	4804      	ldr	r0, [pc, #16]	; (800271c <HAL_UART_MspInit+0xa0>)
 800270c:	f7fe fde0 	bl	80012d0 <HAL_GPIO_Init>
}
 8002710:	bf00      	nop
 8002712:	3728      	adds	r7, #40	; 0x28
 8002714:	46bd      	mov	sp, r7
 8002716:	bd80      	pop	{r7, pc}
 8002718:	40023800 	.word	0x40023800
 800271c:	40020c00 	.word	0x40020c00

08002720 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	b082      	sub	sp, #8
 8002724:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8002726:	2300      	movs	r3, #0
 8002728:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800272a:	2300      	movs	r3, #0
 800272c:	603b      	str	r3, [r7, #0]
 800272e:	4b20      	ldr	r3, [pc, #128]	; (80027b0 <HAL_PWREx_EnableOverDrive+0x90>)
 8002730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002732:	4a1f      	ldr	r2, [pc, #124]	; (80027b0 <HAL_PWREx_EnableOverDrive+0x90>)
 8002734:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002738:	6413      	str	r3, [r2, #64]	; 0x40
 800273a:	4b1d      	ldr	r3, [pc, #116]	; (80027b0 <HAL_PWREx_EnableOverDrive+0x90>)
 800273c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800273e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002742:	603b      	str	r3, [r7, #0]
 8002744:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002746:	4b1b      	ldr	r3, [pc, #108]	; (80027b4 <HAL_PWREx_EnableOverDrive+0x94>)
 8002748:	2201      	movs	r2, #1
 800274a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800274c:	f7fe fcaa 	bl	80010a4 <HAL_GetTick>
 8002750:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002752:	e009      	b.n	8002768 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002754:	f7fe fca6 	bl	80010a4 <HAL_GetTick>
 8002758:	4602      	mov	r2, r0
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	1ad3      	subs	r3, r2, r3
 800275e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002762:	d901      	bls.n	8002768 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8002764:	2303      	movs	r3, #3
 8002766:	e01f      	b.n	80027a8 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002768:	4b13      	ldr	r3, [pc, #76]	; (80027b8 <HAL_PWREx_EnableOverDrive+0x98>)
 800276a:	685b      	ldr	r3, [r3, #4]
 800276c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002770:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002774:	d1ee      	bne.n	8002754 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002776:	4b11      	ldr	r3, [pc, #68]	; (80027bc <HAL_PWREx_EnableOverDrive+0x9c>)
 8002778:	2201      	movs	r2, #1
 800277a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800277c:	f7fe fc92 	bl	80010a4 <HAL_GetTick>
 8002780:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002782:	e009      	b.n	8002798 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002784:	f7fe fc8e 	bl	80010a4 <HAL_GetTick>
 8002788:	4602      	mov	r2, r0
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	1ad3      	subs	r3, r2, r3
 800278e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002792:	d901      	bls.n	8002798 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8002794:	2303      	movs	r3, #3
 8002796:	e007      	b.n	80027a8 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002798:	4b07      	ldr	r3, [pc, #28]	; (80027b8 <HAL_PWREx_EnableOverDrive+0x98>)
 800279a:	685b      	ldr	r3, [r3, #4]
 800279c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027a0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80027a4:	d1ee      	bne.n	8002784 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 80027a6:	2300      	movs	r3, #0
}
 80027a8:	4618      	mov	r0, r3
 80027aa:	3708      	adds	r7, #8
 80027ac:	46bd      	mov	sp, r7
 80027ae:	bd80      	pop	{r7, pc}
 80027b0:	40023800 	.word	0x40023800
 80027b4:	420e0040 	.word	0x420e0040
 80027b8:	40007000 	.word	0x40007000
 80027bc:	420e0044 	.word	0x420e0044

080027c0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b086      	sub	sp, #24
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d101      	bne.n	80027d2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80027ce:	2301      	movs	r3, #1
 80027d0:	e267      	b.n	8002ca2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f003 0301 	and.w	r3, r3, #1
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d075      	beq.n	80028ca <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80027de:	4b88      	ldr	r3, [pc, #544]	; (8002a00 <HAL_RCC_OscConfig+0x240>)
 80027e0:	689b      	ldr	r3, [r3, #8]
 80027e2:	f003 030c 	and.w	r3, r3, #12
 80027e6:	2b04      	cmp	r3, #4
 80027e8:	d00c      	beq.n	8002804 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80027ea:	4b85      	ldr	r3, [pc, #532]	; (8002a00 <HAL_RCC_OscConfig+0x240>)
 80027ec:	689b      	ldr	r3, [r3, #8]
 80027ee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80027f2:	2b08      	cmp	r3, #8
 80027f4:	d112      	bne.n	800281c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80027f6:	4b82      	ldr	r3, [pc, #520]	; (8002a00 <HAL_RCC_OscConfig+0x240>)
 80027f8:	685b      	ldr	r3, [r3, #4]
 80027fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80027fe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002802:	d10b      	bne.n	800281c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002804:	4b7e      	ldr	r3, [pc, #504]	; (8002a00 <HAL_RCC_OscConfig+0x240>)
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800280c:	2b00      	cmp	r3, #0
 800280e:	d05b      	beq.n	80028c8 <HAL_RCC_OscConfig+0x108>
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	685b      	ldr	r3, [r3, #4]
 8002814:	2b00      	cmp	r3, #0
 8002816:	d157      	bne.n	80028c8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002818:	2301      	movs	r3, #1
 800281a:	e242      	b.n	8002ca2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	685b      	ldr	r3, [r3, #4]
 8002820:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002824:	d106      	bne.n	8002834 <HAL_RCC_OscConfig+0x74>
 8002826:	4b76      	ldr	r3, [pc, #472]	; (8002a00 <HAL_RCC_OscConfig+0x240>)
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	4a75      	ldr	r2, [pc, #468]	; (8002a00 <HAL_RCC_OscConfig+0x240>)
 800282c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002830:	6013      	str	r3, [r2, #0]
 8002832:	e01d      	b.n	8002870 <HAL_RCC_OscConfig+0xb0>
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	685b      	ldr	r3, [r3, #4]
 8002838:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800283c:	d10c      	bne.n	8002858 <HAL_RCC_OscConfig+0x98>
 800283e:	4b70      	ldr	r3, [pc, #448]	; (8002a00 <HAL_RCC_OscConfig+0x240>)
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	4a6f      	ldr	r2, [pc, #444]	; (8002a00 <HAL_RCC_OscConfig+0x240>)
 8002844:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002848:	6013      	str	r3, [r2, #0]
 800284a:	4b6d      	ldr	r3, [pc, #436]	; (8002a00 <HAL_RCC_OscConfig+0x240>)
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	4a6c      	ldr	r2, [pc, #432]	; (8002a00 <HAL_RCC_OscConfig+0x240>)
 8002850:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002854:	6013      	str	r3, [r2, #0]
 8002856:	e00b      	b.n	8002870 <HAL_RCC_OscConfig+0xb0>
 8002858:	4b69      	ldr	r3, [pc, #420]	; (8002a00 <HAL_RCC_OscConfig+0x240>)
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	4a68      	ldr	r2, [pc, #416]	; (8002a00 <HAL_RCC_OscConfig+0x240>)
 800285e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002862:	6013      	str	r3, [r2, #0]
 8002864:	4b66      	ldr	r3, [pc, #408]	; (8002a00 <HAL_RCC_OscConfig+0x240>)
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	4a65      	ldr	r2, [pc, #404]	; (8002a00 <HAL_RCC_OscConfig+0x240>)
 800286a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800286e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	685b      	ldr	r3, [r3, #4]
 8002874:	2b00      	cmp	r3, #0
 8002876:	d013      	beq.n	80028a0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002878:	f7fe fc14 	bl	80010a4 <HAL_GetTick>
 800287c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800287e:	e008      	b.n	8002892 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002880:	f7fe fc10 	bl	80010a4 <HAL_GetTick>
 8002884:	4602      	mov	r2, r0
 8002886:	693b      	ldr	r3, [r7, #16]
 8002888:	1ad3      	subs	r3, r2, r3
 800288a:	2b64      	cmp	r3, #100	; 0x64
 800288c:	d901      	bls.n	8002892 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800288e:	2303      	movs	r3, #3
 8002890:	e207      	b.n	8002ca2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002892:	4b5b      	ldr	r3, [pc, #364]	; (8002a00 <HAL_RCC_OscConfig+0x240>)
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800289a:	2b00      	cmp	r3, #0
 800289c:	d0f0      	beq.n	8002880 <HAL_RCC_OscConfig+0xc0>
 800289e:	e014      	b.n	80028ca <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028a0:	f7fe fc00 	bl	80010a4 <HAL_GetTick>
 80028a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80028a6:	e008      	b.n	80028ba <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80028a8:	f7fe fbfc 	bl	80010a4 <HAL_GetTick>
 80028ac:	4602      	mov	r2, r0
 80028ae:	693b      	ldr	r3, [r7, #16]
 80028b0:	1ad3      	subs	r3, r2, r3
 80028b2:	2b64      	cmp	r3, #100	; 0x64
 80028b4:	d901      	bls.n	80028ba <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80028b6:	2303      	movs	r3, #3
 80028b8:	e1f3      	b.n	8002ca2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80028ba:	4b51      	ldr	r3, [pc, #324]	; (8002a00 <HAL_RCC_OscConfig+0x240>)
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d1f0      	bne.n	80028a8 <HAL_RCC_OscConfig+0xe8>
 80028c6:	e000      	b.n	80028ca <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f003 0302 	and.w	r3, r3, #2
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d063      	beq.n	800299e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80028d6:	4b4a      	ldr	r3, [pc, #296]	; (8002a00 <HAL_RCC_OscConfig+0x240>)
 80028d8:	689b      	ldr	r3, [r3, #8]
 80028da:	f003 030c 	and.w	r3, r3, #12
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d00b      	beq.n	80028fa <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80028e2:	4b47      	ldr	r3, [pc, #284]	; (8002a00 <HAL_RCC_OscConfig+0x240>)
 80028e4:	689b      	ldr	r3, [r3, #8]
 80028e6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80028ea:	2b08      	cmp	r3, #8
 80028ec:	d11c      	bne.n	8002928 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80028ee:	4b44      	ldr	r3, [pc, #272]	; (8002a00 <HAL_RCC_OscConfig+0x240>)
 80028f0:	685b      	ldr	r3, [r3, #4]
 80028f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d116      	bne.n	8002928 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80028fa:	4b41      	ldr	r3, [pc, #260]	; (8002a00 <HAL_RCC_OscConfig+0x240>)
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f003 0302 	and.w	r3, r3, #2
 8002902:	2b00      	cmp	r3, #0
 8002904:	d005      	beq.n	8002912 <HAL_RCC_OscConfig+0x152>
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	68db      	ldr	r3, [r3, #12]
 800290a:	2b01      	cmp	r3, #1
 800290c:	d001      	beq.n	8002912 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800290e:	2301      	movs	r3, #1
 8002910:	e1c7      	b.n	8002ca2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002912:	4b3b      	ldr	r3, [pc, #236]	; (8002a00 <HAL_RCC_OscConfig+0x240>)
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	691b      	ldr	r3, [r3, #16]
 800291e:	00db      	lsls	r3, r3, #3
 8002920:	4937      	ldr	r1, [pc, #220]	; (8002a00 <HAL_RCC_OscConfig+0x240>)
 8002922:	4313      	orrs	r3, r2
 8002924:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002926:	e03a      	b.n	800299e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	68db      	ldr	r3, [r3, #12]
 800292c:	2b00      	cmp	r3, #0
 800292e:	d020      	beq.n	8002972 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002930:	4b34      	ldr	r3, [pc, #208]	; (8002a04 <HAL_RCC_OscConfig+0x244>)
 8002932:	2201      	movs	r2, #1
 8002934:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002936:	f7fe fbb5 	bl	80010a4 <HAL_GetTick>
 800293a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800293c:	e008      	b.n	8002950 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800293e:	f7fe fbb1 	bl	80010a4 <HAL_GetTick>
 8002942:	4602      	mov	r2, r0
 8002944:	693b      	ldr	r3, [r7, #16]
 8002946:	1ad3      	subs	r3, r2, r3
 8002948:	2b02      	cmp	r3, #2
 800294a:	d901      	bls.n	8002950 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800294c:	2303      	movs	r3, #3
 800294e:	e1a8      	b.n	8002ca2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002950:	4b2b      	ldr	r3, [pc, #172]	; (8002a00 <HAL_RCC_OscConfig+0x240>)
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f003 0302 	and.w	r3, r3, #2
 8002958:	2b00      	cmp	r3, #0
 800295a:	d0f0      	beq.n	800293e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800295c:	4b28      	ldr	r3, [pc, #160]	; (8002a00 <HAL_RCC_OscConfig+0x240>)
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	691b      	ldr	r3, [r3, #16]
 8002968:	00db      	lsls	r3, r3, #3
 800296a:	4925      	ldr	r1, [pc, #148]	; (8002a00 <HAL_RCC_OscConfig+0x240>)
 800296c:	4313      	orrs	r3, r2
 800296e:	600b      	str	r3, [r1, #0]
 8002970:	e015      	b.n	800299e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002972:	4b24      	ldr	r3, [pc, #144]	; (8002a04 <HAL_RCC_OscConfig+0x244>)
 8002974:	2200      	movs	r2, #0
 8002976:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002978:	f7fe fb94 	bl	80010a4 <HAL_GetTick>
 800297c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800297e:	e008      	b.n	8002992 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002980:	f7fe fb90 	bl	80010a4 <HAL_GetTick>
 8002984:	4602      	mov	r2, r0
 8002986:	693b      	ldr	r3, [r7, #16]
 8002988:	1ad3      	subs	r3, r2, r3
 800298a:	2b02      	cmp	r3, #2
 800298c:	d901      	bls.n	8002992 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800298e:	2303      	movs	r3, #3
 8002990:	e187      	b.n	8002ca2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002992:	4b1b      	ldr	r3, [pc, #108]	; (8002a00 <HAL_RCC_OscConfig+0x240>)
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f003 0302 	and.w	r3, r3, #2
 800299a:	2b00      	cmp	r3, #0
 800299c:	d1f0      	bne.n	8002980 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f003 0308 	and.w	r3, r3, #8
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d036      	beq.n	8002a18 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	695b      	ldr	r3, [r3, #20]
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d016      	beq.n	80029e0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80029b2:	4b15      	ldr	r3, [pc, #84]	; (8002a08 <HAL_RCC_OscConfig+0x248>)
 80029b4:	2201      	movs	r2, #1
 80029b6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029b8:	f7fe fb74 	bl	80010a4 <HAL_GetTick>
 80029bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029be:	e008      	b.n	80029d2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80029c0:	f7fe fb70 	bl	80010a4 <HAL_GetTick>
 80029c4:	4602      	mov	r2, r0
 80029c6:	693b      	ldr	r3, [r7, #16]
 80029c8:	1ad3      	subs	r3, r2, r3
 80029ca:	2b02      	cmp	r3, #2
 80029cc:	d901      	bls.n	80029d2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80029ce:	2303      	movs	r3, #3
 80029d0:	e167      	b.n	8002ca2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029d2:	4b0b      	ldr	r3, [pc, #44]	; (8002a00 <HAL_RCC_OscConfig+0x240>)
 80029d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80029d6:	f003 0302 	and.w	r3, r3, #2
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d0f0      	beq.n	80029c0 <HAL_RCC_OscConfig+0x200>
 80029de:	e01b      	b.n	8002a18 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80029e0:	4b09      	ldr	r3, [pc, #36]	; (8002a08 <HAL_RCC_OscConfig+0x248>)
 80029e2:	2200      	movs	r2, #0
 80029e4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029e6:	f7fe fb5d 	bl	80010a4 <HAL_GetTick>
 80029ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80029ec:	e00e      	b.n	8002a0c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80029ee:	f7fe fb59 	bl	80010a4 <HAL_GetTick>
 80029f2:	4602      	mov	r2, r0
 80029f4:	693b      	ldr	r3, [r7, #16]
 80029f6:	1ad3      	subs	r3, r2, r3
 80029f8:	2b02      	cmp	r3, #2
 80029fa:	d907      	bls.n	8002a0c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80029fc:	2303      	movs	r3, #3
 80029fe:	e150      	b.n	8002ca2 <HAL_RCC_OscConfig+0x4e2>
 8002a00:	40023800 	.word	0x40023800
 8002a04:	42470000 	.word	0x42470000
 8002a08:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a0c:	4b88      	ldr	r3, [pc, #544]	; (8002c30 <HAL_RCC_OscConfig+0x470>)
 8002a0e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a10:	f003 0302 	and.w	r3, r3, #2
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d1ea      	bne.n	80029ee <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f003 0304 	and.w	r3, r3, #4
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	f000 8097 	beq.w	8002b54 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a26:	2300      	movs	r3, #0
 8002a28:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a2a:	4b81      	ldr	r3, [pc, #516]	; (8002c30 <HAL_RCC_OscConfig+0x470>)
 8002a2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d10f      	bne.n	8002a56 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a36:	2300      	movs	r3, #0
 8002a38:	60bb      	str	r3, [r7, #8]
 8002a3a:	4b7d      	ldr	r3, [pc, #500]	; (8002c30 <HAL_RCC_OscConfig+0x470>)
 8002a3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a3e:	4a7c      	ldr	r2, [pc, #496]	; (8002c30 <HAL_RCC_OscConfig+0x470>)
 8002a40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a44:	6413      	str	r3, [r2, #64]	; 0x40
 8002a46:	4b7a      	ldr	r3, [pc, #488]	; (8002c30 <HAL_RCC_OscConfig+0x470>)
 8002a48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a4e:	60bb      	str	r3, [r7, #8]
 8002a50:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a52:	2301      	movs	r3, #1
 8002a54:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a56:	4b77      	ldr	r3, [pc, #476]	; (8002c34 <HAL_RCC_OscConfig+0x474>)
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d118      	bne.n	8002a94 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a62:	4b74      	ldr	r3, [pc, #464]	; (8002c34 <HAL_RCC_OscConfig+0x474>)
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	4a73      	ldr	r2, [pc, #460]	; (8002c34 <HAL_RCC_OscConfig+0x474>)
 8002a68:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a6c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a6e:	f7fe fb19 	bl	80010a4 <HAL_GetTick>
 8002a72:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a74:	e008      	b.n	8002a88 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a76:	f7fe fb15 	bl	80010a4 <HAL_GetTick>
 8002a7a:	4602      	mov	r2, r0
 8002a7c:	693b      	ldr	r3, [r7, #16]
 8002a7e:	1ad3      	subs	r3, r2, r3
 8002a80:	2b02      	cmp	r3, #2
 8002a82:	d901      	bls.n	8002a88 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002a84:	2303      	movs	r3, #3
 8002a86:	e10c      	b.n	8002ca2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a88:	4b6a      	ldr	r3, [pc, #424]	; (8002c34 <HAL_RCC_OscConfig+0x474>)
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d0f0      	beq.n	8002a76 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	689b      	ldr	r3, [r3, #8]
 8002a98:	2b01      	cmp	r3, #1
 8002a9a:	d106      	bne.n	8002aaa <HAL_RCC_OscConfig+0x2ea>
 8002a9c:	4b64      	ldr	r3, [pc, #400]	; (8002c30 <HAL_RCC_OscConfig+0x470>)
 8002a9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002aa0:	4a63      	ldr	r2, [pc, #396]	; (8002c30 <HAL_RCC_OscConfig+0x470>)
 8002aa2:	f043 0301 	orr.w	r3, r3, #1
 8002aa6:	6713      	str	r3, [r2, #112]	; 0x70
 8002aa8:	e01c      	b.n	8002ae4 <HAL_RCC_OscConfig+0x324>
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	689b      	ldr	r3, [r3, #8]
 8002aae:	2b05      	cmp	r3, #5
 8002ab0:	d10c      	bne.n	8002acc <HAL_RCC_OscConfig+0x30c>
 8002ab2:	4b5f      	ldr	r3, [pc, #380]	; (8002c30 <HAL_RCC_OscConfig+0x470>)
 8002ab4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ab6:	4a5e      	ldr	r2, [pc, #376]	; (8002c30 <HAL_RCC_OscConfig+0x470>)
 8002ab8:	f043 0304 	orr.w	r3, r3, #4
 8002abc:	6713      	str	r3, [r2, #112]	; 0x70
 8002abe:	4b5c      	ldr	r3, [pc, #368]	; (8002c30 <HAL_RCC_OscConfig+0x470>)
 8002ac0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ac2:	4a5b      	ldr	r2, [pc, #364]	; (8002c30 <HAL_RCC_OscConfig+0x470>)
 8002ac4:	f043 0301 	orr.w	r3, r3, #1
 8002ac8:	6713      	str	r3, [r2, #112]	; 0x70
 8002aca:	e00b      	b.n	8002ae4 <HAL_RCC_OscConfig+0x324>
 8002acc:	4b58      	ldr	r3, [pc, #352]	; (8002c30 <HAL_RCC_OscConfig+0x470>)
 8002ace:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ad0:	4a57      	ldr	r2, [pc, #348]	; (8002c30 <HAL_RCC_OscConfig+0x470>)
 8002ad2:	f023 0301 	bic.w	r3, r3, #1
 8002ad6:	6713      	str	r3, [r2, #112]	; 0x70
 8002ad8:	4b55      	ldr	r3, [pc, #340]	; (8002c30 <HAL_RCC_OscConfig+0x470>)
 8002ada:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002adc:	4a54      	ldr	r2, [pc, #336]	; (8002c30 <HAL_RCC_OscConfig+0x470>)
 8002ade:	f023 0304 	bic.w	r3, r3, #4
 8002ae2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	689b      	ldr	r3, [r3, #8]
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d015      	beq.n	8002b18 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002aec:	f7fe fada 	bl	80010a4 <HAL_GetTick>
 8002af0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002af2:	e00a      	b.n	8002b0a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002af4:	f7fe fad6 	bl	80010a4 <HAL_GetTick>
 8002af8:	4602      	mov	r2, r0
 8002afa:	693b      	ldr	r3, [r7, #16]
 8002afc:	1ad3      	subs	r3, r2, r3
 8002afe:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b02:	4293      	cmp	r3, r2
 8002b04:	d901      	bls.n	8002b0a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002b06:	2303      	movs	r3, #3
 8002b08:	e0cb      	b.n	8002ca2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b0a:	4b49      	ldr	r3, [pc, #292]	; (8002c30 <HAL_RCC_OscConfig+0x470>)
 8002b0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b0e:	f003 0302 	and.w	r3, r3, #2
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d0ee      	beq.n	8002af4 <HAL_RCC_OscConfig+0x334>
 8002b16:	e014      	b.n	8002b42 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b18:	f7fe fac4 	bl	80010a4 <HAL_GetTick>
 8002b1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b1e:	e00a      	b.n	8002b36 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b20:	f7fe fac0 	bl	80010a4 <HAL_GetTick>
 8002b24:	4602      	mov	r2, r0
 8002b26:	693b      	ldr	r3, [r7, #16]
 8002b28:	1ad3      	subs	r3, r2, r3
 8002b2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b2e:	4293      	cmp	r3, r2
 8002b30:	d901      	bls.n	8002b36 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002b32:	2303      	movs	r3, #3
 8002b34:	e0b5      	b.n	8002ca2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b36:	4b3e      	ldr	r3, [pc, #248]	; (8002c30 <HAL_RCC_OscConfig+0x470>)
 8002b38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b3a:	f003 0302 	and.w	r3, r3, #2
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d1ee      	bne.n	8002b20 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002b42:	7dfb      	ldrb	r3, [r7, #23]
 8002b44:	2b01      	cmp	r3, #1
 8002b46:	d105      	bne.n	8002b54 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b48:	4b39      	ldr	r3, [pc, #228]	; (8002c30 <HAL_RCC_OscConfig+0x470>)
 8002b4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b4c:	4a38      	ldr	r2, [pc, #224]	; (8002c30 <HAL_RCC_OscConfig+0x470>)
 8002b4e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b52:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	699b      	ldr	r3, [r3, #24]
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	f000 80a1 	beq.w	8002ca0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002b5e:	4b34      	ldr	r3, [pc, #208]	; (8002c30 <HAL_RCC_OscConfig+0x470>)
 8002b60:	689b      	ldr	r3, [r3, #8]
 8002b62:	f003 030c 	and.w	r3, r3, #12
 8002b66:	2b08      	cmp	r3, #8
 8002b68:	d05c      	beq.n	8002c24 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	699b      	ldr	r3, [r3, #24]
 8002b6e:	2b02      	cmp	r3, #2
 8002b70:	d141      	bne.n	8002bf6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b72:	4b31      	ldr	r3, [pc, #196]	; (8002c38 <HAL_RCC_OscConfig+0x478>)
 8002b74:	2200      	movs	r2, #0
 8002b76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b78:	f7fe fa94 	bl	80010a4 <HAL_GetTick>
 8002b7c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b7e:	e008      	b.n	8002b92 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b80:	f7fe fa90 	bl	80010a4 <HAL_GetTick>
 8002b84:	4602      	mov	r2, r0
 8002b86:	693b      	ldr	r3, [r7, #16]
 8002b88:	1ad3      	subs	r3, r2, r3
 8002b8a:	2b02      	cmp	r3, #2
 8002b8c:	d901      	bls.n	8002b92 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002b8e:	2303      	movs	r3, #3
 8002b90:	e087      	b.n	8002ca2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b92:	4b27      	ldr	r3, [pc, #156]	; (8002c30 <HAL_RCC_OscConfig+0x470>)
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d1f0      	bne.n	8002b80 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	69da      	ldr	r2, [r3, #28]
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6a1b      	ldr	r3, [r3, #32]
 8002ba6:	431a      	orrs	r2, r3
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bac:	019b      	lsls	r3, r3, #6
 8002bae:	431a      	orrs	r2, r3
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bb4:	085b      	lsrs	r3, r3, #1
 8002bb6:	3b01      	subs	r3, #1
 8002bb8:	041b      	lsls	r3, r3, #16
 8002bba:	431a      	orrs	r2, r3
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bc0:	061b      	lsls	r3, r3, #24
 8002bc2:	491b      	ldr	r1, [pc, #108]	; (8002c30 <HAL_RCC_OscConfig+0x470>)
 8002bc4:	4313      	orrs	r3, r2
 8002bc6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002bc8:	4b1b      	ldr	r3, [pc, #108]	; (8002c38 <HAL_RCC_OscConfig+0x478>)
 8002bca:	2201      	movs	r2, #1
 8002bcc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bce:	f7fe fa69 	bl	80010a4 <HAL_GetTick>
 8002bd2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002bd4:	e008      	b.n	8002be8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002bd6:	f7fe fa65 	bl	80010a4 <HAL_GetTick>
 8002bda:	4602      	mov	r2, r0
 8002bdc:	693b      	ldr	r3, [r7, #16]
 8002bde:	1ad3      	subs	r3, r2, r3
 8002be0:	2b02      	cmp	r3, #2
 8002be2:	d901      	bls.n	8002be8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002be4:	2303      	movs	r3, #3
 8002be6:	e05c      	b.n	8002ca2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002be8:	4b11      	ldr	r3, [pc, #68]	; (8002c30 <HAL_RCC_OscConfig+0x470>)
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d0f0      	beq.n	8002bd6 <HAL_RCC_OscConfig+0x416>
 8002bf4:	e054      	b.n	8002ca0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002bf6:	4b10      	ldr	r3, [pc, #64]	; (8002c38 <HAL_RCC_OscConfig+0x478>)
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bfc:	f7fe fa52 	bl	80010a4 <HAL_GetTick>
 8002c00:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c02:	e008      	b.n	8002c16 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c04:	f7fe fa4e 	bl	80010a4 <HAL_GetTick>
 8002c08:	4602      	mov	r2, r0
 8002c0a:	693b      	ldr	r3, [r7, #16]
 8002c0c:	1ad3      	subs	r3, r2, r3
 8002c0e:	2b02      	cmp	r3, #2
 8002c10:	d901      	bls.n	8002c16 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002c12:	2303      	movs	r3, #3
 8002c14:	e045      	b.n	8002ca2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c16:	4b06      	ldr	r3, [pc, #24]	; (8002c30 <HAL_RCC_OscConfig+0x470>)
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d1f0      	bne.n	8002c04 <HAL_RCC_OscConfig+0x444>
 8002c22:	e03d      	b.n	8002ca0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	699b      	ldr	r3, [r3, #24]
 8002c28:	2b01      	cmp	r3, #1
 8002c2a:	d107      	bne.n	8002c3c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002c2c:	2301      	movs	r3, #1
 8002c2e:	e038      	b.n	8002ca2 <HAL_RCC_OscConfig+0x4e2>
 8002c30:	40023800 	.word	0x40023800
 8002c34:	40007000 	.word	0x40007000
 8002c38:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002c3c:	4b1b      	ldr	r3, [pc, #108]	; (8002cac <HAL_RCC_OscConfig+0x4ec>)
 8002c3e:	685b      	ldr	r3, [r3, #4]
 8002c40:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	699b      	ldr	r3, [r3, #24]
 8002c46:	2b01      	cmp	r3, #1
 8002c48:	d028      	beq.n	8002c9c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c54:	429a      	cmp	r2, r3
 8002c56:	d121      	bne.n	8002c9c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c62:	429a      	cmp	r2, r3
 8002c64:	d11a      	bne.n	8002c9c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002c66:	68fa      	ldr	r2, [r7, #12]
 8002c68:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002c6c:	4013      	ands	r3, r2
 8002c6e:	687a      	ldr	r2, [r7, #4]
 8002c70:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002c72:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002c74:	4293      	cmp	r3, r2
 8002c76:	d111      	bne.n	8002c9c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c82:	085b      	lsrs	r3, r3, #1
 8002c84:	3b01      	subs	r3, #1
 8002c86:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002c88:	429a      	cmp	r2, r3
 8002c8a:	d107      	bne.n	8002c9c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c96:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002c98:	429a      	cmp	r2, r3
 8002c9a:	d001      	beq.n	8002ca0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002c9c:	2301      	movs	r3, #1
 8002c9e:	e000      	b.n	8002ca2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002ca0:	2300      	movs	r3, #0
}
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	3718      	adds	r7, #24
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	bd80      	pop	{r7, pc}
 8002caa:	bf00      	nop
 8002cac:	40023800 	.word	0x40023800

08002cb0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	b084      	sub	sp, #16
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]
 8002cb8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d101      	bne.n	8002cc4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002cc0:	2301      	movs	r3, #1
 8002cc2:	e0cc      	b.n	8002e5e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002cc4:	4b68      	ldr	r3, [pc, #416]	; (8002e68 <HAL_RCC_ClockConfig+0x1b8>)
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f003 030f 	and.w	r3, r3, #15
 8002ccc:	683a      	ldr	r2, [r7, #0]
 8002cce:	429a      	cmp	r2, r3
 8002cd0:	d90c      	bls.n	8002cec <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cd2:	4b65      	ldr	r3, [pc, #404]	; (8002e68 <HAL_RCC_ClockConfig+0x1b8>)
 8002cd4:	683a      	ldr	r2, [r7, #0]
 8002cd6:	b2d2      	uxtb	r2, r2
 8002cd8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cda:	4b63      	ldr	r3, [pc, #396]	; (8002e68 <HAL_RCC_ClockConfig+0x1b8>)
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f003 030f 	and.w	r3, r3, #15
 8002ce2:	683a      	ldr	r2, [r7, #0]
 8002ce4:	429a      	cmp	r2, r3
 8002ce6:	d001      	beq.n	8002cec <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002ce8:	2301      	movs	r3, #1
 8002cea:	e0b8      	b.n	8002e5e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f003 0302 	and.w	r3, r3, #2
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d020      	beq.n	8002d3a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f003 0304 	and.w	r3, r3, #4
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d005      	beq.n	8002d10 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002d04:	4b59      	ldr	r3, [pc, #356]	; (8002e6c <HAL_RCC_ClockConfig+0x1bc>)
 8002d06:	689b      	ldr	r3, [r3, #8]
 8002d08:	4a58      	ldr	r2, [pc, #352]	; (8002e6c <HAL_RCC_ClockConfig+0x1bc>)
 8002d0a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002d0e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f003 0308 	and.w	r3, r3, #8
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d005      	beq.n	8002d28 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002d1c:	4b53      	ldr	r3, [pc, #332]	; (8002e6c <HAL_RCC_ClockConfig+0x1bc>)
 8002d1e:	689b      	ldr	r3, [r3, #8]
 8002d20:	4a52      	ldr	r2, [pc, #328]	; (8002e6c <HAL_RCC_ClockConfig+0x1bc>)
 8002d22:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002d26:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d28:	4b50      	ldr	r3, [pc, #320]	; (8002e6c <HAL_RCC_ClockConfig+0x1bc>)
 8002d2a:	689b      	ldr	r3, [r3, #8]
 8002d2c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	689b      	ldr	r3, [r3, #8]
 8002d34:	494d      	ldr	r1, [pc, #308]	; (8002e6c <HAL_RCC_ClockConfig+0x1bc>)
 8002d36:	4313      	orrs	r3, r2
 8002d38:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f003 0301 	and.w	r3, r3, #1
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d044      	beq.n	8002dd0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	685b      	ldr	r3, [r3, #4]
 8002d4a:	2b01      	cmp	r3, #1
 8002d4c:	d107      	bne.n	8002d5e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d4e:	4b47      	ldr	r3, [pc, #284]	; (8002e6c <HAL_RCC_ClockConfig+0x1bc>)
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d119      	bne.n	8002d8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d5a:	2301      	movs	r3, #1
 8002d5c:	e07f      	b.n	8002e5e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	685b      	ldr	r3, [r3, #4]
 8002d62:	2b02      	cmp	r3, #2
 8002d64:	d003      	beq.n	8002d6e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002d6a:	2b03      	cmp	r3, #3
 8002d6c:	d107      	bne.n	8002d7e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d6e:	4b3f      	ldr	r3, [pc, #252]	; (8002e6c <HAL_RCC_ClockConfig+0x1bc>)
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d109      	bne.n	8002d8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d7a:	2301      	movs	r3, #1
 8002d7c:	e06f      	b.n	8002e5e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d7e:	4b3b      	ldr	r3, [pc, #236]	; (8002e6c <HAL_RCC_ClockConfig+0x1bc>)
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f003 0302 	and.w	r3, r3, #2
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d101      	bne.n	8002d8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d8a:	2301      	movs	r3, #1
 8002d8c:	e067      	b.n	8002e5e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002d8e:	4b37      	ldr	r3, [pc, #220]	; (8002e6c <HAL_RCC_ClockConfig+0x1bc>)
 8002d90:	689b      	ldr	r3, [r3, #8]
 8002d92:	f023 0203 	bic.w	r2, r3, #3
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	685b      	ldr	r3, [r3, #4]
 8002d9a:	4934      	ldr	r1, [pc, #208]	; (8002e6c <HAL_RCC_ClockConfig+0x1bc>)
 8002d9c:	4313      	orrs	r3, r2
 8002d9e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002da0:	f7fe f980 	bl	80010a4 <HAL_GetTick>
 8002da4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002da6:	e00a      	b.n	8002dbe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002da8:	f7fe f97c 	bl	80010a4 <HAL_GetTick>
 8002dac:	4602      	mov	r2, r0
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	1ad3      	subs	r3, r2, r3
 8002db2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002db6:	4293      	cmp	r3, r2
 8002db8:	d901      	bls.n	8002dbe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002dba:	2303      	movs	r3, #3
 8002dbc:	e04f      	b.n	8002e5e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002dbe:	4b2b      	ldr	r3, [pc, #172]	; (8002e6c <HAL_RCC_ClockConfig+0x1bc>)
 8002dc0:	689b      	ldr	r3, [r3, #8]
 8002dc2:	f003 020c 	and.w	r2, r3, #12
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	685b      	ldr	r3, [r3, #4]
 8002dca:	009b      	lsls	r3, r3, #2
 8002dcc:	429a      	cmp	r2, r3
 8002dce:	d1eb      	bne.n	8002da8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002dd0:	4b25      	ldr	r3, [pc, #148]	; (8002e68 <HAL_RCC_ClockConfig+0x1b8>)
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f003 030f 	and.w	r3, r3, #15
 8002dd8:	683a      	ldr	r2, [r7, #0]
 8002dda:	429a      	cmp	r2, r3
 8002ddc:	d20c      	bcs.n	8002df8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002dde:	4b22      	ldr	r3, [pc, #136]	; (8002e68 <HAL_RCC_ClockConfig+0x1b8>)
 8002de0:	683a      	ldr	r2, [r7, #0]
 8002de2:	b2d2      	uxtb	r2, r2
 8002de4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002de6:	4b20      	ldr	r3, [pc, #128]	; (8002e68 <HAL_RCC_ClockConfig+0x1b8>)
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f003 030f 	and.w	r3, r3, #15
 8002dee:	683a      	ldr	r2, [r7, #0]
 8002df0:	429a      	cmp	r2, r3
 8002df2:	d001      	beq.n	8002df8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002df4:	2301      	movs	r3, #1
 8002df6:	e032      	b.n	8002e5e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f003 0304 	and.w	r3, r3, #4
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d008      	beq.n	8002e16 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e04:	4b19      	ldr	r3, [pc, #100]	; (8002e6c <HAL_RCC_ClockConfig+0x1bc>)
 8002e06:	689b      	ldr	r3, [r3, #8]
 8002e08:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	68db      	ldr	r3, [r3, #12]
 8002e10:	4916      	ldr	r1, [pc, #88]	; (8002e6c <HAL_RCC_ClockConfig+0x1bc>)
 8002e12:	4313      	orrs	r3, r2
 8002e14:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f003 0308 	and.w	r3, r3, #8
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d009      	beq.n	8002e36 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002e22:	4b12      	ldr	r3, [pc, #72]	; (8002e6c <HAL_RCC_ClockConfig+0x1bc>)
 8002e24:	689b      	ldr	r3, [r3, #8]
 8002e26:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	691b      	ldr	r3, [r3, #16]
 8002e2e:	00db      	lsls	r3, r3, #3
 8002e30:	490e      	ldr	r1, [pc, #56]	; (8002e6c <HAL_RCC_ClockConfig+0x1bc>)
 8002e32:	4313      	orrs	r3, r2
 8002e34:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002e36:	f000 f821 	bl	8002e7c <HAL_RCC_GetSysClockFreq>
 8002e3a:	4602      	mov	r2, r0
 8002e3c:	4b0b      	ldr	r3, [pc, #44]	; (8002e6c <HAL_RCC_ClockConfig+0x1bc>)
 8002e3e:	689b      	ldr	r3, [r3, #8]
 8002e40:	091b      	lsrs	r3, r3, #4
 8002e42:	f003 030f 	and.w	r3, r3, #15
 8002e46:	490a      	ldr	r1, [pc, #40]	; (8002e70 <HAL_RCC_ClockConfig+0x1c0>)
 8002e48:	5ccb      	ldrb	r3, [r1, r3]
 8002e4a:	fa22 f303 	lsr.w	r3, r2, r3
 8002e4e:	4a09      	ldr	r2, [pc, #36]	; (8002e74 <HAL_RCC_ClockConfig+0x1c4>)
 8002e50:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002e52:	4b09      	ldr	r3, [pc, #36]	; (8002e78 <HAL_RCC_ClockConfig+0x1c8>)
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	4618      	mov	r0, r3
 8002e58:	f7fe f8e0 	bl	800101c <HAL_InitTick>

  return HAL_OK;
 8002e5c:	2300      	movs	r3, #0
}
 8002e5e:	4618      	mov	r0, r3
 8002e60:	3710      	adds	r7, #16
 8002e62:	46bd      	mov	sp, r7
 8002e64:	bd80      	pop	{r7, pc}
 8002e66:	bf00      	nop
 8002e68:	40023c00 	.word	0x40023c00
 8002e6c:	40023800 	.word	0x40023800
 8002e70:	0800542c 	.word	0x0800542c
 8002e74:	2000000c 	.word	0x2000000c
 8002e78:	20000074 	.word	0x20000074

08002e7c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e7c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002e80:	b094      	sub	sp, #80	; 0x50
 8002e82:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002e84:	2300      	movs	r3, #0
 8002e86:	647b      	str	r3, [r7, #68]	; 0x44
 8002e88:	2300      	movs	r3, #0
 8002e8a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002e90:	2300      	movs	r3, #0
 8002e92:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002e94:	4b79      	ldr	r3, [pc, #484]	; (800307c <HAL_RCC_GetSysClockFreq+0x200>)
 8002e96:	689b      	ldr	r3, [r3, #8]
 8002e98:	f003 030c 	and.w	r3, r3, #12
 8002e9c:	2b08      	cmp	r3, #8
 8002e9e:	d00d      	beq.n	8002ebc <HAL_RCC_GetSysClockFreq+0x40>
 8002ea0:	2b08      	cmp	r3, #8
 8002ea2:	f200 80e1 	bhi.w	8003068 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d002      	beq.n	8002eb0 <HAL_RCC_GetSysClockFreq+0x34>
 8002eaa:	2b04      	cmp	r3, #4
 8002eac:	d003      	beq.n	8002eb6 <HAL_RCC_GetSysClockFreq+0x3a>
 8002eae:	e0db      	b.n	8003068 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002eb0:	4b73      	ldr	r3, [pc, #460]	; (8003080 <HAL_RCC_GetSysClockFreq+0x204>)
 8002eb2:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002eb4:	e0db      	b.n	800306e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002eb6:	4b73      	ldr	r3, [pc, #460]	; (8003084 <HAL_RCC_GetSysClockFreq+0x208>)
 8002eb8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002eba:	e0d8      	b.n	800306e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002ebc:	4b6f      	ldr	r3, [pc, #444]	; (800307c <HAL_RCC_GetSysClockFreq+0x200>)
 8002ebe:	685b      	ldr	r3, [r3, #4]
 8002ec0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002ec4:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002ec6:	4b6d      	ldr	r3, [pc, #436]	; (800307c <HAL_RCC_GetSysClockFreq+0x200>)
 8002ec8:	685b      	ldr	r3, [r3, #4]
 8002eca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d063      	beq.n	8002f9a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ed2:	4b6a      	ldr	r3, [pc, #424]	; (800307c <HAL_RCC_GetSysClockFreq+0x200>)
 8002ed4:	685b      	ldr	r3, [r3, #4]
 8002ed6:	099b      	lsrs	r3, r3, #6
 8002ed8:	2200      	movs	r2, #0
 8002eda:	63bb      	str	r3, [r7, #56]	; 0x38
 8002edc:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002ede:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ee0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002ee4:	633b      	str	r3, [r7, #48]	; 0x30
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	637b      	str	r3, [r7, #52]	; 0x34
 8002eea:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002eee:	4622      	mov	r2, r4
 8002ef0:	462b      	mov	r3, r5
 8002ef2:	f04f 0000 	mov.w	r0, #0
 8002ef6:	f04f 0100 	mov.w	r1, #0
 8002efa:	0159      	lsls	r1, r3, #5
 8002efc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002f00:	0150      	lsls	r0, r2, #5
 8002f02:	4602      	mov	r2, r0
 8002f04:	460b      	mov	r3, r1
 8002f06:	4621      	mov	r1, r4
 8002f08:	1a51      	subs	r1, r2, r1
 8002f0a:	6139      	str	r1, [r7, #16]
 8002f0c:	4629      	mov	r1, r5
 8002f0e:	eb63 0301 	sbc.w	r3, r3, r1
 8002f12:	617b      	str	r3, [r7, #20]
 8002f14:	f04f 0200 	mov.w	r2, #0
 8002f18:	f04f 0300 	mov.w	r3, #0
 8002f1c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002f20:	4659      	mov	r1, fp
 8002f22:	018b      	lsls	r3, r1, #6
 8002f24:	4651      	mov	r1, sl
 8002f26:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002f2a:	4651      	mov	r1, sl
 8002f2c:	018a      	lsls	r2, r1, #6
 8002f2e:	4651      	mov	r1, sl
 8002f30:	ebb2 0801 	subs.w	r8, r2, r1
 8002f34:	4659      	mov	r1, fp
 8002f36:	eb63 0901 	sbc.w	r9, r3, r1
 8002f3a:	f04f 0200 	mov.w	r2, #0
 8002f3e:	f04f 0300 	mov.w	r3, #0
 8002f42:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002f46:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002f4a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002f4e:	4690      	mov	r8, r2
 8002f50:	4699      	mov	r9, r3
 8002f52:	4623      	mov	r3, r4
 8002f54:	eb18 0303 	adds.w	r3, r8, r3
 8002f58:	60bb      	str	r3, [r7, #8]
 8002f5a:	462b      	mov	r3, r5
 8002f5c:	eb49 0303 	adc.w	r3, r9, r3
 8002f60:	60fb      	str	r3, [r7, #12]
 8002f62:	f04f 0200 	mov.w	r2, #0
 8002f66:	f04f 0300 	mov.w	r3, #0
 8002f6a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002f6e:	4629      	mov	r1, r5
 8002f70:	024b      	lsls	r3, r1, #9
 8002f72:	4621      	mov	r1, r4
 8002f74:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002f78:	4621      	mov	r1, r4
 8002f7a:	024a      	lsls	r2, r1, #9
 8002f7c:	4610      	mov	r0, r2
 8002f7e:	4619      	mov	r1, r3
 8002f80:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002f82:	2200      	movs	r2, #0
 8002f84:	62bb      	str	r3, [r7, #40]	; 0x28
 8002f86:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002f88:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002f8c:	f7fd f988 	bl	80002a0 <__aeabi_uldivmod>
 8002f90:	4602      	mov	r2, r0
 8002f92:	460b      	mov	r3, r1
 8002f94:	4613      	mov	r3, r2
 8002f96:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002f98:	e058      	b.n	800304c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f9a:	4b38      	ldr	r3, [pc, #224]	; (800307c <HAL_RCC_GetSysClockFreq+0x200>)
 8002f9c:	685b      	ldr	r3, [r3, #4]
 8002f9e:	099b      	lsrs	r3, r3, #6
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	4611      	mov	r1, r2
 8002fa6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002faa:	623b      	str	r3, [r7, #32]
 8002fac:	2300      	movs	r3, #0
 8002fae:	627b      	str	r3, [r7, #36]	; 0x24
 8002fb0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002fb4:	4642      	mov	r2, r8
 8002fb6:	464b      	mov	r3, r9
 8002fb8:	f04f 0000 	mov.w	r0, #0
 8002fbc:	f04f 0100 	mov.w	r1, #0
 8002fc0:	0159      	lsls	r1, r3, #5
 8002fc2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002fc6:	0150      	lsls	r0, r2, #5
 8002fc8:	4602      	mov	r2, r0
 8002fca:	460b      	mov	r3, r1
 8002fcc:	4641      	mov	r1, r8
 8002fce:	ebb2 0a01 	subs.w	sl, r2, r1
 8002fd2:	4649      	mov	r1, r9
 8002fd4:	eb63 0b01 	sbc.w	fp, r3, r1
 8002fd8:	f04f 0200 	mov.w	r2, #0
 8002fdc:	f04f 0300 	mov.w	r3, #0
 8002fe0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002fe4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002fe8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002fec:	ebb2 040a 	subs.w	r4, r2, sl
 8002ff0:	eb63 050b 	sbc.w	r5, r3, fp
 8002ff4:	f04f 0200 	mov.w	r2, #0
 8002ff8:	f04f 0300 	mov.w	r3, #0
 8002ffc:	00eb      	lsls	r3, r5, #3
 8002ffe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003002:	00e2      	lsls	r2, r4, #3
 8003004:	4614      	mov	r4, r2
 8003006:	461d      	mov	r5, r3
 8003008:	4643      	mov	r3, r8
 800300a:	18e3      	adds	r3, r4, r3
 800300c:	603b      	str	r3, [r7, #0]
 800300e:	464b      	mov	r3, r9
 8003010:	eb45 0303 	adc.w	r3, r5, r3
 8003014:	607b      	str	r3, [r7, #4]
 8003016:	f04f 0200 	mov.w	r2, #0
 800301a:	f04f 0300 	mov.w	r3, #0
 800301e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003022:	4629      	mov	r1, r5
 8003024:	028b      	lsls	r3, r1, #10
 8003026:	4621      	mov	r1, r4
 8003028:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800302c:	4621      	mov	r1, r4
 800302e:	028a      	lsls	r2, r1, #10
 8003030:	4610      	mov	r0, r2
 8003032:	4619      	mov	r1, r3
 8003034:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003036:	2200      	movs	r2, #0
 8003038:	61bb      	str	r3, [r7, #24]
 800303a:	61fa      	str	r2, [r7, #28]
 800303c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003040:	f7fd f92e 	bl	80002a0 <__aeabi_uldivmod>
 8003044:	4602      	mov	r2, r0
 8003046:	460b      	mov	r3, r1
 8003048:	4613      	mov	r3, r2
 800304a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800304c:	4b0b      	ldr	r3, [pc, #44]	; (800307c <HAL_RCC_GetSysClockFreq+0x200>)
 800304e:	685b      	ldr	r3, [r3, #4]
 8003050:	0c1b      	lsrs	r3, r3, #16
 8003052:	f003 0303 	and.w	r3, r3, #3
 8003056:	3301      	adds	r3, #1
 8003058:	005b      	lsls	r3, r3, #1
 800305a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800305c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800305e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003060:	fbb2 f3f3 	udiv	r3, r2, r3
 8003064:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003066:	e002      	b.n	800306e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003068:	4b05      	ldr	r3, [pc, #20]	; (8003080 <HAL_RCC_GetSysClockFreq+0x204>)
 800306a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800306c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800306e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003070:	4618      	mov	r0, r3
 8003072:	3750      	adds	r7, #80	; 0x50
 8003074:	46bd      	mov	sp, r7
 8003076:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800307a:	bf00      	nop
 800307c:	40023800 	.word	0x40023800
 8003080:	00f42400 	.word	0x00f42400
 8003084:	007a1200 	.word	0x007a1200

08003088 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003088:	b480      	push	{r7}
 800308a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800308c:	4b03      	ldr	r3, [pc, #12]	; (800309c <HAL_RCC_GetHCLKFreq+0x14>)
 800308e:	681b      	ldr	r3, [r3, #0]
}
 8003090:	4618      	mov	r0, r3
 8003092:	46bd      	mov	sp, r7
 8003094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003098:	4770      	bx	lr
 800309a:	bf00      	nop
 800309c:	2000000c 	.word	0x2000000c

080030a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80030a4:	f7ff fff0 	bl	8003088 <HAL_RCC_GetHCLKFreq>
 80030a8:	4602      	mov	r2, r0
 80030aa:	4b05      	ldr	r3, [pc, #20]	; (80030c0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80030ac:	689b      	ldr	r3, [r3, #8]
 80030ae:	0a9b      	lsrs	r3, r3, #10
 80030b0:	f003 0307 	and.w	r3, r3, #7
 80030b4:	4903      	ldr	r1, [pc, #12]	; (80030c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80030b6:	5ccb      	ldrb	r3, [r1, r3]
 80030b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80030bc:	4618      	mov	r0, r3
 80030be:	bd80      	pop	{r7, pc}
 80030c0:	40023800 	.word	0x40023800
 80030c4:	0800543c 	.word	0x0800543c

080030c8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80030cc:	f7ff ffdc 	bl	8003088 <HAL_RCC_GetHCLKFreq>
 80030d0:	4602      	mov	r2, r0
 80030d2:	4b05      	ldr	r3, [pc, #20]	; (80030e8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80030d4:	689b      	ldr	r3, [r3, #8]
 80030d6:	0b5b      	lsrs	r3, r3, #13
 80030d8:	f003 0307 	and.w	r3, r3, #7
 80030dc:	4903      	ldr	r1, [pc, #12]	; (80030ec <HAL_RCC_GetPCLK2Freq+0x24>)
 80030de:	5ccb      	ldrb	r3, [r1, r3]
 80030e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80030e4:	4618      	mov	r0, r3
 80030e6:	bd80      	pop	{r7, pc}
 80030e8:	40023800 	.word	0x40023800
 80030ec:	0800543c 	.word	0x0800543c

080030f0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80030f0:	b580      	push	{r7, lr}
 80030f2:	b082      	sub	sp, #8
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d101      	bne.n	8003102 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80030fe:	2301      	movs	r3, #1
 8003100:	e03f      	b.n	8003182 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003108:	b2db      	uxtb	r3, r3
 800310a:	2b00      	cmp	r3, #0
 800310c:	d106      	bne.n	800311c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	2200      	movs	r2, #0
 8003112:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003116:	6878      	ldr	r0, [r7, #4]
 8003118:	f7ff fab0 	bl	800267c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	2224      	movs	r2, #36	; 0x24
 8003120:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	68da      	ldr	r2, [r3, #12]
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003132:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003134:	6878      	ldr	r0, [r7, #4]
 8003136:	f000 f929 	bl	800338c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	691a      	ldr	r2, [r3, #16]
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003148:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	695a      	ldr	r2, [r3, #20]
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003158:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	68da      	ldr	r2, [r3, #12]
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003168:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	2200      	movs	r2, #0
 800316e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	2220      	movs	r2, #32
 8003174:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	2220      	movs	r2, #32
 800317c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003180:	2300      	movs	r3, #0
}
 8003182:	4618      	mov	r0, r3
 8003184:	3708      	adds	r7, #8
 8003186:	46bd      	mov	sp, r7
 8003188:	bd80      	pop	{r7, pc}

0800318a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800318a:	b580      	push	{r7, lr}
 800318c:	b08a      	sub	sp, #40	; 0x28
 800318e:	af02      	add	r7, sp, #8
 8003190:	60f8      	str	r0, [r7, #12]
 8003192:	60b9      	str	r1, [r7, #8]
 8003194:	603b      	str	r3, [r7, #0]
 8003196:	4613      	mov	r3, r2
 8003198:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800319a:	2300      	movs	r3, #0
 800319c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031a4:	b2db      	uxtb	r3, r3
 80031a6:	2b20      	cmp	r3, #32
 80031a8:	d17c      	bne.n	80032a4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80031aa:	68bb      	ldr	r3, [r7, #8]
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d002      	beq.n	80031b6 <HAL_UART_Transmit+0x2c>
 80031b0:	88fb      	ldrh	r3, [r7, #6]
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d101      	bne.n	80031ba <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80031b6:	2301      	movs	r3, #1
 80031b8:	e075      	b.n	80032a6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80031c0:	2b01      	cmp	r3, #1
 80031c2:	d101      	bne.n	80031c8 <HAL_UART_Transmit+0x3e>
 80031c4:	2302      	movs	r3, #2
 80031c6:	e06e      	b.n	80032a6 <HAL_UART_Transmit+0x11c>
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	2201      	movs	r2, #1
 80031cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	2200      	movs	r2, #0
 80031d4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	2221      	movs	r2, #33	; 0x21
 80031da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80031de:	f7fd ff61 	bl	80010a4 <HAL_GetTick>
 80031e2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	88fa      	ldrh	r2, [r7, #6]
 80031e8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	88fa      	ldrh	r2, [r7, #6]
 80031ee:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	689b      	ldr	r3, [r3, #8]
 80031f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80031f8:	d108      	bne.n	800320c <HAL_UART_Transmit+0x82>
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	691b      	ldr	r3, [r3, #16]
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d104      	bne.n	800320c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003202:	2300      	movs	r3, #0
 8003204:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003206:	68bb      	ldr	r3, [r7, #8]
 8003208:	61bb      	str	r3, [r7, #24]
 800320a:	e003      	b.n	8003214 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800320c:	68bb      	ldr	r3, [r7, #8]
 800320e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003210:	2300      	movs	r3, #0
 8003212:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	2200      	movs	r2, #0
 8003218:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800321c:	e02a      	b.n	8003274 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800321e:	683b      	ldr	r3, [r7, #0]
 8003220:	9300      	str	r3, [sp, #0]
 8003222:	697b      	ldr	r3, [r7, #20]
 8003224:	2200      	movs	r2, #0
 8003226:	2180      	movs	r1, #128	; 0x80
 8003228:	68f8      	ldr	r0, [r7, #12]
 800322a:	f000 f840 	bl	80032ae <UART_WaitOnFlagUntilTimeout>
 800322e:	4603      	mov	r3, r0
 8003230:	2b00      	cmp	r3, #0
 8003232:	d001      	beq.n	8003238 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003234:	2303      	movs	r3, #3
 8003236:	e036      	b.n	80032a6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003238:	69fb      	ldr	r3, [r7, #28]
 800323a:	2b00      	cmp	r3, #0
 800323c:	d10b      	bne.n	8003256 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800323e:	69bb      	ldr	r3, [r7, #24]
 8003240:	881b      	ldrh	r3, [r3, #0]
 8003242:	461a      	mov	r2, r3
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800324c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800324e:	69bb      	ldr	r3, [r7, #24]
 8003250:	3302      	adds	r3, #2
 8003252:	61bb      	str	r3, [r7, #24]
 8003254:	e007      	b.n	8003266 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003256:	69fb      	ldr	r3, [r7, #28]
 8003258:	781a      	ldrb	r2, [r3, #0]
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003260:	69fb      	ldr	r3, [r7, #28]
 8003262:	3301      	adds	r3, #1
 8003264:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800326a:	b29b      	uxth	r3, r3
 800326c:	3b01      	subs	r3, #1
 800326e:	b29a      	uxth	r2, r3
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003278:	b29b      	uxth	r3, r3
 800327a:	2b00      	cmp	r3, #0
 800327c:	d1cf      	bne.n	800321e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800327e:	683b      	ldr	r3, [r7, #0]
 8003280:	9300      	str	r3, [sp, #0]
 8003282:	697b      	ldr	r3, [r7, #20]
 8003284:	2200      	movs	r2, #0
 8003286:	2140      	movs	r1, #64	; 0x40
 8003288:	68f8      	ldr	r0, [r7, #12]
 800328a:	f000 f810 	bl	80032ae <UART_WaitOnFlagUntilTimeout>
 800328e:	4603      	mov	r3, r0
 8003290:	2b00      	cmp	r3, #0
 8003292:	d001      	beq.n	8003298 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003294:	2303      	movs	r3, #3
 8003296:	e006      	b.n	80032a6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	2220      	movs	r2, #32
 800329c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80032a0:	2300      	movs	r3, #0
 80032a2:	e000      	b.n	80032a6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80032a4:	2302      	movs	r3, #2
  }
}
 80032a6:	4618      	mov	r0, r3
 80032a8:	3720      	adds	r7, #32
 80032aa:	46bd      	mov	sp, r7
 80032ac:	bd80      	pop	{r7, pc}

080032ae <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80032ae:	b580      	push	{r7, lr}
 80032b0:	b090      	sub	sp, #64	; 0x40
 80032b2:	af00      	add	r7, sp, #0
 80032b4:	60f8      	str	r0, [r7, #12]
 80032b6:	60b9      	str	r1, [r7, #8]
 80032b8:	603b      	str	r3, [r7, #0]
 80032ba:	4613      	mov	r3, r2
 80032bc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80032be:	e050      	b.n	8003362 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80032c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80032c2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80032c6:	d04c      	beq.n	8003362 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80032c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d007      	beq.n	80032de <UART_WaitOnFlagUntilTimeout+0x30>
 80032ce:	f7fd fee9 	bl	80010a4 <HAL_GetTick>
 80032d2:	4602      	mov	r2, r0
 80032d4:	683b      	ldr	r3, [r7, #0]
 80032d6:	1ad3      	subs	r3, r2, r3
 80032d8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80032da:	429a      	cmp	r2, r3
 80032dc:	d241      	bcs.n	8003362 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	330c      	adds	r3, #12
 80032e4:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032e8:	e853 3f00 	ldrex	r3, [r3]
 80032ec:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80032ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032f0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80032f4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	330c      	adds	r3, #12
 80032fc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80032fe:	637a      	str	r2, [r7, #52]	; 0x34
 8003300:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003302:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003304:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003306:	e841 2300 	strex	r3, r2, [r1]
 800330a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800330c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800330e:	2b00      	cmp	r3, #0
 8003310:	d1e5      	bne.n	80032de <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	3314      	adds	r3, #20
 8003318:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800331a:	697b      	ldr	r3, [r7, #20]
 800331c:	e853 3f00 	ldrex	r3, [r3]
 8003320:	613b      	str	r3, [r7, #16]
   return(result);
 8003322:	693b      	ldr	r3, [r7, #16]
 8003324:	f023 0301 	bic.w	r3, r3, #1
 8003328:	63bb      	str	r3, [r7, #56]	; 0x38
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	3314      	adds	r3, #20
 8003330:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003332:	623a      	str	r2, [r7, #32]
 8003334:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003336:	69f9      	ldr	r1, [r7, #28]
 8003338:	6a3a      	ldr	r2, [r7, #32]
 800333a:	e841 2300 	strex	r3, r2, [r1]
 800333e:	61bb      	str	r3, [r7, #24]
   return(result);
 8003340:	69bb      	ldr	r3, [r7, #24]
 8003342:	2b00      	cmp	r3, #0
 8003344:	d1e5      	bne.n	8003312 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	2220      	movs	r2, #32
 800334a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	2220      	movs	r2, #32
 8003352:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	2200      	movs	r2, #0
 800335a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800335e:	2303      	movs	r3, #3
 8003360:	e00f      	b.n	8003382 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	681a      	ldr	r2, [r3, #0]
 8003368:	68bb      	ldr	r3, [r7, #8]
 800336a:	4013      	ands	r3, r2
 800336c:	68ba      	ldr	r2, [r7, #8]
 800336e:	429a      	cmp	r2, r3
 8003370:	bf0c      	ite	eq
 8003372:	2301      	moveq	r3, #1
 8003374:	2300      	movne	r3, #0
 8003376:	b2db      	uxtb	r3, r3
 8003378:	461a      	mov	r2, r3
 800337a:	79fb      	ldrb	r3, [r7, #7]
 800337c:	429a      	cmp	r2, r3
 800337e:	d09f      	beq.n	80032c0 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003380:	2300      	movs	r3, #0
}
 8003382:	4618      	mov	r0, r3
 8003384:	3740      	adds	r7, #64	; 0x40
 8003386:	46bd      	mov	sp, r7
 8003388:	bd80      	pop	{r7, pc}
	...

0800338c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800338c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003390:	b0c0      	sub	sp, #256	; 0x100
 8003392:	af00      	add	r7, sp, #0
 8003394:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003398:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	691b      	ldr	r3, [r3, #16]
 80033a0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80033a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033a8:	68d9      	ldr	r1, [r3, #12]
 80033aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033ae:	681a      	ldr	r2, [r3, #0]
 80033b0:	ea40 0301 	orr.w	r3, r0, r1
 80033b4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80033b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033ba:	689a      	ldr	r2, [r3, #8]
 80033bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033c0:	691b      	ldr	r3, [r3, #16]
 80033c2:	431a      	orrs	r2, r3
 80033c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033c8:	695b      	ldr	r3, [r3, #20]
 80033ca:	431a      	orrs	r2, r3
 80033cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033d0:	69db      	ldr	r3, [r3, #28]
 80033d2:	4313      	orrs	r3, r2
 80033d4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80033d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	68db      	ldr	r3, [r3, #12]
 80033e0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80033e4:	f021 010c 	bic.w	r1, r1, #12
 80033e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033ec:	681a      	ldr	r2, [r3, #0]
 80033ee:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80033f2:	430b      	orrs	r3, r1
 80033f4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80033f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	695b      	ldr	r3, [r3, #20]
 80033fe:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003402:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003406:	6999      	ldr	r1, [r3, #24]
 8003408:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800340c:	681a      	ldr	r2, [r3, #0]
 800340e:	ea40 0301 	orr.w	r3, r0, r1
 8003412:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003414:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003418:	681a      	ldr	r2, [r3, #0]
 800341a:	4b8f      	ldr	r3, [pc, #572]	; (8003658 <UART_SetConfig+0x2cc>)
 800341c:	429a      	cmp	r2, r3
 800341e:	d005      	beq.n	800342c <UART_SetConfig+0xa0>
 8003420:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003424:	681a      	ldr	r2, [r3, #0]
 8003426:	4b8d      	ldr	r3, [pc, #564]	; (800365c <UART_SetConfig+0x2d0>)
 8003428:	429a      	cmp	r2, r3
 800342a:	d104      	bne.n	8003436 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800342c:	f7ff fe4c 	bl	80030c8 <HAL_RCC_GetPCLK2Freq>
 8003430:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003434:	e003      	b.n	800343e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003436:	f7ff fe33 	bl	80030a0 <HAL_RCC_GetPCLK1Freq>
 800343a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800343e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003442:	69db      	ldr	r3, [r3, #28]
 8003444:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003448:	f040 810c 	bne.w	8003664 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800344c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003450:	2200      	movs	r2, #0
 8003452:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003456:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800345a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800345e:	4622      	mov	r2, r4
 8003460:	462b      	mov	r3, r5
 8003462:	1891      	adds	r1, r2, r2
 8003464:	65b9      	str	r1, [r7, #88]	; 0x58
 8003466:	415b      	adcs	r3, r3
 8003468:	65fb      	str	r3, [r7, #92]	; 0x5c
 800346a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800346e:	4621      	mov	r1, r4
 8003470:	eb12 0801 	adds.w	r8, r2, r1
 8003474:	4629      	mov	r1, r5
 8003476:	eb43 0901 	adc.w	r9, r3, r1
 800347a:	f04f 0200 	mov.w	r2, #0
 800347e:	f04f 0300 	mov.w	r3, #0
 8003482:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003486:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800348a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800348e:	4690      	mov	r8, r2
 8003490:	4699      	mov	r9, r3
 8003492:	4623      	mov	r3, r4
 8003494:	eb18 0303 	adds.w	r3, r8, r3
 8003498:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800349c:	462b      	mov	r3, r5
 800349e:	eb49 0303 	adc.w	r3, r9, r3
 80034a2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80034a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034aa:	685b      	ldr	r3, [r3, #4]
 80034ac:	2200      	movs	r2, #0
 80034ae:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80034b2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80034b6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80034ba:	460b      	mov	r3, r1
 80034bc:	18db      	adds	r3, r3, r3
 80034be:	653b      	str	r3, [r7, #80]	; 0x50
 80034c0:	4613      	mov	r3, r2
 80034c2:	eb42 0303 	adc.w	r3, r2, r3
 80034c6:	657b      	str	r3, [r7, #84]	; 0x54
 80034c8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80034cc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80034d0:	f7fc fee6 	bl	80002a0 <__aeabi_uldivmod>
 80034d4:	4602      	mov	r2, r0
 80034d6:	460b      	mov	r3, r1
 80034d8:	4b61      	ldr	r3, [pc, #388]	; (8003660 <UART_SetConfig+0x2d4>)
 80034da:	fba3 2302 	umull	r2, r3, r3, r2
 80034de:	095b      	lsrs	r3, r3, #5
 80034e0:	011c      	lsls	r4, r3, #4
 80034e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80034e6:	2200      	movs	r2, #0
 80034e8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80034ec:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80034f0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80034f4:	4642      	mov	r2, r8
 80034f6:	464b      	mov	r3, r9
 80034f8:	1891      	adds	r1, r2, r2
 80034fa:	64b9      	str	r1, [r7, #72]	; 0x48
 80034fc:	415b      	adcs	r3, r3
 80034fe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003500:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003504:	4641      	mov	r1, r8
 8003506:	eb12 0a01 	adds.w	sl, r2, r1
 800350a:	4649      	mov	r1, r9
 800350c:	eb43 0b01 	adc.w	fp, r3, r1
 8003510:	f04f 0200 	mov.w	r2, #0
 8003514:	f04f 0300 	mov.w	r3, #0
 8003518:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800351c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003520:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003524:	4692      	mov	sl, r2
 8003526:	469b      	mov	fp, r3
 8003528:	4643      	mov	r3, r8
 800352a:	eb1a 0303 	adds.w	r3, sl, r3
 800352e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003532:	464b      	mov	r3, r9
 8003534:	eb4b 0303 	adc.w	r3, fp, r3
 8003538:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800353c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003540:	685b      	ldr	r3, [r3, #4]
 8003542:	2200      	movs	r2, #0
 8003544:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003548:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800354c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003550:	460b      	mov	r3, r1
 8003552:	18db      	adds	r3, r3, r3
 8003554:	643b      	str	r3, [r7, #64]	; 0x40
 8003556:	4613      	mov	r3, r2
 8003558:	eb42 0303 	adc.w	r3, r2, r3
 800355c:	647b      	str	r3, [r7, #68]	; 0x44
 800355e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003562:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003566:	f7fc fe9b 	bl	80002a0 <__aeabi_uldivmod>
 800356a:	4602      	mov	r2, r0
 800356c:	460b      	mov	r3, r1
 800356e:	4611      	mov	r1, r2
 8003570:	4b3b      	ldr	r3, [pc, #236]	; (8003660 <UART_SetConfig+0x2d4>)
 8003572:	fba3 2301 	umull	r2, r3, r3, r1
 8003576:	095b      	lsrs	r3, r3, #5
 8003578:	2264      	movs	r2, #100	; 0x64
 800357a:	fb02 f303 	mul.w	r3, r2, r3
 800357e:	1acb      	subs	r3, r1, r3
 8003580:	00db      	lsls	r3, r3, #3
 8003582:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003586:	4b36      	ldr	r3, [pc, #216]	; (8003660 <UART_SetConfig+0x2d4>)
 8003588:	fba3 2302 	umull	r2, r3, r3, r2
 800358c:	095b      	lsrs	r3, r3, #5
 800358e:	005b      	lsls	r3, r3, #1
 8003590:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003594:	441c      	add	r4, r3
 8003596:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800359a:	2200      	movs	r2, #0
 800359c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80035a0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80035a4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80035a8:	4642      	mov	r2, r8
 80035aa:	464b      	mov	r3, r9
 80035ac:	1891      	adds	r1, r2, r2
 80035ae:	63b9      	str	r1, [r7, #56]	; 0x38
 80035b0:	415b      	adcs	r3, r3
 80035b2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80035b4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80035b8:	4641      	mov	r1, r8
 80035ba:	1851      	adds	r1, r2, r1
 80035bc:	6339      	str	r1, [r7, #48]	; 0x30
 80035be:	4649      	mov	r1, r9
 80035c0:	414b      	adcs	r3, r1
 80035c2:	637b      	str	r3, [r7, #52]	; 0x34
 80035c4:	f04f 0200 	mov.w	r2, #0
 80035c8:	f04f 0300 	mov.w	r3, #0
 80035cc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80035d0:	4659      	mov	r1, fp
 80035d2:	00cb      	lsls	r3, r1, #3
 80035d4:	4651      	mov	r1, sl
 80035d6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80035da:	4651      	mov	r1, sl
 80035dc:	00ca      	lsls	r2, r1, #3
 80035de:	4610      	mov	r0, r2
 80035e0:	4619      	mov	r1, r3
 80035e2:	4603      	mov	r3, r0
 80035e4:	4642      	mov	r2, r8
 80035e6:	189b      	adds	r3, r3, r2
 80035e8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80035ec:	464b      	mov	r3, r9
 80035ee:	460a      	mov	r2, r1
 80035f0:	eb42 0303 	adc.w	r3, r2, r3
 80035f4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80035f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035fc:	685b      	ldr	r3, [r3, #4]
 80035fe:	2200      	movs	r2, #0
 8003600:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003604:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003608:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800360c:	460b      	mov	r3, r1
 800360e:	18db      	adds	r3, r3, r3
 8003610:	62bb      	str	r3, [r7, #40]	; 0x28
 8003612:	4613      	mov	r3, r2
 8003614:	eb42 0303 	adc.w	r3, r2, r3
 8003618:	62fb      	str	r3, [r7, #44]	; 0x2c
 800361a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800361e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003622:	f7fc fe3d 	bl	80002a0 <__aeabi_uldivmod>
 8003626:	4602      	mov	r2, r0
 8003628:	460b      	mov	r3, r1
 800362a:	4b0d      	ldr	r3, [pc, #52]	; (8003660 <UART_SetConfig+0x2d4>)
 800362c:	fba3 1302 	umull	r1, r3, r3, r2
 8003630:	095b      	lsrs	r3, r3, #5
 8003632:	2164      	movs	r1, #100	; 0x64
 8003634:	fb01 f303 	mul.w	r3, r1, r3
 8003638:	1ad3      	subs	r3, r2, r3
 800363a:	00db      	lsls	r3, r3, #3
 800363c:	3332      	adds	r3, #50	; 0x32
 800363e:	4a08      	ldr	r2, [pc, #32]	; (8003660 <UART_SetConfig+0x2d4>)
 8003640:	fba2 2303 	umull	r2, r3, r2, r3
 8003644:	095b      	lsrs	r3, r3, #5
 8003646:	f003 0207 	and.w	r2, r3, #7
 800364a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	4422      	add	r2, r4
 8003652:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003654:	e105      	b.n	8003862 <UART_SetConfig+0x4d6>
 8003656:	bf00      	nop
 8003658:	40011000 	.word	0x40011000
 800365c:	40011400 	.word	0x40011400
 8003660:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003664:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003668:	2200      	movs	r2, #0
 800366a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800366e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003672:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003676:	4642      	mov	r2, r8
 8003678:	464b      	mov	r3, r9
 800367a:	1891      	adds	r1, r2, r2
 800367c:	6239      	str	r1, [r7, #32]
 800367e:	415b      	adcs	r3, r3
 8003680:	627b      	str	r3, [r7, #36]	; 0x24
 8003682:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003686:	4641      	mov	r1, r8
 8003688:	1854      	adds	r4, r2, r1
 800368a:	4649      	mov	r1, r9
 800368c:	eb43 0501 	adc.w	r5, r3, r1
 8003690:	f04f 0200 	mov.w	r2, #0
 8003694:	f04f 0300 	mov.w	r3, #0
 8003698:	00eb      	lsls	r3, r5, #3
 800369a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800369e:	00e2      	lsls	r2, r4, #3
 80036a0:	4614      	mov	r4, r2
 80036a2:	461d      	mov	r5, r3
 80036a4:	4643      	mov	r3, r8
 80036a6:	18e3      	adds	r3, r4, r3
 80036a8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80036ac:	464b      	mov	r3, r9
 80036ae:	eb45 0303 	adc.w	r3, r5, r3
 80036b2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80036b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036ba:	685b      	ldr	r3, [r3, #4]
 80036bc:	2200      	movs	r2, #0
 80036be:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80036c2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80036c6:	f04f 0200 	mov.w	r2, #0
 80036ca:	f04f 0300 	mov.w	r3, #0
 80036ce:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80036d2:	4629      	mov	r1, r5
 80036d4:	008b      	lsls	r3, r1, #2
 80036d6:	4621      	mov	r1, r4
 80036d8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80036dc:	4621      	mov	r1, r4
 80036de:	008a      	lsls	r2, r1, #2
 80036e0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80036e4:	f7fc fddc 	bl	80002a0 <__aeabi_uldivmod>
 80036e8:	4602      	mov	r2, r0
 80036ea:	460b      	mov	r3, r1
 80036ec:	4b60      	ldr	r3, [pc, #384]	; (8003870 <UART_SetConfig+0x4e4>)
 80036ee:	fba3 2302 	umull	r2, r3, r3, r2
 80036f2:	095b      	lsrs	r3, r3, #5
 80036f4:	011c      	lsls	r4, r3, #4
 80036f6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80036fa:	2200      	movs	r2, #0
 80036fc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003700:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003704:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003708:	4642      	mov	r2, r8
 800370a:	464b      	mov	r3, r9
 800370c:	1891      	adds	r1, r2, r2
 800370e:	61b9      	str	r1, [r7, #24]
 8003710:	415b      	adcs	r3, r3
 8003712:	61fb      	str	r3, [r7, #28]
 8003714:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003718:	4641      	mov	r1, r8
 800371a:	1851      	adds	r1, r2, r1
 800371c:	6139      	str	r1, [r7, #16]
 800371e:	4649      	mov	r1, r9
 8003720:	414b      	adcs	r3, r1
 8003722:	617b      	str	r3, [r7, #20]
 8003724:	f04f 0200 	mov.w	r2, #0
 8003728:	f04f 0300 	mov.w	r3, #0
 800372c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003730:	4659      	mov	r1, fp
 8003732:	00cb      	lsls	r3, r1, #3
 8003734:	4651      	mov	r1, sl
 8003736:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800373a:	4651      	mov	r1, sl
 800373c:	00ca      	lsls	r2, r1, #3
 800373e:	4610      	mov	r0, r2
 8003740:	4619      	mov	r1, r3
 8003742:	4603      	mov	r3, r0
 8003744:	4642      	mov	r2, r8
 8003746:	189b      	adds	r3, r3, r2
 8003748:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800374c:	464b      	mov	r3, r9
 800374e:	460a      	mov	r2, r1
 8003750:	eb42 0303 	adc.w	r3, r2, r3
 8003754:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003758:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800375c:	685b      	ldr	r3, [r3, #4]
 800375e:	2200      	movs	r2, #0
 8003760:	67bb      	str	r3, [r7, #120]	; 0x78
 8003762:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003764:	f04f 0200 	mov.w	r2, #0
 8003768:	f04f 0300 	mov.w	r3, #0
 800376c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003770:	4649      	mov	r1, r9
 8003772:	008b      	lsls	r3, r1, #2
 8003774:	4641      	mov	r1, r8
 8003776:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800377a:	4641      	mov	r1, r8
 800377c:	008a      	lsls	r2, r1, #2
 800377e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003782:	f7fc fd8d 	bl	80002a0 <__aeabi_uldivmod>
 8003786:	4602      	mov	r2, r0
 8003788:	460b      	mov	r3, r1
 800378a:	4b39      	ldr	r3, [pc, #228]	; (8003870 <UART_SetConfig+0x4e4>)
 800378c:	fba3 1302 	umull	r1, r3, r3, r2
 8003790:	095b      	lsrs	r3, r3, #5
 8003792:	2164      	movs	r1, #100	; 0x64
 8003794:	fb01 f303 	mul.w	r3, r1, r3
 8003798:	1ad3      	subs	r3, r2, r3
 800379a:	011b      	lsls	r3, r3, #4
 800379c:	3332      	adds	r3, #50	; 0x32
 800379e:	4a34      	ldr	r2, [pc, #208]	; (8003870 <UART_SetConfig+0x4e4>)
 80037a0:	fba2 2303 	umull	r2, r3, r2, r3
 80037a4:	095b      	lsrs	r3, r3, #5
 80037a6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80037aa:	441c      	add	r4, r3
 80037ac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80037b0:	2200      	movs	r2, #0
 80037b2:	673b      	str	r3, [r7, #112]	; 0x70
 80037b4:	677a      	str	r2, [r7, #116]	; 0x74
 80037b6:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80037ba:	4642      	mov	r2, r8
 80037bc:	464b      	mov	r3, r9
 80037be:	1891      	adds	r1, r2, r2
 80037c0:	60b9      	str	r1, [r7, #8]
 80037c2:	415b      	adcs	r3, r3
 80037c4:	60fb      	str	r3, [r7, #12]
 80037c6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80037ca:	4641      	mov	r1, r8
 80037cc:	1851      	adds	r1, r2, r1
 80037ce:	6039      	str	r1, [r7, #0]
 80037d0:	4649      	mov	r1, r9
 80037d2:	414b      	adcs	r3, r1
 80037d4:	607b      	str	r3, [r7, #4]
 80037d6:	f04f 0200 	mov.w	r2, #0
 80037da:	f04f 0300 	mov.w	r3, #0
 80037de:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80037e2:	4659      	mov	r1, fp
 80037e4:	00cb      	lsls	r3, r1, #3
 80037e6:	4651      	mov	r1, sl
 80037e8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80037ec:	4651      	mov	r1, sl
 80037ee:	00ca      	lsls	r2, r1, #3
 80037f0:	4610      	mov	r0, r2
 80037f2:	4619      	mov	r1, r3
 80037f4:	4603      	mov	r3, r0
 80037f6:	4642      	mov	r2, r8
 80037f8:	189b      	adds	r3, r3, r2
 80037fa:	66bb      	str	r3, [r7, #104]	; 0x68
 80037fc:	464b      	mov	r3, r9
 80037fe:	460a      	mov	r2, r1
 8003800:	eb42 0303 	adc.w	r3, r2, r3
 8003804:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003806:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800380a:	685b      	ldr	r3, [r3, #4]
 800380c:	2200      	movs	r2, #0
 800380e:	663b      	str	r3, [r7, #96]	; 0x60
 8003810:	667a      	str	r2, [r7, #100]	; 0x64
 8003812:	f04f 0200 	mov.w	r2, #0
 8003816:	f04f 0300 	mov.w	r3, #0
 800381a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800381e:	4649      	mov	r1, r9
 8003820:	008b      	lsls	r3, r1, #2
 8003822:	4641      	mov	r1, r8
 8003824:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003828:	4641      	mov	r1, r8
 800382a:	008a      	lsls	r2, r1, #2
 800382c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003830:	f7fc fd36 	bl	80002a0 <__aeabi_uldivmod>
 8003834:	4602      	mov	r2, r0
 8003836:	460b      	mov	r3, r1
 8003838:	4b0d      	ldr	r3, [pc, #52]	; (8003870 <UART_SetConfig+0x4e4>)
 800383a:	fba3 1302 	umull	r1, r3, r3, r2
 800383e:	095b      	lsrs	r3, r3, #5
 8003840:	2164      	movs	r1, #100	; 0x64
 8003842:	fb01 f303 	mul.w	r3, r1, r3
 8003846:	1ad3      	subs	r3, r2, r3
 8003848:	011b      	lsls	r3, r3, #4
 800384a:	3332      	adds	r3, #50	; 0x32
 800384c:	4a08      	ldr	r2, [pc, #32]	; (8003870 <UART_SetConfig+0x4e4>)
 800384e:	fba2 2303 	umull	r2, r3, r2, r3
 8003852:	095b      	lsrs	r3, r3, #5
 8003854:	f003 020f 	and.w	r2, r3, #15
 8003858:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	4422      	add	r2, r4
 8003860:	609a      	str	r2, [r3, #8]
}
 8003862:	bf00      	nop
 8003864:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003868:	46bd      	mov	sp, r7
 800386a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800386e:	bf00      	nop
 8003870:	51eb851f 	.word	0x51eb851f

08003874 <main>:
/**
 * @brief  Main program
 * @param  None
 * @retval None
 */
int main(void) {
 8003874:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003878:	b0b4      	sub	sp, #208	; 0xd0
 800387a:	af08      	add	r7, sp, #32
	 handled in milliseconds basis.
	 - Set NVIC Group Priority to 4
	 - Low Level Initialization
	 */
	PN532_response_t res;
	HAL_Init();
 800387c:	f7fd fbb2 	bl	8000fe4 <HAL_Init>

	/* Configure the system clock to 180 MHz */
	SystemClock_Config();
 8003880:	f000 f9be 	bl	8003c00 <SystemClock_Config>

	uartInit();
 8003884:	f7fc fe8e 	bl	80005a4 <uartInit>

	uartSendString(pn532Driver_I2C_init()? "Init Success \n" : "Init Failure \n");
 8003888:	f7fd f842 	bl	8000910 <pn532Driver_I2C_init>
 800388c:	4603      	mov	r3, r0
 800388e:	2b00      	cmp	r3, #0
 8003890:	d001      	beq.n	8003896 <main+0x22>
 8003892:	4ba5      	ldr	r3, [pc, #660]	; (8003b28 <main+0x2b4>)
 8003894:	e000      	b.n	8003898 <main+0x24>
 8003896:	4ba5      	ldr	r3, [pc, #660]	; (8003b2c <main+0x2b8>)
 8003898:	4618      	mov	r0, r3
 800389a:	f7fc fead 	bl	80005f8 <uartSendString>

	PN532_firmware_t firmwareBuffer;
	res = pn532Driver_I2C_getFirmware(&firmwareBuffer);
 800389e:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 80038a2:	4618      	mov	r0, r3
 80038a4:	f7fd f870 	bl	8000988 <pn532Driver_I2C_getFirmware>
 80038a8:	4603      	mov	r3, r0
 80038aa:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
	switch(res) {
 80038ae:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 80038b2:	2b04      	cmp	r3, #4
 80038b4:	d831      	bhi.n	800391a <main+0xa6>
 80038b6:	a201      	add	r2, pc, #4	; (adr r2, 80038bc <main+0x48>)
 80038b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038bc:	080038e9 	.word	0x080038e9
 80038c0:	080038d1 	.word	0x080038d1
 80038c4:	080038d9 	.word	0x080038d9
 80038c8:	0800391b 	.word	0x0800391b
 80038cc:	080038e1 	.word	0x080038e1
		case PN532_CMD_ERROR: uartSendString("FW CMD ERROR \n"); break;
 80038d0:	4897      	ldr	r0, [pc, #604]	; (8003b30 <main+0x2bc>)
 80038d2:	f7fc fe91 	bl	80005f8 <uartSendString>
 80038d6:	e023      	b.n	8003920 <main+0xac>
		case PN532_ACK_NOT_RECEIVED: uartSendString("FW ACK ERROR \n"); break;
 80038d8:	4896      	ldr	r0, [pc, #600]	; (8003b34 <main+0x2c0>)
 80038da:	f7fc fe8d 	bl	80005f8 <uartSendString>
 80038de:	e01f      	b.n	8003920 <main+0xac>
		case PN532_RESPONSE_ERROR: uartSendString("FW RESPONSE ERROR \n"); break;
 80038e0:	4895      	ldr	r0, [pc, #596]	; (8003b38 <main+0x2c4>)
 80038e2:	f7fc fe89 	bl	80005f8 <uartSendString>
 80038e6:	e01b      	b.n	8003920 <main+0xac>
		case PN532_OK: {
			char firmware_string[50];
			sprintf(firmware_string, "Firmware- IC: %02X , ver: %02X, rev: %02X, supp: %02X \n", firmwareBuffer.IC,firmwareBuffer.version,firmwareBuffer.revision,firmwareBuffer.support);
 80038e8:	f897 30a8 	ldrb.w	r3, [r7, #168]	; 0xa8
 80038ec:	4619      	mov	r1, r3
 80038ee:	f897 30a9 	ldrb.w	r3, [r7, #169]	; 0xa9
 80038f2:	461c      	mov	r4, r3
 80038f4:	f897 30aa 	ldrb.w	r3, [r7, #170]	; 0xaa
 80038f8:	f897 20ab 	ldrb.w	r2, [r7, #171]	; 0xab
 80038fc:	f107 0038 	add.w	r0, r7, #56	; 0x38
 8003900:	9201      	str	r2, [sp, #4]
 8003902:	9300      	str	r3, [sp, #0]
 8003904:	4623      	mov	r3, r4
 8003906:	460a      	mov	r2, r1
 8003908:	498c      	ldr	r1, [pc, #560]	; (8003b3c <main+0x2c8>)
 800390a:	f000 fe53 	bl	80045b4 <siprintf>
			uartSendString(firmware_string);
 800390e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8003912:	4618      	mov	r0, r3
 8003914:	f7fc fe70 	bl	80005f8 <uartSendString>
			break;
 8003918:	e002      	b.n	8003920 <main+0xac>
		}
		default: uartSendString("UNKNOWN ERROR");
 800391a:	4889      	ldr	r0, [pc, #548]	; (8003b40 <main+0x2cc>)
 800391c:	f7fc fe6c 	bl	80005f8 <uartSendString>
	}
	HAL_Delay(10);
 8003920:	200a      	movs	r0, #10
 8003922:	f7fd fbcb 	bl	80010bc <HAL_Delay>
	res = pn532Driver_I2C_configureSAM();
 8003926:	f7fd f893 	bl	8000a50 <pn532Driver_I2C_configureSAM>
 800392a:	4603      	mov	r3, r0
 800392c:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
	switch(res) {
 8003930:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 8003934:	2b04      	cmp	r3, #4
 8003936:	d81d      	bhi.n	8003974 <main+0x100>
 8003938:	a201      	add	r2, pc, #4	; (adr r2, 8003940 <main+0xcc>)
 800393a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800393e:	bf00      	nop
 8003940:	0800396d 	.word	0x0800396d
 8003944:	08003955 	.word	0x08003955
 8003948:	0800395d 	.word	0x0800395d
 800394c:	08003975 	.word	0x08003975
 8003950:	08003965 	.word	0x08003965
		case PN532_CMD_ERROR: uartSendString("SAM CMD ERROR \n"); break;
 8003954:	487b      	ldr	r0, [pc, #492]	; (8003b44 <main+0x2d0>)
 8003956:	f7fc fe4f 	bl	80005f8 <uartSendString>
 800395a:	e00f      	b.n	800397c <main+0x108>
		case PN532_ACK_NOT_RECEIVED: uartSendString("SAM ACK ERROR \n"); break;
 800395c:	487a      	ldr	r0, [pc, #488]	; (8003b48 <main+0x2d4>)
 800395e:	f7fc fe4b 	bl	80005f8 <uartSendString>
 8003962:	e00b      	b.n	800397c <main+0x108>
		case PN532_RESPONSE_ERROR: uartSendString("SAM RESPONSE ERROR \n"); break;
 8003964:	4879      	ldr	r0, [pc, #484]	; (8003b4c <main+0x2d8>)
 8003966:	f7fc fe47 	bl	80005f8 <uartSendString>
 800396a:	e007      	b.n	800397c <main+0x108>
		case PN532_OK: uartSendString("SAM SUCCESFULLY CONFIGURED \n"); break;
 800396c:	4878      	ldr	r0, [pc, #480]	; (8003b50 <main+0x2dc>)
 800396e:	f7fc fe43 	bl	80005f8 <uartSendString>
 8003972:	e003      	b.n	800397c <main+0x108>
		default: uartSendString("SAM UNKNOWN ERROR"); break;
 8003974:	4877      	ldr	r0, [pc, #476]	; (8003b54 <main+0x2e0>)
 8003976:	f7fc fe3f 	bl	80005f8 <uartSendString>
 800397a:	bf00      	nop
	}
	HAL_Delay(10);
 800397c:	200a      	movs	r0, #10
 800397e:	f7fd fb9d 	bl	80010bc <HAL_Delay>
	res = pn532Driver_I2C_configureTiming();
 8003982:	f7fd f9cb 	bl	8000d1c <pn532Driver_I2C_configureTiming>
 8003986:	4603      	mov	r3, r0
 8003988:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
	switch(res) {
 800398c:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 8003990:	2b04      	cmp	r3, #4
 8003992:	d81d      	bhi.n	80039d0 <main+0x15c>
 8003994:	a201      	add	r2, pc, #4	; (adr r2, 800399c <main+0x128>)
 8003996:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800399a:	bf00      	nop
 800399c:	080039c9 	.word	0x080039c9
 80039a0:	080039b1 	.word	0x080039b1
 80039a4:	080039b9 	.word	0x080039b9
 80039a8:	080039d1 	.word	0x080039d1
 80039ac:	080039c1 	.word	0x080039c1
		case PN532_CMD_ERROR: uartSendString("TIME CMD ERROR \n"); break;
 80039b0:	4869      	ldr	r0, [pc, #420]	; (8003b58 <main+0x2e4>)
 80039b2:	f7fc fe21 	bl	80005f8 <uartSendString>
 80039b6:	e00f      	b.n	80039d8 <main+0x164>
		case PN532_ACK_NOT_RECEIVED: uartSendString("TIME ACK ERROR \n"); break;
 80039b8:	4868      	ldr	r0, [pc, #416]	; (8003b5c <main+0x2e8>)
 80039ba:	f7fc fe1d 	bl	80005f8 <uartSendString>
 80039be:	e00b      	b.n	80039d8 <main+0x164>
		case PN532_RESPONSE_ERROR: uartSendString("TIME RESPONSE ERROR \n"); break;
 80039c0:	4867      	ldr	r0, [pc, #412]	; (8003b60 <main+0x2ec>)
 80039c2:	f7fc fe19 	bl	80005f8 <uartSendString>
 80039c6:	e007      	b.n	80039d8 <main+0x164>
		case PN532_OK: uartSendString("TIME SUCCESFULLY CONFIGURED \n"); break;
 80039c8:	4866      	ldr	r0, [pc, #408]	; (8003b64 <main+0x2f0>)
 80039ca:	f7fc fe15 	bl	80005f8 <uartSendString>
 80039ce:	e003      	b.n	80039d8 <main+0x164>
		default: uartSendString("TIME UNKNOWN ERROR"); break;
 80039d0:	4865      	ldr	r0, [pc, #404]	; (8003b68 <main+0x2f4>)
 80039d2:	f7fc fe11 	bl	80005f8 <uartSendString>
 80039d6:	bf00      	nop
	}
	/* Infinite loop */
	PN532_target_t targetBuffer;
	while (1) {
		res = pn532Driver_I2C_listPassiveTarget(&targetBuffer);
 80039d8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80039dc:	4618      	mov	r0, r3
 80039de:	f7fd f88b 	bl	8000af8 <pn532Driver_I2C_listPassiveTarget>
 80039e2:	4603      	mov	r3, r0
 80039e4:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
		switch(res) {
 80039e8:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 80039ec:	2b06      	cmp	r3, #6
 80039ee:	f200 8091 	bhi.w	8003b14 <main+0x2a0>
 80039f2:	a201      	add	r2, pc, #4	; (adr r2, 80039f8 <main+0x184>)
 80039f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039f8:	08003a35 	.word	0x08003a35
 80039fc:	08003a15 	.word	0x08003a15
 8003a00:	08003a1d 	.word	0x08003a1d
 8003a04:	08003b15 	.word	0x08003b15
 8003a08:	08003a25 	.word	0x08003a25
 8003a0c:	08003b15 	.word	0x08003b15
 8003a10:	08003a2d 	.word	0x08003a2d
			case PN532_CMD_ERROR: uartSendString("LIST CMD ERROR \n"); break;
 8003a14:	4855      	ldr	r0, [pc, #340]	; (8003b6c <main+0x2f8>)
 8003a16:	f7fc fdef 	bl	80005f8 <uartSendString>
 8003a1a:	e07f      	b.n	8003b1c <main+0x2a8>
			case PN532_ACK_NOT_RECEIVED: uartSendString("LIST ACK ERROR \n"); break;
 8003a1c:	4854      	ldr	r0, [pc, #336]	; (8003b70 <main+0x2fc>)
 8003a1e:	f7fc fdeb 	bl	80005f8 <uartSendString>
 8003a22:	e07b      	b.n	8003b1c <main+0x2a8>
			case PN532_RESPONSE_ERROR: uartSendString("LIST RESPONSE ERROR \n"); break;
 8003a24:	4853      	ldr	r0, [pc, #332]	; (8003b74 <main+0x300>)
 8003a26:	f7fc fde7 	bl	80005f8 <uartSendString>
 8003a2a:	e077      	b.n	8003b1c <main+0x2a8>
			case PN532_EMPTY: uartSendString("."); break;
 8003a2c:	4852      	ldr	r0, [pc, #328]	; (8003b78 <main+0x304>)
 8003a2e:	f7fc fde3 	bl	80005f8 <uartSendString>
 8003a32:	e073      	b.n	8003b1c <main+0x2a8>
			case PN532_OK: {
				uartSendString("\nCARD FOUND\n");
 8003a34:	4851      	ldr	r0, [pc, #324]	; (8003b7c <main+0x308>)
 8003a36:	f7fc fddf 	bl	80005f8 <uartSendString>
				char target_string[50];
				sprintf(target_string, "Target- ln: %02X , SENS_RES: %02X %02X, SEL_RES: %02X, NFCID_Length: %02X, NFCID: %02X %02X %02X %02X \n",
						targetBuffer.logical_number,
 8003a3a:	f897 309c 	ldrb.w	r3, [r7, #156]	; 0x9c
				sprintf(target_string, "Target- ln: %02X , SENS_RES: %02X %02X, SEL_RES: %02X, NFCID_Length: %02X, NFCID: %02X %02X %02X %02X \n",
 8003a3e:	469c      	mov	ip, r3
						targetBuffer.SENS_RES[0],
 8003a40:	f897 309d 	ldrb.w	r3, [r7, #157]	; 0x9d
				sprintf(target_string, "Target- ln: %02X , SENS_RES: %02X %02X, SEL_RES: %02X, NFCID_Length: %02X, NFCID: %02X %02X %02X %02X \n",
 8003a44:	469e      	mov	lr, r3
						targetBuffer.SENS_RES[1],
 8003a46:	f897 309e 	ldrb.w	r3, [r7, #158]	; 0x9e
						targetBuffer.SEL_RES,
 8003a4a:	f897 209f 	ldrb.w	r2, [r7, #159]	; 0x9f
						targetBuffer.NFCID_length,
 8003a4e:	f897 10a0 	ldrb.w	r1, [r7, #160]	; 0xa0
						targetBuffer.NFCID[0],
 8003a52:	f897 00a1 	ldrb.w	r0, [r7, #161]	; 0xa1
				sprintf(target_string, "Target- ln: %02X , SENS_RES: %02X %02X, SEL_RES: %02X, NFCID_Length: %02X, NFCID: %02X %02X %02X %02X \n",
 8003a56:	4604      	mov	r4, r0
						targetBuffer.NFCID[1],
 8003a58:	f897 00a2 	ldrb.w	r0, [r7, #162]	; 0xa2
				sprintf(target_string, "Target- ln: %02X , SENS_RES: %02X %02X, SEL_RES: %02X, NFCID_Length: %02X, NFCID: %02X %02X %02X %02X \n",
 8003a5c:	4605      	mov	r5, r0
						targetBuffer.NFCID[2],
 8003a5e:	f897 00a3 	ldrb.w	r0, [r7, #163]	; 0xa3
				sprintf(target_string, "Target- ln: %02X , SENS_RES: %02X %02X, SEL_RES: %02X, NFCID_Length: %02X, NFCID: %02X %02X %02X %02X \n",
 8003a62:	4606      	mov	r6, r0
						targetBuffer.NFCID[3]
 8003a64:	f897 00a4 	ldrb.w	r0, [r7, #164]	; 0xa4
				sprintf(target_string, "Target- ln: %02X , SENS_RES: %02X %02X, SEL_RES: %02X, NFCID_Length: %02X, NFCID: %02X %02X %02X %02X \n",
 8003a68:	f107 0804 	add.w	r8, r7, #4
 8003a6c:	9006      	str	r0, [sp, #24]
 8003a6e:	9605      	str	r6, [sp, #20]
 8003a70:	9504      	str	r5, [sp, #16]
 8003a72:	9403      	str	r4, [sp, #12]
 8003a74:	9102      	str	r1, [sp, #8]
 8003a76:	9201      	str	r2, [sp, #4]
 8003a78:	9300      	str	r3, [sp, #0]
 8003a7a:	4673      	mov	r3, lr
 8003a7c:	4662      	mov	r2, ip
 8003a7e:	4940      	ldr	r1, [pc, #256]	; (8003b80 <main+0x30c>)
 8003a80:	4640      	mov	r0, r8
 8003a82:	f000 fd97 	bl	80045b4 <siprintf>
						);
				uartSendString(target_string);
 8003a86:	1d3b      	adds	r3, r7, #4
 8003a88:	4618      	mov	r0, r3
 8003a8a:	f7fc fdb5 	bl	80005f8 <uartSendString>
				uint8_t dataBuffer[100];
				HAL_Delay(10);
 8003a8e:	200a      	movs	r0, #10
 8003a90:	f7fd fb14 	bl	80010bc <HAL_Delay>
				res = pn532Driver_I2C_readMifareData(dataBuffer, sizeof(dataBuffer), targetBuffer);
 8003a94:	f107 0038 	add.w	r0, r7, #56	; 0x38
 8003a98:	f897 30a4 	ldrb.w	r3, [r7, #164]	; 0xa4
 8003a9c:	f88d 3000 	strb.w	r3, [sp]
 8003aa0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8003aa4:	cb0c      	ldmia	r3, {r2, r3}
 8003aa6:	2164      	movs	r1, #100	; 0x64
 8003aa8:	f7fd f88c 	bl	8000bc4 <pn532Driver_I2C_readMifareData>
 8003aac:	4603      	mov	r3, r0
 8003aae:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
				switch(res){
 8003ab2:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 8003ab6:	2b06      	cmp	r3, #6
 8003ab8:	d827      	bhi.n	8003b0a <main+0x296>
 8003aba:	a201      	add	r2, pc, #4	; (adr r2, 8003ac0 <main+0x24c>)
 8003abc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ac0:	08003add 	.word	0x08003add
 8003ac4:	08003b0b 	.word	0x08003b0b
 8003ac8:	08003af3 	.word	0x08003af3
 8003acc:	08003b0b 	.word	0x08003b0b
 8003ad0:	08003afb 	.word	0x08003afb
 8003ad4:	08003b0b 	.word	0x08003b0b
 8003ad8:	08003b03 	.word	0x08003b03
				case PN532_OK: uartSendString(hex_string(dataBuffer, sizeof(dataBuffer))); break;
 8003adc:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8003ae0:	2164      	movs	r1, #100	; 0x64
 8003ae2:	4618      	mov	r0, r3
 8003ae4:	f000 f856 	bl	8003b94 <hex_string>
 8003ae8:	4603      	mov	r3, r0
 8003aea:	4618      	mov	r0, r3
 8003aec:	f7fc fd84 	bl	80005f8 <uartSendString>
 8003af0:	e00f      	b.n	8003b12 <main+0x29e>
				case PN532_ACK_NOT_RECEIVED: uartSendString("READ ACK ERROR \n"); break;
 8003af2:	4824      	ldr	r0, [pc, #144]	; (8003b84 <main+0x310>)
 8003af4:	f7fc fd80 	bl	80005f8 <uartSendString>
 8003af8:	e00b      	b.n	8003b12 <main+0x29e>
				case PN532_RESPONSE_ERROR: uartSendString("READ RESPONSE ERROR \n"); break;
 8003afa:	4823      	ldr	r0, [pc, #140]	; (8003b88 <main+0x314>)
 8003afc:	f7fc fd7c 	bl	80005f8 <uartSendString>
 8003b00:	e007      	b.n	8003b12 <main+0x29e>
				case PN532_EMPTY: uartSendString("."); break;
 8003b02:	481d      	ldr	r0, [pc, #116]	; (8003b78 <main+0x304>)
 8003b04:	f7fc fd78 	bl	80005f8 <uartSendString>
 8003b08:	e003      	b.n	8003b12 <main+0x29e>
				default: uartSendString("READ UNKNOWN ERROR"); break;
 8003b0a:	4820      	ldr	r0, [pc, #128]	; (8003b8c <main+0x318>)
 8003b0c:	f7fc fd74 	bl	80005f8 <uartSendString>
 8003b10:	bf00      	nop
				}

				break;
 8003b12:	e003      	b.n	8003b1c <main+0x2a8>
			}
			default: uartSendString("LIST UNKNOWN ERROR"); break;
 8003b14:	481e      	ldr	r0, [pc, #120]	; (8003b90 <main+0x31c>)
 8003b16:	f7fc fd6f 	bl	80005f8 <uartSendString>
 8003b1a:	bf00      	nop
		}
		HAL_Delay(1000);
 8003b1c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003b20:	f7fd facc 	bl	80010bc <HAL_Delay>
		res = pn532Driver_I2C_listPassiveTarget(&targetBuffer);
 8003b24:	e758      	b.n	80039d8 <main+0x164>
 8003b26:	bf00      	nop
 8003b28:	08005180 	.word	0x08005180
 8003b2c:	08005190 	.word	0x08005190
 8003b30:	080051a0 	.word	0x080051a0
 8003b34:	080051b0 	.word	0x080051b0
 8003b38:	080051c0 	.word	0x080051c0
 8003b3c:	080051d4 	.word	0x080051d4
 8003b40:	0800520c 	.word	0x0800520c
 8003b44:	0800521c 	.word	0x0800521c
 8003b48:	0800522c 	.word	0x0800522c
 8003b4c:	0800523c 	.word	0x0800523c
 8003b50:	08005254 	.word	0x08005254
 8003b54:	08005274 	.word	0x08005274
 8003b58:	08005288 	.word	0x08005288
 8003b5c:	0800529c 	.word	0x0800529c
 8003b60:	080052b0 	.word	0x080052b0
 8003b64:	080052c8 	.word	0x080052c8
 8003b68:	080052e8 	.word	0x080052e8
 8003b6c:	080052fc 	.word	0x080052fc
 8003b70:	08005310 	.word	0x08005310
 8003b74:	08005324 	.word	0x08005324
 8003b78:	0800533c 	.word	0x0800533c
 8003b7c:	08005340 	.word	0x08005340
 8003b80:	08005350 	.word	0x08005350
 8003b84:	080053b8 	.word	0x080053b8
 8003b88:	080053cc 	.word	0x080053cc
 8003b8c:	080053e4 	.word	0x080053e4
 8003b90:	080053f8 	.word	0x080053f8

08003b94 <hex_string>:

	}

}

static char* hex_string(uint8_t *array, size_t length) {
 8003b94:	b580      	push	{r7, lr}
 8003b96:	b084      	sub	sp, #16
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]
 8003b9c:	6039      	str	r1, [r7, #0]
    char *result = (char*)malloc(length*3+1); // Allocate space for the string
 8003b9e:	683a      	ldr	r2, [r7, #0]
 8003ba0:	4613      	mov	r3, r2
 8003ba2:	005b      	lsls	r3, r3, #1
 8003ba4:	4413      	add	r3, r2
 8003ba6:	3301      	adds	r3, #1
 8003ba8:	4618      	mov	r0, r3
 8003baa:	f000 f915 	bl	8003dd8 <malloc>
 8003bae:	4603      	mov	r3, r0
 8003bb0:	60bb      	str	r3, [r7, #8]
    for (size_t i = 0; i < length; i++) {
 8003bb2:	2300      	movs	r3, #0
 8003bb4:	60fb      	str	r3, [r7, #12]
 8003bb6:	e010      	b.n	8003bda <hex_string+0x46>
        sprintf(result+i*3, "%02X ", array[i]); // Format the hex value and store it in the string
 8003bb8:	68fa      	ldr	r2, [r7, #12]
 8003bba:	4613      	mov	r3, r2
 8003bbc:	005b      	lsls	r3, r3, #1
 8003bbe:	4413      	add	r3, r2
 8003bc0:	68ba      	ldr	r2, [r7, #8]
 8003bc2:	18d0      	adds	r0, r2, r3
 8003bc4:	687a      	ldr	r2, [r7, #4]
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	4413      	add	r3, r2
 8003bca:	781b      	ldrb	r3, [r3, #0]
 8003bcc:	461a      	mov	r2, r3
 8003bce:	490b      	ldr	r1, [pc, #44]	; (8003bfc <hex_string+0x68>)
 8003bd0:	f000 fcf0 	bl	80045b4 <siprintf>
    for (size_t i = 0; i < length; i++) {
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	3301      	adds	r3, #1
 8003bd8:	60fb      	str	r3, [r7, #12]
 8003bda:	68fa      	ldr	r2, [r7, #12]
 8003bdc:	683b      	ldr	r3, [r7, #0]
 8003bde:	429a      	cmp	r2, r3
 8003be0:	d3ea      	bcc.n	8003bb8 <hex_string+0x24>
    }
    result[length*3] = '\0'; // Add null-terminator to the end of the string
 8003be2:	683a      	ldr	r2, [r7, #0]
 8003be4:	4613      	mov	r3, r2
 8003be6:	005b      	lsls	r3, r3, #1
 8003be8:	4413      	add	r3, r2
 8003bea:	68ba      	ldr	r2, [r7, #8]
 8003bec:	4413      	add	r3, r2
 8003bee:	2200      	movs	r2, #0
 8003bf0:	701a      	strb	r2, [r3, #0]
    return result;
 8003bf2:	68bb      	ldr	r3, [r7, #8]
}
 8003bf4:	4618      	mov	r0, r3
 8003bf6:	3710      	adds	r7, #16
 8003bf8:	46bd      	mov	sp, r7
 8003bfa:	bd80      	pop	{r7, pc}
 8003bfc:	0800540c 	.word	0x0800540c

08003c00 <SystemClock_Config>:
 *            Main regulator output voltage  = Scale1 mode
 *            Flash Latency(WS)              = 5
 * @param  None
 * @retval None
 */
static void SystemClock_Config(void) {
 8003c00:	b580      	push	{r7, lr}
 8003c02:	b094      	sub	sp, #80	; 0x50
 8003c04:	af00      	add	r7, sp, #0
	RCC_ClkInitTypeDef RCC_ClkInitStruct;
	RCC_OscInitTypeDef RCC_OscInitStruct;

	/* Enable Power Control clock */
	__HAL_RCC_PWR_CLK_ENABLE();
 8003c06:	2300      	movs	r3, #0
 8003c08:	60bb      	str	r3, [r7, #8]
 8003c0a:	4b2c      	ldr	r3, [pc, #176]	; (8003cbc <SystemClock_Config+0xbc>)
 8003c0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c0e:	4a2b      	ldr	r2, [pc, #172]	; (8003cbc <SystemClock_Config+0xbc>)
 8003c10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c14:	6413      	str	r3, [r2, #64]	; 0x40
 8003c16:	4b29      	ldr	r3, [pc, #164]	; (8003cbc <SystemClock_Config+0xbc>)
 8003c18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c1e:	60bb      	str	r3, [r7, #8]
 8003c20:	68bb      	ldr	r3, [r7, #8]

	/* The voltage scaling allows optimizing the power consumption when the device is
	 clocked below the maximum system frequency, to update the voltage scaling value
	 regarding system frequency refer to product datasheet.  */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003c22:	2300      	movs	r3, #0
 8003c24:	607b      	str	r3, [r7, #4]
 8003c26:	4b26      	ldr	r3, [pc, #152]	; (8003cc0 <SystemClock_Config+0xc0>)
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	4a25      	ldr	r2, [pc, #148]	; (8003cc0 <SystemClock_Config+0xc0>)
 8003c2c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003c30:	6013      	str	r3, [r2, #0]
 8003c32:	4b23      	ldr	r3, [pc, #140]	; (8003cc0 <SystemClock_Config+0xc0>)
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003c3a:	607b      	str	r3, [r7, #4]
 8003c3c:	687b      	ldr	r3, [r7, #4]

	/* Enable HSE Oscillator and activate PLL with HSE as source */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003c3e:	2301      	movs	r3, #1
 8003c40:	60fb      	str	r3, [r7, #12]
	RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8003c42:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8003c46:	613b      	str	r3, [r7, #16]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003c48:	2302      	movs	r3, #2
 8003c4a:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003c4c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003c50:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLM = 8;
 8003c52:	2308      	movs	r3, #8
 8003c54:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.PLL.PLLN = 360;
 8003c56:	f44f 73b4 	mov.w	r3, #360	; 0x168
 8003c5a:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003c5c:	2302      	movs	r3, #2
 8003c5e:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLQ = 7;
 8003c60:	2307      	movs	r3, #7
 8003c62:	63bb      	str	r3, [r7, #56]	; 0x38
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8003c64:	f107 030c 	add.w	r3, r7, #12
 8003c68:	4618      	mov	r0, r3
 8003c6a:	f7fe fda9 	bl	80027c0 <HAL_RCC_OscConfig>
 8003c6e:	4603      	mov	r3, r0
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d001      	beq.n	8003c78 <SystemClock_Config+0x78>
		/* Initialization Error */
		Error_Handler();
 8003c74:	f000 f826 	bl	8003cc4 <Error_Handler>
	}

	if (HAL_PWREx_EnableOverDrive() != HAL_OK) {
 8003c78:	f7fe fd52 	bl	8002720 <HAL_PWREx_EnableOverDrive>
 8003c7c:	4603      	mov	r3, r0
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d001      	beq.n	8003c86 <SystemClock_Config+0x86>
		/* Initialization Error */
		Error_Handler();
 8003c82:	f000 f81f 	bl	8003cc4 <Error_Handler>
	}

	/* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2
	 clocks dividers */
	RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK
 8003c86:	230f      	movs	r3, #15
 8003c88:	63fb      	str	r3, [r7, #60]	; 0x3c
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003c8a:	2302      	movs	r3, #2
 8003c8c:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003c8e:	2300      	movs	r3, #0
 8003c90:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8003c92:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8003c96:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8003c98:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003c9c:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK) {
 8003c9e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003ca2:	2105      	movs	r1, #5
 8003ca4:	4618      	mov	r0, r3
 8003ca6:	f7ff f803 	bl	8002cb0 <HAL_RCC_ClockConfig>
 8003caa:	4603      	mov	r3, r0
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d001      	beq.n	8003cb4 <SystemClock_Config+0xb4>
		/* Initialization Error */
		Error_Handler();
 8003cb0:	f000 f808 	bl	8003cc4 <Error_Handler>
	}
}
 8003cb4:	bf00      	nop
 8003cb6:	3750      	adds	r7, #80	; 0x50
 8003cb8:	46bd      	mov	sp, r7
 8003cba:	bd80      	pop	{r7, pc}
 8003cbc:	40023800 	.word	0x40023800
 8003cc0:	40007000 	.word	0x40007000

08003cc4 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @param  None
 * @retval None
 */
static void Error_Handler(void) {
 8003cc4:	b580      	push	{r7, lr}
 8003cc6:	af00      	add	r7, sp, #0
	/* Turn LED2 on */
	BSP_LED_On(LED2);
 8003cc8:	2001      	movs	r0, #1
 8003cca:	f7fc fcb9 	bl	8000640 <BSP_LED_On>
	while (1) {
 8003cce:	e7fe      	b.n	8003cce <Error_Handler+0xa>

08003cd0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8003cd0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003d08 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003cd4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8003cd6:	e003      	b.n	8003ce0 <LoopCopyDataInit>

08003cd8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003cd8:	4b0c      	ldr	r3, [pc, #48]	; (8003d0c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8003cda:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003cdc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8003cde:	3104      	adds	r1, #4

08003ce0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003ce0:	480b      	ldr	r0, [pc, #44]	; (8003d10 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8003ce2:	4b0c      	ldr	r3, [pc, #48]	; (8003d14 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003ce4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8003ce6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003ce8:	d3f6      	bcc.n	8003cd8 <CopyDataInit>
  ldr  r2, =_sbss
 8003cea:	4a0b      	ldr	r2, [pc, #44]	; (8003d18 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8003cec:	e002      	b.n	8003cf4 <LoopFillZerobss>

08003cee <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8003cee:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003cf0:	f842 3b04 	str.w	r3, [r2], #4

08003cf4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003cf4:	4b09      	ldr	r3, [pc, #36]	; (8003d1c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8003cf6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003cf8:	d3f9      	bcc.n	8003cee <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003cfa:	f7fc fcbb 	bl	8000674 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003cfe:	f000 f847 	bl	8003d90 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003d02:	f7ff fdb7 	bl	8003874 <main>
  bx  lr    
 8003d06:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8003d08:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8003d0c:	0800553c 	.word	0x0800553c
  ldr  r0, =_sdata
 8003d10:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003d14:	200000e0 	.word	0x200000e0
  ldr  r2, =_sbss
 8003d18:	200000e0 	.word	0x200000e0
  ldr  r3, = _ebss
 8003d1c:	200001b0 	.word	0x200001b0

08003d20 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003d20:	e7fe      	b.n	8003d20 <ADC_IRQHandler>
	...

08003d24 <__assert_func>:
 8003d24:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8003d26:	4614      	mov	r4, r2
 8003d28:	461a      	mov	r2, r3
 8003d2a:	4b09      	ldr	r3, [pc, #36]	; (8003d50 <__assert_func+0x2c>)
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	4605      	mov	r5, r0
 8003d30:	68d8      	ldr	r0, [r3, #12]
 8003d32:	b14c      	cbz	r4, 8003d48 <__assert_func+0x24>
 8003d34:	4b07      	ldr	r3, [pc, #28]	; (8003d54 <__assert_func+0x30>)
 8003d36:	9100      	str	r1, [sp, #0]
 8003d38:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8003d3c:	4906      	ldr	r1, [pc, #24]	; (8003d58 <__assert_func+0x34>)
 8003d3e:	462b      	mov	r3, r5
 8003d40:	f000 f814 	bl	8003d6c <fiprintf>
 8003d44:	f000 fd16 	bl	8004774 <abort>
 8003d48:	4b04      	ldr	r3, [pc, #16]	; (8003d5c <__assert_func+0x38>)
 8003d4a:	461c      	mov	r4, r3
 8003d4c:	e7f3      	b.n	8003d36 <__assert_func+0x12>
 8003d4e:	bf00      	nop
 8003d50:	2000007c 	.word	0x2000007c
 8003d54:	08005457 	.word	0x08005457
 8003d58:	08005464 	.word	0x08005464
 8003d5c:	08005492 	.word	0x08005492

08003d60 <__errno>:
 8003d60:	4b01      	ldr	r3, [pc, #4]	; (8003d68 <__errno+0x8>)
 8003d62:	6818      	ldr	r0, [r3, #0]
 8003d64:	4770      	bx	lr
 8003d66:	bf00      	nop
 8003d68:	2000007c 	.word	0x2000007c

08003d6c <fiprintf>:
 8003d6c:	b40e      	push	{r1, r2, r3}
 8003d6e:	b503      	push	{r0, r1, lr}
 8003d70:	4601      	mov	r1, r0
 8003d72:	ab03      	add	r3, sp, #12
 8003d74:	4805      	ldr	r0, [pc, #20]	; (8003d8c <fiprintf+0x20>)
 8003d76:	f853 2b04 	ldr.w	r2, [r3], #4
 8003d7a:	6800      	ldr	r0, [r0, #0]
 8003d7c:	9301      	str	r3, [sp, #4]
 8003d7e:	f000 f945 	bl	800400c <_vfiprintf_r>
 8003d82:	b002      	add	sp, #8
 8003d84:	f85d eb04 	ldr.w	lr, [sp], #4
 8003d88:	b003      	add	sp, #12
 8003d8a:	4770      	bx	lr
 8003d8c:	2000007c 	.word	0x2000007c

08003d90 <__libc_init_array>:
 8003d90:	b570      	push	{r4, r5, r6, lr}
 8003d92:	4d0d      	ldr	r5, [pc, #52]	; (8003dc8 <__libc_init_array+0x38>)
 8003d94:	4c0d      	ldr	r4, [pc, #52]	; (8003dcc <__libc_init_array+0x3c>)
 8003d96:	1b64      	subs	r4, r4, r5
 8003d98:	10a4      	asrs	r4, r4, #2
 8003d9a:	2600      	movs	r6, #0
 8003d9c:	42a6      	cmp	r6, r4
 8003d9e:	d109      	bne.n	8003db4 <__libc_init_array+0x24>
 8003da0:	4d0b      	ldr	r5, [pc, #44]	; (8003dd0 <__libc_init_array+0x40>)
 8003da2:	4c0c      	ldr	r4, [pc, #48]	; (8003dd4 <__libc_init_array+0x44>)
 8003da4:	f001 f9c4 	bl	8005130 <_init>
 8003da8:	1b64      	subs	r4, r4, r5
 8003daa:	10a4      	asrs	r4, r4, #2
 8003dac:	2600      	movs	r6, #0
 8003dae:	42a6      	cmp	r6, r4
 8003db0:	d105      	bne.n	8003dbe <__libc_init_array+0x2e>
 8003db2:	bd70      	pop	{r4, r5, r6, pc}
 8003db4:	f855 3b04 	ldr.w	r3, [r5], #4
 8003db8:	4798      	blx	r3
 8003dba:	3601      	adds	r6, #1
 8003dbc:	e7ee      	b.n	8003d9c <__libc_init_array+0xc>
 8003dbe:	f855 3b04 	ldr.w	r3, [r5], #4
 8003dc2:	4798      	blx	r3
 8003dc4:	3601      	adds	r6, #1
 8003dc6:	e7f2      	b.n	8003dae <__libc_init_array+0x1e>
 8003dc8:	08005534 	.word	0x08005534
 8003dcc:	08005534 	.word	0x08005534
 8003dd0:	08005534 	.word	0x08005534
 8003dd4:	08005538 	.word	0x08005538

08003dd8 <malloc>:
 8003dd8:	4b02      	ldr	r3, [pc, #8]	; (8003de4 <malloc+0xc>)
 8003dda:	4601      	mov	r1, r0
 8003ddc:	6818      	ldr	r0, [r3, #0]
 8003dde:	f000 b877 	b.w	8003ed0 <_malloc_r>
 8003de2:	bf00      	nop
 8003de4:	2000007c 	.word	0x2000007c

08003de8 <memset>:
 8003de8:	4402      	add	r2, r0
 8003dea:	4603      	mov	r3, r0
 8003dec:	4293      	cmp	r3, r2
 8003dee:	d100      	bne.n	8003df2 <memset+0xa>
 8003df0:	4770      	bx	lr
 8003df2:	f803 1b01 	strb.w	r1, [r3], #1
 8003df6:	e7f9      	b.n	8003dec <memset+0x4>

08003df8 <_free_r>:
 8003df8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003dfa:	2900      	cmp	r1, #0
 8003dfc:	d044      	beq.n	8003e88 <_free_r+0x90>
 8003dfe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003e02:	9001      	str	r0, [sp, #4]
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	f1a1 0404 	sub.w	r4, r1, #4
 8003e0a:	bfb8      	it	lt
 8003e0c:	18e4      	addlt	r4, r4, r3
 8003e0e:	f000 ff01 	bl	8004c14 <__malloc_lock>
 8003e12:	4a1e      	ldr	r2, [pc, #120]	; (8003e8c <_free_r+0x94>)
 8003e14:	9801      	ldr	r0, [sp, #4]
 8003e16:	6813      	ldr	r3, [r2, #0]
 8003e18:	b933      	cbnz	r3, 8003e28 <_free_r+0x30>
 8003e1a:	6063      	str	r3, [r4, #4]
 8003e1c:	6014      	str	r4, [r2, #0]
 8003e1e:	b003      	add	sp, #12
 8003e20:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003e24:	f000 befc 	b.w	8004c20 <__malloc_unlock>
 8003e28:	42a3      	cmp	r3, r4
 8003e2a:	d908      	bls.n	8003e3e <_free_r+0x46>
 8003e2c:	6825      	ldr	r5, [r4, #0]
 8003e2e:	1961      	adds	r1, r4, r5
 8003e30:	428b      	cmp	r3, r1
 8003e32:	bf01      	itttt	eq
 8003e34:	6819      	ldreq	r1, [r3, #0]
 8003e36:	685b      	ldreq	r3, [r3, #4]
 8003e38:	1949      	addeq	r1, r1, r5
 8003e3a:	6021      	streq	r1, [r4, #0]
 8003e3c:	e7ed      	b.n	8003e1a <_free_r+0x22>
 8003e3e:	461a      	mov	r2, r3
 8003e40:	685b      	ldr	r3, [r3, #4]
 8003e42:	b10b      	cbz	r3, 8003e48 <_free_r+0x50>
 8003e44:	42a3      	cmp	r3, r4
 8003e46:	d9fa      	bls.n	8003e3e <_free_r+0x46>
 8003e48:	6811      	ldr	r1, [r2, #0]
 8003e4a:	1855      	adds	r5, r2, r1
 8003e4c:	42a5      	cmp	r5, r4
 8003e4e:	d10b      	bne.n	8003e68 <_free_r+0x70>
 8003e50:	6824      	ldr	r4, [r4, #0]
 8003e52:	4421      	add	r1, r4
 8003e54:	1854      	adds	r4, r2, r1
 8003e56:	42a3      	cmp	r3, r4
 8003e58:	6011      	str	r1, [r2, #0]
 8003e5a:	d1e0      	bne.n	8003e1e <_free_r+0x26>
 8003e5c:	681c      	ldr	r4, [r3, #0]
 8003e5e:	685b      	ldr	r3, [r3, #4]
 8003e60:	6053      	str	r3, [r2, #4]
 8003e62:	4421      	add	r1, r4
 8003e64:	6011      	str	r1, [r2, #0]
 8003e66:	e7da      	b.n	8003e1e <_free_r+0x26>
 8003e68:	d902      	bls.n	8003e70 <_free_r+0x78>
 8003e6a:	230c      	movs	r3, #12
 8003e6c:	6003      	str	r3, [r0, #0]
 8003e6e:	e7d6      	b.n	8003e1e <_free_r+0x26>
 8003e70:	6825      	ldr	r5, [r4, #0]
 8003e72:	1961      	adds	r1, r4, r5
 8003e74:	428b      	cmp	r3, r1
 8003e76:	bf04      	itt	eq
 8003e78:	6819      	ldreq	r1, [r3, #0]
 8003e7a:	685b      	ldreq	r3, [r3, #4]
 8003e7c:	6063      	str	r3, [r4, #4]
 8003e7e:	bf04      	itt	eq
 8003e80:	1949      	addeq	r1, r1, r5
 8003e82:	6021      	streq	r1, [r4, #0]
 8003e84:	6054      	str	r4, [r2, #4]
 8003e86:	e7ca      	b.n	8003e1e <_free_r+0x26>
 8003e88:	b003      	add	sp, #12
 8003e8a:	bd30      	pop	{r4, r5, pc}
 8003e8c:	200001a0 	.word	0x200001a0

08003e90 <sbrk_aligned>:
 8003e90:	b570      	push	{r4, r5, r6, lr}
 8003e92:	4e0e      	ldr	r6, [pc, #56]	; (8003ecc <sbrk_aligned+0x3c>)
 8003e94:	460c      	mov	r4, r1
 8003e96:	6831      	ldr	r1, [r6, #0]
 8003e98:	4605      	mov	r5, r0
 8003e9a:	b911      	cbnz	r1, 8003ea2 <sbrk_aligned+0x12>
 8003e9c:	f000 fb7a 	bl	8004594 <_sbrk_r>
 8003ea0:	6030      	str	r0, [r6, #0]
 8003ea2:	4621      	mov	r1, r4
 8003ea4:	4628      	mov	r0, r5
 8003ea6:	f000 fb75 	bl	8004594 <_sbrk_r>
 8003eaa:	1c43      	adds	r3, r0, #1
 8003eac:	d00a      	beq.n	8003ec4 <sbrk_aligned+0x34>
 8003eae:	1cc4      	adds	r4, r0, #3
 8003eb0:	f024 0403 	bic.w	r4, r4, #3
 8003eb4:	42a0      	cmp	r0, r4
 8003eb6:	d007      	beq.n	8003ec8 <sbrk_aligned+0x38>
 8003eb8:	1a21      	subs	r1, r4, r0
 8003eba:	4628      	mov	r0, r5
 8003ebc:	f000 fb6a 	bl	8004594 <_sbrk_r>
 8003ec0:	3001      	adds	r0, #1
 8003ec2:	d101      	bne.n	8003ec8 <sbrk_aligned+0x38>
 8003ec4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8003ec8:	4620      	mov	r0, r4
 8003eca:	bd70      	pop	{r4, r5, r6, pc}
 8003ecc:	200001a4 	.word	0x200001a4

08003ed0 <_malloc_r>:
 8003ed0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003ed4:	1ccd      	adds	r5, r1, #3
 8003ed6:	f025 0503 	bic.w	r5, r5, #3
 8003eda:	3508      	adds	r5, #8
 8003edc:	2d0c      	cmp	r5, #12
 8003ede:	bf38      	it	cc
 8003ee0:	250c      	movcc	r5, #12
 8003ee2:	2d00      	cmp	r5, #0
 8003ee4:	4607      	mov	r7, r0
 8003ee6:	db01      	blt.n	8003eec <_malloc_r+0x1c>
 8003ee8:	42a9      	cmp	r1, r5
 8003eea:	d905      	bls.n	8003ef8 <_malloc_r+0x28>
 8003eec:	230c      	movs	r3, #12
 8003eee:	603b      	str	r3, [r7, #0]
 8003ef0:	2600      	movs	r6, #0
 8003ef2:	4630      	mov	r0, r6
 8003ef4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003ef8:	4e2e      	ldr	r6, [pc, #184]	; (8003fb4 <_malloc_r+0xe4>)
 8003efa:	f000 fe8b 	bl	8004c14 <__malloc_lock>
 8003efe:	6833      	ldr	r3, [r6, #0]
 8003f00:	461c      	mov	r4, r3
 8003f02:	bb34      	cbnz	r4, 8003f52 <_malloc_r+0x82>
 8003f04:	4629      	mov	r1, r5
 8003f06:	4638      	mov	r0, r7
 8003f08:	f7ff ffc2 	bl	8003e90 <sbrk_aligned>
 8003f0c:	1c43      	adds	r3, r0, #1
 8003f0e:	4604      	mov	r4, r0
 8003f10:	d14d      	bne.n	8003fae <_malloc_r+0xde>
 8003f12:	6834      	ldr	r4, [r6, #0]
 8003f14:	4626      	mov	r6, r4
 8003f16:	2e00      	cmp	r6, #0
 8003f18:	d140      	bne.n	8003f9c <_malloc_r+0xcc>
 8003f1a:	6823      	ldr	r3, [r4, #0]
 8003f1c:	4631      	mov	r1, r6
 8003f1e:	4638      	mov	r0, r7
 8003f20:	eb04 0803 	add.w	r8, r4, r3
 8003f24:	f000 fb36 	bl	8004594 <_sbrk_r>
 8003f28:	4580      	cmp	r8, r0
 8003f2a:	d13a      	bne.n	8003fa2 <_malloc_r+0xd2>
 8003f2c:	6821      	ldr	r1, [r4, #0]
 8003f2e:	3503      	adds	r5, #3
 8003f30:	1a6d      	subs	r5, r5, r1
 8003f32:	f025 0503 	bic.w	r5, r5, #3
 8003f36:	3508      	adds	r5, #8
 8003f38:	2d0c      	cmp	r5, #12
 8003f3a:	bf38      	it	cc
 8003f3c:	250c      	movcc	r5, #12
 8003f3e:	4629      	mov	r1, r5
 8003f40:	4638      	mov	r0, r7
 8003f42:	f7ff ffa5 	bl	8003e90 <sbrk_aligned>
 8003f46:	3001      	adds	r0, #1
 8003f48:	d02b      	beq.n	8003fa2 <_malloc_r+0xd2>
 8003f4a:	6823      	ldr	r3, [r4, #0]
 8003f4c:	442b      	add	r3, r5
 8003f4e:	6023      	str	r3, [r4, #0]
 8003f50:	e00e      	b.n	8003f70 <_malloc_r+0xa0>
 8003f52:	6822      	ldr	r2, [r4, #0]
 8003f54:	1b52      	subs	r2, r2, r5
 8003f56:	d41e      	bmi.n	8003f96 <_malloc_r+0xc6>
 8003f58:	2a0b      	cmp	r2, #11
 8003f5a:	d916      	bls.n	8003f8a <_malloc_r+0xba>
 8003f5c:	1961      	adds	r1, r4, r5
 8003f5e:	42a3      	cmp	r3, r4
 8003f60:	6025      	str	r5, [r4, #0]
 8003f62:	bf18      	it	ne
 8003f64:	6059      	strne	r1, [r3, #4]
 8003f66:	6863      	ldr	r3, [r4, #4]
 8003f68:	bf08      	it	eq
 8003f6a:	6031      	streq	r1, [r6, #0]
 8003f6c:	5162      	str	r2, [r4, r5]
 8003f6e:	604b      	str	r3, [r1, #4]
 8003f70:	4638      	mov	r0, r7
 8003f72:	f104 060b 	add.w	r6, r4, #11
 8003f76:	f000 fe53 	bl	8004c20 <__malloc_unlock>
 8003f7a:	f026 0607 	bic.w	r6, r6, #7
 8003f7e:	1d23      	adds	r3, r4, #4
 8003f80:	1af2      	subs	r2, r6, r3
 8003f82:	d0b6      	beq.n	8003ef2 <_malloc_r+0x22>
 8003f84:	1b9b      	subs	r3, r3, r6
 8003f86:	50a3      	str	r3, [r4, r2]
 8003f88:	e7b3      	b.n	8003ef2 <_malloc_r+0x22>
 8003f8a:	6862      	ldr	r2, [r4, #4]
 8003f8c:	42a3      	cmp	r3, r4
 8003f8e:	bf0c      	ite	eq
 8003f90:	6032      	streq	r2, [r6, #0]
 8003f92:	605a      	strne	r2, [r3, #4]
 8003f94:	e7ec      	b.n	8003f70 <_malloc_r+0xa0>
 8003f96:	4623      	mov	r3, r4
 8003f98:	6864      	ldr	r4, [r4, #4]
 8003f9a:	e7b2      	b.n	8003f02 <_malloc_r+0x32>
 8003f9c:	4634      	mov	r4, r6
 8003f9e:	6876      	ldr	r6, [r6, #4]
 8003fa0:	e7b9      	b.n	8003f16 <_malloc_r+0x46>
 8003fa2:	230c      	movs	r3, #12
 8003fa4:	603b      	str	r3, [r7, #0]
 8003fa6:	4638      	mov	r0, r7
 8003fa8:	f000 fe3a 	bl	8004c20 <__malloc_unlock>
 8003fac:	e7a1      	b.n	8003ef2 <_malloc_r+0x22>
 8003fae:	6025      	str	r5, [r4, #0]
 8003fb0:	e7de      	b.n	8003f70 <_malloc_r+0xa0>
 8003fb2:	bf00      	nop
 8003fb4:	200001a0 	.word	0x200001a0

08003fb8 <__sfputc_r>:
 8003fb8:	6893      	ldr	r3, [r2, #8]
 8003fba:	3b01      	subs	r3, #1
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	b410      	push	{r4}
 8003fc0:	6093      	str	r3, [r2, #8]
 8003fc2:	da08      	bge.n	8003fd6 <__sfputc_r+0x1e>
 8003fc4:	6994      	ldr	r4, [r2, #24]
 8003fc6:	42a3      	cmp	r3, r4
 8003fc8:	db01      	blt.n	8003fce <__sfputc_r+0x16>
 8003fca:	290a      	cmp	r1, #10
 8003fcc:	d103      	bne.n	8003fd6 <__sfputc_r+0x1e>
 8003fce:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003fd2:	f000 bb0f 	b.w	80045f4 <__swbuf_r>
 8003fd6:	6813      	ldr	r3, [r2, #0]
 8003fd8:	1c58      	adds	r0, r3, #1
 8003fda:	6010      	str	r0, [r2, #0]
 8003fdc:	7019      	strb	r1, [r3, #0]
 8003fde:	4608      	mov	r0, r1
 8003fe0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003fe4:	4770      	bx	lr

08003fe6 <__sfputs_r>:
 8003fe6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003fe8:	4606      	mov	r6, r0
 8003fea:	460f      	mov	r7, r1
 8003fec:	4614      	mov	r4, r2
 8003fee:	18d5      	adds	r5, r2, r3
 8003ff0:	42ac      	cmp	r4, r5
 8003ff2:	d101      	bne.n	8003ff8 <__sfputs_r+0x12>
 8003ff4:	2000      	movs	r0, #0
 8003ff6:	e007      	b.n	8004008 <__sfputs_r+0x22>
 8003ff8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003ffc:	463a      	mov	r2, r7
 8003ffe:	4630      	mov	r0, r6
 8004000:	f7ff ffda 	bl	8003fb8 <__sfputc_r>
 8004004:	1c43      	adds	r3, r0, #1
 8004006:	d1f3      	bne.n	8003ff0 <__sfputs_r+0xa>
 8004008:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800400c <_vfiprintf_r>:
 800400c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004010:	460d      	mov	r5, r1
 8004012:	b09d      	sub	sp, #116	; 0x74
 8004014:	4614      	mov	r4, r2
 8004016:	4698      	mov	r8, r3
 8004018:	4606      	mov	r6, r0
 800401a:	b118      	cbz	r0, 8004024 <_vfiprintf_r+0x18>
 800401c:	6983      	ldr	r3, [r0, #24]
 800401e:	b90b      	cbnz	r3, 8004024 <_vfiprintf_r+0x18>
 8004020:	f000 fcca 	bl	80049b8 <__sinit>
 8004024:	4b89      	ldr	r3, [pc, #548]	; (800424c <_vfiprintf_r+0x240>)
 8004026:	429d      	cmp	r5, r3
 8004028:	d11b      	bne.n	8004062 <_vfiprintf_r+0x56>
 800402a:	6875      	ldr	r5, [r6, #4]
 800402c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800402e:	07d9      	lsls	r1, r3, #31
 8004030:	d405      	bmi.n	800403e <_vfiprintf_r+0x32>
 8004032:	89ab      	ldrh	r3, [r5, #12]
 8004034:	059a      	lsls	r2, r3, #22
 8004036:	d402      	bmi.n	800403e <_vfiprintf_r+0x32>
 8004038:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800403a:	f000 fd5b 	bl	8004af4 <__retarget_lock_acquire_recursive>
 800403e:	89ab      	ldrh	r3, [r5, #12]
 8004040:	071b      	lsls	r3, r3, #28
 8004042:	d501      	bpl.n	8004048 <_vfiprintf_r+0x3c>
 8004044:	692b      	ldr	r3, [r5, #16]
 8004046:	b9eb      	cbnz	r3, 8004084 <_vfiprintf_r+0x78>
 8004048:	4629      	mov	r1, r5
 800404a:	4630      	mov	r0, r6
 800404c:	f000 fb24 	bl	8004698 <__swsetup_r>
 8004050:	b1c0      	cbz	r0, 8004084 <_vfiprintf_r+0x78>
 8004052:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004054:	07dc      	lsls	r4, r3, #31
 8004056:	d50e      	bpl.n	8004076 <_vfiprintf_r+0x6a>
 8004058:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800405c:	b01d      	add	sp, #116	; 0x74
 800405e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004062:	4b7b      	ldr	r3, [pc, #492]	; (8004250 <_vfiprintf_r+0x244>)
 8004064:	429d      	cmp	r5, r3
 8004066:	d101      	bne.n	800406c <_vfiprintf_r+0x60>
 8004068:	68b5      	ldr	r5, [r6, #8]
 800406a:	e7df      	b.n	800402c <_vfiprintf_r+0x20>
 800406c:	4b79      	ldr	r3, [pc, #484]	; (8004254 <_vfiprintf_r+0x248>)
 800406e:	429d      	cmp	r5, r3
 8004070:	bf08      	it	eq
 8004072:	68f5      	ldreq	r5, [r6, #12]
 8004074:	e7da      	b.n	800402c <_vfiprintf_r+0x20>
 8004076:	89ab      	ldrh	r3, [r5, #12]
 8004078:	0598      	lsls	r0, r3, #22
 800407a:	d4ed      	bmi.n	8004058 <_vfiprintf_r+0x4c>
 800407c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800407e:	f000 fd3a 	bl	8004af6 <__retarget_lock_release_recursive>
 8004082:	e7e9      	b.n	8004058 <_vfiprintf_r+0x4c>
 8004084:	2300      	movs	r3, #0
 8004086:	9309      	str	r3, [sp, #36]	; 0x24
 8004088:	2320      	movs	r3, #32
 800408a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800408e:	f8cd 800c 	str.w	r8, [sp, #12]
 8004092:	2330      	movs	r3, #48	; 0x30
 8004094:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8004258 <_vfiprintf_r+0x24c>
 8004098:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800409c:	f04f 0901 	mov.w	r9, #1
 80040a0:	4623      	mov	r3, r4
 80040a2:	469a      	mov	sl, r3
 80040a4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80040a8:	b10a      	cbz	r2, 80040ae <_vfiprintf_r+0xa2>
 80040aa:	2a25      	cmp	r2, #37	; 0x25
 80040ac:	d1f9      	bne.n	80040a2 <_vfiprintf_r+0x96>
 80040ae:	ebba 0b04 	subs.w	fp, sl, r4
 80040b2:	d00b      	beq.n	80040cc <_vfiprintf_r+0xc0>
 80040b4:	465b      	mov	r3, fp
 80040b6:	4622      	mov	r2, r4
 80040b8:	4629      	mov	r1, r5
 80040ba:	4630      	mov	r0, r6
 80040bc:	f7ff ff93 	bl	8003fe6 <__sfputs_r>
 80040c0:	3001      	adds	r0, #1
 80040c2:	f000 80aa 	beq.w	800421a <_vfiprintf_r+0x20e>
 80040c6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80040c8:	445a      	add	r2, fp
 80040ca:	9209      	str	r2, [sp, #36]	; 0x24
 80040cc:	f89a 3000 	ldrb.w	r3, [sl]
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	f000 80a2 	beq.w	800421a <_vfiprintf_r+0x20e>
 80040d6:	2300      	movs	r3, #0
 80040d8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80040dc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80040e0:	f10a 0a01 	add.w	sl, sl, #1
 80040e4:	9304      	str	r3, [sp, #16]
 80040e6:	9307      	str	r3, [sp, #28]
 80040e8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80040ec:	931a      	str	r3, [sp, #104]	; 0x68
 80040ee:	4654      	mov	r4, sl
 80040f0:	2205      	movs	r2, #5
 80040f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80040f6:	4858      	ldr	r0, [pc, #352]	; (8004258 <_vfiprintf_r+0x24c>)
 80040f8:	f7fc f882 	bl	8000200 <memchr>
 80040fc:	9a04      	ldr	r2, [sp, #16]
 80040fe:	b9d8      	cbnz	r0, 8004138 <_vfiprintf_r+0x12c>
 8004100:	06d1      	lsls	r1, r2, #27
 8004102:	bf44      	itt	mi
 8004104:	2320      	movmi	r3, #32
 8004106:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800410a:	0713      	lsls	r3, r2, #28
 800410c:	bf44      	itt	mi
 800410e:	232b      	movmi	r3, #43	; 0x2b
 8004110:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004114:	f89a 3000 	ldrb.w	r3, [sl]
 8004118:	2b2a      	cmp	r3, #42	; 0x2a
 800411a:	d015      	beq.n	8004148 <_vfiprintf_r+0x13c>
 800411c:	9a07      	ldr	r2, [sp, #28]
 800411e:	4654      	mov	r4, sl
 8004120:	2000      	movs	r0, #0
 8004122:	f04f 0c0a 	mov.w	ip, #10
 8004126:	4621      	mov	r1, r4
 8004128:	f811 3b01 	ldrb.w	r3, [r1], #1
 800412c:	3b30      	subs	r3, #48	; 0x30
 800412e:	2b09      	cmp	r3, #9
 8004130:	d94e      	bls.n	80041d0 <_vfiprintf_r+0x1c4>
 8004132:	b1b0      	cbz	r0, 8004162 <_vfiprintf_r+0x156>
 8004134:	9207      	str	r2, [sp, #28]
 8004136:	e014      	b.n	8004162 <_vfiprintf_r+0x156>
 8004138:	eba0 0308 	sub.w	r3, r0, r8
 800413c:	fa09 f303 	lsl.w	r3, r9, r3
 8004140:	4313      	orrs	r3, r2
 8004142:	9304      	str	r3, [sp, #16]
 8004144:	46a2      	mov	sl, r4
 8004146:	e7d2      	b.n	80040ee <_vfiprintf_r+0xe2>
 8004148:	9b03      	ldr	r3, [sp, #12]
 800414a:	1d19      	adds	r1, r3, #4
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	9103      	str	r1, [sp, #12]
 8004150:	2b00      	cmp	r3, #0
 8004152:	bfbb      	ittet	lt
 8004154:	425b      	neglt	r3, r3
 8004156:	f042 0202 	orrlt.w	r2, r2, #2
 800415a:	9307      	strge	r3, [sp, #28]
 800415c:	9307      	strlt	r3, [sp, #28]
 800415e:	bfb8      	it	lt
 8004160:	9204      	strlt	r2, [sp, #16]
 8004162:	7823      	ldrb	r3, [r4, #0]
 8004164:	2b2e      	cmp	r3, #46	; 0x2e
 8004166:	d10c      	bne.n	8004182 <_vfiprintf_r+0x176>
 8004168:	7863      	ldrb	r3, [r4, #1]
 800416a:	2b2a      	cmp	r3, #42	; 0x2a
 800416c:	d135      	bne.n	80041da <_vfiprintf_r+0x1ce>
 800416e:	9b03      	ldr	r3, [sp, #12]
 8004170:	1d1a      	adds	r2, r3, #4
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	9203      	str	r2, [sp, #12]
 8004176:	2b00      	cmp	r3, #0
 8004178:	bfb8      	it	lt
 800417a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800417e:	3402      	adds	r4, #2
 8004180:	9305      	str	r3, [sp, #20]
 8004182:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8004268 <_vfiprintf_r+0x25c>
 8004186:	7821      	ldrb	r1, [r4, #0]
 8004188:	2203      	movs	r2, #3
 800418a:	4650      	mov	r0, sl
 800418c:	f7fc f838 	bl	8000200 <memchr>
 8004190:	b140      	cbz	r0, 80041a4 <_vfiprintf_r+0x198>
 8004192:	2340      	movs	r3, #64	; 0x40
 8004194:	eba0 000a 	sub.w	r0, r0, sl
 8004198:	fa03 f000 	lsl.w	r0, r3, r0
 800419c:	9b04      	ldr	r3, [sp, #16]
 800419e:	4303      	orrs	r3, r0
 80041a0:	3401      	adds	r4, #1
 80041a2:	9304      	str	r3, [sp, #16]
 80041a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80041a8:	482c      	ldr	r0, [pc, #176]	; (800425c <_vfiprintf_r+0x250>)
 80041aa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80041ae:	2206      	movs	r2, #6
 80041b0:	f7fc f826 	bl	8000200 <memchr>
 80041b4:	2800      	cmp	r0, #0
 80041b6:	d03f      	beq.n	8004238 <_vfiprintf_r+0x22c>
 80041b8:	4b29      	ldr	r3, [pc, #164]	; (8004260 <_vfiprintf_r+0x254>)
 80041ba:	bb1b      	cbnz	r3, 8004204 <_vfiprintf_r+0x1f8>
 80041bc:	9b03      	ldr	r3, [sp, #12]
 80041be:	3307      	adds	r3, #7
 80041c0:	f023 0307 	bic.w	r3, r3, #7
 80041c4:	3308      	adds	r3, #8
 80041c6:	9303      	str	r3, [sp, #12]
 80041c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80041ca:	443b      	add	r3, r7
 80041cc:	9309      	str	r3, [sp, #36]	; 0x24
 80041ce:	e767      	b.n	80040a0 <_vfiprintf_r+0x94>
 80041d0:	fb0c 3202 	mla	r2, ip, r2, r3
 80041d4:	460c      	mov	r4, r1
 80041d6:	2001      	movs	r0, #1
 80041d8:	e7a5      	b.n	8004126 <_vfiprintf_r+0x11a>
 80041da:	2300      	movs	r3, #0
 80041dc:	3401      	adds	r4, #1
 80041de:	9305      	str	r3, [sp, #20]
 80041e0:	4619      	mov	r1, r3
 80041e2:	f04f 0c0a 	mov.w	ip, #10
 80041e6:	4620      	mov	r0, r4
 80041e8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80041ec:	3a30      	subs	r2, #48	; 0x30
 80041ee:	2a09      	cmp	r2, #9
 80041f0:	d903      	bls.n	80041fa <_vfiprintf_r+0x1ee>
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d0c5      	beq.n	8004182 <_vfiprintf_r+0x176>
 80041f6:	9105      	str	r1, [sp, #20]
 80041f8:	e7c3      	b.n	8004182 <_vfiprintf_r+0x176>
 80041fa:	fb0c 2101 	mla	r1, ip, r1, r2
 80041fe:	4604      	mov	r4, r0
 8004200:	2301      	movs	r3, #1
 8004202:	e7f0      	b.n	80041e6 <_vfiprintf_r+0x1da>
 8004204:	ab03      	add	r3, sp, #12
 8004206:	9300      	str	r3, [sp, #0]
 8004208:	462a      	mov	r2, r5
 800420a:	4b16      	ldr	r3, [pc, #88]	; (8004264 <_vfiprintf_r+0x258>)
 800420c:	a904      	add	r1, sp, #16
 800420e:	4630      	mov	r0, r6
 8004210:	f3af 8000 	nop.w
 8004214:	4607      	mov	r7, r0
 8004216:	1c78      	adds	r0, r7, #1
 8004218:	d1d6      	bne.n	80041c8 <_vfiprintf_r+0x1bc>
 800421a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800421c:	07d9      	lsls	r1, r3, #31
 800421e:	d405      	bmi.n	800422c <_vfiprintf_r+0x220>
 8004220:	89ab      	ldrh	r3, [r5, #12]
 8004222:	059a      	lsls	r2, r3, #22
 8004224:	d402      	bmi.n	800422c <_vfiprintf_r+0x220>
 8004226:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004228:	f000 fc65 	bl	8004af6 <__retarget_lock_release_recursive>
 800422c:	89ab      	ldrh	r3, [r5, #12]
 800422e:	065b      	lsls	r3, r3, #25
 8004230:	f53f af12 	bmi.w	8004058 <_vfiprintf_r+0x4c>
 8004234:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004236:	e711      	b.n	800405c <_vfiprintf_r+0x50>
 8004238:	ab03      	add	r3, sp, #12
 800423a:	9300      	str	r3, [sp, #0]
 800423c:	462a      	mov	r2, r5
 800423e:	4b09      	ldr	r3, [pc, #36]	; (8004264 <_vfiprintf_r+0x258>)
 8004240:	a904      	add	r1, sp, #16
 8004242:	4630      	mov	r0, r6
 8004244:	f000 f880 	bl	8004348 <_printf_i>
 8004248:	e7e4      	b.n	8004214 <_vfiprintf_r+0x208>
 800424a:	bf00      	nop
 800424c:	080054ec 	.word	0x080054ec
 8004250:	0800550c 	.word	0x0800550c
 8004254:	080054cc 	.word	0x080054cc
 8004258:	08005498 	.word	0x08005498
 800425c:	080054a2 	.word	0x080054a2
 8004260:	00000000 	.word	0x00000000
 8004264:	08003fe7 	.word	0x08003fe7
 8004268:	0800549e 	.word	0x0800549e

0800426c <_printf_common>:
 800426c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004270:	4616      	mov	r6, r2
 8004272:	4699      	mov	r9, r3
 8004274:	688a      	ldr	r2, [r1, #8]
 8004276:	690b      	ldr	r3, [r1, #16]
 8004278:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800427c:	4293      	cmp	r3, r2
 800427e:	bfb8      	it	lt
 8004280:	4613      	movlt	r3, r2
 8004282:	6033      	str	r3, [r6, #0]
 8004284:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004288:	4607      	mov	r7, r0
 800428a:	460c      	mov	r4, r1
 800428c:	b10a      	cbz	r2, 8004292 <_printf_common+0x26>
 800428e:	3301      	adds	r3, #1
 8004290:	6033      	str	r3, [r6, #0]
 8004292:	6823      	ldr	r3, [r4, #0]
 8004294:	0699      	lsls	r1, r3, #26
 8004296:	bf42      	ittt	mi
 8004298:	6833      	ldrmi	r3, [r6, #0]
 800429a:	3302      	addmi	r3, #2
 800429c:	6033      	strmi	r3, [r6, #0]
 800429e:	6825      	ldr	r5, [r4, #0]
 80042a0:	f015 0506 	ands.w	r5, r5, #6
 80042a4:	d106      	bne.n	80042b4 <_printf_common+0x48>
 80042a6:	f104 0a19 	add.w	sl, r4, #25
 80042aa:	68e3      	ldr	r3, [r4, #12]
 80042ac:	6832      	ldr	r2, [r6, #0]
 80042ae:	1a9b      	subs	r3, r3, r2
 80042b0:	42ab      	cmp	r3, r5
 80042b2:	dc26      	bgt.n	8004302 <_printf_common+0x96>
 80042b4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80042b8:	1e13      	subs	r3, r2, #0
 80042ba:	6822      	ldr	r2, [r4, #0]
 80042bc:	bf18      	it	ne
 80042be:	2301      	movne	r3, #1
 80042c0:	0692      	lsls	r2, r2, #26
 80042c2:	d42b      	bmi.n	800431c <_printf_common+0xb0>
 80042c4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80042c8:	4649      	mov	r1, r9
 80042ca:	4638      	mov	r0, r7
 80042cc:	47c0      	blx	r8
 80042ce:	3001      	adds	r0, #1
 80042d0:	d01e      	beq.n	8004310 <_printf_common+0xa4>
 80042d2:	6823      	ldr	r3, [r4, #0]
 80042d4:	68e5      	ldr	r5, [r4, #12]
 80042d6:	6832      	ldr	r2, [r6, #0]
 80042d8:	f003 0306 	and.w	r3, r3, #6
 80042dc:	2b04      	cmp	r3, #4
 80042de:	bf08      	it	eq
 80042e0:	1aad      	subeq	r5, r5, r2
 80042e2:	68a3      	ldr	r3, [r4, #8]
 80042e4:	6922      	ldr	r2, [r4, #16]
 80042e6:	bf0c      	ite	eq
 80042e8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80042ec:	2500      	movne	r5, #0
 80042ee:	4293      	cmp	r3, r2
 80042f0:	bfc4      	itt	gt
 80042f2:	1a9b      	subgt	r3, r3, r2
 80042f4:	18ed      	addgt	r5, r5, r3
 80042f6:	2600      	movs	r6, #0
 80042f8:	341a      	adds	r4, #26
 80042fa:	42b5      	cmp	r5, r6
 80042fc:	d11a      	bne.n	8004334 <_printf_common+0xc8>
 80042fe:	2000      	movs	r0, #0
 8004300:	e008      	b.n	8004314 <_printf_common+0xa8>
 8004302:	2301      	movs	r3, #1
 8004304:	4652      	mov	r2, sl
 8004306:	4649      	mov	r1, r9
 8004308:	4638      	mov	r0, r7
 800430a:	47c0      	blx	r8
 800430c:	3001      	adds	r0, #1
 800430e:	d103      	bne.n	8004318 <_printf_common+0xac>
 8004310:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004314:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004318:	3501      	adds	r5, #1
 800431a:	e7c6      	b.n	80042aa <_printf_common+0x3e>
 800431c:	18e1      	adds	r1, r4, r3
 800431e:	1c5a      	adds	r2, r3, #1
 8004320:	2030      	movs	r0, #48	; 0x30
 8004322:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004326:	4422      	add	r2, r4
 8004328:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800432c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004330:	3302      	adds	r3, #2
 8004332:	e7c7      	b.n	80042c4 <_printf_common+0x58>
 8004334:	2301      	movs	r3, #1
 8004336:	4622      	mov	r2, r4
 8004338:	4649      	mov	r1, r9
 800433a:	4638      	mov	r0, r7
 800433c:	47c0      	blx	r8
 800433e:	3001      	adds	r0, #1
 8004340:	d0e6      	beq.n	8004310 <_printf_common+0xa4>
 8004342:	3601      	adds	r6, #1
 8004344:	e7d9      	b.n	80042fa <_printf_common+0x8e>
	...

08004348 <_printf_i>:
 8004348:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800434c:	7e0f      	ldrb	r7, [r1, #24]
 800434e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004350:	2f78      	cmp	r7, #120	; 0x78
 8004352:	4691      	mov	r9, r2
 8004354:	4680      	mov	r8, r0
 8004356:	460c      	mov	r4, r1
 8004358:	469a      	mov	sl, r3
 800435a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800435e:	d807      	bhi.n	8004370 <_printf_i+0x28>
 8004360:	2f62      	cmp	r7, #98	; 0x62
 8004362:	d80a      	bhi.n	800437a <_printf_i+0x32>
 8004364:	2f00      	cmp	r7, #0
 8004366:	f000 80d8 	beq.w	800451a <_printf_i+0x1d2>
 800436a:	2f58      	cmp	r7, #88	; 0x58
 800436c:	f000 80a3 	beq.w	80044b6 <_printf_i+0x16e>
 8004370:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004374:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004378:	e03a      	b.n	80043f0 <_printf_i+0xa8>
 800437a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800437e:	2b15      	cmp	r3, #21
 8004380:	d8f6      	bhi.n	8004370 <_printf_i+0x28>
 8004382:	a101      	add	r1, pc, #4	; (adr r1, 8004388 <_printf_i+0x40>)
 8004384:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004388:	080043e1 	.word	0x080043e1
 800438c:	080043f5 	.word	0x080043f5
 8004390:	08004371 	.word	0x08004371
 8004394:	08004371 	.word	0x08004371
 8004398:	08004371 	.word	0x08004371
 800439c:	08004371 	.word	0x08004371
 80043a0:	080043f5 	.word	0x080043f5
 80043a4:	08004371 	.word	0x08004371
 80043a8:	08004371 	.word	0x08004371
 80043ac:	08004371 	.word	0x08004371
 80043b0:	08004371 	.word	0x08004371
 80043b4:	08004501 	.word	0x08004501
 80043b8:	08004425 	.word	0x08004425
 80043bc:	080044e3 	.word	0x080044e3
 80043c0:	08004371 	.word	0x08004371
 80043c4:	08004371 	.word	0x08004371
 80043c8:	08004523 	.word	0x08004523
 80043cc:	08004371 	.word	0x08004371
 80043d0:	08004425 	.word	0x08004425
 80043d4:	08004371 	.word	0x08004371
 80043d8:	08004371 	.word	0x08004371
 80043dc:	080044eb 	.word	0x080044eb
 80043e0:	682b      	ldr	r3, [r5, #0]
 80043e2:	1d1a      	adds	r2, r3, #4
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	602a      	str	r2, [r5, #0]
 80043e8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80043ec:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80043f0:	2301      	movs	r3, #1
 80043f2:	e0a3      	b.n	800453c <_printf_i+0x1f4>
 80043f4:	6820      	ldr	r0, [r4, #0]
 80043f6:	6829      	ldr	r1, [r5, #0]
 80043f8:	0606      	lsls	r6, r0, #24
 80043fa:	f101 0304 	add.w	r3, r1, #4
 80043fe:	d50a      	bpl.n	8004416 <_printf_i+0xce>
 8004400:	680e      	ldr	r6, [r1, #0]
 8004402:	602b      	str	r3, [r5, #0]
 8004404:	2e00      	cmp	r6, #0
 8004406:	da03      	bge.n	8004410 <_printf_i+0xc8>
 8004408:	232d      	movs	r3, #45	; 0x2d
 800440a:	4276      	negs	r6, r6
 800440c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004410:	485e      	ldr	r0, [pc, #376]	; (800458c <_printf_i+0x244>)
 8004412:	230a      	movs	r3, #10
 8004414:	e019      	b.n	800444a <_printf_i+0x102>
 8004416:	680e      	ldr	r6, [r1, #0]
 8004418:	602b      	str	r3, [r5, #0]
 800441a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800441e:	bf18      	it	ne
 8004420:	b236      	sxthne	r6, r6
 8004422:	e7ef      	b.n	8004404 <_printf_i+0xbc>
 8004424:	682b      	ldr	r3, [r5, #0]
 8004426:	6820      	ldr	r0, [r4, #0]
 8004428:	1d19      	adds	r1, r3, #4
 800442a:	6029      	str	r1, [r5, #0]
 800442c:	0601      	lsls	r1, r0, #24
 800442e:	d501      	bpl.n	8004434 <_printf_i+0xec>
 8004430:	681e      	ldr	r6, [r3, #0]
 8004432:	e002      	b.n	800443a <_printf_i+0xf2>
 8004434:	0646      	lsls	r6, r0, #25
 8004436:	d5fb      	bpl.n	8004430 <_printf_i+0xe8>
 8004438:	881e      	ldrh	r6, [r3, #0]
 800443a:	4854      	ldr	r0, [pc, #336]	; (800458c <_printf_i+0x244>)
 800443c:	2f6f      	cmp	r7, #111	; 0x6f
 800443e:	bf0c      	ite	eq
 8004440:	2308      	moveq	r3, #8
 8004442:	230a      	movne	r3, #10
 8004444:	2100      	movs	r1, #0
 8004446:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800444a:	6865      	ldr	r5, [r4, #4]
 800444c:	60a5      	str	r5, [r4, #8]
 800444e:	2d00      	cmp	r5, #0
 8004450:	bfa2      	ittt	ge
 8004452:	6821      	ldrge	r1, [r4, #0]
 8004454:	f021 0104 	bicge.w	r1, r1, #4
 8004458:	6021      	strge	r1, [r4, #0]
 800445a:	b90e      	cbnz	r6, 8004460 <_printf_i+0x118>
 800445c:	2d00      	cmp	r5, #0
 800445e:	d04d      	beq.n	80044fc <_printf_i+0x1b4>
 8004460:	4615      	mov	r5, r2
 8004462:	fbb6 f1f3 	udiv	r1, r6, r3
 8004466:	fb03 6711 	mls	r7, r3, r1, r6
 800446a:	5dc7      	ldrb	r7, [r0, r7]
 800446c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004470:	4637      	mov	r7, r6
 8004472:	42bb      	cmp	r3, r7
 8004474:	460e      	mov	r6, r1
 8004476:	d9f4      	bls.n	8004462 <_printf_i+0x11a>
 8004478:	2b08      	cmp	r3, #8
 800447a:	d10b      	bne.n	8004494 <_printf_i+0x14c>
 800447c:	6823      	ldr	r3, [r4, #0]
 800447e:	07de      	lsls	r6, r3, #31
 8004480:	d508      	bpl.n	8004494 <_printf_i+0x14c>
 8004482:	6923      	ldr	r3, [r4, #16]
 8004484:	6861      	ldr	r1, [r4, #4]
 8004486:	4299      	cmp	r1, r3
 8004488:	bfde      	ittt	le
 800448a:	2330      	movle	r3, #48	; 0x30
 800448c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004490:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8004494:	1b52      	subs	r2, r2, r5
 8004496:	6122      	str	r2, [r4, #16]
 8004498:	f8cd a000 	str.w	sl, [sp]
 800449c:	464b      	mov	r3, r9
 800449e:	aa03      	add	r2, sp, #12
 80044a0:	4621      	mov	r1, r4
 80044a2:	4640      	mov	r0, r8
 80044a4:	f7ff fee2 	bl	800426c <_printf_common>
 80044a8:	3001      	adds	r0, #1
 80044aa:	d14c      	bne.n	8004546 <_printf_i+0x1fe>
 80044ac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80044b0:	b004      	add	sp, #16
 80044b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80044b6:	4835      	ldr	r0, [pc, #212]	; (800458c <_printf_i+0x244>)
 80044b8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80044bc:	6829      	ldr	r1, [r5, #0]
 80044be:	6823      	ldr	r3, [r4, #0]
 80044c0:	f851 6b04 	ldr.w	r6, [r1], #4
 80044c4:	6029      	str	r1, [r5, #0]
 80044c6:	061d      	lsls	r5, r3, #24
 80044c8:	d514      	bpl.n	80044f4 <_printf_i+0x1ac>
 80044ca:	07df      	lsls	r7, r3, #31
 80044cc:	bf44      	itt	mi
 80044ce:	f043 0320 	orrmi.w	r3, r3, #32
 80044d2:	6023      	strmi	r3, [r4, #0]
 80044d4:	b91e      	cbnz	r6, 80044de <_printf_i+0x196>
 80044d6:	6823      	ldr	r3, [r4, #0]
 80044d8:	f023 0320 	bic.w	r3, r3, #32
 80044dc:	6023      	str	r3, [r4, #0]
 80044de:	2310      	movs	r3, #16
 80044e0:	e7b0      	b.n	8004444 <_printf_i+0xfc>
 80044e2:	6823      	ldr	r3, [r4, #0]
 80044e4:	f043 0320 	orr.w	r3, r3, #32
 80044e8:	6023      	str	r3, [r4, #0]
 80044ea:	2378      	movs	r3, #120	; 0x78
 80044ec:	4828      	ldr	r0, [pc, #160]	; (8004590 <_printf_i+0x248>)
 80044ee:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80044f2:	e7e3      	b.n	80044bc <_printf_i+0x174>
 80044f4:	0659      	lsls	r1, r3, #25
 80044f6:	bf48      	it	mi
 80044f8:	b2b6      	uxthmi	r6, r6
 80044fa:	e7e6      	b.n	80044ca <_printf_i+0x182>
 80044fc:	4615      	mov	r5, r2
 80044fe:	e7bb      	b.n	8004478 <_printf_i+0x130>
 8004500:	682b      	ldr	r3, [r5, #0]
 8004502:	6826      	ldr	r6, [r4, #0]
 8004504:	6961      	ldr	r1, [r4, #20]
 8004506:	1d18      	adds	r0, r3, #4
 8004508:	6028      	str	r0, [r5, #0]
 800450a:	0635      	lsls	r5, r6, #24
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	d501      	bpl.n	8004514 <_printf_i+0x1cc>
 8004510:	6019      	str	r1, [r3, #0]
 8004512:	e002      	b.n	800451a <_printf_i+0x1d2>
 8004514:	0670      	lsls	r0, r6, #25
 8004516:	d5fb      	bpl.n	8004510 <_printf_i+0x1c8>
 8004518:	8019      	strh	r1, [r3, #0]
 800451a:	2300      	movs	r3, #0
 800451c:	6123      	str	r3, [r4, #16]
 800451e:	4615      	mov	r5, r2
 8004520:	e7ba      	b.n	8004498 <_printf_i+0x150>
 8004522:	682b      	ldr	r3, [r5, #0]
 8004524:	1d1a      	adds	r2, r3, #4
 8004526:	602a      	str	r2, [r5, #0]
 8004528:	681d      	ldr	r5, [r3, #0]
 800452a:	6862      	ldr	r2, [r4, #4]
 800452c:	2100      	movs	r1, #0
 800452e:	4628      	mov	r0, r5
 8004530:	f7fb fe66 	bl	8000200 <memchr>
 8004534:	b108      	cbz	r0, 800453a <_printf_i+0x1f2>
 8004536:	1b40      	subs	r0, r0, r5
 8004538:	6060      	str	r0, [r4, #4]
 800453a:	6863      	ldr	r3, [r4, #4]
 800453c:	6123      	str	r3, [r4, #16]
 800453e:	2300      	movs	r3, #0
 8004540:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004544:	e7a8      	b.n	8004498 <_printf_i+0x150>
 8004546:	6923      	ldr	r3, [r4, #16]
 8004548:	462a      	mov	r2, r5
 800454a:	4649      	mov	r1, r9
 800454c:	4640      	mov	r0, r8
 800454e:	47d0      	blx	sl
 8004550:	3001      	adds	r0, #1
 8004552:	d0ab      	beq.n	80044ac <_printf_i+0x164>
 8004554:	6823      	ldr	r3, [r4, #0]
 8004556:	079b      	lsls	r3, r3, #30
 8004558:	d413      	bmi.n	8004582 <_printf_i+0x23a>
 800455a:	68e0      	ldr	r0, [r4, #12]
 800455c:	9b03      	ldr	r3, [sp, #12]
 800455e:	4298      	cmp	r0, r3
 8004560:	bfb8      	it	lt
 8004562:	4618      	movlt	r0, r3
 8004564:	e7a4      	b.n	80044b0 <_printf_i+0x168>
 8004566:	2301      	movs	r3, #1
 8004568:	4632      	mov	r2, r6
 800456a:	4649      	mov	r1, r9
 800456c:	4640      	mov	r0, r8
 800456e:	47d0      	blx	sl
 8004570:	3001      	adds	r0, #1
 8004572:	d09b      	beq.n	80044ac <_printf_i+0x164>
 8004574:	3501      	adds	r5, #1
 8004576:	68e3      	ldr	r3, [r4, #12]
 8004578:	9903      	ldr	r1, [sp, #12]
 800457a:	1a5b      	subs	r3, r3, r1
 800457c:	42ab      	cmp	r3, r5
 800457e:	dcf2      	bgt.n	8004566 <_printf_i+0x21e>
 8004580:	e7eb      	b.n	800455a <_printf_i+0x212>
 8004582:	2500      	movs	r5, #0
 8004584:	f104 0619 	add.w	r6, r4, #25
 8004588:	e7f5      	b.n	8004576 <_printf_i+0x22e>
 800458a:	bf00      	nop
 800458c:	080054a9 	.word	0x080054a9
 8004590:	080054ba 	.word	0x080054ba

08004594 <_sbrk_r>:
 8004594:	b538      	push	{r3, r4, r5, lr}
 8004596:	4d06      	ldr	r5, [pc, #24]	; (80045b0 <_sbrk_r+0x1c>)
 8004598:	2300      	movs	r3, #0
 800459a:	4604      	mov	r4, r0
 800459c:	4608      	mov	r0, r1
 800459e:	602b      	str	r3, [r5, #0]
 80045a0:	f7fc f95c 	bl	800085c <_sbrk>
 80045a4:	1c43      	adds	r3, r0, #1
 80045a6:	d102      	bne.n	80045ae <_sbrk_r+0x1a>
 80045a8:	682b      	ldr	r3, [r5, #0]
 80045aa:	b103      	cbz	r3, 80045ae <_sbrk_r+0x1a>
 80045ac:	6023      	str	r3, [r4, #0]
 80045ae:	bd38      	pop	{r3, r4, r5, pc}
 80045b0:	200001ac 	.word	0x200001ac

080045b4 <siprintf>:
 80045b4:	b40e      	push	{r1, r2, r3}
 80045b6:	b500      	push	{lr}
 80045b8:	b09c      	sub	sp, #112	; 0x70
 80045ba:	ab1d      	add	r3, sp, #116	; 0x74
 80045bc:	9002      	str	r0, [sp, #8]
 80045be:	9006      	str	r0, [sp, #24]
 80045c0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80045c4:	4809      	ldr	r0, [pc, #36]	; (80045ec <siprintf+0x38>)
 80045c6:	9107      	str	r1, [sp, #28]
 80045c8:	9104      	str	r1, [sp, #16]
 80045ca:	4909      	ldr	r1, [pc, #36]	; (80045f0 <siprintf+0x3c>)
 80045cc:	f853 2b04 	ldr.w	r2, [r3], #4
 80045d0:	9105      	str	r1, [sp, #20]
 80045d2:	6800      	ldr	r0, [r0, #0]
 80045d4:	9301      	str	r3, [sp, #4]
 80045d6:	a902      	add	r1, sp, #8
 80045d8:	f000 fbb2 	bl	8004d40 <_svfiprintf_r>
 80045dc:	9b02      	ldr	r3, [sp, #8]
 80045de:	2200      	movs	r2, #0
 80045e0:	701a      	strb	r2, [r3, #0]
 80045e2:	b01c      	add	sp, #112	; 0x70
 80045e4:	f85d eb04 	ldr.w	lr, [sp], #4
 80045e8:	b003      	add	sp, #12
 80045ea:	4770      	bx	lr
 80045ec:	2000007c 	.word	0x2000007c
 80045f0:	ffff0208 	.word	0xffff0208

080045f4 <__swbuf_r>:
 80045f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045f6:	460e      	mov	r6, r1
 80045f8:	4614      	mov	r4, r2
 80045fa:	4605      	mov	r5, r0
 80045fc:	b118      	cbz	r0, 8004606 <__swbuf_r+0x12>
 80045fe:	6983      	ldr	r3, [r0, #24]
 8004600:	b90b      	cbnz	r3, 8004606 <__swbuf_r+0x12>
 8004602:	f000 f9d9 	bl	80049b8 <__sinit>
 8004606:	4b21      	ldr	r3, [pc, #132]	; (800468c <__swbuf_r+0x98>)
 8004608:	429c      	cmp	r4, r3
 800460a:	d12b      	bne.n	8004664 <__swbuf_r+0x70>
 800460c:	686c      	ldr	r4, [r5, #4]
 800460e:	69a3      	ldr	r3, [r4, #24]
 8004610:	60a3      	str	r3, [r4, #8]
 8004612:	89a3      	ldrh	r3, [r4, #12]
 8004614:	071a      	lsls	r2, r3, #28
 8004616:	d52f      	bpl.n	8004678 <__swbuf_r+0x84>
 8004618:	6923      	ldr	r3, [r4, #16]
 800461a:	b36b      	cbz	r3, 8004678 <__swbuf_r+0x84>
 800461c:	6923      	ldr	r3, [r4, #16]
 800461e:	6820      	ldr	r0, [r4, #0]
 8004620:	1ac0      	subs	r0, r0, r3
 8004622:	6963      	ldr	r3, [r4, #20]
 8004624:	b2f6      	uxtb	r6, r6
 8004626:	4283      	cmp	r3, r0
 8004628:	4637      	mov	r7, r6
 800462a:	dc04      	bgt.n	8004636 <__swbuf_r+0x42>
 800462c:	4621      	mov	r1, r4
 800462e:	4628      	mov	r0, r5
 8004630:	f000 f92e 	bl	8004890 <_fflush_r>
 8004634:	bb30      	cbnz	r0, 8004684 <__swbuf_r+0x90>
 8004636:	68a3      	ldr	r3, [r4, #8]
 8004638:	3b01      	subs	r3, #1
 800463a:	60a3      	str	r3, [r4, #8]
 800463c:	6823      	ldr	r3, [r4, #0]
 800463e:	1c5a      	adds	r2, r3, #1
 8004640:	6022      	str	r2, [r4, #0]
 8004642:	701e      	strb	r6, [r3, #0]
 8004644:	6963      	ldr	r3, [r4, #20]
 8004646:	3001      	adds	r0, #1
 8004648:	4283      	cmp	r3, r0
 800464a:	d004      	beq.n	8004656 <__swbuf_r+0x62>
 800464c:	89a3      	ldrh	r3, [r4, #12]
 800464e:	07db      	lsls	r3, r3, #31
 8004650:	d506      	bpl.n	8004660 <__swbuf_r+0x6c>
 8004652:	2e0a      	cmp	r6, #10
 8004654:	d104      	bne.n	8004660 <__swbuf_r+0x6c>
 8004656:	4621      	mov	r1, r4
 8004658:	4628      	mov	r0, r5
 800465a:	f000 f919 	bl	8004890 <_fflush_r>
 800465e:	b988      	cbnz	r0, 8004684 <__swbuf_r+0x90>
 8004660:	4638      	mov	r0, r7
 8004662:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004664:	4b0a      	ldr	r3, [pc, #40]	; (8004690 <__swbuf_r+0x9c>)
 8004666:	429c      	cmp	r4, r3
 8004668:	d101      	bne.n	800466e <__swbuf_r+0x7a>
 800466a:	68ac      	ldr	r4, [r5, #8]
 800466c:	e7cf      	b.n	800460e <__swbuf_r+0x1a>
 800466e:	4b09      	ldr	r3, [pc, #36]	; (8004694 <__swbuf_r+0xa0>)
 8004670:	429c      	cmp	r4, r3
 8004672:	bf08      	it	eq
 8004674:	68ec      	ldreq	r4, [r5, #12]
 8004676:	e7ca      	b.n	800460e <__swbuf_r+0x1a>
 8004678:	4621      	mov	r1, r4
 800467a:	4628      	mov	r0, r5
 800467c:	f000 f80c 	bl	8004698 <__swsetup_r>
 8004680:	2800      	cmp	r0, #0
 8004682:	d0cb      	beq.n	800461c <__swbuf_r+0x28>
 8004684:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8004688:	e7ea      	b.n	8004660 <__swbuf_r+0x6c>
 800468a:	bf00      	nop
 800468c:	080054ec 	.word	0x080054ec
 8004690:	0800550c 	.word	0x0800550c
 8004694:	080054cc 	.word	0x080054cc

08004698 <__swsetup_r>:
 8004698:	4b32      	ldr	r3, [pc, #200]	; (8004764 <__swsetup_r+0xcc>)
 800469a:	b570      	push	{r4, r5, r6, lr}
 800469c:	681d      	ldr	r5, [r3, #0]
 800469e:	4606      	mov	r6, r0
 80046a0:	460c      	mov	r4, r1
 80046a2:	b125      	cbz	r5, 80046ae <__swsetup_r+0x16>
 80046a4:	69ab      	ldr	r3, [r5, #24]
 80046a6:	b913      	cbnz	r3, 80046ae <__swsetup_r+0x16>
 80046a8:	4628      	mov	r0, r5
 80046aa:	f000 f985 	bl	80049b8 <__sinit>
 80046ae:	4b2e      	ldr	r3, [pc, #184]	; (8004768 <__swsetup_r+0xd0>)
 80046b0:	429c      	cmp	r4, r3
 80046b2:	d10f      	bne.n	80046d4 <__swsetup_r+0x3c>
 80046b4:	686c      	ldr	r4, [r5, #4]
 80046b6:	89a3      	ldrh	r3, [r4, #12]
 80046b8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80046bc:	0719      	lsls	r1, r3, #28
 80046be:	d42c      	bmi.n	800471a <__swsetup_r+0x82>
 80046c0:	06dd      	lsls	r5, r3, #27
 80046c2:	d411      	bmi.n	80046e8 <__swsetup_r+0x50>
 80046c4:	2309      	movs	r3, #9
 80046c6:	6033      	str	r3, [r6, #0]
 80046c8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80046cc:	81a3      	strh	r3, [r4, #12]
 80046ce:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80046d2:	e03e      	b.n	8004752 <__swsetup_r+0xba>
 80046d4:	4b25      	ldr	r3, [pc, #148]	; (800476c <__swsetup_r+0xd4>)
 80046d6:	429c      	cmp	r4, r3
 80046d8:	d101      	bne.n	80046de <__swsetup_r+0x46>
 80046da:	68ac      	ldr	r4, [r5, #8]
 80046dc:	e7eb      	b.n	80046b6 <__swsetup_r+0x1e>
 80046de:	4b24      	ldr	r3, [pc, #144]	; (8004770 <__swsetup_r+0xd8>)
 80046e0:	429c      	cmp	r4, r3
 80046e2:	bf08      	it	eq
 80046e4:	68ec      	ldreq	r4, [r5, #12]
 80046e6:	e7e6      	b.n	80046b6 <__swsetup_r+0x1e>
 80046e8:	0758      	lsls	r0, r3, #29
 80046ea:	d512      	bpl.n	8004712 <__swsetup_r+0x7a>
 80046ec:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80046ee:	b141      	cbz	r1, 8004702 <__swsetup_r+0x6a>
 80046f0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80046f4:	4299      	cmp	r1, r3
 80046f6:	d002      	beq.n	80046fe <__swsetup_r+0x66>
 80046f8:	4630      	mov	r0, r6
 80046fa:	f7ff fb7d 	bl	8003df8 <_free_r>
 80046fe:	2300      	movs	r3, #0
 8004700:	6363      	str	r3, [r4, #52]	; 0x34
 8004702:	89a3      	ldrh	r3, [r4, #12]
 8004704:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004708:	81a3      	strh	r3, [r4, #12]
 800470a:	2300      	movs	r3, #0
 800470c:	6063      	str	r3, [r4, #4]
 800470e:	6923      	ldr	r3, [r4, #16]
 8004710:	6023      	str	r3, [r4, #0]
 8004712:	89a3      	ldrh	r3, [r4, #12]
 8004714:	f043 0308 	orr.w	r3, r3, #8
 8004718:	81a3      	strh	r3, [r4, #12]
 800471a:	6923      	ldr	r3, [r4, #16]
 800471c:	b94b      	cbnz	r3, 8004732 <__swsetup_r+0x9a>
 800471e:	89a3      	ldrh	r3, [r4, #12]
 8004720:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004724:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004728:	d003      	beq.n	8004732 <__swsetup_r+0x9a>
 800472a:	4621      	mov	r1, r4
 800472c:	4630      	mov	r0, r6
 800472e:	f000 fa09 	bl	8004b44 <__smakebuf_r>
 8004732:	89a0      	ldrh	r0, [r4, #12]
 8004734:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004738:	f010 0301 	ands.w	r3, r0, #1
 800473c:	d00a      	beq.n	8004754 <__swsetup_r+0xbc>
 800473e:	2300      	movs	r3, #0
 8004740:	60a3      	str	r3, [r4, #8]
 8004742:	6963      	ldr	r3, [r4, #20]
 8004744:	425b      	negs	r3, r3
 8004746:	61a3      	str	r3, [r4, #24]
 8004748:	6923      	ldr	r3, [r4, #16]
 800474a:	b943      	cbnz	r3, 800475e <__swsetup_r+0xc6>
 800474c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004750:	d1ba      	bne.n	80046c8 <__swsetup_r+0x30>
 8004752:	bd70      	pop	{r4, r5, r6, pc}
 8004754:	0781      	lsls	r1, r0, #30
 8004756:	bf58      	it	pl
 8004758:	6963      	ldrpl	r3, [r4, #20]
 800475a:	60a3      	str	r3, [r4, #8]
 800475c:	e7f4      	b.n	8004748 <__swsetup_r+0xb0>
 800475e:	2000      	movs	r0, #0
 8004760:	e7f7      	b.n	8004752 <__swsetup_r+0xba>
 8004762:	bf00      	nop
 8004764:	2000007c 	.word	0x2000007c
 8004768:	080054ec 	.word	0x080054ec
 800476c:	0800550c 	.word	0x0800550c
 8004770:	080054cc 	.word	0x080054cc

08004774 <abort>:
 8004774:	b508      	push	{r3, lr}
 8004776:	2006      	movs	r0, #6
 8004778:	f000 fc0a 	bl	8004f90 <raise>
 800477c:	2001      	movs	r0, #1
 800477e:	f7fb fff5 	bl	800076c <_exit>
	...

08004784 <__sflush_r>:
 8004784:	898a      	ldrh	r2, [r1, #12]
 8004786:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800478a:	4605      	mov	r5, r0
 800478c:	0710      	lsls	r0, r2, #28
 800478e:	460c      	mov	r4, r1
 8004790:	d458      	bmi.n	8004844 <__sflush_r+0xc0>
 8004792:	684b      	ldr	r3, [r1, #4]
 8004794:	2b00      	cmp	r3, #0
 8004796:	dc05      	bgt.n	80047a4 <__sflush_r+0x20>
 8004798:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800479a:	2b00      	cmp	r3, #0
 800479c:	dc02      	bgt.n	80047a4 <__sflush_r+0x20>
 800479e:	2000      	movs	r0, #0
 80047a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80047a4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80047a6:	2e00      	cmp	r6, #0
 80047a8:	d0f9      	beq.n	800479e <__sflush_r+0x1a>
 80047aa:	2300      	movs	r3, #0
 80047ac:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80047b0:	682f      	ldr	r7, [r5, #0]
 80047b2:	602b      	str	r3, [r5, #0]
 80047b4:	d032      	beq.n	800481c <__sflush_r+0x98>
 80047b6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80047b8:	89a3      	ldrh	r3, [r4, #12]
 80047ba:	075a      	lsls	r2, r3, #29
 80047bc:	d505      	bpl.n	80047ca <__sflush_r+0x46>
 80047be:	6863      	ldr	r3, [r4, #4]
 80047c0:	1ac0      	subs	r0, r0, r3
 80047c2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80047c4:	b10b      	cbz	r3, 80047ca <__sflush_r+0x46>
 80047c6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80047c8:	1ac0      	subs	r0, r0, r3
 80047ca:	2300      	movs	r3, #0
 80047cc:	4602      	mov	r2, r0
 80047ce:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80047d0:	6a21      	ldr	r1, [r4, #32]
 80047d2:	4628      	mov	r0, r5
 80047d4:	47b0      	blx	r6
 80047d6:	1c43      	adds	r3, r0, #1
 80047d8:	89a3      	ldrh	r3, [r4, #12]
 80047da:	d106      	bne.n	80047ea <__sflush_r+0x66>
 80047dc:	6829      	ldr	r1, [r5, #0]
 80047de:	291d      	cmp	r1, #29
 80047e0:	d82c      	bhi.n	800483c <__sflush_r+0xb8>
 80047e2:	4a2a      	ldr	r2, [pc, #168]	; (800488c <__sflush_r+0x108>)
 80047e4:	40ca      	lsrs	r2, r1
 80047e6:	07d6      	lsls	r6, r2, #31
 80047e8:	d528      	bpl.n	800483c <__sflush_r+0xb8>
 80047ea:	2200      	movs	r2, #0
 80047ec:	6062      	str	r2, [r4, #4]
 80047ee:	04d9      	lsls	r1, r3, #19
 80047f0:	6922      	ldr	r2, [r4, #16]
 80047f2:	6022      	str	r2, [r4, #0]
 80047f4:	d504      	bpl.n	8004800 <__sflush_r+0x7c>
 80047f6:	1c42      	adds	r2, r0, #1
 80047f8:	d101      	bne.n	80047fe <__sflush_r+0x7a>
 80047fa:	682b      	ldr	r3, [r5, #0]
 80047fc:	b903      	cbnz	r3, 8004800 <__sflush_r+0x7c>
 80047fe:	6560      	str	r0, [r4, #84]	; 0x54
 8004800:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004802:	602f      	str	r7, [r5, #0]
 8004804:	2900      	cmp	r1, #0
 8004806:	d0ca      	beq.n	800479e <__sflush_r+0x1a>
 8004808:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800480c:	4299      	cmp	r1, r3
 800480e:	d002      	beq.n	8004816 <__sflush_r+0x92>
 8004810:	4628      	mov	r0, r5
 8004812:	f7ff faf1 	bl	8003df8 <_free_r>
 8004816:	2000      	movs	r0, #0
 8004818:	6360      	str	r0, [r4, #52]	; 0x34
 800481a:	e7c1      	b.n	80047a0 <__sflush_r+0x1c>
 800481c:	6a21      	ldr	r1, [r4, #32]
 800481e:	2301      	movs	r3, #1
 8004820:	4628      	mov	r0, r5
 8004822:	47b0      	blx	r6
 8004824:	1c41      	adds	r1, r0, #1
 8004826:	d1c7      	bne.n	80047b8 <__sflush_r+0x34>
 8004828:	682b      	ldr	r3, [r5, #0]
 800482a:	2b00      	cmp	r3, #0
 800482c:	d0c4      	beq.n	80047b8 <__sflush_r+0x34>
 800482e:	2b1d      	cmp	r3, #29
 8004830:	d001      	beq.n	8004836 <__sflush_r+0xb2>
 8004832:	2b16      	cmp	r3, #22
 8004834:	d101      	bne.n	800483a <__sflush_r+0xb6>
 8004836:	602f      	str	r7, [r5, #0]
 8004838:	e7b1      	b.n	800479e <__sflush_r+0x1a>
 800483a:	89a3      	ldrh	r3, [r4, #12]
 800483c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004840:	81a3      	strh	r3, [r4, #12]
 8004842:	e7ad      	b.n	80047a0 <__sflush_r+0x1c>
 8004844:	690f      	ldr	r7, [r1, #16]
 8004846:	2f00      	cmp	r7, #0
 8004848:	d0a9      	beq.n	800479e <__sflush_r+0x1a>
 800484a:	0793      	lsls	r3, r2, #30
 800484c:	680e      	ldr	r6, [r1, #0]
 800484e:	bf08      	it	eq
 8004850:	694b      	ldreq	r3, [r1, #20]
 8004852:	600f      	str	r7, [r1, #0]
 8004854:	bf18      	it	ne
 8004856:	2300      	movne	r3, #0
 8004858:	eba6 0807 	sub.w	r8, r6, r7
 800485c:	608b      	str	r3, [r1, #8]
 800485e:	f1b8 0f00 	cmp.w	r8, #0
 8004862:	dd9c      	ble.n	800479e <__sflush_r+0x1a>
 8004864:	6a21      	ldr	r1, [r4, #32]
 8004866:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004868:	4643      	mov	r3, r8
 800486a:	463a      	mov	r2, r7
 800486c:	4628      	mov	r0, r5
 800486e:	47b0      	blx	r6
 8004870:	2800      	cmp	r0, #0
 8004872:	dc06      	bgt.n	8004882 <__sflush_r+0xfe>
 8004874:	89a3      	ldrh	r3, [r4, #12]
 8004876:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800487a:	81a3      	strh	r3, [r4, #12]
 800487c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004880:	e78e      	b.n	80047a0 <__sflush_r+0x1c>
 8004882:	4407      	add	r7, r0
 8004884:	eba8 0800 	sub.w	r8, r8, r0
 8004888:	e7e9      	b.n	800485e <__sflush_r+0xda>
 800488a:	bf00      	nop
 800488c:	20400001 	.word	0x20400001

08004890 <_fflush_r>:
 8004890:	b538      	push	{r3, r4, r5, lr}
 8004892:	690b      	ldr	r3, [r1, #16]
 8004894:	4605      	mov	r5, r0
 8004896:	460c      	mov	r4, r1
 8004898:	b913      	cbnz	r3, 80048a0 <_fflush_r+0x10>
 800489a:	2500      	movs	r5, #0
 800489c:	4628      	mov	r0, r5
 800489e:	bd38      	pop	{r3, r4, r5, pc}
 80048a0:	b118      	cbz	r0, 80048aa <_fflush_r+0x1a>
 80048a2:	6983      	ldr	r3, [r0, #24]
 80048a4:	b90b      	cbnz	r3, 80048aa <_fflush_r+0x1a>
 80048a6:	f000 f887 	bl	80049b8 <__sinit>
 80048aa:	4b14      	ldr	r3, [pc, #80]	; (80048fc <_fflush_r+0x6c>)
 80048ac:	429c      	cmp	r4, r3
 80048ae:	d11b      	bne.n	80048e8 <_fflush_r+0x58>
 80048b0:	686c      	ldr	r4, [r5, #4]
 80048b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d0ef      	beq.n	800489a <_fflush_r+0xa>
 80048ba:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80048bc:	07d0      	lsls	r0, r2, #31
 80048be:	d404      	bmi.n	80048ca <_fflush_r+0x3a>
 80048c0:	0599      	lsls	r1, r3, #22
 80048c2:	d402      	bmi.n	80048ca <_fflush_r+0x3a>
 80048c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80048c6:	f000 f915 	bl	8004af4 <__retarget_lock_acquire_recursive>
 80048ca:	4628      	mov	r0, r5
 80048cc:	4621      	mov	r1, r4
 80048ce:	f7ff ff59 	bl	8004784 <__sflush_r>
 80048d2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80048d4:	07da      	lsls	r2, r3, #31
 80048d6:	4605      	mov	r5, r0
 80048d8:	d4e0      	bmi.n	800489c <_fflush_r+0xc>
 80048da:	89a3      	ldrh	r3, [r4, #12]
 80048dc:	059b      	lsls	r3, r3, #22
 80048de:	d4dd      	bmi.n	800489c <_fflush_r+0xc>
 80048e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80048e2:	f000 f908 	bl	8004af6 <__retarget_lock_release_recursive>
 80048e6:	e7d9      	b.n	800489c <_fflush_r+0xc>
 80048e8:	4b05      	ldr	r3, [pc, #20]	; (8004900 <_fflush_r+0x70>)
 80048ea:	429c      	cmp	r4, r3
 80048ec:	d101      	bne.n	80048f2 <_fflush_r+0x62>
 80048ee:	68ac      	ldr	r4, [r5, #8]
 80048f0:	e7df      	b.n	80048b2 <_fflush_r+0x22>
 80048f2:	4b04      	ldr	r3, [pc, #16]	; (8004904 <_fflush_r+0x74>)
 80048f4:	429c      	cmp	r4, r3
 80048f6:	bf08      	it	eq
 80048f8:	68ec      	ldreq	r4, [r5, #12]
 80048fa:	e7da      	b.n	80048b2 <_fflush_r+0x22>
 80048fc:	080054ec 	.word	0x080054ec
 8004900:	0800550c 	.word	0x0800550c
 8004904:	080054cc 	.word	0x080054cc

08004908 <std>:
 8004908:	2300      	movs	r3, #0
 800490a:	b510      	push	{r4, lr}
 800490c:	4604      	mov	r4, r0
 800490e:	e9c0 3300 	strd	r3, r3, [r0]
 8004912:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004916:	6083      	str	r3, [r0, #8]
 8004918:	8181      	strh	r1, [r0, #12]
 800491a:	6643      	str	r3, [r0, #100]	; 0x64
 800491c:	81c2      	strh	r2, [r0, #14]
 800491e:	6183      	str	r3, [r0, #24]
 8004920:	4619      	mov	r1, r3
 8004922:	2208      	movs	r2, #8
 8004924:	305c      	adds	r0, #92	; 0x5c
 8004926:	f7ff fa5f 	bl	8003de8 <memset>
 800492a:	4b05      	ldr	r3, [pc, #20]	; (8004940 <std+0x38>)
 800492c:	6263      	str	r3, [r4, #36]	; 0x24
 800492e:	4b05      	ldr	r3, [pc, #20]	; (8004944 <std+0x3c>)
 8004930:	62a3      	str	r3, [r4, #40]	; 0x28
 8004932:	4b05      	ldr	r3, [pc, #20]	; (8004948 <std+0x40>)
 8004934:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004936:	4b05      	ldr	r3, [pc, #20]	; (800494c <std+0x44>)
 8004938:	6224      	str	r4, [r4, #32]
 800493a:	6323      	str	r3, [r4, #48]	; 0x30
 800493c:	bd10      	pop	{r4, pc}
 800493e:	bf00      	nop
 8004940:	08004fc9 	.word	0x08004fc9
 8004944:	08004feb 	.word	0x08004feb
 8004948:	08005023 	.word	0x08005023
 800494c:	08005047 	.word	0x08005047

08004950 <_cleanup_r>:
 8004950:	4901      	ldr	r1, [pc, #4]	; (8004958 <_cleanup_r+0x8>)
 8004952:	f000 b8af 	b.w	8004ab4 <_fwalk_reent>
 8004956:	bf00      	nop
 8004958:	08004891 	.word	0x08004891

0800495c <__sfmoreglue>:
 800495c:	b570      	push	{r4, r5, r6, lr}
 800495e:	2268      	movs	r2, #104	; 0x68
 8004960:	1e4d      	subs	r5, r1, #1
 8004962:	4355      	muls	r5, r2
 8004964:	460e      	mov	r6, r1
 8004966:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800496a:	f7ff fab1 	bl	8003ed0 <_malloc_r>
 800496e:	4604      	mov	r4, r0
 8004970:	b140      	cbz	r0, 8004984 <__sfmoreglue+0x28>
 8004972:	2100      	movs	r1, #0
 8004974:	e9c0 1600 	strd	r1, r6, [r0]
 8004978:	300c      	adds	r0, #12
 800497a:	60a0      	str	r0, [r4, #8]
 800497c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004980:	f7ff fa32 	bl	8003de8 <memset>
 8004984:	4620      	mov	r0, r4
 8004986:	bd70      	pop	{r4, r5, r6, pc}

08004988 <__sfp_lock_acquire>:
 8004988:	4801      	ldr	r0, [pc, #4]	; (8004990 <__sfp_lock_acquire+0x8>)
 800498a:	f000 b8b3 	b.w	8004af4 <__retarget_lock_acquire_recursive>
 800498e:	bf00      	nop
 8004990:	200001a9 	.word	0x200001a9

08004994 <__sfp_lock_release>:
 8004994:	4801      	ldr	r0, [pc, #4]	; (800499c <__sfp_lock_release+0x8>)
 8004996:	f000 b8ae 	b.w	8004af6 <__retarget_lock_release_recursive>
 800499a:	bf00      	nop
 800499c:	200001a9 	.word	0x200001a9

080049a0 <__sinit_lock_acquire>:
 80049a0:	4801      	ldr	r0, [pc, #4]	; (80049a8 <__sinit_lock_acquire+0x8>)
 80049a2:	f000 b8a7 	b.w	8004af4 <__retarget_lock_acquire_recursive>
 80049a6:	bf00      	nop
 80049a8:	200001aa 	.word	0x200001aa

080049ac <__sinit_lock_release>:
 80049ac:	4801      	ldr	r0, [pc, #4]	; (80049b4 <__sinit_lock_release+0x8>)
 80049ae:	f000 b8a2 	b.w	8004af6 <__retarget_lock_release_recursive>
 80049b2:	bf00      	nop
 80049b4:	200001aa 	.word	0x200001aa

080049b8 <__sinit>:
 80049b8:	b510      	push	{r4, lr}
 80049ba:	4604      	mov	r4, r0
 80049bc:	f7ff fff0 	bl	80049a0 <__sinit_lock_acquire>
 80049c0:	69a3      	ldr	r3, [r4, #24]
 80049c2:	b11b      	cbz	r3, 80049cc <__sinit+0x14>
 80049c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80049c8:	f7ff bff0 	b.w	80049ac <__sinit_lock_release>
 80049cc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80049d0:	6523      	str	r3, [r4, #80]	; 0x50
 80049d2:	4b13      	ldr	r3, [pc, #76]	; (8004a20 <__sinit+0x68>)
 80049d4:	4a13      	ldr	r2, [pc, #76]	; (8004a24 <__sinit+0x6c>)
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	62a2      	str	r2, [r4, #40]	; 0x28
 80049da:	42a3      	cmp	r3, r4
 80049dc:	bf04      	itt	eq
 80049de:	2301      	moveq	r3, #1
 80049e0:	61a3      	streq	r3, [r4, #24]
 80049e2:	4620      	mov	r0, r4
 80049e4:	f000 f820 	bl	8004a28 <__sfp>
 80049e8:	6060      	str	r0, [r4, #4]
 80049ea:	4620      	mov	r0, r4
 80049ec:	f000 f81c 	bl	8004a28 <__sfp>
 80049f0:	60a0      	str	r0, [r4, #8]
 80049f2:	4620      	mov	r0, r4
 80049f4:	f000 f818 	bl	8004a28 <__sfp>
 80049f8:	2200      	movs	r2, #0
 80049fa:	60e0      	str	r0, [r4, #12]
 80049fc:	2104      	movs	r1, #4
 80049fe:	6860      	ldr	r0, [r4, #4]
 8004a00:	f7ff ff82 	bl	8004908 <std>
 8004a04:	68a0      	ldr	r0, [r4, #8]
 8004a06:	2201      	movs	r2, #1
 8004a08:	2109      	movs	r1, #9
 8004a0a:	f7ff ff7d 	bl	8004908 <std>
 8004a0e:	68e0      	ldr	r0, [r4, #12]
 8004a10:	2202      	movs	r2, #2
 8004a12:	2112      	movs	r1, #18
 8004a14:	f7ff ff78 	bl	8004908 <std>
 8004a18:	2301      	movs	r3, #1
 8004a1a:	61a3      	str	r3, [r4, #24]
 8004a1c:	e7d2      	b.n	80049c4 <__sinit+0xc>
 8004a1e:	bf00      	nop
 8004a20:	08005494 	.word	0x08005494
 8004a24:	08004951 	.word	0x08004951

08004a28 <__sfp>:
 8004a28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a2a:	4607      	mov	r7, r0
 8004a2c:	f7ff ffac 	bl	8004988 <__sfp_lock_acquire>
 8004a30:	4b1e      	ldr	r3, [pc, #120]	; (8004aac <__sfp+0x84>)
 8004a32:	681e      	ldr	r6, [r3, #0]
 8004a34:	69b3      	ldr	r3, [r6, #24]
 8004a36:	b913      	cbnz	r3, 8004a3e <__sfp+0x16>
 8004a38:	4630      	mov	r0, r6
 8004a3a:	f7ff ffbd 	bl	80049b8 <__sinit>
 8004a3e:	3648      	adds	r6, #72	; 0x48
 8004a40:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004a44:	3b01      	subs	r3, #1
 8004a46:	d503      	bpl.n	8004a50 <__sfp+0x28>
 8004a48:	6833      	ldr	r3, [r6, #0]
 8004a4a:	b30b      	cbz	r3, 8004a90 <__sfp+0x68>
 8004a4c:	6836      	ldr	r6, [r6, #0]
 8004a4e:	e7f7      	b.n	8004a40 <__sfp+0x18>
 8004a50:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004a54:	b9d5      	cbnz	r5, 8004a8c <__sfp+0x64>
 8004a56:	4b16      	ldr	r3, [pc, #88]	; (8004ab0 <__sfp+0x88>)
 8004a58:	60e3      	str	r3, [r4, #12]
 8004a5a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004a5e:	6665      	str	r5, [r4, #100]	; 0x64
 8004a60:	f000 f847 	bl	8004af2 <__retarget_lock_init_recursive>
 8004a64:	f7ff ff96 	bl	8004994 <__sfp_lock_release>
 8004a68:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8004a6c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8004a70:	6025      	str	r5, [r4, #0]
 8004a72:	61a5      	str	r5, [r4, #24]
 8004a74:	2208      	movs	r2, #8
 8004a76:	4629      	mov	r1, r5
 8004a78:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004a7c:	f7ff f9b4 	bl	8003de8 <memset>
 8004a80:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004a84:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004a88:	4620      	mov	r0, r4
 8004a8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004a8c:	3468      	adds	r4, #104	; 0x68
 8004a8e:	e7d9      	b.n	8004a44 <__sfp+0x1c>
 8004a90:	2104      	movs	r1, #4
 8004a92:	4638      	mov	r0, r7
 8004a94:	f7ff ff62 	bl	800495c <__sfmoreglue>
 8004a98:	4604      	mov	r4, r0
 8004a9a:	6030      	str	r0, [r6, #0]
 8004a9c:	2800      	cmp	r0, #0
 8004a9e:	d1d5      	bne.n	8004a4c <__sfp+0x24>
 8004aa0:	f7ff ff78 	bl	8004994 <__sfp_lock_release>
 8004aa4:	230c      	movs	r3, #12
 8004aa6:	603b      	str	r3, [r7, #0]
 8004aa8:	e7ee      	b.n	8004a88 <__sfp+0x60>
 8004aaa:	bf00      	nop
 8004aac:	08005494 	.word	0x08005494
 8004ab0:	ffff0001 	.word	0xffff0001

08004ab4 <_fwalk_reent>:
 8004ab4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004ab8:	4606      	mov	r6, r0
 8004aba:	4688      	mov	r8, r1
 8004abc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004ac0:	2700      	movs	r7, #0
 8004ac2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004ac6:	f1b9 0901 	subs.w	r9, r9, #1
 8004aca:	d505      	bpl.n	8004ad8 <_fwalk_reent+0x24>
 8004acc:	6824      	ldr	r4, [r4, #0]
 8004ace:	2c00      	cmp	r4, #0
 8004ad0:	d1f7      	bne.n	8004ac2 <_fwalk_reent+0xe>
 8004ad2:	4638      	mov	r0, r7
 8004ad4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004ad8:	89ab      	ldrh	r3, [r5, #12]
 8004ada:	2b01      	cmp	r3, #1
 8004adc:	d907      	bls.n	8004aee <_fwalk_reent+0x3a>
 8004ade:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004ae2:	3301      	adds	r3, #1
 8004ae4:	d003      	beq.n	8004aee <_fwalk_reent+0x3a>
 8004ae6:	4629      	mov	r1, r5
 8004ae8:	4630      	mov	r0, r6
 8004aea:	47c0      	blx	r8
 8004aec:	4307      	orrs	r7, r0
 8004aee:	3568      	adds	r5, #104	; 0x68
 8004af0:	e7e9      	b.n	8004ac6 <_fwalk_reent+0x12>

08004af2 <__retarget_lock_init_recursive>:
 8004af2:	4770      	bx	lr

08004af4 <__retarget_lock_acquire_recursive>:
 8004af4:	4770      	bx	lr

08004af6 <__retarget_lock_release_recursive>:
 8004af6:	4770      	bx	lr

08004af8 <__swhatbuf_r>:
 8004af8:	b570      	push	{r4, r5, r6, lr}
 8004afa:	460e      	mov	r6, r1
 8004afc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004b00:	2900      	cmp	r1, #0
 8004b02:	b096      	sub	sp, #88	; 0x58
 8004b04:	4614      	mov	r4, r2
 8004b06:	461d      	mov	r5, r3
 8004b08:	da08      	bge.n	8004b1c <__swhatbuf_r+0x24>
 8004b0a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8004b0e:	2200      	movs	r2, #0
 8004b10:	602a      	str	r2, [r5, #0]
 8004b12:	061a      	lsls	r2, r3, #24
 8004b14:	d410      	bmi.n	8004b38 <__swhatbuf_r+0x40>
 8004b16:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004b1a:	e00e      	b.n	8004b3a <__swhatbuf_r+0x42>
 8004b1c:	466a      	mov	r2, sp
 8004b1e:	f000 fab9 	bl	8005094 <_fstat_r>
 8004b22:	2800      	cmp	r0, #0
 8004b24:	dbf1      	blt.n	8004b0a <__swhatbuf_r+0x12>
 8004b26:	9a01      	ldr	r2, [sp, #4]
 8004b28:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004b2c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004b30:	425a      	negs	r2, r3
 8004b32:	415a      	adcs	r2, r3
 8004b34:	602a      	str	r2, [r5, #0]
 8004b36:	e7ee      	b.n	8004b16 <__swhatbuf_r+0x1e>
 8004b38:	2340      	movs	r3, #64	; 0x40
 8004b3a:	2000      	movs	r0, #0
 8004b3c:	6023      	str	r3, [r4, #0]
 8004b3e:	b016      	add	sp, #88	; 0x58
 8004b40:	bd70      	pop	{r4, r5, r6, pc}
	...

08004b44 <__smakebuf_r>:
 8004b44:	898b      	ldrh	r3, [r1, #12]
 8004b46:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004b48:	079d      	lsls	r5, r3, #30
 8004b4a:	4606      	mov	r6, r0
 8004b4c:	460c      	mov	r4, r1
 8004b4e:	d507      	bpl.n	8004b60 <__smakebuf_r+0x1c>
 8004b50:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004b54:	6023      	str	r3, [r4, #0]
 8004b56:	6123      	str	r3, [r4, #16]
 8004b58:	2301      	movs	r3, #1
 8004b5a:	6163      	str	r3, [r4, #20]
 8004b5c:	b002      	add	sp, #8
 8004b5e:	bd70      	pop	{r4, r5, r6, pc}
 8004b60:	ab01      	add	r3, sp, #4
 8004b62:	466a      	mov	r2, sp
 8004b64:	f7ff ffc8 	bl	8004af8 <__swhatbuf_r>
 8004b68:	9900      	ldr	r1, [sp, #0]
 8004b6a:	4605      	mov	r5, r0
 8004b6c:	4630      	mov	r0, r6
 8004b6e:	f7ff f9af 	bl	8003ed0 <_malloc_r>
 8004b72:	b948      	cbnz	r0, 8004b88 <__smakebuf_r+0x44>
 8004b74:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004b78:	059a      	lsls	r2, r3, #22
 8004b7a:	d4ef      	bmi.n	8004b5c <__smakebuf_r+0x18>
 8004b7c:	f023 0303 	bic.w	r3, r3, #3
 8004b80:	f043 0302 	orr.w	r3, r3, #2
 8004b84:	81a3      	strh	r3, [r4, #12]
 8004b86:	e7e3      	b.n	8004b50 <__smakebuf_r+0xc>
 8004b88:	4b0d      	ldr	r3, [pc, #52]	; (8004bc0 <__smakebuf_r+0x7c>)
 8004b8a:	62b3      	str	r3, [r6, #40]	; 0x28
 8004b8c:	89a3      	ldrh	r3, [r4, #12]
 8004b8e:	6020      	str	r0, [r4, #0]
 8004b90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b94:	81a3      	strh	r3, [r4, #12]
 8004b96:	9b00      	ldr	r3, [sp, #0]
 8004b98:	6163      	str	r3, [r4, #20]
 8004b9a:	9b01      	ldr	r3, [sp, #4]
 8004b9c:	6120      	str	r0, [r4, #16]
 8004b9e:	b15b      	cbz	r3, 8004bb8 <__smakebuf_r+0x74>
 8004ba0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004ba4:	4630      	mov	r0, r6
 8004ba6:	f000 fa87 	bl	80050b8 <_isatty_r>
 8004baa:	b128      	cbz	r0, 8004bb8 <__smakebuf_r+0x74>
 8004bac:	89a3      	ldrh	r3, [r4, #12]
 8004bae:	f023 0303 	bic.w	r3, r3, #3
 8004bb2:	f043 0301 	orr.w	r3, r3, #1
 8004bb6:	81a3      	strh	r3, [r4, #12]
 8004bb8:	89a0      	ldrh	r0, [r4, #12]
 8004bba:	4305      	orrs	r5, r0
 8004bbc:	81a5      	strh	r5, [r4, #12]
 8004bbe:	e7cd      	b.n	8004b5c <__smakebuf_r+0x18>
 8004bc0:	08004951 	.word	0x08004951

08004bc4 <memcpy>:
 8004bc4:	440a      	add	r2, r1
 8004bc6:	4291      	cmp	r1, r2
 8004bc8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8004bcc:	d100      	bne.n	8004bd0 <memcpy+0xc>
 8004bce:	4770      	bx	lr
 8004bd0:	b510      	push	{r4, lr}
 8004bd2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004bd6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004bda:	4291      	cmp	r1, r2
 8004bdc:	d1f9      	bne.n	8004bd2 <memcpy+0xe>
 8004bde:	bd10      	pop	{r4, pc}

08004be0 <memmove>:
 8004be0:	4288      	cmp	r0, r1
 8004be2:	b510      	push	{r4, lr}
 8004be4:	eb01 0402 	add.w	r4, r1, r2
 8004be8:	d902      	bls.n	8004bf0 <memmove+0x10>
 8004bea:	4284      	cmp	r4, r0
 8004bec:	4623      	mov	r3, r4
 8004bee:	d807      	bhi.n	8004c00 <memmove+0x20>
 8004bf0:	1e43      	subs	r3, r0, #1
 8004bf2:	42a1      	cmp	r1, r4
 8004bf4:	d008      	beq.n	8004c08 <memmove+0x28>
 8004bf6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004bfa:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004bfe:	e7f8      	b.n	8004bf2 <memmove+0x12>
 8004c00:	4402      	add	r2, r0
 8004c02:	4601      	mov	r1, r0
 8004c04:	428a      	cmp	r2, r1
 8004c06:	d100      	bne.n	8004c0a <memmove+0x2a>
 8004c08:	bd10      	pop	{r4, pc}
 8004c0a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004c0e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004c12:	e7f7      	b.n	8004c04 <memmove+0x24>

08004c14 <__malloc_lock>:
 8004c14:	4801      	ldr	r0, [pc, #4]	; (8004c1c <__malloc_lock+0x8>)
 8004c16:	f7ff bf6d 	b.w	8004af4 <__retarget_lock_acquire_recursive>
 8004c1a:	bf00      	nop
 8004c1c:	200001a8 	.word	0x200001a8

08004c20 <__malloc_unlock>:
 8004c20:	4801      	ldr	r0, [pc, #4]	; (8004c28 <__malloc_unlock+0x8>)
 8004c22:	f7ff bf68 	b.w	8004af6 <__retarget_lock_release_recursive>
 8004c26:	bf00      	nop
 8004c28:	200001a8 	.word	0x200001a8

08004c2c <_realloc_r>:
 8004c2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004c30:	4680      	mov	r8, r0
 8004c32:	4614      	mov	r4, r2
 8004c34:	460e      	mov	r6, r1
 8004c36:	b921      	cbnz	r1, 8004c42 <_realloc_r+0x16>
 8004c38:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004c3c:	4611      	mov	r1, r2
 8004c3e:	f7ff b947 	b.w	8003ed0 <_malloc_r>
 8004c42:	b92a      	cbnz	r2, 8004c50 <_realloc_r+0x24>
 8004c44:	f7ff f8d8 	bl	8003df8 <_free_r>
 8004c48:	4625      	mov	r5, r4
 8004c4a:	4628      	mov	r0, r5
 8004c4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004c50:	f000 fa54 	bl	80050fc <_malloc_usable_size_r>
 8004c54:	4284      	cmp	r4, r0
 8004c56:	4607      	mov	r7, r0
 8004c58:	d802      	bhi.n	8004c60 <_realloc_r+0x34>
 8004c5a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004c5e:	d812      	bhi.n	8004c86 <_realloc_r+0x5a>
 8004c60:	4621      	mov	r1, r4
 8004c62:	4640      	mov	r0, r8
 8004c64:	f7ff f934 	bl	8003ed0 <_malloc_r>
 8004c68:	4605      	mov	r5, r0
 8004c6a:	2800      	cmp	r0, #0
 8004c6c:	d0ed      	beq.n	8004c4a <_realloc_r+0x1e>
 8004c6e:	42bc      	cmp	r4, r7
 8004c70:	4622      	mov	r2, r4
 8004c72:	4631      	mov	r1, r6
 8004c74:	bf28      	it	cs
 8004c76:	463a      	movcs	r2, r7
 8004c78:	f7ff ffa4 	bl	8004bc4 <memcpy>
 8004c7c:	4631      	mov	r1, r6
 8004c7e:	4640      	mov	r0, r8
 8004c80:	f7ff f8ba 	bl	8003df8 <_free_r>
 8004c84:	e7e1      	b.n	8004c4a <_realloc_r+0x1e>
 8004c86:	4635      	mov	r5, r6
 8004c88:	e7df      	b.n	8004c4a <_realloc_r+0x1e>

08004c8a <__ssputs_r>:
 8004c8a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004c8e:	688e      	ldr	r6, [r1, #8]
 8004c90:	429e      	cmp	r6, r3
 8004c92:	4682      	mov	sl, r0
 8004c94:	460c      	mov	r4, r1
 8004c96:	4690      	mov	r8, r2
 8004c98:	461f      	mov	r7, r3
 8004c9a:	d838      	bhi.n	8004d0e <__ssputs_r+0x84>
 8004c9c:	898a      	ldrh	r2, [r1, #12]
 8004c9e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004ca2:	d032      	beq.n	8004d0a <__ssputs_r+0x80>
 8004ca4:	6825      	ldr	r5, [r4, #0]
 8004ca6:	6909      	ldr	r1, [r1, #16]
 8004ca8:	eba5 0901 	sub.w	r9, r5, r1
 8004cac:	6965      	ldr	r5, [r4, #20]
 8004cae:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004cb2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004cb6:	3301      	adds	r3, #1
 8004cb8:	444b      	add	r3, r9
 8004cba:	106d      	asrs	r5, r5, #1
 8004cbc:	429d      	cmp	r5, r3
 8004cbe:	bf38      	it	cc
 8004cc0:	461d      	movcc	r5, r3
 8004cc2:	0553      	lsls	r3, r2, #21
 8004cc4:	d531      	bpl.n	8004d2a <__ssputs_r+0xa0>
 8004cc6:	4629      	mov	r1, r5
 8004cc8:	f7ff f902 	bl	8003ed0 <_malloc_r>
 8004ccc:	4606      	mov	r6, r0
 8004cce:	b950      	cbnz	r0, 8004ce6 <__ssputs_r+0x5c>
 8004cd0:	230c      	movs	r3, #12
 8004cd2:	f8ca 3000 	str.w	r3, [sl]
 8004cd6:	89a3      	ldrh	r3, [r4, #12]
 8004cd8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004cdc:	81a3      	strh	r3, [r4, #12]
 8004cde:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004ce2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ce6:	6921      	ldr	r1, [r4, #16]
 8004ce8:	464a      	mov	r2, r9
 8004cea:	f7ff ff6b 	bl	8004bc4 <memcpy>
 8004cee:	89a3      	ldrh	r3, [r4, #12]
 8004cf0:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004cf4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004cf8:	81a3      	strh	r3, [r4, #12]
 8004cfa:	6126      	str	r6, [r4, #16]
 8004cfc:	6165      	str	r5, [r4, #20]
 8004cfe:	444e      	add	r6, r9
 8004d00:	eba5 0509 	sub.w	r5, r5, r9
 8004d04:	6026      	str	r6, [r4, #0]
 8004d06:	60a5      	str	r5, [r4, #8]
 8004d08:	463e      	mov	r6, r7
 8004d0a:	42be      	cmp	r6, r7
 8004d0c:	d900      	bls.n	8004d10 <__ssputs_r+0x86>
 8004d0e:	463e      	mov	r6, r7
 8004d10:	6820      	ldr	r0, [r4, #0]
 8004d12:	4632      	mov	r2, r6
 8004d14:	4641      	mov	r1, r8
 8004d16:	f7ff ff63 	bl	8004be0 <memmove>
 8004d1a:	68a3      	ldr	r3, [r4, #8]
 8004d1c:	1b9b      	subs	r3, r3, r6
 8004d1e:	60a3      	str	r3, [r4, #8]
 8004d20:	6823      	ldr	r3, [r4, #0]
 8004d22:	4433      	add	r3, r6
 8004d24:	6023      	str	r3, [r4, #0]
 8004d26:	2000      	movs	r0, #0
 8004d28:	e7db      	b.n	8004ce2 <__ssputs_r+0x58>
 8004d2a:	462a      	mov	r2, r5
 8004d2c:	f7ff ff7e 	bl	8004c2c <_realloc_r>
 8004d30:	4606      	mov	r6, r0
 8004d32:	2800      	cmp	r0, #0
 8004d34:	d1e1      	bne.n	8004cfa <__ssputs_r+0x70>
 8004d36:	6921      	ldr	r1, [r4, #16]
 8004d38:	4650      	mov	r0, sl
 8004d3a:	f7ff f85d 	bl	8003df8 <_free_r>
 8004d3e:	e7c7      	b.n	8004cd0 <__ssputs_r+0x46>

08004d40 <_svfiprintf_r>:
 8004d40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d44:	4698      	mov	r8, r3
 8004d46:	898b      	ldrh	r3, [r1, #12]
 8004d48:	061b      	lsls	r3, r3, #24
 8004d4a:	b09d      	sub	sp, #116	; 0x74
 8004d4c:	4607      	mov	r7, r0
 8004d4e:	460d      	mov	r5, r1
 8004d50:	4614      	mov	r4, r2
 8004d52:	d50e      	bpl.n	8004d72 <_svfiprintf_r+0x32>
 8004d54:	690b      	ldr	r3, [r1, #16]
 8004d56:	b963      	cbnz	r3, 8004d72 <_svfiprintf_r+0x32>
 8004d58:	2140      	movs	r1, #64	; 0x40
 8004d5a:	f7ff f8b9 	bl	8003ed0 <_malloc_r>
 8004d5e:	6028      	str	r0, [r5, #0]
 8004d60:	6128      	str	r0, [r5, #16]
 8004d62:	b920      	cbnz	r0, 8004d6e <_svfiprintf_r+0x2e>
 8004d64:	230c      	movs	r3, #12
 8004d66:	603b      	str	r3, [r7, #0]
 8004d68:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004d6c:	e0d1      	b.n	8004f12 <_svfiprintf_r+0x1d2>
 8004d6e:	2340      	movs	r3, #64	; 0x40
 8004d70:	616b      	str	r3, [r5, #20]
 8004d72:	2300      	movs	r3, #0
 8004d74:	9309      	str	r3, [sp, #36]	; 0x24
 8004d76:	2320      	movs	r3, #32
 8004d78:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004d7c:	f8cd 800c 	str.w	r8, [sp, #12]
 8004d80:	2330      	movs	r3, #48	; 0x30
 8004d82:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8004f2c <_svfiprintf_r+0x1ec>
 8004d86:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004d8a:	f04f 0901 	mov.w	r9, #1
 8004d8e:	4623      	mov	r3, r4
 8004d90:	469a      	mov	sl, r3
 8004d92:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004d96:	b10a      	cbz	r2, 8004d9c <_svfiprintf_r+0x5c>
 8004d98:	2a25      	cmp	r2, #37	; 0x25
 8004d9a:	d1f9      	bne.n	8004d90 <_svfiprintf_r+0x50>
 8004d9c:	ebba 0b04 	subs.w	fp, sl, r4
 8004da0:	d00b      	beq.n	8004dba <_svfiprintf_r+0x7a>
 8004da2:	465b      	mov	r3, fp
 8004da4:	4622      	mov	r2, r4
 8004da6:	4629      	mov	r1, r5
 8004da8:	4638      	mov	r0, r7
 8004daa:	f7ff ff6e 	bl	8004c8a <__ssputs_r>
 8004dae:	3001      	adds	r0, #1
 8004db0:	f000 80aa 	beq.w	8004f08 <_svfiprintf_r+0x1c8>
 8004db4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004db6:	445a      	add	r2, fp
 8004db8:	9209      	str	r2, [sp, #36]	; 0x24
 8004dba:	f89a 3000 	ldrb.w	r3, [sl]
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	f000 80a2 	beq.w	8004f08 <_svfiprintf_r+0x1c8>
 8004dc4:	2300      	movs	r3, #0
 8004dc6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004dca:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004dce:	f10a 0a01 	add.w	sl, sl, #1
 8004dd2:	9304      	str	r3, [sp, #16]
 8004dd4:	9307      	str	r3, [sp, #28]
 8004dd6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004dda:	931a      	str	r3, [sp, #104]	; 0x68
 8004ddc:	4654      	mov	r4, sl
 8004dde:	2205      	movs	r2, #5
 8004de0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004de4:	4851      	ldr	r0, [pc, #324]	; (8004f2c <_svfiprintf_r+0x1ec>)
 8004de6:	f7fb fa0b 	bl	8000200 <memchr>
 8004dea:	9a04      	ldr	r2, [sp, #16]
 8004dec:	b9d8      	cbnz	r0, 8004e26 <_svfiprintf_r+0xe6>
 8004dee:	06d0      	lsls	r0, r2, #27
 8004df0:	bf44      	itt	mi
 8004df2:	2320      	movmi	r3, #32
 8004df4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004df8:	0711      	lsls	r1, r2, #28
 8004dfa:	bf44      	itt	mi
 8004dfc:	232b      	movmi	r3, #43	; 0x2b
 8004dfe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004e02:	f89a 3000 	ldrb.w	r3, [sl]
 8004e06:	2b2a      	cmp	r3, #42	; 0x2a
 8004e08:	d015      	beq.n	8004e36 <_svfiprintf_r+0xf6>
 8004e0a:	9a07      	ldr	r2, [sp, #28]
 8004e0c:	4654      	mov	r4, sl
 8004e0e:	2000      	movs	r0, #0
 8004e10:	f04f 0c0a 	mov.w	ip, #10
 8004e14:	4621      	mov	r1, r4
 8004e16:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004e1a:	3b30      	subs	r3, #48	; 0x30
 8004e1c:	2b09      	cmp	r3, #9
 8004e1e:	d94e      	bls.n	8004ebe <_svfiprintf_r+0x17e>
 8004e20:	b1b0      	cbz	r0, 8004e50 <_svfiprintf_r+0x110>
 8004e22:	9207      	str	r2, [sp, #28]
 8004e24:	e014      	b.n	8004e50 <_svfiprintf_r+0x110>
 8004e26:	eba0 0308 	sub.w	r3, r0, r8
 8004e2a:	fa09 f303 	lsl.w	r3, r9, r3
 8004e2e:	4313      	orrs	r3, r2
 8004e30:	9304      	str	r3, [sp, #16]
 8004e32:	46a2      	mov	sl, r4
 8004e34:	e7d2      	b.n	8004ddc <_svfiprintf_r+0x9c>
 8004e36:	9b03      	ldr	r3, [sp, #12]
 8004e38:	1d19      	adds	r1, r3, #4
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	9103      	str	r1, [sp, #12]
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	bfbb      	ittet	lt
 8004e42:	425b      	neglt	r3, r3
 8004e44:	f042 0202 	orrlt.w	r2, r2, #2
 8004e48:	9307      	strge	r3, [sp, #28]
 8004e4a:	9307      	strlt	r3, [sp, #28]
 8004e4c:	bfb8      	it	lt
 8004e4e:	9204      	strlt	r2, [sp, #16]
 8004e50:	7823      	ldrb	r3, [r4, #0]
 8004e52:	2b2e      	cmp	r3, #46	; 0x2e
 8004e54:	d10c      	bne.n	8004e70 <_svfiprintf_r+0x130>
 8004e56:	7863      	ldrb	r3, [r4, #1]
 8004e58:	2b2a      	cmp	r3, #42	; 0x2a
 8004e5a:	d135      	bne.n	8004ec8 <_svfiprintf_r+0x188>
 8004e5c:	9b03      	ldr	r3, [sp, #12]
 8004e5e:	1d1a      	adds	r2, r3, #4
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	9203      	str	r2, [sp, #12]
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	bfb8      	it	lt
 8004e68:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8004e6c:	3402      	adds	r4, #2
 8004e6e:	9305      	str	r3, [sp, #20]
 8004e70:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004f3c <_svfiprintf_r+0x1fc>
 8004e74:	7821      	ldrb	r1, [r4, #0]
 8004e76:	2203      	movs	r2, #3
 8004e78:	4650      	mov	r0, sl
 8004e7a:	f7fb f9c1 	bl	8000200 <memchr>
 8004e7e:	b140      	cbz	r0, 8004e92 <_svfiprintf_r+0x152>
 8004e80:	2340      	movs	r3, #64	; 0x40
 8004e82:	eba0 000a 	sub.w	r0, r0, sl
 8004e86:	fa03 f000 	lsl.w	r0, r3, r0
 8004e8a:	9b04      	ldr	r3, [sp, #16]
 8004e8c:	4303      	orrs	r3, r0
 8004e8e:	3401      	adds	r4, #1
 8004e90:	9304      	str	r3, [sp, #16]
 8004e92:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004e96:	4826      	ldr	r0, [pc, #152]	; (8004f30 <_svfiprintf_r+0x1f0>)
 8004e98:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004e9c:	2206      	movs	r2, #6
 8004e9e:	f7fb f9af 	bl	8000200 <memchr>
 8004ea2:	2800      	cmp	r0, #0
 8004ea4:	d038      	beq.n	8004f18 <_svfiprintf_r+0x1d8>
 8004ea6:	4b23      	ldr	r3, [pc, #140]	; (8004f34 <_svfiprintf_r+0x1f4>)
 8004ea8:	bb1b      	cbnz	r3, 8004ef2 <_svfiprintf_r+0x1b2>
 8004eaa:	9b03      	ldr	r3, [sp, #12]
 8004eac:	3307      	adds	r3, #7
 8004eae:	f023 0307 	bic.w	r3, r3, #7
 8004eb2:	3308      	adds	r3, #8
 8004eb4:	9303      	str	r3, [sp, #12]
 8004eb6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004eb8:	4433      	add	r3, r6
 8004eba:	9309      	str	r3, [sp, #36]	; 0x24
 8004ebc:	e767      	b.n	8004d8e <_svfiprintf_r+0x4e>
 8004ebe:	fb0c 3202 	mla	r2, ip, r2, r3
 8004ec2:	460c      	mov	r4, r1
 8004ec4:	2001      	movs	r0, #1
 8004ec6:	e7a5      	b.n	8004e14 <_svfiprintf_r+0xd4>
 8004ec8:	2300      	movs	r3, #0
 8004eca:	3401      	adds	r4, #1
 8004ecc:	9305      	str	r3, [sp, #20]
 8004ece:	4619      	mov	r1, r3
 8004ed0:	f04f 0c0a 	mov.w	ip, #10
 8004ed4:	4620      	mov	r0, r4
 8004ed6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004eda:	3a30      	subs	r2, #48	; 0x30
 8004edc:	2a09      	cmp	r2, #9
 8004ede:	d903      	bls.n	8004ee8 <_svfiprintf_r+0x1a8>
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d0c5      	beq.n	8004e70 <_svfiprintf_r+0x130>
 8004ee4:	9105      	str	r1, [sp, #20]
 8004ee6:	e7c3      	b.n	8004e70 <_svfiprintf_r+0x130>
 8004ee8:	fb0c 2101 	mla	r1, ip, r1, r2
 8004eec:	4604      	mov	r4, r0
 8004eee:	2301      	movs	r3, #1
 8004ef0:	e7f0      	b.n	8004ed4 <_svfiprintf_r+0x194>
 8004ef2:	ab03      	add	r3, sp, #12
 8004ef4:	9300      	str	r3, [sp, #0]
 8004ef6:	462a      	mov	r2, r5
 8004ef8:	4b0f      	ldr	r3, [pc, #60]	; (8004f38 <_svfiprintf_r+0x1f8>)
 8004efa:	a904      	add	r1, sp, #16
 8004efc:	4638      	mov	r0, r7
 8004efe:	f3af 8000 	nop.w
 8004f02:	1c42      	adds	r2, r0, #1
 8004f04:	4606      	mov	r6, r0
 8004f06:	d1d6      	bne.n	8004eb6 <_svfiprintf_r+0x176>
 8004f08:	89ab      	ldrh	r3, [r5, #12]
 8004f0a:	065b      	lsls	r3, r3, #25
 8004f0c:	f53f af2c 	bmi.w	8004d68 <_svfiprintf_r+0x28>
 8004f10:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004f12:	b01d      	add	sp, #116	; 0x74
 8004f14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f18:	ab03      	add	r3, sp, #12
 8004f1a:	9300      	str	r3, [sp, #0]
 8004f1c:	462a      	mov	r2, r5
 8004f1e:	4b06      	ldr	r3, [pc, #24]	; (8004f38 <_svfiprintf_r+0x1f8>)
 8004f20:	a904      	add	r1, sp, #16
 8004f22:	4638      	mov	r0, r7
 8004f24:	f7ff fa10 	bl	8004348 <_printf_i>
 8004f28:	e7eb      	b.n	8004f02 <_svfiprintf_r+0x1c2>
 8004f2a:	bf00      	nop
 8004f2c:	08005498 	.word	0x08005498
 8004f30:	080054a2 	.word	0x080054a2
 8004f34:	00000000 	.word	0x00000000
 8004f38:	08004c8b 	.word	0x08004c8b
 8004f3c:	0800549e 	.word	0x0800549e

08004f40 <_raise_r>:
 8004f40:	291f      	cmp	r1, #31
 8004f42:	b538      	push	{r3, r4, r5, lr}
 8004f44:	4604      	mov	r4, r0
 8004f46:	460d      	mov	r5, r1
 8004f48:	d904      	bls.n	8004f54 <_raise_r+0x14>
 8004f4a:	2316      	movs	r3, #22
 8004f4c:	6003      	str	r3, [r0, #0]
 8004f4e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004f52:	bd38      	pop	{r3, r4, r5, pc}
 8004f54:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8004f56:	b112      	cbz	r2, 8004f5e <_raise_r+0x1e>
 8004f58:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8004f5c:	b94b      	cbnz	r3, 8004f72 <_raise_r+0x32>
 8004f5e:	4620      	mov	r0, r4
 8004f60:	f000 f830 	bl	8004fc4 <_getpid_r>
 8004f64:	462a      	mov	r2, r5
 8004f66:	4601      	mov	r1, r0
 8004f68:	4620      	mov	r0, r4
 8004f6a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004f6e:	f000 b817 	b.w	8004fa0 <_kill_r>
 8004f72:	2b01      	cmp	r3, #1
 8004f74:	d00a      	beq.n	8004f8c <_raise_r+0x4c>
 8004f76:	1c59      	adds	r1, r3, #1
 8004f78:	d103      	bne.n	8004f82 <_raise_r+0x42>
 8004f7a:	2316      	movs	r3, #22
 8004f7c:	6003      	str	r3, [r0, #0]
 8004f7e:	2001      	movs	r0, #1
 8004f80:	e7e7      	b.n	8004f52 <_raise_r+0x12>
 8004f82:	2400      	movs	r4, #0
 8004f84:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8004f88:	4628      	mov	r0, r5
 8004f8a:	4798      	blx	r3
 8004f8c:	2000      	movs	r0, #0
 8004f8e:	e7e0      	b.n	8004f52 <_raise_r+0x12>

08004f90 <raise>:
 8004f90:	4b02      	ldr	r3, [pc, #8]	; (8004f9c <raise+0xc>)
 8004f92:	4601      	mov	r1, r0
 8004f94:	6818      	ldr	r0, [r3, #0]
 8004f96:	f7ff bfd3 	b.w	8004f40 <_raise_r>
 8004f9a:	bf00      	nop
 8004f9c:	2000007c 	.word	0x2000007c

08004fa0 <_kill_r>:
 8004fa0:	b538      	push	{r3, r4, r5, lr}
 8004fa2:	4d07      	ldr	r5, [pc, #28]	; (8004fc0 <_kill_r+0x20>)
 8004fa4:	2300      	movs	r3, #0
 8004fa6:	4604      	mov	r4, r0
 8004fa8:	4608      	mov	r0, r1
 8004faa:	4611      	mov	r1, r2
 8004fac:	602b      	str	r3, [r5, #0]
 8004fae:	f7fb fbcd 	bl	800074c <_kill>
 8004fb2:	1c43      	adds	r3, r0, #1
 8004fb4:	d102      	bne.n	8004fbc <_kill_r+0x1c>
 8004fb6:	682b      	ldr	r3, [r5, #0]
 8004fb8:	b103      	cbz	r3, 8004fbc <_kill_r+0x1c>
 8004fba:	6023      	str	r3, [r4, #0]
 8004fbc:	bd38      	pop	{r3, r4, r5, pc}
 8004fbe:	bf00      	nop
 8004fc0:	200001ac 	.word	0x200001ac

08004fc4 <_getpid_r>:
 8004fc4:	f7fb bbba 	b.w	800073c <_getpid>

08004fc8 <__sread>:
 8004fc8:	b510      	push	{r4, lr}
 8004fca:	460c      	mov	r4, r1
 8004fcc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004fd0:	f000 f89c 	bl	800510c <_read_r>
 8004fd4:	2800      	cmp	r0, #0
 8004fd6:	bfab      	itete	ge
 8004fd8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004fda:	89a3      	ldrhlt	r3, [r4, #12]
 8004fdc:	181b      	addge	r3, r3, r0
 8004fde:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004fe2:	bfac      	ite	ge
 8004fe4:	6563      	strge	r3, [r4, #84]	; 0x54
 8004fe6:	81a3      	strhlt	r3, [r4, #12]
 8004fe8:	bd10      	pop	{r4, pc}

08004fea <__swrite>:
 8004fea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004fee:	461f      	mov	r7, r3
 8004ff0:	898b      	ldrh	r3, [r1, #12]
 8004ff2:	05db      	lsls	r3, r3, #23
 8004ff4:	4605      	mov	r5, r0
 8004ff6:	460c      	mov	r4, r1
 8004ff8:	4616      	mov	r6, r2
 8004ffa:	d505      	bpl.n	8005008 <__swrite+0x1e>
 8004ffc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005000:	2302      	movs	r3, #2
 8005002:	2200      	movs	r2, #0
 8005004:	f000 f868 	bl	80050d8 <_lseek_r>
 8005008:	89a3      	ldrh	r3, [r4, #12]
 800500a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800500e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005012:	81a3      	strh	r3, [r4, #12]
 8005014:	4632      	mov	r2, r6
 8005016:	463b      	mov	r3, r7
 8005018:	4628      	mov	r0, r5
 800501a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800501e:	f000 b817 	b.w	8005050 <_write_r>

08005022 <__sseek>:
 8005022:	b510      	push	{r4, lr}
 8005024:	460c      	mov	r4, r1
 8005026:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800502a:	f000 f855 	bl	80050d8 <_lseek_r>
 800502e:	1c43      	adds	r3, r0, #1
 8005030:	89a3      	ldrh	r3, [r4, #12]
 8005032:	bf15      	itete	ne
 8005034:	6560      	strne	r0, [r4, #84]	; 0x54
 8005036:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800503a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800503e:	81a3      	strheq	r3, [r4, #12]
 8005040:	bf18      	it	ne
 8005042:	81a3      	strhne	r3, [r4, #12]
 8005044:	bd10      	pop	{r4, pc}

08005046 <__sclose>:
 8005046:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800504a:	f000 b813 	b.w	8005074 <_close_r>
	...

08005050 <_write_r>:
 8005050:	b538      	push	{r3, r4, r5, lr}
 8005052:	4d07      	ldr	r5, [pc, #28]	; (8005070 <_write_r+0x20>)
 8005054:	4604      	mov	r4, r0
 8005056:	4608      	mov	r0, r1
 8005058:	4611      	mov	r1, r2
 800505a:	2200      	movs	r2, #0
 800505c:	602a      	str	r2, [r5, #0]
 800505e:	461a      	mov	r2, r3
 8005060:	f7fb fbab 	bl	80007ba <_write>
 8005064:	1c43      	adds	r3, r0, #1
 8005066:	d102      	bne.n	800506e <_write_r+0x1e>
 8005068:	682b      	ldr	r3, [r5, #0]
 800506a:	b103      	cbz	r3, 800506e <_write_r+0x1e>
 800506c:	6023      	str	r3, [r4, #0]
 800506e:	bd38      	pop	{r3, r4, r5, pc}
 8005070:	200001ac 	.word	0x200001ac

08005074 <_close_r>:
 8005074:	b538      	push	{r3, r4, r5, lr}
 8005076:	4d06      	ldr	r5, [pc, #24]	; (8005090 <_close_r+0x1c>)
 8005078:	2300      	movs	r3, #0
 800507a:	4604      	mov	r4, r0
 800507c:	4608      	mov	r0, r1
 800507e:	602b      	str	r3, [r5, #0]
 8005080:	f7fb fbb7 	bl	80007f2 <_close>
 8005084:	1c43      	adds	r3, r0, #1
 8005086:	d102      	bne.n	800508e <_close_r+0x1a>
 8005088:	682b      	ldr	r3, [r5, #0]
 800508a:	b103      	cbz	r3, 800508e <_close_r+0x1a>
 800508c:	6023      	str	r3, [r4, #0]
 800508e:	bd38      	pop	{r3, r4, r5, pc}
 8005090:	200001ac 	.word	0x200001ac

08005094 <_fstat_r>:
 8005094:	b538      	push	{r3, r4, r5, lr}
 8005096:	4d07      	ldr	r5, [pc, #28]	; (80050b4 <_fstat_r+0x20>)
 8005098:	2300      	movs	r3, #0
 800509a:	4604      	mov	r4, r0
 800509c:	4608      	mov	r0, r1
 800509e:	4611      	mov	r1, r2
 80050a0:	602b      	str	r3, [r5, #0]
 80050a2:	f7fb fbb2 	bl	800080a <_fstat>
 80050a6:	1c43      	adds	r3, r0, #1
 80050a8:	d102      	bne.n	80050b0 <_fstat_r+0x1c>
 80050aa:	682b      	ldr	r3, [r5, #0]
 80050ac:	b103      	cbz	r3, 80050b0 <_fstat_r+0x1c>
 80050ae:	6023      	str	r3, [r4, #0]
 80050b0:	bd38      	pop	{r3, r4, r5, pc}
 80050b2:	bf00      	nop
 80050b4:	200001ac 	.word	0x200001ac

080050b8 <_isatty_r>:
 80050b8:	b538      	push	{r3, r4, r5, lr}
 80050ba:	4d06      	ldr	r5, [pc, #24]	; (80050d4 <_isatty_r+0x1c>)
 80050bc:	2300      	movs	r3, #0
 80050be:	4604      	mov	r4, r0
 80050c0:	4608      	mov	r0, r1
 80050c2:	602b      	str	r3, [r5, #0]
 80050c4:	f7fb fbb1 	bl	800082a <_isatty>
 80050c8:	1c43      	adds	r3, r0, #1
 80050ca:	d102      	bne.n	80050d2 <_isatty_r+0x1a>
 80050cc:	682b      	ldr	r3, [r5, #0]
 80050ce:	b103      	cbz	r3, 80050d2 <_isatty_r+0x1a>
 80050d0:	6023      	str	r3, [r4, #0]
 80050d2:	bd38      	pop	{r3, r4, r5, pc}
 80050d4:	200001ac 	.word	0x200001ac

080050d8 <_lseek_r>:
 80050d8:	b538      	push	{r3, r4, r5, lr}
 80050da:	4d07      	ldr	r5, [pc, #28]	; (80050f8 <_lseek_r+0x20>)
 80050dc:	4604      	mov	r4, r0
 80050de:	4608      	mov	r0, r1
 80050e0:	4611      	mov	r1, r2
 80050e2:	2200      	movs	r2, #0
 80050e4:	602a      	str	r2, [r5, #0]
 80050e6:	461a      	mov	r2, r3
 80050e8:	f7fb fbaa 	bl	8000840 <_lseek>
 80050ec:	1c43      	adds	r3, r0, #1
 80050ee:	d102      	bne.n	80050f6 <_lseek_r+0x1e>
 80050f0:	682b      	ldr	r3, [r5, #0]
 80050f2:	b103      	cbz	r3, 80050f6 <_lseek_r+0x1e>
 80050f4:	6023      	str	r3, [r4, #0]
 80050f6:	bd38      	pop	{r3, r4, r5, pc}
 80050f8:	200001ac 	.word	0x200001ac

080050fc <_malloc_usable_size_r>:
 80050fc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005100:	1f18      	subs	r0, r3, #4
 8005102:	2b00      	cmp	r3, #0
 8005104:	bfbc      	itt	lt
 8005106:	580b      	ldrlt	r3, [r1, r0]
 8005108:	18c0      	addlt	r0, r0, r3
 800510a:	4770      	bx	lr

0800510c <_read_r>:
 800510c:	b538      	push	{r3, r4, r5, lr}
 800510e:	4d07      	ldr	r5, [pc, #28]	; (800512c <_read_r+0x20>)
 8005110:	4604      	mov	r4, r0
 8005112:	4608      	mov	r0, r1
 8005114:	4611      	mov	r1, r2
 8005116:	2200      	movs	r2, #0
 8005118:	602a      	str	r2, [r5, #0]
 800511a:	461a      	mov	r2, r3
 800511c:	f7fb fb30 	bl	8000780 <_read>
 8005120:	1c43      	adds	r3, r0, #1
 8005122:	d102      	bne.n	800512a <_read_r+0x1e>
 8005124:	682b      	ldr	r3, [r5, #0]
 8005126:	b103      	cbz	r3, 800512a <_read_r+0x1e>
 8005128:	6023      	str	r3, [r4, #0]
 800512a:	bd38      	pop	{r3, r4, r5, pc}
 800512c:	200001ac 	.word	0x200001ac

08005130 <_init>:
 8005130:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005132:	bf00      	nop
 8005134:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005136:	bc08      	pop	{r3}
 8005138:	469e      	mov	lr, r3
 800513a:	4770      	bx	lr

0800513c <_fini>:
 800513c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800513e:	bf00      	nop
 8005140:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005142:	bc08      	pop	{r3}
 8005144:	469e      	mov	lr, r3
 8005146:	4770      	bx	lr
