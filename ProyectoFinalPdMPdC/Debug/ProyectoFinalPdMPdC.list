
ProyectoFinalPdMPdC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004de4  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000290  08004f94  08004f94  00014f94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005224  08005224  000200b4  2**0
                  CONTENTS
  4 .ARM          00000008  08005224  08005224  00015224  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800522c  0800522c  000200b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800522c  0800522c  0001522c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005230  08005230  00015230  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000b4  20000000  08005234  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000200b4  2**0
                  CONTENTS
 10 .bss          000000d0  200000b4  200000b4  000200b4  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000184  20000184  000200b4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000200b4  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000d92d  00000000  00000000  000200e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000021ed  00000000  00000000  0002da11  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000b58  00000000  00000000  0002fc00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000a88  00000000  00000000  00030758  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00004124  00000000  00000000  000311e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00010e31  00000000  00000000  00035304  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e4327  00000000  00000000  00046135  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0012a45c  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003860  00000000  00000000  0012a4ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200000b4 	.word	0x200000b4
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08004f7c 	.word	0x08004f7c

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200000b8 	.word	0x200000b8
 80001ec:	08004f7c 	.word	0x08004f7c

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002b4:	f000 b974 	b.w	80005a0 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	4604      	mov	r4, r0
 80002d8:	468e      	mov	lr, r1
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d14d      	bne.n	800037a <__udivmoddi4+0xaa>
 80002de:	428a      	cmp	r2, r1
 80002e0:	4694      	mov	ip, r2
 80002e2:	d969      	bls.n	80003b8 <__udivmoddi4+0xe8>
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	b152      	cbz	r2, 8000300 <__udivmoddi4+0x30>
 80002ea:	fa01 f302 	lsl.w	r3, r1, r2
 80002ee:	f1c2 0120 	rsb	r1, r2, #32
 80002f2:	fa20 f101 	lsr.w	r1, r0, r1
 80002f6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002fa:	ea41 0e03 	orr.w	lr, r1, r3
 80002fe:	4094      	lsls	r4, r2
 8000300:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000304:	0c21      	lsrs	r1, r4, #16
 8000306:	fbbe f6f8 	udiv	r6, lr, r8
 800030a:	fa1f f78c 	uxth.w	r7, ip
 800030e:	fb08 e316 	mls	r3, r8, r6, lr
 8000312:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000316:	fb06 f107 	mul.w	r1, r6, r7
 800031a:	4299      	cmp	r1, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x64>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000326:	f080 811f 	bcs.w	8000568 <__udivmoddi4+0x298>
 800032a:	4299      	cmp	r1, r3
 800032c:	f240 811c 	bls.w	8000568 <__udivmoddi4+0x298>
 8000330:	3e02      	subs	r6, #2
 8000332:	4463      	add	r3, ip
 8000334:	1a5b      	subs	r3, r3, r1
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb3 f0f8 	udiv	r0, r3, r8
 800033c:	fb08 3310 	mls	r3, r8, r0, r3
 8000340:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000344:	fb00 f707 	mul.w	r7, r0, r7
 8000348:	42a7      	cmp	r7, r4
 800034a:	d90a      	bls.n	8000362 <__udivmoddi4+0x92>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000354:	f080 810a 	bcs.w	800056c <__udivmoddi4+0x29c>
 8000358:	42a7      	cmp	r7, r4
 800035a:	f240 8107 	bls.w	800056c <__udivmoddi4+0x29c>
 800035e:	4464      	add	r4, ip
 8000360:	3802      	subs	r0, #2
 8000362:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000366:	1be4      	subs	r4, r4, r7
 8000368:	2600      	movs	r6, #0
 800036a:	b11d      	cbz	r5, 8000374 <__udivmoddi4+0xa4>
 800036c:	40d4      	lsrs	r4, r2
 800036e:	2300      	movs	r3, #0
 8000370:	e9c5 4300 	strd	r4, r3, [r5]
 8000374:	4631      	mov	r1, r6
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	428b      	cmp	r3, r1
 800037c:	d909      	bls.n	8000392 <__udivmoddi4+0xc2>
 800037e:	2d00      	cmp	r5, #0
 8000380:	f000 80ef 	beq.w	8000562 <__udivmoddi4+0x292>
 8000384:	2600      	movs	r6, #0
 8000386:	e9c5 0100 	strd	r0, r1, [r5]
 800038a:	4630      	mov	r0, r6
 800038c:	4631      	mov	r1, r6
 800038e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000392:	fab3 f683 	clz	r6, r3
 8000396:	2e00      	cmp	r6, #0
 8000398:	d14a      	bne.n	8000430 <__udivmoddi4+0x160>
 800039a:	428b      	cmp	r3, r1
 800039c:	d302      	bcc.n	80003a4 <__udivmoddi4+0xd4>
 800039e:	4282      	cmp	r2, r0
 80003a0:	f200 80f9 	bhi.w	8000596 <__udivmoddi4+0x2c6>
 80003a4:	1a84      	subs	r4, r0, r2
 80003a6:	eb61 0303 	sbc.w	r3, r1, r3
 80003aa:	2001      	movs	r0, #1
 80003ac:	469e      	mov	lr, r3
 80003ae:	2d00      	cmp	r5, #0
 80003b0:	d0e0      	beq.n	8000374 <__udivmoddi4+0xa4>
 80003b2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003b6:	e7dd      	b.n	8000374 <__udivmoddi4+0xa4>
 80003b8:	b902      	cbnz	r2, 80003bc <__udivmoddi4+0xec>
 80003ba:	deff      	udf	#255	; 0xff
 80003bc:	fab2 f282 	clz	r2, r2
 80003c0:	2a00      	cmp	r2, #0
 80003c2:	f040 8092 	bne.w	80004ea <__udivmoddi4+0x21a>
 80003c6:	eba1 010c 	sub.w	r1, r1, ip
 80003ca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ce:	fa1f fe8c 	uxth.w	lr, ip
 80003d2:	2601      	movs	r6, #1
 80003d4:	0c20      	lsrs	r0, r4, #16
 80003d6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003da:	fb07 1113 	mls	r1, r7, r3, r1
 80003de:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003e2:	fb0e f003 	mul.w	r0, lr, r3
 80003e6:	4288      	cmp	r0, r1
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x12c>
 80003ea:	eb1c 0101 	adds.w	r1, ip, r1
 80003ee:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x12a>
 80003f4:	4288      	cmp	r0, r1
 80003f6:	f200 80cb 	bhi.w	8000590 <__udivmoddi4+0x2c0>
 80003fa:	4643      	mov	r3, r8
 80003fc:	1a09      	subs	r1, r1, r0
 80003fe:	b2a4      	uxth	r4, r4
 8000400:	fbb1 f0f7 	udiv	r0, r1, r7
 8000404:	fb07 1110 	mls	r1, r7, r0, r1
 8000408:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800040c:	fb0e fe00 	mul.w	lr, lr, r0
 8000410:	45a6      	cmp	lr, r4
 8000412:	d908      	bls.n	8000426 <__udivmoddi4+0x156>
 8000414:	eb1c 0404 	adds.w	r4, ip, r4
 8000418:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800041c:	d202      	bcs.n	8000424 <__udivmoddi4+0x154>
 800041e:	45a6      	cmp	lr, r4
 8000420:	f200 80bb 	bhi.w	800059a <__udivmoddi4+0x2ca>
 8000424:	4608      	mov	r0, r1
 8000426:	eba4 040e 	sub.w	r4, r4, lr
 800042a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800042e:	e79c      	b.n	800036a <__udivmoddi4+0x9a>
 8000430:	f1c6 0720 	rsb	r7, r6, #32
 8000434:	40b3      	lsls	r3, r6
 8000436:	fa22 fc07 	lsr.w	ip, r2, r7
 800043a:	ea4c 0c03 	orr.w	ip, ip, r3
 800043e:	fa20 f407 	lsr.w	r4, r0, r7
 8000442:	fa01 f306 	lsl.w	r3, r1, r6
 8000446:	431c      	orrs	r4, r3
 8000448:	40f9      	lsrs	r1, r7
 800044a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800044e:	fa00 f306 	lsl.w	r3, r0, r6
 8000452:	fbb1 f8f9 	udiv	r8, r1, r9
 8000456:	0c20      	lsrs	r0, r4, #16
 8000458:	fa1f fe8c 	uxth.w	lr, ip
 800045c:	fb09 1118 	mls	r1, r9, r8, r1
 8000460:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000464:	fb08 f00e 	mul.w	r0, r8, lr
 8000468:	4288      	cmp	r0, r1
 800046a:	fa02 f206 	lsl.w	r2, r2, r6
 800046e:	d90b      	bls.n	8000488 <__udivmoddi4+0x1b8>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000478:	f080 8088 	bcs.w	800058c <__udivmoddi4+0x2bc>
 800047c:	4288      	cmp	r0, r1
 800047e:	f240 8085 	bls.w	800058c <__udivmoddi4+0x2bc>
 8000482:	f1a8 0802 	sub.w	r8, r8, #2
 8000486:	4461      	add	r1, ip
 8000488:	1a09      	subs	r1, r1, r0
 800048a:	b2a4      	uxth	r4, r4
 800048c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000490:	fb09 1110 	mls	r1, r9, r0, r1
 8000494:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000498:	fb00 fe0e 	mul.w	lr, r0, lr
 800049c:	458e      	cmp	lr, r1
 800049e:	d908      	bls.n	80004b2 <__udivmoddi4+0x1e2>
 80004a0:	eb1c 0101 	adds.w	r1, ip, r1
 80004a4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80004a8:	d26c      	bcs.n	8000584 <__udivmoddi4+0x2b4>
 80004aa:	458e      	cmp	lr, r1
 80004ac:	d96a      	bls.n	8000584 <__udivmoddi4+0x2b4>
 80004ae:	3802      	subs	r0, #2
 80004b0:	4461      	add	r1, ip
 80004b2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004b6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ba:	eba1 010e 	sub.w	r1, r1, lr
 80004be:	42a1      	cmp	r1, r4
 80004c0:	46c8      	mov	r8, r9
 80004c2:	46a6      	mov	lr, r4
 80004c4:	d356      	bcc.n	8000574 <__udivmoddi4+0x2a4>
 80004c6:	d053      	beq.n	8000570 <__udivmoddi4+0x2a0>
 80004c8:	b15d      	cbz	r5, 80004e2 <__udivmoddi4+0x212>
 80004ca:	ebb3 0208 	subs.w	r2, r3, r8
 80004ce:	eb61 010e 	sbc.w	r1, r1, lr
 80004d2:	fa01 f707 	lsl.w	r7, r1, r7
 80004d6:	fa22 f306 	lsr.w	r3, r2, r6
 80004da:	40f1      	lsrs	r1, r6
 80004dc:	431f      	orrs	r7, r3
 80004de:	e9c5 7100 	strd	r7, r1, [r5]
 80004e2:	2600      	movs	r6, #0
 80004e4:	4631      	mov	r1, r6
 80004e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ea:	f1c2 0320 	rsb	r3, r2, #32
 80004ee:	40d8      	lsrs	r0, r3
 80004f0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f4:	fa21 f303 	lsr.w	r3, r1, r3
 80004f8:	4091      	lsls	r1, r2
 80004fa:	4301      	orrs	r1, r0
 80004fc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000500:	fa1f fe8c 	uxth.w	lr, ip
 8000504:	fbb3 f0f7 	udiv	r0, r3, r7
 8000508:	fb07 3610 	mls	r6, r7, r0, r3
 800050c:	0c0b      	lsrs	r3, r1, #16
 800050e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000512:	fb00 f60e 	mul.w	r6, r0, lr
 8000516:	429e      	cmp	r6, r3
 8000518:	fa04 f402 	lsl.w	r4, r4, r2
 800051c:	d908      	bls.n	8000530 <__udivmoddi4+0x260>
 800051e:	eb1c 0303 	adds.w	r3, ip, r3
 8000522:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000526:	d22f      	bcs.n	8000588 <__udivmoddi4+0x2b8>
 8000528:	429e      	cmp	r6, r3
 800052a:	d92d      	bls.n	8000588 <__udivmoddi4+0x2b8>
 800052c:	3802      	subs	r0, #2
 800052e:	4463      	add	r3, ip
 8000530:	1b9b      	subs	r3, r3, r6
 8000532:	b289      	uxth	r1, r1
 8000534:	fbb3 f6f7 	udiv	r6, r3, r7
 8000538:	fb07 3316 	mls	r3, r7, r6, r3
 800053c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000540:	fb06 f30e 	mul.w	r3, r6, lr
 8000544:	428b      	cmp	r3, r1
 8000546:	d908      	bls.n	800055a <__udivmoddi4+0x28a>
 8000548:	eb1c 0101 	adds.w	r1, ip, r1
 800054c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000550:	d216      	bcs.n	8000580 <__udivmoddi4+0x2b0>
 8000552:	428b      	cmp	r3, r1
 8000554:	d914      	bls.n	8000580 <__udivmoddi4+0x2b0>
 8000556:	3e02      	subs	r6, #2
 8000558:	4461      	add	r1, ip
 800055a:	1ac9      	subs	r1, r1, r3
 800055c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000560:	e738      	b.n	80003d4 <__udivmoddi4+0x104>
 8000562:	462e      	mov	r6, r5
 8000564:	4628      	mov	r0, r5
 8000566:	e705      	b.n	8000374 <__udivmoddi4+0xa4>
 8000568:	4606      	mov	r6, r0
 800056a:	e6e3      	b.n	8000334 <__udivmoddi4+0x64>
 800056c:	4618      	mov	r0, r3
 800056e:	e6f8      	b.n	8000362 <__udivmoddi4+0x92>
 8000570:	454b      	cmp	r3, r9
 8000572:	d2a9      	bcs.n	80004c8 <__udivmoddi4+0x1f8>
 8000574:	ebb9 0802 	subs.w	r8, r9, r2
 8000578:	eb64 0e0c 	sbc.w	lr, r4, ip
 800057c:	3801      	subs	r0, #1
 800057e:	e7a3      	b.n	80004c8 <__udivmoddi4+0x1f8>
 8000580:	4646      	mov	r6, r8
 8000582:	e7ea      	b.n	800055a <__udivmoddi4+0x28a>
 8000584:	4620      	mov	r0, r4
 8000586:	e794      	b.n	80004b2 <__udivmoddi4+0x1e2>
 8000588:	4640      	mov	r0, r8
 800058a:	e7d1      	b.n	8000530 <__udivmoddi4+0x260>
 800058c:	46d0      	mov	r8, sl
 800058e:	e77b      	b.n	8000488 <__udivmoddi4+0x1b8>
 8000590:	3b02      	subs	r3, #2
 8000592:	4461      	add	r1, ip
 8000594:	e732      	b.n	80003fc <__udivmoddi4+0x12c>
 8000596:	4630      	mov	r0, r6
 8000598:	e709      	b.n	80003ae <__udivmoddi4+0xde>
 800059a:	4464      	add	r4, ip
 800059c:	3802      	subs	r0, #2
 800059e:	e742      	b.n	8000426 <__udivmoddi4+0x156>

080005a0 <__aeabi_idiv0>:
 80005a0:	4770      	bx	lr
 80005a2:	bf00      	nop

080005a4 <uartInit>:
 * Inicializa la UART con los parámetros por defecto y envía por serial la configuración inicial.
 *
 * @fn bool_t uartInit()
 * @return true si se inicializó bien
 */
bool_t uartInit(){
 80005a4:	b580      	push	{r7, lr}
 80005a6:	af00      	add	r7, sp, #0
		                  BE CAREFUL : Program 7 data bits + 1 parity bit in PC HyperTerminal
	      - Stop Bit    = One Stop bit
	      - Parity      = ODD parity
	      - BaudRate    = 9600 baud
	      - Hardware flow control disabled (RTS and CTS signals) */
	  UartHandle.Instance        = USARTx;
 80005a8:	4b11      	ldr	r3, [pc, #68]	; (80005f0 <uartInit+0x4c>)
 80005aa:	4a12      	ldr	r2, [pc, #72]	; (80005f4 <uartInit+0x50>)
 80005ac:	601a      	str	r2, [r3, #0]

	  UartHandle.Init.BaudRate   = BAUD_RATE;
 80005ae:	4b10      	ldr	r3, [pc, #64]	; (80005f0 <uartInit+0x4c>)
 80005b0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80005b4:	605a      	str	r2, [r3, #4]
	  UartHandle.Init.WordLength = UART_WORDLENGTH_8B;
 80005b6:	4b0e      	ldr	r3, [pc, #56]	; (80005f0 <uartInit+0x4c>)
 80005b8:	2200      	movs	r2, #0
 80005ba:	609a      	str	r2, [r3, #8]
	  UartHandle.Init.StopBits   = UART_STOPBITS_1;
 80005bc:	4b0c      	ldr	r3, [pc, #48]	; (80005f0 <uartInit+0x4c>)
 80005be:	2200      	movs	r2, #0
 80005c0:	60da      	str	r2, [r3, #12]
	  UartHandle.Init.Parity     = UART_PARITY_NONE;
 80005c2:	4b0b      	ldr	r3, [pc, #44]	; (80005f0 <uartInit+0x4c>)
 80005c4:	2200      	movs	r2, #0
 80005c6:	611a      	str	r2, [r3, #16]
	  UartHandle.Init.HwFlowCtl  = UART_HWCONTROL_NONE;
 80005c8:	4b09      	ldr	r3, [pc, #36]	; (80005f0 <uartInit+0x4c>)
 80005ca:	2200      	movs	r2, #0
 80005cc:	619a      	str	r2, [r3, #24]
	  UartHandle.Init.Mode       = UART_MODE_TX_RX;
 80005ce:	4b08      	ldr	r3, [pc, #32]	; (80005f0 <uartInit+0x4c>)
 80005d0:	220c      	movs	r2, #12
 80005d2:	615a      	str	r2, [r3, #20]
	  UartHandle.Init.OverSampling = UART_OVERSAMPLING_16;
 80005d4:	4b06      	ldr	r3, [pc, #24]	; (80005f0 <uartInit+0x4c>)
 80005d6:	2200      	movs	r2, #0
 80005d8:	61da      	str	r2, [r3, #28]


	  if (HAL_UART_Init(&UartHandle) != HAL_OK)
 80005da:	4805      	ldr	r0, [pc, #20]	; (80005f0 <uartInit+0x4c>)
 80005dc:	f002 fd16 	bl	800300c <HAL_UART_Init>
 80005e0:	4603      	mov	r3, r0
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	d001      	beq.n	80005ea <uartInit+0x46>
	  {
	    return false;
 80005e6:	2300      	movs	r3, #0
 80005e8:	e000      	b.n	80005ec <uartInit+0x48>
	  }
	  return true;
 80005ea:	2301      	movs	r3, #1

}
 80005ec:	4618      	mov	r0, r3
 80005ee:	bd80      	pop	{r7, pc}
 80005f0:	200000d0 	.word	0x200000d0
 80005f4:	40004800 	.word	0x40004800

080005f8 <uartSendString>:
 * y luego lo envía usando la función de la HAL, calculando el
 * tamaño del string con strlen()
 *
 * @param pstring puntero al string, que debe terminar con \0
 */
void uartSendString(uint8_t * pstring){
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b082      	sub	sp, #8
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	6078      	str	r0, [r7, #4]

	assert(pstring != NULL);
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	2b00      	cmp	r3, #0
 8000604:	d105      	bne.n	8000612 <uartSendString+0x1a>
 8000606:	4b0a      	ldr	r3, [pc, #40]	; (8000630 <uartSendString+0x38>)
 8000608:	4a0a      	ldr	r2, [pc, #40]	; (8000634 <uartSendString+0x3c>)
 800060a:	2140      	movs	r1, #64	; 0x40
 800060c:	480a      	ldr	r0, [pc, #40]	; (8000638 <uartSendString+0x40>)
 800060e:	f003 faaf 	bl	8003b70 <__assert_func>
	HAL_UART_Transmit(&UartHandle, pstring, strlen(pstring), 0xFFFF);
 8000612:	6878      	ldr	r0, [r7, #4]
 8000614:	f7ff fdec 	bl	80001f0 <strlen>
 8000618:	4603      	mov	r3, r0
 800061a:	b29a      	uxth	r2, r3
 800061c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000620:	6879      	ldr	r1, [r7, #4]
 8000622:	4806      	ldr	r0, [pc, #24]	; (800063c <uartSendString+0x44>)
 8000624:	f002 fd3f 	bl	80030a6 <HAL_UART_Transmit>

}
 8000628:	bf00      	nop
 800062a:	3708      	adds	r7, #8
 800062c:	46bd      	mov	sp, r7
 800062e:	bd80      	pop	{r7, pc}
 8000630:	08004f94 	.word	0x08004f94
 8000634:	0800510c 	.word	0x0800510c
 8000638:	08004fa4 	.word	0x08004fa4
 800063c:	200000d0 	.word	0x200000d0

08000640 <BSP_LED_On>:
  * @param  Led: Specifies the Led to be set on. 
  *   This parameter can be one of following parameters:
  *     @arg LED2
  */
void BSP_LED_On(Led_TypeDef Led)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b082      	sub	sp, #8
 8000644:	af00      	add	r7, sp, #0
 8000646:	4603      	mov	r3, r0
 8000648:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET); 
 800064a:	79fb      	ldrb	r3, [r7, #7]
 800064c:	4a07      	ldr	r2, [pc, #28]	; (800066c <BSP_LED_On+0x2c>)
 800064e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000652:	79fb      	ldrb	r3, [r7, #7]
 8000654:	4a06      	ldr	r2, [pc, #24]	; (8000670 <BSP_LED_On+0x30>)
 8000656:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800065a:	2201      	movs	r2, #1
 800065c:	4619      	mov	r1, r3
 800065e:	f000 ff71 	bl	8001544 <HAL_GPIO_WritePin>
}
 8000662:	bf00      	nop
 8000664:	3708      	adds	r7, #8
 8000666:	46bd      	mov	sp, r7
 8000668:	bd80      	pop	{r7, pc}
 800066a:	bf00      	nop
 800066c:	20000000 	.word	0x20000000
 8000670:	0800511c 	.word	0x0800511c

08000674 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000674:	b480      	push	{r7}
 8000676:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000678:	4b16      	ldr	r3, [pc, #88]	; (80006d4 <SystemInit+0x60>)
 800067a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800067e:	4a15      	ldr	r2, [pc, #84]	; (80006d4 <SystemInit+0x60>)
 8000680:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000684:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000688:	4b13      	ldr	r3, [pc, #76]	; (80006d8 <SystemInit+0x64>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	4a12      	ldr	r2, [pc, #72]	; (80006d8 <SystemInit+0x64>)
 800068e:	f043 0301 	orr.w	r3, r3, #1
 8000692:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000694:	4b10      	ldr	r3, [pc, #64]	; (80006d8 <SystemInit+0x64>)
 8000696:	2200      	movs	r2, #0
 8000698:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800069a:	4b0f      	ldr	r3, [pc, #60]	; (80006d8 <SystemInit+0x64>)
 800069c:	681b      	ldr	r3, [r3, #0]
 800069e:	4a0e      	ldr	r2, [pc, #56]	; (80006d8 <SystemInit+0x64>)
 80006a0:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80006a4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80006a8:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80006aa:	4b0b      	ldr	r3, [pc, #44]	; (80006d8 <SystemInit+0x64>)
 80006ac:	4a0b      	ldr	r2, [pc, #44]	; (80006dc <SystemInit+0x68>)
 80006ae:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80006b0:	4b09      	ldr	r3, [pc, #36]	; (80006d8 <SystemInit+0x64>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	4a08      	ldr	r2, [pc, #32]	; (80006d8 <SystemInit+0x64>)
 80006b6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80006ba:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80006bc:	4b06      	ldr	r3, [pc, #24]	; (80006d8 <SystemInit+0x64>)
 80006be:	2200      	movs	r2, #0
 80006c0:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80006c2:	4b04      	ldr	r3, [pc, #16]	; (80006d4 <SystemInit+0x60>)
 80006c4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80006c8:	609a      	str	r2, [r3, #8]
#endif
}
 80006ca:	bf00      	nop
 80006cc:	46bd      	mov	sp, r7
 80006ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d2:	4770      	bx	lr
 80006d4:	e000ed00 	.word	0xe000ed00
 80006d8:	40023800 	.word	0x40023800
 80006dc:	24003010 	.word	0x24003010

080006e0 <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 80006e0:	b480      	push	{r7}
 80006e2:	af00      	add	r7, sp, #0
}
 80006e4:	bf00      	nop
 80006e6:	46bd      	mov	sp, r7
 80006e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ec:	4770      	bx	lr

080006ee <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 80006ee:	b480      	push	{r7}
 80006f0:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 80006f2:	e7fe      	b.n	80006f2 <HardFault_Handler+0x4>

080006f4 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 80006f4:	b480      	push	{r7}
 80006f6:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 80006f8:	e7fe      	b.n	80006f8 <MemManage_Handler+0x4>

080006fa <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 80006fa:	b480      	push	{r7}
 80006fc:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 80006fe:	e7fe      	b.n	80006fe <BusFault_Handler+0x4>

08000700 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8000700:	b480      	push	{r7}
 8000702:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8000704:	e7fe      	b.n	8000704 <UsageFault_Handler+0x4>

08000706 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8000706:	b480      	push	{r7}
 8000708:	af00      	add	r7, sp, #0
}
 800070a:	bf00      	nop
 800070c:	46bd      	mov	sp, r7
 800070e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000712:	4770      	bx	lr

08000714 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8000714:	b480      	push	{r7}
 8000716:	af00      	add	r7, sp, #0
}
 8000718:	bf00      	nop
 800071a:	46bd      	mov	sp, r7
 800071c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000720:	4770      	bx	lr

08000722 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8000722:	b480      	push	{r7}
 8000724:	af00      	add	r7, sp, #0
}
 8000726:	bf00      	nop
 8000728:	46bd      	mov	sp, r7
 800072a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800072e:	4770      	bx	lr

08000730 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	af00      	add	r7, sp, #0
    HAL_IncTick();
 8000734:	f000 fc30 	bl	8000f98 <HAL_IncTick>
}
 8000738:	bf00      	nop
 800073a:	bd80      	pop	{r7, pc}

0800073c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800073c:	b480      	push	{r7}
 800073e:	af00      	add	r7, sp, #0
	return 1;
 8000740:	2301      	movs	r3, #1
}
 8000742:	4618      	mov	r0, r3
 8000744:	46bd      	mov	sp, r7
 8000746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800074a:	4770      	bx	lr

0800074c <_kill>:

int _kill(int pid, int sig)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b082      	sub	sp, #8
 8000750:	af00      	add	r7, sp, #0
 8000752:	6078      	str	r0, [r7, #4]
 8000754:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000756:	f003 fa29 	bl	8003bac <__errno>
 800075a:	4603      	mov	r3, r0
 800075c:	2216      	movs	r2, #22
 800075e:	601a      	str	r2, [r3, #0]
	return -1;
 8000760:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000764:	4618      	mov	r0, r3
 8000766:	3708      	adds	r7, #8
 8000768:	46bd      	mov	sp, r7
 800076a:	bd80      	pop	{r7, pc}

0800076c <_exit>:

void _exit (int status)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b082      	sub	sp, #8
 8000770:	af00      	add	r7, sp, #0
 8000772:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000774:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000778:	6878      	ldr	r0, [r7, #4]
 800077a:	f7ff ffe7 	bl	800074c <_kill>
	while (1) {}		/* Make sure we hang here */
 800077e:	e7fe      	b.n	800077e <_exit+0x12>

08000780 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	b086      	sub	sp, #24
 8000784:	af00      	add	r7, sp, #0
 8000786:	60f8      	str	r0, [r7, #12]
 8000788:	60b9      	str	r1, [r7, #8]
 800078a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800078c:	2300      	movs	r3, #0
 800078e:	617b      	str	r3, [r7, #20]
 8000790:	e00a      	b.n	80007a8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000792:	f3af 8000 	nop.w
 8000796:	4601      	mov	r1, r0
 8000798:	68bb      	ldr	r3, [r7, #8]
 800079a:	1c5a      	adds	r2, r3, #1
 800079c:	60ba      	str	r2, [r7, #8]
 800079e:	b2ca      	uxtb	r2, r1
 80007a0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007a2:	697b      	ldr	r3, [r7, #20]
 80007a4:	3301      	adds	r3, #1
 80007a6:	617b      	str	r3, [r7, #20]
 80007a8:	697a      	ldr	r2, [r7, #20]
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	429a      	cmp	r2, r3
 80007ae:	dbf0      	blt.n	8000792 <_read+0x12>
	}

return len;
 80007b0:	687b      	ldr	r3, [r7, #4]
}
 80007b2:	4618      	mov	r0, r3
 80007b4:	3718      	adds	r7, #24
 80007b6:	46bd      	mov	sp, r7
 80007b8:	bd80      	pop	{r7, pc}

080007ba <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80007ba:	b580      	push	{r7, lr}
 80007bc:	b086      	sub	sp, #24
 80007be:	af00      	add	r7, sp, #0
 80007c0:	60f8      	str	r0, [r7, #12]
 80007c2:	60b9      	str	r1, [r7, #8]
 80007c4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007c6:	2300      	movs	r3, #0
 80007c8:	617b      	str	r3, [r7, #20]
 80007ca:	e009      	b.n	80007e0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80007cc:	68bb      	ldr	r3, [r7, #8]
 80007ce:	1c5a      	adds	r2, r3, #1
 80007d0:	60ba      	str	r2, [r7, #8]
 80007d2:	781b      	ldrb	r3, [r3, #0]
 80007d4:	4618      	mov	r0, r3
 80007d6:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007da:	697b      	ldr	r3, [r7, #20]
 80007dc:	3301      	adds	r3, #1
 80007de:	617b      	str	r3, [r7, #20]
 80007e0:	697a      	ldr	r2, [r7, #20]
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	429a      	cmp	r2, r3
 80007e6:	dbf1      	blt.n	80007cc <_write+0x12>
	}
	return len;
 80007e8:	687b      	ldr	r3, [r7, #4]
}
 80007ea:	4618      	mov	r0, r3
 80007ec:	3718      	adds	r7, #24
 80007ee:	46bd      	mov	sp, r7
 80007f0:	bd80      	pop	{r7, pc}

080007f2 <_close>:

int _close(int file)
{
 80007f2:	b480      	push	{r7}
 80007f4:	b083      	sub	sp, #12
 80007f6:	af00      	add	r7, sp, #0
 80007f8:	6078      	str	r0, [r7, #4]
	return -1;
 80007fa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80007fe:	4618      	mov	r0, r3
 8000800:	370c      	adds	r7, #12
 8000802:	46bd      	mov	sp, r7
 8000804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000808:	4770      	bx	lr

0800080a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800080a:	b480      	push	{r7}
 800080c:	b083      	sub	sp, #12
 800080e:	af00      	add	r7, sp, #0
 8000810:	6078      	str	r0, [r7, #4]
 8000812:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000814:	683b      	ldr	r3, [r7, #0]
 8000816:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800081a:	605a      	str	r2, [r3, #4]
	return 0;
 800081c:	2300      	movs	r3, #0
}
 800081e:	4618      	mov	r0, r3
 8000820:	370c      	adds	r7, #12
 8000822:	46bd      	mov	sp, r7
 8000824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000828:	4770      	bx	lr

0800082a <_isatty>:

int _isatty(int file)
{
 800082a:	b480      	push	{r7}
 800082c:	b083      	sub	sp, #12
 800082e:	af00      	add	r7, sp, #0
 8000830:	6078      	str	r0, [r7, #4]
	return 1;
 8000832:	2301      	movs	r3, #1
}
 8000834:	4618      	mov	r0, r3
 8000836:	370c      	adds	r7, #12
 8000838:	46bd      	mov	sp, r7
 800083a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800083e:	4770      	bx	lr

08000840 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000840:	b480      	push	{r7}
 8000842:	b085      	sub	sp, #20
 8000844:	af00      	add	r7, sp, #0
 8000846:	60f8      	str	r0, [r7, #12]
 8000848:	60b9      	str	r1, [r7, #8]
 800084a:	607a      	str	r2, [r7, #4]
	return 0;
 800084c:	2300      	movs	r3, #0
}
 800084e:	4618      	mov	r0, r3
 8000850:	3714      	adds	r7, #20
 8000852:	46bd      	mov	sp, r7
 8000854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000858:	4770      	bx	lr
	...

0800085c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b086      	sub	sp, #24
 8000860:	af00      	add	r7, sp, #0
 8000862:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000864:	4a14      	ldr	r2, [pc, #80]	; (80008b8 <_sbrk+0x5c>)
 8000866:	4b15      	ldr	r3, [pc, #84]	; (80008bc <_sbrk+0x60>)
 8000868:	1ad3      	subs	r3, r2, r3
 800086a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800086c:	697b      	ldr	r3, [r7, #20]
 800086e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000870:	4b13      	ldr	r3, [pc, #76]	; (80008c0 <_sbrk+0x64>)
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	2b00      	cmp	r3, #0
 8000876:	d102      	bne.n	800087e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000878:	4b11      	ldr	r3, [pc, #68]	; (80008c0 <_sbrk+0x64>)
 800087a:	4a12      	ldr	r2, [pc, #72]	; (80008c4 <_sbrk+0x68>)
 800087c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800087e:	4b10      	ldr	r3, [pc, #64]	; (80008c0 <_sbrk+0x64>)
 8000880:	681a      	ldr	r2, [r3, #0]
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	4413      	add	r3, r2
 8000886:	693a      	ldr	r2, [r7, #16]
 8000888:	429a      	cmp	r2, r3
 800088a:	d207      	bcs.n	800089c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800088c:	f003 f98e 	bl	8003bac <__errno>
 8000890:	4603      	mov	r3, r0
 8000892:	220c      	movs	r2, #12
 8000894:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000896:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800089a:	e009      	b.n	80008b0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800089c:	4b08      	ldr	r3, [pc, #32]	; (80008c0 <_sbrk+0x64>)
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80008a2:	4b07      	ldr	r3, [pc, #28]	; (80008c0 <_sbrk+0x64>)
 80008a4:	681a      	ldr	r2, [r3, #0]
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	4413      	add	r3, r2
 80008aa:	4a05      	ldr	r2, [pc, #20]	; (80008c0 <_sbrk+0x64>)
 80008ac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80008ae:	68fb      	ldr	r3, [r7, #12]
}
 80008b0:	4618      	mov	r0, r3
 80008b2:	3718      	adds	r7, #24
 80008b4:	46bd      	mov	sp, r7
 80008b6:	bd80      	pop	{r7, pc}
 80008b8:	20030000 	.word	0x20030000
 80008bc:	00000400 	.word	0x00000400
 80008c0:	20000114 	.word	0x20000114
 80008c4:	20000188 	.word	0x20000188

080008c8 <arrays_equal>:
		0x00,
		0xBA, //DCS TFI+CMDN=X00
		0x00
};

static bool arrays_equal(uint8_t* arr1, uint8_t* arr2, uint8_t len) {
 80008c8:	b480      	push	{r7}
 80008ca:	b087      	sub	sp, #28
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	60f8      	str	r0, [r7, #12]
 80008d0:	60b9      	str	r1, [r7, #8]
 80008d2:	4613      	mov	r3, r2
 80008d4:	71fb      	strb	r3, [r7, #7]
    for (uint8_t i = 0; i < len; i++) {
 80008d6:	2300      	movs	r3, #0
 80008d8:	75fb      	strb	r3, [r7, #23]
 80008da:	e00e      	b.n	80008fa <arrays_equal+0x32>
        if (arr1[i] != arr2[i]) {
 80008dc:	7dfb      	ldrb	r3, [r7, #23]
 80008de:	68fa      	ldr	r2, [r7, #12]
 80008e0:	4413      	add	r3, r2
 80008e2:	781a      	ldrb	r2, [r3, #0]
 80008e4:	7dfb      	ldrb	r3, [r7, #23]
 80008e6:	68b9      	ldr	r1, [r7, #8]
 80008e8:	440b      	add	r3, r1
 80008ea:	781b      	ldrb	r3, [r3, #0]
 80008ec:	429a      	cmp	r2, r3
 80008ee:	d001      	beq.n	80008f4 <arrays_equal+0x2c>
            return false;
 80008f0:	2300      	movs	r3, #0
 80008f2:	e007      	b.n	8000904 <arrays_equal+0x3c>
    for (uint8_t i = 0; i < len; i++) {
 80008f4:	7dfb      	ldrb	r3, [r7, #23]
 80008f6:	3301      	adds	r3, #1
 80008f8:	75fb      	strb	r3, [r7, #23]
 80008fa:	7dfa      	ldrb	r2, [r7, #23]
 80008fc:	79fb      	ldrb	r3, [r7, #7]
 80008fe:	429a      	cmp	r2, r3
 8000900:	d3ec      	bcc.n	80008dc <arrays_equal+0x14>
        }
    }
    return true;
 8000902:	2301      	movs	r3, #1
}
 8000904:	4618      	mov	r0, r3
 8000906:	371c      	adds	r7, #28
 8000908:	46bd      	mov	sp, r7
 800090a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090e:	4770      	bx	lr

08000910 <pn532Driver_I2C_init>:

void set_pn532_address(uint8_t address){
	pn532_address = address;
}

bool pn532Driver_I2C_init(){
 8000910:	b580      	push	{r7, lr}
 8000912:	af00      	add	r7, sp, #0
	pn532Driver_I2C_portNucleo_init();
 8000914:	f000 f9ee 	bl	8000cf4 <pn532Driver_I2C_portNucleo_init>
	pn532Driver_initialized=true;
 8000918:	4b02      	ldr	r3, [pc, #8]	; (8000924 <pn532Driver_I2C_init+0x14>)
 800091a:	2201      	movs	r2, #1
 800091c:	701a      	strb	r2, [r3, #0]
}
 800091e:	bf00      	nop
 8000920:	4618      	mov	r0, r3
 8000922:	bd80      	pop	{r7, pc}
 8000924:	20000118 	.word	0x20000118

08000928 <receive_ACK>:
bool pn532Driver_I2C_deinit(){
	pn532Driver_I2C_portNucleo_deinit();
	pn532Driver_initialized=false;
}

static bool receive_ACK(){
 8000928:	b580      	push	{r7, lr}
 800092a:	b082      	sub	sp, #8
 800092c:	af00      	add	r7, sp, #0
	uint8_t ackBuffer[7]={0};
 800092e:	2300      	movs	r3, #0
 8000930:	603b      	str	r3, [r7, #0]
 8000932:	1d3b      	adds	r3, r7, #4
 8000934:	2100      	movs	r1, #0
 8000936:	460a      	mov	r2, r1
 8000938:	801a      	strh	r2, [r3, #0]
 800093a:	460a      	mov	r2, r1
 800093c:	709a      	strb	r2, [r3, #2]

	if(!pn532Driver_I2C_portNucleo_receiveToBuffer(ackBuffer, LENGTH_OF_ACK_FRAME, pn532_address)){
 800093e:	4b10      	ldr	r3, [pc, #64]	; (8000980 <receive_ACK+0x58>)
 8000940:	781b      	ldrb	r3, [r3, #0]
 8000942:	461a      	mov	r2, r3
 8000944:	463b      	mov	r3, r7
 8000946:	2107      	movs	r1, #7
 8000948:	4618      	mov	r0, r3
 800094a:	f000 fa3f 	bl	8000dcc <pn532Driver_I2C_portNucleo_receiveToBuffer>
 800094e:	4603      	mov	r3, r0
 8000950:	2b00      	cmp	r3, #0
 8000952:	d101      	bne.n	8000958 <receive_ACK+0x30>
		return false;
 8000954:	2300      	movs	r3, #0
 8000956:	e00e      	b.n	8000976 <receive_ACK+0x4e>
	}
	if(!arrays_equal(pn532AckFrame,ackBuffer, LENGTH_OF_ACK_FRAME )){
 8000958:	463b      	mov	r3, r7
 800095a:	2207      	movs	r2, #7
 800095c:	4619      	mov	r1, r3
 800095e:	4809      	ldr	r0, [pc, #36]	; (8000984 <receive_ACK+0x5c>)
 8000960:	f7ff ffb2 	bl	80008c8 <arrays_equal>
 8000964:	4603      	mov	r3, r0
 8000966:	f083 0301 	eor.w	r3, r3, #1
 800096a:	b2db      	uxtb	r3, r3
 800096c:	2b00      	cmp	r3, #0
 800096e:	d001      	beq.n	8000974 <receive_ACK+0x4c>
		return false;
 8000970:	2300      	movs	r3, #0
 8000972:	e000      	b.n	8000976 <receive_ACK+0x4e>
	}
	return true;
 8000974:	2301      	movs	r3, #1
}
 8000976:	4618      	mov	r0, r3
 8000978:	3708      	adds	r7, #8
 800097a:	46bd      	mov	sp, r7
 800097c:	bd80      	pop	{r7, pc}
 800097e:	bf00      	nop
 8000980:	20000010 	.word	0x20000010
 8000984:	08005148 	.word	0x08005148

08000988 <pn532Driver_I2C_getFirmware>:

PN532_response_t pn532Driver_I2C_getFirmware(PN532_firmware_t* firmware){
 8000988:	b580      	push	{r7, lr}
 800098a:	b090      	sub	sp, #64	; 0x40
 800098c:	af00      	add	r7, sp, #0
 800098e:	6078      	str	r0, [r7, #4]

	uint8_t* responseBuffer[LENGTH_OF_FIRMWARE_RESPONSE+LENGTH_OF_PREAMBLE+LENGTH_LEN_LCS+LENGTH_OF_FIRMWARE_RESPONSE_CODE+LENGTH_OF_POSTAMBLE];

	if(!pn532Driver_I2C_portNucleo_sendCommand(commandGetFirmware, sizeof(commandGetFirmware), pn532_address)){
 8000990:	4b2d      	ldr	r3, [pc, #180]	; (8000a48 <pn532Driver_I2C_getFirmware+0xc0>)
 8000992:	781b      	ldrb	r3, [r3, #0]
 8000994:	461a      	mov	r2, r3
 8000996:	2109      	movs	r1, #9
 8000998:	482c      	ldr	r0, [pc, #176]	; (8000a4c <pn532Driver_I2C_getFirmware+0xc4>)
 800099a:	f000 f9f9 	bl	8000d90 <pn532Driver_I2C_portNucleo_sendCommand>
 800099e:	4603      	mov	r3, r0
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d101      	bne.n	80009a8 <pn532Driver_I2C_getFirmware+0x20>
		return PN532_CMD_ERROR;
 80009a4:	2301      	movs	r3, #1
 80009a6:	e04b      	b.n	8000a40 <pn532Driver_I2C_getFirmware+0xb8>
	}

	portNucleo_Delay(1);
 80009a8:	2001      	movs	r0, #1
 80009aa:	f000 f9e5 	bl	8000d78 <portNucleo_Delay>

	if(!receive_ACK()){
 80009ae:	f7ff ffbb 	bl	8000928 <receive_ACK>
 80009b2:	4603      	mov	r3, r0
 80009b4:	f083 0301 	eor.w	r3, r3, #1
 80009b8:	b2db      	uxtb	r3, r3
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d001      	beq.n	80009c2 <pn532Driver_I2C_getFirmware+0x3a>
		return PN532_ACK_NOT_RECEIVED;
 80009be:	2302      	movs	r3, #2
 80009c0:	e03e      	b.n	8000a40 <pn532Driver_I2C_getFirmware+0xb8>
	}

	portNucleo_Delay(1);
 80009c2:	2001      	movs	r0, #1
 80009c4:	f000 f9d8 	bl	8000d78 <portNucleo_Delay>

	if(!pn532Driver_I2C_portNucleo_receiveToBuffer(responseBuffer, sizeof(responseBuffer), pn532_address)){
 80009c8:	4b1f      	ldr	r3, [pc, #124]	; (8000a48 <pn532Driver_I2C_getFirmware+0xc0>)
 80009ca:	781b      	ldrb	r3, [r3, #0]
 80009cc:	461a      	mov	r2, r3
 80009ce:	f107 030c 	add.w	r3, r7, #12
 80009d2:	2134      	movs	r1, #52	; 0x34
 80009d4:	4618      	mov	r0, r3
 80009d6:	f000 f9f9 	bl	8000dcc <pn532Driver_I2C_portNucleo_receiveToBuffer>
 80009da:	4603      	mov	r3, r0
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d101      	bne.n	80009e4 <pn532Driver_I2C_getFirmware+0x5c>
		return PN532_RESPONSE_ERROR;
 80009e0:	2304      	movs	r3, #4
 80009e2:	e02d      	b.n	8000a40 <pn532Driver_I2C_getFirmware+0xb8>
	}
	if(!arrays_equal(preamble, responseBuffer, LENGTH_OF_PREAMBLE)
 80009e4:	f107 030c 	add.w	r3, r7, #12
 80009e8:	2204      	movs	r2, #4
 80009ea:	4619      	mov	r1, r3
 80009ec:	4818      	ldr	r0, [pc, #96]	; (8000a50 <pn532Driver_I2C_getFirmware+0xc8>)
 80009ee:	f7ff ff6b 	bl	80008c8 <arrays_equal>
 80009f2:	4603      	mov	r3, r0
 80009f4:	f083 0301 	eor.w	r3, r3, #1
 80009f8:	b2db      	uxtb	r3, r3
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d10d      	bne.n	8000a1a <pn532Driver_I2C_getFirmware+0x92>
			|| !arrays_equal(firmware_response_code, responseBuffer+(LENGTH_LEN_LCS+LENGTH_OF_PREAMBLE)*sizeof(uint8_t), LENGTH_OF_FIRMWARE_RESPONSE_CODE)) {
 80009fe:	f107 030c 	add.w	r3, r7, #12
 8000a02:	3318      	adds	r3, #24
 8000a04:	2202      	movs	r2, #2
 8000a06:	4619      	mov	r1, r3
 8000a08:	4812      	ldr	r0, [pc, #72]	; (8000a54 <pn532Driver_I2C_getFirmware+0xcc>)
 8000a0a:	f7ff ff5d 	bl	80008c8 <arrays_equal>
 8000a0e:	4603      	mov	r3, r0
 8000a10:	f083 0301 	eor.w	r3, r3, #1
 8000a14:	b2db      	uxtb	r3, r3
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d001      	beq.n	8000a1e <pn532Driver_I2C_getFirmware+0x96>
		return PN532_RESPONSE_ERROR;
 8000a1a:	2304      	movs	r3, #4
 8000a1c:	e010      	b.n	8000a40 <pn532Driver_I2C_getFirmware+0xb8>
	}

	firmware->IC=responseBuffer[LENGTH_OF_PREAMBLE+LENGTH_LEN_LCS+LENGTH_OF_FIRMWARE_RESPONSE_CODE];
 8000a1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a20:	b2da      	uxtb	r2, r3
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	701a      	strb	r2, [r3, #0]
	firmware->version=responseBuffer[LENGTH_OF_PREAMBLE+LENGTH_LEN_LCS+LENGTH_OF_FIRMWARE_RESPONSE_CODE+1];
 8000a26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000a28:	b2da      	uxtb	r2, r3
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	705a      	strb	r2, [r3, #1]
	firmware->revision=responseBuffer[LENGTH_OF_PREAMBLE+LENGTH_LEN_LCS+LENGTH_OF_FIRMWARE_RESPONSE_CODE+2];
 8000a2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000a30:	b2da      	uxtb	r2, r3
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	709a      	strb	r2, [r3, #2]
	firmware->support=responseBuffer[LENGTH_OF_PREAMBLE+LENGTH_LEN_LCS+LENGTH_OF_FIRMWARE_RESPONSE_CODE+3];
 8000a36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000a38:	b2da      	uxtb	r2, r3
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	70da      	strb	r2, [r3, #3]

	return PN532_OK;
 8000a3e:	2300      	movs	r3, #0
}
 8000a40:	4618      	mov	r0, r3
 8000a42:	3740      	adds	r7, #64	; 0x40
 8000a44:	46bd      	mov	sp, r7
 8000a46:	bd80      	pop	{r7, pc}
 8000a48:	20000010 	.word	0x20000010
 8000a4c:	0800513c 	.word	0x0800513c
 8000a50:	20000038 	.word	0x20000038
 8000a54:	2000003c 	.word	0x2000003c

08000a58 <pn532Driver_I2C_configureSAM>:

PN532_response_t pn532Driver_I2C_configureSAM(){
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b084      	sub	sp, #16
 8000a5c:	af00      	add	r7, sp, #0

	uint8_t responseBuffer[9];

	if(!pn532Driver_I2C_portNucleo_sendCommand(command_configure_SAM, sizeof(command_configure_SAM), pn532_address)){
 8000a5e:	4b24      	ldr	r3, [pc, #144]	; (8000af0 <pn532Driver_I2C_configureSAM+0x98>)
 8000a60:	781b      	ldrb	r3, [r3, #0]
 8000a62:	461a      	mov	r2, r3
 8000a64:	210c      	movs	r1, #12
 8000a66:	4823      	ldr	r0, [pc, #140]	; (8000af4 <pn532Driver_I2C_configureSAM+0x9c>)
 8000a68:	f000 f992 	bl	8000d90 <pn532Driver_I2C_portNucleo_sendCommand>
 8000a6c:	4603      	mov	r3, r0
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d101      	bne.n	8000a76 <pn532Driver_I2C_configureSAM+0x1e>
		return PN532_CMD_ERROR;
 8000a72:	2301      	movs	r3, #1
 8000a74:	e038      	b.n	8000ae8 <pn532Driver_I2C_configureSAM+0x90>
	}
	portNucleo_Delay(1);
 8000a76:	2001      	movs	r0, #1
 8000a78:	f000 f97e 	bl	8000d78 <portNucleo_Delay>

	if(!receive_ACK()){
 8000a7c:	f7ff ff54 	bl	8000928 <receive_ACK>
 8000a80:	4603      	mov	r3, r0
 8000a82:	f083 0301 	eor.w	r3, r3, #1
 8000a86:	b2db      	uxtb	r3, r3
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d001      	beq.n	8000a90 <pn532Driver_I2C_configureSAM+0x38>
		return PN532_ACK_NOT_RECEIVED;
 8000a8c:	2302      	movs	r3, #2
 8000a8e:	e02b      	b.n	8000ae8 <pn532Driver_I2C_configureSAM+0x90>
	}

	portNucleo_Delay(1);
 8000a90:	2001      	movs	r0, #1
 8000a92:	f000 f971 	bl	8000d78 <portNucleo_Delay>

	if(!pn532Driver_I2C_portNucleo_receiveToBuffer(responseBuffer, sizeof(responseBuffer), pn532_address)){
 8000a96:	4b16      	ldr	r3, [pc, #88]	; (8000af0 <pn532Driver_I2C_configureSAM+0x98>)
 8000a98:	781b      	ldrb	r3, [r3, #0]
 8000a9a:	461a      	mov	r2, r3
 8000a9c:	1d3b      	adds	r3, r7, #4
 8000a9e:	2109      	movs	r1, #9
 8000aa0:	4618      	mov	r0, r3
 8000aa2:	f000 f993 	bl	8000dcc <pn532Driver_I2C_portNucleo_receiveToBuffer>
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d101      	bne.n	8000ab0 <pn532Driver_I2C_configureSAM+0x58>
		return PN532_RESPONSE_ERROR;
 8000aac:	2304      	movs	r3, #4
 8000aae:	e01b      	b.n	8000ae8 <pn532Driver_I2C_configureSAM+0x90>
	}
	if(!arrays_equal(preamble, responseBuffer, LENGTH_OF_PREAMBLE)
 8000ab0:	1d3b      	adds	r3, r7, #4
 8000ab2:	2204      	movs	r2, #4
 8000ab4:	4619      	mov	r1, r3
 8000ab6:	4810      	ldr	r0, [pc, #64]	; (8000af8 <pn532Driver_I2C_configureSAM+0xa0>)
 8000ab8:	f7ff ff06 	bl	80008c8 <arrays_equal>
 8000abc:	4603      	mov	r3, r0
 8000abe:	f083 0301 	eor.w	r3, r3, #1
 8000ac2:	b2db      	uxtb	r3, r3
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d10c      	bne.n	8000ae2 <pn532Driver_I2C_configureSAM+0x8a>
			|| !arrays_equal(SAM_configure_response_code, responseBuffer+(LENGTH_LEN_LCS+LENGTH_OF_PREAMBLE)*sizeof(uint8_t), LENGTH_OF_SAM_CONFIGURE_RESPONSE_CODE)) {
 8000ac8:	1d3b      	adds	r3, r7, #4
 8000aca:	3306      	adds	r3, #6
 8000acc:	2202      	movs	r2, #2
 8000ace:	4619      	mov	r1, r3
 8000ad0:	480a      	ldr	r0, [pc, #40]	; (8000afc <pn532Driver_I2C_configureSAM+0xa4>)
 8000ad2:	f7ff fef9 	bl	80008c8 <arrays_equal>
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	f083 0301 	eor.w	r3, r3, #1
 8000adc:	b2db      	uxtb	r3, r3
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d001      	beq.n	8000ae6 <pn532Driver_I2C_configureSAM+0x8e>
		return PN532_RESPONSE_ERROR;
 8000ae2:	2304      	movs	r3, #4
 8000ae4:	e000      	b.n	8000ae8 <pn532Driver_I2C_configureSAM+0x90>
	}
	return PN532_OK;
 8000ae6:	2300      	movs	r3, #0
}
 8000ae8:	4618      	mov	r0, r3
 8000aea:	3710      	adds	r7, #16
 8000aec:	46bd      	mov	sp, r7
 8000aee:	bd80      	pop	{r7, pc}
 8000af0:	20000010 	.word	0x20000010
 8000af4:	20000014 	.word	0x20000014
 8000af8:	20000038 	.word	0x20000038
 8000afc:	20000040 	.word	0x20000040

08000b00 <pn532Driver_I2C_listPassiveTarget>:

PN532_response_t pn532Driver_I2C_listPassiveTarget(PN532_target_t * target){
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b088      	sub	sp, #32
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	6078      	str	r0, [r7, #4]

	uint8_t responseBuffer[20];

	if(!searchingTarget){
 8000b08:	4b2d      	ldr	r3, [pc, #180]	; (8000bc0 <pn532Driver_I2C_listPassiveTarget+0xc0>)
 8000b0a:	781b      	ldrb	r3, [r3, #0]
 8000b0c:	f083 0301 	eor.w	r3, r3, #1
 8000b10:	b2db      	uxtb	r3, r3
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d01b      	beq.n	8000b4e <pn532Driver_I2C_listPassiveTarget+0x4e>
		if(!pn532Driver_I2C_portNucleo_sendCommand(command_inListPassiveTarget, sizeof(command_inListPassiveTarget), pn532_address)){
 8000b16:	4b2b      	ldr	r3, [pc, #172]	; (8000bc4 <pn532Driver_I2C_listPassiveTarget+0xc4>)
 8000b18:	781b      	ldrb	r3, [r3, #0]
 8000b1a:	461a      	mov	r2, r3
 8000b1c:	210b      	movs	r1, #11
 8000b1e:	482a      	ldr	r0, [pc, #168]	; (8000bc8 <pn532Driver_I2C_listPassiveTarget+0xc8>)
 8000b20:	f000 f936 	bl	8000d90 <pn532Driver_I2C_portNucleo_sendCommand>
 8000b24:	4603      	mov	r3, r0
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d101      	bne.n	8000b2e <pn532Driver_I2C_listPassiveTarget+0x2e>
			return PN532_CMD_ERROR;
 8000b2a:	2301      	movs	r3, #1
 8000b2c:	e044      	b.n	8000bb8 <pn532Driver_I2C_listPassiveTarget+0xb8>
		}

		portNucleo_Delay(1);
 8000b2e:	2001      	movs	r0, #1
 8000b30:	f000 f922 	bl	8000d78 <portNucleo_Delay>

		if(!receive_ACK()){
 8000b34:	f7ff fef8 	bl	8000928 <receive_ACK>
 8000b38:	4603      	mov	r3, r0
 8000b3a:	f083 0301 	eor.w	r3, r3, #1
 8000b3e:	b2db      	uxtb	r3, r3
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d001      	beq.n	8000b48 <pn532Driver_I2C_listPassiveTarget+0x48>
			return PN532_ACK_NOT_RECEIVED;
 8000b44:	2302      	movs	r3, #2
 8000b46:	e037      	b.n	8000bb8 <pn532Driver_I2C_listPassiveTarget+0xb8>
		}
		searchingTarget=true;
 8000b48:	4b1d      	ldr	r3, [pc, #116]	; (8000bc0 <pn532Driver_I2C_listPassiveTarget+0xc0>)
 8000b4a:	2201      	movs	r2, #1
 8000b4c:	701a      	strb	r2, [r3, #0]
	}


	portNucleo_Delay(1);
 8000b4e:	2001      	movs	r0, #1
 8000b50:	f000 f912 	bl	8000d78 <portNucleo_Delay>
	if(!pn532Driver_I2C_portNucleo_receiveToBuffer(responseBuffer, sizeof(responseBuffer), pn532_address)){
 8000b54:	4b1b      	ldr	r3, [pc, #108]	; (8000bc4 <pn532Driver_I2C_listPassiveTarget+0xc4>)
 8000b56:	781b      	ldrb	r3, [r3, #0]
 8000b58:	461a      	mov	r2, r3
 8000b5a:	f107 030c 	add.w	r3, r7, #12
 8000b5e:	2114      	movs	r1, #20
 8000b60:	4618      	mov	r0, r3
 8000b62:	f000 f933 	bl	8000dcc <pn532Driver_I2C_portNucleo_receiveToBuffer>
 8000b66:	4603      	mov	r3, r0
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d101      	bne.n	8000b70 <pn532Driver_I2C_listPassiveTarget+0x70>
		return PN532_RESPONSE_ERROR;
 8000b6c:	2304      	movs	r3, #4
 8000b6e:	e023      	b.n	8000bb8 <pn532Driver_I2C_listPassiveTarget+0xb8>
	}
	if(responseBuffer[0]==0x00){
 8000b70:	7b3b      	ldrb	r3, [r7, #12]
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d101      	bne.n	8000b7a <pn532Driver_I2C_listPassiveTarget+0x7a>
		return PN532_EMPTY;
 8000b76:	2306      	movs	r3, #6
 8000b78:	e01e      	b.n	8000bb8 <pn532Driver_I2C_listPassiveTarget+0xb8>
	}

	target->logical_number = responseBuffer[1+LENGTH_OF_PREAMBLE+LENGTH_LEN_LCS+LENGTH_OF_FIRMWARE_RESPONSE_CODE];
 8000b7a:	7d7a      	ldrb	r2, [r7, #21]
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	701a      	strb	r2, [r3, #0]
	target->SENS_RES[0] = responseBuffer[2+LENGTH_OF_PREAMBLE+LENGTH_LEN_LCS+LENGTH_OF_FIRMWARE_RESPONSE_CODE];
 8000b80:	7dba      	ldrb	r2, [r7, #22]
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	705a      	strb	r2, [r3, #1]
	target->SENS_RES[1] = responseBuffer[3+LENGTH_OF_PREAMBLE+LENGTH_LEN_LCS+LENGTH_OF_FIRMWARE_RESPONSE_CODE];
 8000b86:	7dfa      	ldrb	r2, [r7, #23]
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	709a      	strb	r2, [r3, #2]
	target->SEL_RES = responseBuffer[4+LENGTH_OF_PREAMBLE+LENGTH_LEN_LCS+LENGTH_OF_FIRMWARE_RESPONSE_CODE];
 8000b8c:	7e3a      	ldrb	r2, [r7, #24]
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	70da      	strb	r2, [r3, #3]
	target->NFCID_length = responseBuffer[5+LENGTH_OF_PREAMBLE+LENGTH_LEN_LCS+LENGTH_OF_FIRMWARE_RESPONSE_CODE];
 8000b92:	7e7a      	ldrb	r2, [r7, #25]
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	711a      	strb	r2, [r3, #4]
	target->NFCID[0] = responseBuffer[6+LENGTH_OF_PREAMBLE+LENGTH_LEN_LCS+LENGTH_OF_FIRMWARE_RESPONSE_CODE];
 8000b98:	7eba      	ldrb	r2, [r7, #26]
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	715a      	strb	r2, [r3, #5]
	target->NFCID[1] = responseBuffer[7+LENGTH_OF_PREAMBLE+LENGTH_LEN_LCS+LENGTH_OF_FIRMWARE_RESPONSE_CODE];
 8000b9e:	7efa      	ldrb	r2, [r7, #27]
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	719a      	strb	r2, [r3, #6]
	target->NFCID[2] = responseBuffer[8+LENGTH_OF_PREAMBLE+LENGTH_LEN_LCS+LENGTH_OF_FIRMWARE_RESPONSE_CODE];
 8000ba4:	7f3a      	ldrb	r2, [r7, #28]
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	71da      	strb	r2, [r3, #7]
	target->NFCID[3] = responseBuffer[9+LENGTH_OF_PREAMBLE+LENGTH_LEN_LCS+LENGTH_OF_FIRMWARE_RESPONSE_CODE];
 8000baa:	7f7a      	ldrb	r2, [r7, #29]
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	721a      	strb	r2, [r3, #8]
	searchingTarget=false;
 8000bb0:	4b03      	ldr	r3, [pc, #12]	; (8000bc0 <pn532Driver_I2C_listPassiveTarget+0xc0>)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	701a      	strb	r2, [r3, #0]
	return PN532_OK;
 8000bb6:	2300      	movs	r3, #0
}
 8000bb8:	4618      	mov	r0, r3
 8000bba:	3720      	adds	r7, #32
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	bd80      	pop	{r7, pc}
 8000bc0:	20000119 	.word	0x20000119
 8000bc4:	20000010 	.word	0x20000010
 8000bc8:	20000020 	.word	0x20000020

08000bcc <pn532Driver_I2C_readMifareData>:

PN532_response_t pn532Driver_I2C_readMifareData(uint8_t* buffer, uint8_t len, PN532_target_t target){
 8000bcc:	b082      	sub	sp, #8
 8000bce:	b590      	push	{r4, r7, lr}
 8000bd0:	b0e9      	sub	sp, #420	; 0x1a4
 8000bd2:	af00      	add	r7, sp, #0
 8000bd4:	f507 74d0 	add.w	r4, r7, #416	; 0x1a0
 8000bd8:	f5a4 74ce 	sub.w	r4, r4, #412	; 0x19c
 8000bdc:	6020      	str	r0, [r4, #0]
 8000bde:	f507 70d8 	add.w	r0, r7, #432	; 0x1b0
 8000be2:	e880 000c 	stmia.w	r0, {r2, r3}
 8000be6:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8000bea:	f2a3 139d 	subw	r3, r3, #413	; 0x19d
 8000bee:	460a      	mov	r2, r1
 8000bf0:	701a      	strb	r2, [r3, #0]

	uint8_t* responseBuffer[100];

	if(!pn532Driver_I2C_portNucleo_sendCommand(command_inDataExchange, sizeof(command_inDataExchange), pn532_address)){
 8000bf2:	4b3c      	ldr	r3, [pc, #240]	; (8000ce4 <pn532Driver_I2C_readMifareData+0x118>)
 8000bf4:	781b      	ldrb	r3, [r3, #0]
 8000bf6:	461a      	mov	r2, r3
 8000bf8:	210c      	movs	r1, #12
 8000bfa:	483b      	ldr	r0, [pc, #236]	; (8000ce8 <pn532Driver_I2C_readMifareData+0x11c>)
 8000bfc:	f000 f8c8 	bl	8000d90 <pn532Driver_I2C_portNucleo_sendCommand>
 8000c00:	4603      	mov	r3, r0
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d101      	bne.n	8000c0a <pn532Driver_I2C_readMifareData+0x3e>
		return PN532_CMD_ERROR;
 8000c06:	2301      	movs	r3, #1
 8000c08:	e063      	b.n	8000cd2 <pn532Driver_I2C_readMifareData+0x106>
	}

	portNucleo_Delay(1);
 8000c0a:	2001      	movs	r0, #1
 8000c0c:	f000 f8b4 	bl	8000d78 <portNucleo_Delay>

	if(!receive_ACK()){
 8000c10:	f7ff fe8a 	bl	8000928 <receive_ACK>
 8000c14:	4603      	mov	r3, r0
 8000c16:	f083 0301 	eor.w	r3, r3, #1
 8000c1a:	b2db      	uxtb	r3, r3
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d001      	beq.n	8000c24 <pn532Driver_I2C_readMifareData+0x58>
		return PN532_ACK_NOT_RECEIVED;
 8000c20:	2302      	movs	r3, #2
 8000c22:	e056      	b.n	8000cd2 <pn532Driver_I2C_readMifareData+0x106>
	}

	portNucleo_Delay(1);
 8000c24:	2001      	movs	r0, #1
 8000c26:	f000 f8a7 	bl	8000d78 <portNucleo_Delay>

	if(!pn532Driver_I2C_portNucleo_receiveToBuffer(responseBuffer, sizeof(responseBuffer), pn532_address)){
 8000c2a:	4b2e      	ldr	r3, [pc, #184]	; (8000ce4 <pn532Driver_I2C_readMifareData+0x118>)
 8000c2c:	781b      	ldrb	r3, [r3, #0]
 8000c2e:	461a      	mov	r2, r3
 8000c30:	f107 030c 	add.w	r3, r7, #12
 8000c34:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8000c38:	4618      	mov	r0, r3
 8000c3a:	f000 f8c7 	bl	8000dcc <pn532Driver_I2C_portNucleo_receiveToBuffer>
 8000c3e:	4603      	mov	r3, r0
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d101      	bne.n	8000c48 <pn532Driver_I2C_readMifareData+0x7c>
		return PN532_RESPONSE_ERROR;
 8000c44:	2304      	movs	r3, #4
 8000c46:	e044      	b.n	8000cd2 <pn532Driver_I2C_readMifareData+0x106>
	}
	if(!arrays_equal(preamble, responseBuffer, LENGTH_OF_PREAMBLE)
 8000c48:	f107 030c 	add.w	r3, r7, #12
 8000c4c:	2204      	movs	r2, #4
 8000c4e:	4619      	mov	r1, r3
 8000c50:	4826      	ldr	r0, [pc, #152]	; (8000cec <pn532Driver_I2C_readMifareData+0x120>)
 8000c52:	f7ff fe39 	bl	80008c8 <arrays_equal>
 8000c56:	4603      	mov	r3, r0
 8000c58:	f083 0301 	eor.w	r3, r3, #1
 8000c5c:	b2db      	uxtb	r3, r3
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d10d      	bne.n	8000c7e <pn532Driver_I2C_readMifareData+0xb2>
			|| !arrays_equal(inDataExchange_response_code, responseBuffer+(LENGTH_LEN_LCS+LENGTH_OF_PREAMBLE)*sizeof(uint8_t), LENGTH_OF_FIRMWARE_RESPONSE_CODE)) {
 8000c62:	f107 030c 	add.w	r3, r7, #12
 8000c66:	3318      	adds	r3, #24
 8000c68:	2202      	movs	r2, #2
 8000c6a:	4619      	mov	r1, r3
 8000c6c:	4820      	ldr	r0, [pc, #128]	; (8000cf0 <pn532Driver_I2C_readMifareData+0x124>)
 8000c6e:	f7ff fe2b 	bl	80008c8 <arrays_equal>
 8000c72:	4603      	mov	r3, r0
 8000c74:	f083 0301 	eor.w	r3, r3, #1
 8000c78:	b2db      	uxtb	r3, r3
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d001      	beq.n	8000c82 <pn532Driver_I2C_readMifareData+0xb6>
		return PN532_RESPONSE_ERROR;
 8000c7e:	2304      	movs	r3, #4
 8000c80:	e027      	b.n	8000cd2 <pn532Driver_I2C_readMifareData+0x106>
	}

	for(int i = 0; i<len-LENGTH_OF_PREAMBLE+LENGTH_LEN_LCS+LENGTH_OF_FIRMWARE_RESPONSE_CODE; i++){
 8000c82:	2300      	movs	r3, #0
 8000c84:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8000c88:	e019      	b.n	8000cbe <pn532Driver_I2C_readMifareData+0xf2>
		buffer[i] = responseBuffer[LENGTH_OF_PREAMBLE+LENGTH_LEN_LCS+LENGTH_OF_FIRMWARE_RESPONSE_CODE+i];
 8000c8a:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8000c8e:	f103 0208 	add.w	r2, r3, #8
 8000c92:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8000c96:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8000c9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c9e:	4619      	mov	r1, r3
 8000ca0:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8000ca4:	f507 72d0 	add.w	r2, r7, #416	; 0x1a0
 8000ca8:	f5a2 72ce 	sub.w	r2, r2, #412	; 0x19c
 8000cac:	6812      	ldr	r2, [r2, #0]
 8000cae:	4413      	add	r3, r2
 8000cb0:	b2ca      	uxtb	r2, r1
 8000cb2:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i<len-LENGTH_OF_PREAMBLE+LENGTH_LEN_LCS+LENGTH_OF_FIRMWARE_RESPONSE_CODE; i++){
 8000cb4:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8000cb8:	3301      	adds	r3, #1
 8000cba:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8000cbe:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8000cc2:	f2a3 139d 	subw	r3, r3, #413	; 0x19d
 8000cc6:	781b      	ldrb	r3, [r3, #0]
 8000cc8:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8000ccc:	429a      	cmp	r2, r3
 8000cce:	dbdc      	blt.n	8000c8a <pn532Driver_I2C_readMifareData+0xbe>
	}

	return PN532_OK;
 8000cd0:	2300      	movs	r3, #0

}
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	f507 77d2 	add.w	r7, r7, #420	; 0x1a4
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8000cde:	b002      	add	sp, #8
 8000ce0:	4770      	bx	lr
 8000ce2:	bf00      	nop
 8000ce4:	20000010 	.word	0x20000010
 8000ce8:	2000002c 	.word	0x2000002c
 8000cec:	20000038 	.word	0x20000038
 8000cf0:	20000044 	.word	0x20000044

08000cf4 <pn532Driver_I2C_portNucleo_init>:
static I2C_HandleTypeDef hi2c1;



bool pn532Driver_I2C_portNucleo_init(void)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	af00      	add	r7, sp, #0
  hi2c1.Instance = I2C1;
 8000cf8:	4b1c      	ldr	r3, [pc, #112]	; (8000d6c <pn532Driver_I2C_portNucleo_init+0x78>)
 8000cfa:	4a1d      	ldr	r2, [pc, #116]	; (8000d70 <pn532Driver_I2C_portNucleo_init+0x7c>)
 8000cfc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000cfe:	4b1b      	ldr	r3, [pc, #108]	; (8000d6c <pn532Driver_I2C_portNucleo_init+0x78>)
 8000d00:	4a1c      	ldr	r2, [pc, #112]	; (8000d74 <pn532Driver_I2C_portNucleo_init+0x80>)
 8000d02:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000d04:	4b19      	ldr	r3, [pc, #100]	; (8000d6c <pn532Driver_I2C_portNucleo_init+0x78>)
 8000d06:	2200      	movs	r2, #0
 8000d08:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000d0a:	4b18      	ldr	r3, [pc, #96]	; (8000d6c <pn532Driver_I2C_portNucleo_init+0x78>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000d10:	4b16      	ldr	r3, [pc, #88]	; (8000d6c <pn532Driver_I2C_portNucleo_init+0x78>)
 8000d12:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000d16:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000d18:	4b14      	ldr	r3, [pc, #80]	; (8000d6c <pn532Driver_I2C_portNucleo_init+0x78>)
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000d1e:	4b13      	ldr	r3, [pc, #76]	; (8000d6c <pn532Driver_I2C_portNucleo_init+0x78>)
 8000d20:	2200      	movs	r2, #0
 8000d22:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000d24:	4b11      	ldr	r3, [pc, #68]	; (8000d6c <pn532Driver_I2C_portNucleo_init+0x78>)
 8000d26:	2200      	movs	r2, #0
 8000d28:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000d2a:	4b10      	ldr	r3, [pc, #64]	; (8000d6c <pn532Driver_I2C_portNucleo_init+0x78>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000d30:	480e      	ldr	r0, [pc, #56]	; (8000d6c <pn532Driver_I2C_portNucleo_init+0x78>)
 8000d32:	f000 fc21 	bl	8001578 <HAL_I2C_Init>
 8000d36:	4603      	mov	r3, r0
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d001      	beq.n	8000d40 <pn532Driver_I2C_portNucleo_init+0x4c>
  {
    return false;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	e012      	b.n	8000d66 <pn532Driver_I2C_portNucleo_init+0x72>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000d40:	2100      	movs	r1, #0
 8000d42:	480a      	ldr	r0, [pc, #40]	; (8000d6c <pn532Driver_I2C_portNucleo_init+0x78>)
 8000d44:	f001 fbad 	bl	80024a2 <HAL_I2CEx_ConfigAnalogFilter>
 8000d48:	4603      	mov	r3, r0
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d001      	beq.n	8000d52 <pn532Driver_I2C_portNucleo_init+0x5e>
  {
    return false;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	e009      	b.n	8000d66 <pn532Driver_I2C_portNucleo_init+0x72>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000d52:	2100      	movs	r1, #0
 8000d54:	4805      	ldr	r0, [pc, #20]	; (8000d6c <pn532Driver_I2C_portNucleo_init+0x78>)
 8000d56:	f001 fbe0 	bl	800251a <HAL_I2CEx_ConfigDigitalFilter>
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d001      	beq.n	8000d64 <pn532Driver_I2C_portNucleo_init+0x70>
  {
    return false;
 8000d60:	2300      	movs	r3, #0
 8000d62:	e000      	b.n	8000d66 <pn532Driver_I2C_portNucleo_init+0x72>
  }
  return true;
 8000d64:	2301      	movs	r3, #1

}
 8000d66:	4618      	mov	r0, r3
 8000d68:	bd80      	pop	{r7, pc}
 8000d6a:	bf00      	nop
 8000d6c:	2000011c 	.word	0x2000011c
 8000d70:	40005400 	.word	0x40005400
 8000d74:	000186a0 	.word	0x000186a0

08000d78 <portNucleo_Delay>:
bool pn532Driver_I2C_portNucleo_deinit(void)
{
	HAL_I2C_DeInit(&hi2c1);
}

void portNucleo_Delay(uint32_t delay){
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b082      	sub	sp, #8
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
	HAL_Delay(delay);
 8000d80:	6878      	ldr	r0, [r7, #4]
 8000d82:	f000 f929 	bl	8000fd8 <HAL_Delay>
}
 8000d86:	bf00      	nop
 8000d88:	3708      	adds	r7, #8
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	bd80      	pop	{r7, pc}
	...

08000d90 <pn532Driver_I2C_portNucleo_sendCommand>:

bool pn532Driver_I2C_portNucleo_sendCommand(uint8_t* command, uint16_t size, uint8_t address){
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b084      	sub	sp, #16
 8000d94:	af02      	add	r7, sp, #8
 8000d96:	6078      	str	r0, [r7, #4]
 8000d98:	460b      	mov	r3, r1
 8000d9a:	807b      	strh	r3, [r7, #2]
 8000d9c:	4613      	mov	r3, r2
 8000d9e:	707b      	strb	r3, [r7, #1]
	return HAL_OK == HAL_I2C_Master_Transmit(&hi2c1, address, command, size, HAL_MAX_DELAY);
 8000da0:	787b      	ldrb	r3, [r7, #1]
 8000da2:	b299      	uxth	r1, r3
 8000da4:	887b      	ldrh	r3, [r7, #2]
 8000da6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000daa:	9200      	str	r2, [sp, #0]
 8000dac:	687a      	ldr	r2, [r7, #4]
 8000dae:	4806      	ldr	r0, [pc, #24]	; (8000dc8 <pn532Driver_I2C_portNucleo_sendCommand+0x38>)
 8000db0:	f000 fd26 	bl	8001800 <HAL_I2C_Master_Transmit>
 8000db4:	4603      	mov	r3, r0
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	bf0c      	ite	eq
 8000dba:	2301      	moveq	r3, #1
 8000dbc:	2300      	movne	r3, #0
 8000dbe:	b2db      	uxtb	r3, r3
}
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	3708      	adds	r7, #8
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	bd80      	pop	{r7, pc}
 8000dc8:	2000011c 	.word	0x2000011c

08000dcc <pn532Driver_I2C_portNucleo_receiveToBuffer>:



bool pn532Driver_I2C_portNucleo_receiveToBuffer(uint8_t * buffer, uint16_t size, uint8_t address){
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b084      	sub	sp, #16
 8000dd0:	af02      	add	r7, sp, #8
 8000dd2:	6078      	str	r0, [r7, #4]
 8000dd4:	460b      	mov	r3, r1
 8000dd6:	807b      	strh	r3, [r7, #2]
 8000dd8:	4613      	mov	r3, r2
 8000dda:	707b      	strb	r3, [r7, #1]
	return HAL_OK == HAL_I2C_Master_Receive(&hi2c1, address, buffer, size, HAL_MAX_DELAY);
 8000ddc:	787b      	ldrb	r3, [r7, #1]
 8000dde:	b299      	uxth	r1, r3
 8000de0:	887b      	ldrh	r3, [r7, #2]
 8000de2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000de6:	9200      	str	r2, [sp, #0]
 8000de8:	687a      	ldr	r2, [r7, #4]
 8000dea:	4806      	ldr	r0, [pc, #24]	; (8000e04 <pn532Driver_I2C_portNucleo_receiveToBuffer+0x38>)
 8000dec:	f000 fe06 	bl	80019fc <HAL_I2C_Master_Receive>
 8000df0:	4603      	mov	r3, r0
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	bf0c      	ite	eq
 8000df6:	2301      	moveq	r3, #1
 8000df8:	2300      	movne	r3, #0
 8000dfa:	b2db      	uxtb	r3, r3
}
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	3708      	adds	r7, #8
 8000e00:	46bd      	mov	sp, r7
 8000e02:	bd80      	pop	{r7, pc}
 8000e04:	2000011c 	.word	0x2000011c

08000e08 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b08a      	sub	sp, #40	; 0x28
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e10:	f107 0314 	add.w	r3, r7, #20
 8000e14:	2200      	movs	r2, #0
 8000e16:	601a      	str	r2, [r3, #0]
 8000e18:	605a      	str	r2, [r3, #4]
 8000e1a:	609a      	str	r2, [r3, #8]
 8000e1c:	60da      	str	r2, [r3, #12]
 8000e1e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	4a1f      	ldr	r2, [pc, #124]	; (8000ea4 <HAL_I2C_MspInit+0x9c>)
 8000e26:	4293      	cmp	r3, r2
 8000e28:	d138      	bne.n	8000e9c <HAL_I2C_MspInit+0x94>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	613b      	str	r3, [r7, #16]
 8000e2e:	4b1e      	ldr	r3, [pc, #120]	; (8000ea8 <HAL_I2C_MspInit+0xa0>)
 8000e30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e32:	4a1d      	ldr	r2, [pc, #116]	; (8000ea8 <HAL_I2C_MspInit+0xa0>)
 8000e34:	f043 0302 	orr.w	r3, r3, #2
 8000e38:	6313      	str	r3, [r2, #48]	; 0x30
 8000e3a:	4b1b      	ldr	r3, [pc, #108]	; (8000ea8 <HAL_I2C_MspInit+0xa0>)
 8000e3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e3e:	f003 0302 	and.w	r3, r3, #2
 8000e42:	613b      	str	r3, [r7, #16]
 8000e44:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000e46:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000e4a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e4c:	2312      	movs	r3, #18
 8000e4e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e50:	2300      	movs	r3, #0
 8000e52:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e54:	2303      	movs	r3, #3
 8000e56:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000e58:	2304      	movs	r3, #4
 8000e5a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e5c:	f107 0314 	add.w	r3, r7, #20
 8000e60:	4619      	mov	r1, r3
 8000e62:	4812      	ldr	r0, [pc, #72]	; (8000eac <HAL_I2C_MspInit+0xa4>)
 8000e64:	f000 f9c2 	bl	80011ec <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000e68:	2300      	movs	r3, #0
 8000e6a:	60fb      	str	r3, [r7, #12]
 8000e6c:	4b0e      	ldr	r3, [pc, #56]	; (8000ea8 <HAL_I2C_MspInit+0xa0>)
 8000e6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e70:	4a0d      	ldr	r2, [pc, #52]	; (8000ea8 <HAL_I2C_MspInit+0xa0>)
 8000e72:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000e76:	6413      	str	r3, [r2, #64]	; 0x40
 8000e78:	4b0b      	ldr	r3, [pc, #44]	; (8000ea8 <HAL_I2C_MspInit+0xa0>)
 8000e7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e7c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e80:	60fb      	str	r3, [r7, #12]
 8000e82:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_I2C1_FORCE_RESET();
 8000e84:	4b08      	ldr	r3, [pc, #32]	; (8000ea8 <HAL_I2C_MspInit+0xa0>)
 8000e86:	6a1b      	ldr	r3, [r3, #32]
 8000e88:	4a07      	ldr	r2, [pc, #28]	; (8000ea8 <HAL_I2C_MspInit+0xa0>)
 8000e8a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000e8e:	6213      	str	r3, [r2, #32]
    __HAL_RCC_I2C1_RELEASE_RESET();
 8000e90:	4b05      	ldr	r3, [pc, #20]	; (8000ea8 <HAL_I2C_MspInit+0xa0>)
 8000e92:	6a1b      	ldr	r3, [r3, #32]
 8000e94:	4a04      	ldr	r2, [pc, #16]	; (8000ea8 <HAL_I2C_MspInit+0xa0>)
 8000e96:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8000e9a:	6213      	str	r3, [r2, #32]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000e9c:	bf00      	nop
 8000e9e:	3728      	adds	r7, #40	; 0x28
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	bd80      	pop	{r7, pc}
 8000ea4:	40005400 	.word	0x40005400
 8000ea8:	40023800 	.word	0x40023800
 8000eac:	40020400 	.word	0x40020400

08000eb0 <HAL_MspInit>:

/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	b083      	sub	sp, #12
 8000eb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	607b      	str	r3, [r7, #4]
 8000eba:	4b10      	ldr	r3, [pc, #64]	; (8000efc <HAL_MspInit+0x4c>)
 8000ebc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ebe:	4a0f      	ldr	r2, [pc, #60]	; (8000efc <HAL_MspInit+0x4c>)
 8000ec0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ec4:	6453      	str	r3, [r2, #68]	; 0x44
 8000ec6:	4b0d      	ldr	r3, [pc, #52]	; (8000efc <HAL_MspInit+0x4c>)
 8000ec8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ece:	607b      	str	r3, [r7, #4]
 8000ed0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	603b      	str	r3, [r7, #0]
 8000ed6:	4b09      	ldr	r3, [pc, #36]	; (8000efc <HAL_MspInit+0x4c>)
 8000ed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eda:	4a08      	ldr	r2, [pc, #32]	; (8000efc <HAL_MspInit+0x4c>)
 8000edc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ee0:	6413      	str	r3, [r2, #64]	; 0x40
 8000ee2:	4b06      	ldr	r3, [pc, #24]	; (8000efc <HAL_MspInit+0x4c>)
 8000ee4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ee6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000eea:	603b      	str	r3, [r7, #0]
 8000eec:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000eee:	bf00      	nop
 8000ef0:	370c      	adds	r7, #12
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef8:	4770      	bx	lr
 8000efa:	bf00      	nop
 8000efc:	40023800 	.word	0x40023800

08000f00 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f04:	4b0b      	ldr	r3, [pc, #44]	; (8000f34 <HAL_Init+0x34>)
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	4a0a      	ldr	r2, [pc, #40]	; (8000f34 <HAL_Init+0x34>)
 8000f0a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f0e:	6013      	str	r3, [r2, #0]
#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f10:	4b08      	ldr	r3, [pc, #32]	; (8000f34 <HAL_Init+0x34>)
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	4a07      	ldr	r2, [pc, #28]	; (8000f34 <HAL_Init+0x34>)
 8000f16:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f1a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f1c:	2003      	movs	r0, #3
 8000f1e:	f000 f931 	bl	8001184 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f22:	200f      	movs	r0, #15
 8000f24:	f000 f808 	bl	8000f38 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f28:	f7ff ffc2 	bl	8000eb0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f2c:	2300      	movs	r3, #0
}
 8000f2e:	4618      	mov	r0, r3
 8000f30:	bd80      	pop	{r7, pc}
 8000f32:	bf00      	nop
 8000f34:	40023c00 	.word	0x40023c00

08000f38 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b082      	sub	sp, #8
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f40:	4b12      	ldr	r3, [pc, #72]	; (8000f8c <HAL_InitTick+0x54>)
 8000f42:	681a      	ldr	r2, [r3, #0]
 8000f44:	4b12      	ldr	r3, [pc, #72]	; (8000f90 <HAL_InitTick+0x58>)
 8000f46:	781b      	ldrb	r3, [r3, #0]
 8000f48:	4619      	mov	r1, r3
 8000f4a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f4e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f52:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f56:	4618      	mov	r0, r3
 8000f58:	f000 f93b 	bl	80011d2 <HAL_SYSTICK_Config>
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d001      	beq.n	8000f66 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f62:	2301      	movs	r3, #1
 8000f64:	e00e      	b.n	8000f84 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	2b0f      	cmp	r3, #15
 8000f6a:	d80a      	bhi.n	8000f82 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	6879      	ldr	r1, [r7, #4]
 8000f70:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000f74:	f000 f911 	bl	800119a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f78:	4a06      	ldr	r2, [pc, #24]	; (8000f94 <HAL_InitTick+0x5c>)
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	e000      	b.n	8000f84 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f82:	2301      	movs	r3, #1
}
 8000f84:	4618      	mov	r0, r3
 8000f86:	3708      	adds	r7, #8
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	bd80      	pop	{r7, pc}
 8000f8c:	2000000c 	.word	0x2000000c
 8000f90:	2000004c 	.word	0x2000004c
 8000f94:	20000048 	.word	0x20000048

08000f98 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f9c:	4b06      	ldr	r3, [pc, #24]	; (8000fb8 <HAL_IncTick+0x20>)
 8000f9e:	781b      	ldrb	r3, [r3, #0]
 8000fa0:	461a      	mov	r2, r3
 8000fa2:	4b06      	ldr	r3, [pc, #24]	; (8000fbc <HAL_IncTick+0x24>)
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	4413      	add	r3, r2
 8000fa8:	4a04      	ldr	r2, [pc, #16]	; (8000fbc <HAL_IncTick+0x24>)
 8000faa:	6013      	str	r3, [r2, #0]
}
 8000fac:	bf00      	nop
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb4:	4770      	bx	lr
 8000fb6:	bf00      	nop
 8000fb8:	2000004c 	.word	0x2000004c
 8000fbc:	20000170 	.word	0x20000170

08000fc0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	af00      	add	r7, sp, #0
  return uwTick;
 8000fc4:	4b03      	ldr	r3, [pc, #12]	; (8000fd4 <HAL_GetTick+0x14>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
}
 8000fc8:	4618      	mov	r0, r3
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd0:	4770      	bx	lr
 8000fd2:	bf00      	nop
 8000fd4:	20000170 	.word	0x20000170

08000fd8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b084      	sub	sp, #16
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000fe0:	f7ff ffee 	bl	8000fc0 <HAL_GetTick>
 8000fe4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000fea:	68fb      	ldr	r3, [r7, #12]
 8000fec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000ff0:	d005      	beq.n	8000ffe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ff2:	4b0a      	ldr	r3, [pc, #40]	; (800101c <HAL_Delay+0x44>)
 8000ff4:	781b      	ldrb	r3, [r3, #0]
 8000ff6:	461a      	mov	r2, r3
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	4413      	add	r3, r2
 8000ffc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000ffe:	bf00      	nop
 8001000:	f7ff ffde 	bl	8000fc0 <HAL_GetTick>
 8001004:	4602      	mov	r2, r0
 8001006:	68bb      	ldr	r3, [r7, #8]
 8001008:	1ad3      	subs	r3, r2, r3
 800100a:	68fa      	ldr	r2, [r7, #12]
 800100c:	429a      	cmp	r2, r3
 800100e:	d8f7      	bhi.n	8001000 <HAL_Delay+0x28>
  {
  }
}
 8001010:	bf00      	nop
 8001012:	bf00      	nop
 8001014:	3710      	adds	r7, #16
 8001016:	46bd      	mov	sp, r7
 8001018:	bd80      	pop	{r7, pc}
 800101a:	bf00      	nop
 800101c:	2000004c 	.word	0x2000004c

08001020 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001020:	b480      	push	{r7}
 8001022:	b085      	sub	sp, #20
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	f003 0307 	and.w	r3, r3, #7
 800102e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001030:	4b0c      	ldr	r3, [pc, #48]	; (8001064 <__NVIC_SetPriorityGrouping+0x44>)
 8001032:	68db      	ldr	r3, [r3, #12]
 8001034:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001036:	68ba      	ldr	r2, [r7, #8]
 8001038:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800103c:	4013      	ands	r3, r2
 800103e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001044:	68bb      	ldr	r3, [r7, #8]
 8001046:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001048:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800104c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001050:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001052:	4a04      	ldr	r2, [pc, #16]	; (8001064 <__NVIC_SetPriorityGrouping+0x44>)
 8001054:	68bb      	ldr	r3, [r7, #8]
 8001056:	60d3      	str	r3, [r2, #12]
}
 8001058:	bf00      	nop
 800105a:	3714      	adds	r7, #20
 800105c:	46bd      	mov	sp, r7
 800105e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001062:	4770      	bx	lr
 8001064:	e000ed00 	.word	0xe000ed00

08001068 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001068:	b480      	push	{r7}
 800106a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800106c:	4b04      	ldr	r3, [pc, #16]	; (8001080 <__NVIC_GetPriorityGrouping+0x18>)
 800106e:	68db      	ldr	r3, [r3, #12]
 8001070:	0a1b      	lsrs	r3, r3, #8
 8001072:	f003 0307 	and.w	r3, r3, #7
}
 8001076:	4618      	mov	r0, r3
 8001078:	46bd      	mov	sp, r7
 800107a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107e:	4770      	bx	lr
 8001080:	e000ed00 	.word	0xe000ed00

08001084 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001084:	b480      	push	{r7}
 8001086:	b083      	sub	sp, #12
 8001088:	af00      	add	r7, sp, #0
 800108a:	4603      	mov	r3, r0
 800108c:	6039      	str	r1, [r7, #0]
 800108e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001090:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001094:	2b00      	cmp	r3, #0
 8001096:	db0a      	blt.n	80010ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001098:	683b      	ldr	r3, [r7, #0]
 800109a:	b2da      	uxtb	r2, r3
 800109c:	490c      	ldr	r1, [pc, #48]	; (80010d0 <__NVIC_SetPriority+0x4c>)
 800109e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010a2:	0112      	lsls	r2, r2, #4
 80010a4:	b2d2      	uxtb	r2, r2
 80010a6:	440b      	add	r3, r1
 80010a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010ac:	e00a      	b.n	80010c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010ae:	683b      	ldr	r3, [r7, #0]
 80010b0:	b2da      	uxtb	r2, r3
 80010b2:	4908      	ldr	r1, [pc, #32]	; (80010d4 <__NVIC_SetPriority+0x50>)
 80010b4:	79fb      	ldrb	r3, [r7, #7]
 80010b6:	f003 030f 	and.w	r3, r3, #15
 80010ba:	3b04      	subs	r3, #4
 80010bc:	0112      	lsls	r2, r2, #4
 80010be:	b2d2      	uxtb	r2, r2
 80010c0:	440b      	add	r3, r1
 80010c2:	761a      	strb	r2, [r3, #24]
}
 80010c4:	bf00      	nop
 80010c6:	370c      	adds	r7, #12
 80010c8:	46bd      	mov	sp, r7
 80010ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ce:	4770      	bx	lr
 80010d0:	e000e100 	.word	0xe000e100
 80010d4:	e000ed00 	.word	0xe000ed00

080010d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010d8:	b480      	push	{r7}
 80010da:	b089      	sub	sp, #36	; 0x24
 80010dc:	af00      	add	r7, sp, #0
 80010de:	60f8      	str	r0, [r7, #12]
 80010e0:	60b9      	str	r1, [r7, #8]
 80010e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	f003 0307 	and.w	r3, r3, #7
 80010ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010ec:	69fb      	ldr	r3, [r7, #28]
 80010ee:	f1c3 0307 	rsb	r3, r3, #7
 80010f2:	2b04      	cmp	r3, #4
 80010f4:	bf28      	it	cs
 80010f6:	2304      	movcs	r3, #4
 80010f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010fa:	69fb      	ldr	r3, [r7, #28]
 80010fc:	3304      	adds	r3, #4
 80010fe:	2b06      	cmp	r3, #6
 8001100:	d902      	bls.n	8001108 <NVIC_EncodePriority+0x30>
 8001102:	69fb      	ldr	r3, [r7, #28]
 8001104:	3b03      	subs	r3, #3
 8001106:	e000      	b.n	800110a <NVIC_EncodePriority+0x32>
 8001108:	2300      	movs	r3, #0
 800110a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800110c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001110:	69bb      	ldr	r3, [r7, #24]
 8001112:	fa02 f303 	lsl.w	r3, r2, r3
 8001116:	43da      	mvns	r2, r3
 8001118:	68bb      	ldr	r3, [r7, #8]
 800111a:	401a      	ands	r2, r3
 800111c:	697b      	ldr	r3, [r7, #20]
 800111e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001120:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001124:	697b      	ldr	r3, [r7, #20]
 8001126:	fa01 f303 	lsl.w	r3, r1, r3
 800112a:	43d9      	mvns	r1, r3
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001130:	4313      	orrs	r3, r2
         );
}
 8001132:	4618      	mov	r0, r3
 8001134:	3724      	adds	r7, #36	; 0x24
 8001136:	46bd      	mov	sp, r7
 8001138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113c:	4770      	bx	lr
	...

08001140 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b082      	sub	sp, #8
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	3b01      	subs	r3, #1
 800114c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001150:	d301      	bcc.n	8001156 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001152:	2301      	movs	r3, #1
 8001154:	e00f      	b.n	8001176 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001156:	4a0a      	ldr	r2, [pc, #40]	; (8001180 <SysTick_Config+0x40>)
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	3b01      	subs	r3, #1
 800115c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800115e:	210f      	movs	r1, #15
 8001160:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001164:	f7ff ff8e 	bl	8001084 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001168:	4b05      	ldr	r3, [pc, #20]	; (8001180 <SysTick_Config+0x40>)
 800116a:	2200      	movs	r2, #0
 800116c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800116e:	4b04      	ldr	r3, [pc, #16]	; (8001180 <SysTick_Config+0x40>)
 8001170:	2207      	movs	r2, #7
 8001172:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001174:	2300      	movs	r3, #0
}
 8001176:	4618      	mov	r0, r3
 8001178:	3708      	adds	r7, #8
 800117a:	46bd      	mov	sp, r7
 800117c:	bd80      	pop	{r7, pc}
 800117e:	bf00      	nop
 8001180:	e000e010 	.word	0xe000e010

08001184 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b082      	sub	sp, #8
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800118c:	6878      	ldr	r0, [r7, #4]
 800118e:	f7ff ff47 	bl	8001020 <__NVIC_SetPriorityGrouping>
}
 8001192:	bf00      	nop
 8001194:	3708      	adds	r7, #8
 8001196:	46bd      	mov	sp, r7
 8001198:	bd80      	pop	{r7, pc}

0800119a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800119a:	b580      	push	{r7, lr}
 800119c:	b086      	sub	sp, #24
 800119e:	af00      	add	r7, sp, #0
 80011a0:	4603      	mov	r3, r0
 80011a2:	60b9      	str	r1, [r7, #8]
 80011a4:	607a      	str	r2, [r7, #4]
 80011a6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80011a8:	2300      	movs	r3, #0
 80011aa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80011ac:	f7ff ff5c 	bl	8001068 <__NVIC_GetPriorityGrouping>
 80011b0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011b2:	687a      	ldr	r2, [r7, #4]
 80011b4:	68b9      	ldr	r1, [r7, #8]
 80011b6:	6978      	ldr	r0, [r7, #20]
 80011b8:	f7ff ff8e 	bl	80010d8 <NVIC_EncodePriority>
 80011bc:	4602      	mov	r2, r0
 80011be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011c2:	4611      	mov	r1, r2
 80011c4:	4618      	mov	r0, r3
 80011c6:	f7ff ff5d 	bl	8001084 <__NVIC_SetPriority>
}
 80011ca:	bf00      	nop
 80011cc:	3718      	adds	r7, #24
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bd80      	pop	{r7, pc}

080011d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011d2:	b580      	push	{r7, lr}
 80011d4:	b082      	sub	sp, #8
 80011d6:	af00      	add	r7, sp, #0
 80011d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011da:	6878      	ldr	r0, [r7, #4]
 80011dc:	f7ff ffb0 	bl	8001140 <SysTick_Config>
 80011e0:	4603      	mov	r3, r0
}
 80011e2:	4618      	mov	r0, r3
 80011e4:	3708      	adds	r7, #8
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bd80      	pop	{r7, pc}
	...

080011ec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80011ec:	b480      	push	{r7}
 80011ee:	b089      	sub	sp, #36	; 0x24
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
 80011f4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80011f6:	2300      	movs	r3, #0
 80011f8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80011fa:	2300      	movs	r3, #0
 80011fc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80011fe:	2300      	movs	r3, #0
 8001200:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001202:	2300      	movs	r3, #0
 8001204:	61fb      	str	r3, [r7, #28]
 8001206:	e177      	b.n	80014f8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001208:	2201      	movs	r2, #1
 800120a:	69fb      	ldr	r3, [r7, #28]
 800120c:	fa02 f303 	lsl.w	r3, r2, r3
 8001210:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001212:	683b      	ldr	r3, [r7, #0]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	697a      	ldr	r2, [r7, #20]
 8001218:	4013      	ands	r3, r2
 800121a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800121c:	693a      	ldr	r2, [r7, #16]
 800121e:	697b      	ldr	r3, [r7, #20]
 8001220:	429a      	cmp	r2, r3
 8001222:	f040 8166 	bne.w	80014f2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001226:	683b      	ldr	r3, [r7, #0]
 8001228:	685b      	ldr	r3, [r3, #4]
 800122a:	f003 0303 	and.w	r3, r3, #3
 800122e:	2b01      	cmp	r3, #1
 8001230:	d005      	beq.n	800123e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001232:	683b      	ldr	r3, [r7, #0]
 8001234:	685b      	ldr	r3, [r3, #4]
 8001236:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800123a:	2b02      	cmp	r3, #2
 800123c:	d130      	bne.n	80012a0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	689b      	ldr	r3, [r3, #8]
 8001242:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001244:	69fb      	ldr	r3, [r7, #28]
 8001246:	005b      	lsls	r3, r3, #1
 8001248:	2203      	movs	r2, #3
 800124a:	fa02 f303 	lsl.w	r3, r2, r3
 800124e:	43db      	mvns	r3, r3
 8001250:	69ba      	ldr	r2, [r7, #24]
 8001252:	4013      	ands	r3, r2
 8001254:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001256:	683b      	ldr	r3, [r7, #0]
 8001258:	68da      	ldr	r2, [r3, #12]
 800125a:	69fb      	ldr	r3, [r7, #28]
 800125c:	005b      	lsls	r3, r3, #1
 800125e:	fa02 f303 	lsl.w	r3, r2, r3
 8001262:	69ba      	ldr	r2, [r7, #24]
 8001264:	4313      	orrs	r3, r2
 8001266:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	69ba      	ldr	r2, [r7, #24]
 800126c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	685b      	ldr	r3, [r3, #4]
 8001272:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001274:	2201      	movs	r2, #1
 8001276:	69fb      	ldr	r3, [r7, #28]
 8001278:	fa02 f303 	lsl.w	r3, r2, r3
 800127c:	43db      	mvns	r3, r3
 800127e:	69ba      	ldr	r2, [r7, #24]
 8001280:	4013      	ands	r3, r2
 8001282:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001284:	683b      	ldr	r3, [r7, #0]
 8001286:	685b      	ldr	r3, [r3, #4]
 8001288:	091b      	lsrs	r3, r3, #4
 800128a:	f003 0201 	and.w	r2, r3, #1
 800128e:	69fb      	ldr	r3, [r7, #28]
 8001290:	fa02 f303 	lsl.w	r3, r2, r3
 8001294:	69ba      	ldr	r2, [r7, #24]
 8001296:	4313      	orrs	r3, r2
 8001298:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	69ba      	ldr	r2, [r7, #24]
 800129e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80012a0:	683b      	ldr	r3, [r7, #0]
 80012a2:	685b      	ldr	r3, [r3, #4]
 80012a4:	f003 0303 	and.w	r3, r3, #3
 80012a8:	2b03      	cmp	r3, #3
 80012aa:	d017      	beq.n	80012dc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	68db      	ldr	r3, [r3, #12]
 80012b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80012b2:	69fb      	ldr	r3, [r7, #28]
 80012b4:	005b      	lsls	r3, r3, #1
 80012b6:	2203      	movs	r2, #3
 80012b8:	fa02 f303 	lsl.w	r3, r2, r3
 80012bc:	43db      	mvns	r3, r3
 80012be:	69ba      	ldr	r2, [r7, #24]
 80012c0:	4013      	ands	r3, r2
 80012c2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80012c4:	683b      	ldr	r3, [r7, #0]
 80012c6:	689a      	ldr	r2, [r3, #8]
 80012c8:	69fb      	ldr	r3, [r7, #28]
 80012ca:	005b      	lsls	r3, r3, #1
 80012cc:	fa02 f303 	lsl.w	r3, r2, r3
 80012d0:	69ba      	ldr	r2, [r7, #24]
 80012d2:	4313      	orrs	r3, r2
 80012d4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	69ba      	ldr	r2, [r7, #24]
 80012da:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012dc:	683b      	ldr	r3, [r7, #0]
 80012de:	685b      	ldr	r3, [r3, #4]
 80012e0:	f003 0303 	and.w	r3, r3, #3
 80012e4:	2b02      	cmp	r3, #2
 80012e6:	d123      	bne.n	8001330 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80012e8:	69fb      	ldr	r3, [r7, #28]
 80012ea:	08da      	lsrs	r2, r3, #3
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	3208      	adds	r2, #8
 80012f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80012f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80012f6:	69fb      	ldr	r3, [r7, #28]
 80012f8:	f003 0307 	and.w	r3, r3, #7
 80012fc:	009b      	lsls	r3, r3, #2
 80012fe:	220f      	movs	r2, #15
 8001300:	fa02 f303 	lsl.w	r3, r2, r3
 8001304:	43db      	mvns	r3, r3
 8001306:	69ba      	ldr	r2, [r7, #24]
 8001308:	4013      	ands	r3, r2
 800130a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800130c:	683b      	ldr	r3, [r7, #0]
 800130e:	691a      	ldr	r2, [r3, #16]
 8001310:	69fb      	ldr	r3, [r7, #28]
 8001312:	f003 0307 	and.w	r3, r3, #7
 8001316:	009b      	lsls	r3, r3, #2
 8001318:	fa02 f303 	lsl.w	r3, r2, r3
 800131c:	69ba      	ldr	r2, [r7, #24]
 800131e:	4313      	orrs	r3, r2
 8001320:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001322:	69fb      	ldr	r3, [r7, #28]
 8001324:	08da      	lsrs	r2, r3, #3
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	3208      	adds	r2, #8
 800132a:	69b9      	ldr	r1, [r7, #24]
 800132c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001336:	69fb      	ldr	r3, [r7, #28]
 8001338:	005b      	lsls	r3, r3, #1
 800133a:	2203      	movs	r2, #3
 800133c:	fa02 f303 	lsl.w	r3, r2, r3
 8001340:	43db      	mvns	r3, r3
 8001342:	69ba      	ldr	r2, [r7, #24]
 8001344:	4013      	ands	r3, r2
 8001346:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001348:	683b      	ldr	r3, [r7, #0]
 800134a:	685b      	ldr	r3, [r3, #4]
 800134c:	f003 0203 	and.w	r2, r3, #3
 8001350:	69fb      	ldr	r3, [r7, #28]
 8001352:	005b      	lsls	r3, r3, #1
 8001354:	fa02 f303 	lsl.w	r3, r2, r3
 8001358:	69ba      	ldr	r2, [r7, #24]
 800135a:	4313      	orrs	r3, r2
 800135c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	69ba      	ldr	r2, [r7, #24]
 8001362:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001364:	683b      	ldr	r3, [r7, #0]
 8001366:	685b      	ldr	r3, [r3, #4]
 8001368:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800136c:	2b00      	cmp	r3, #0
 800136e:	f000 80c0 	beq.w	80014f2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001372:	2300      	movs	r3, #0
 8001374:	60fb      	str	r3, [r7, #12]
 8001376:	4b66      	ldr	r3, [pc, #408]	; (8001510 <HAL_GPIO_Init+0x324>)
 8001378:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800137a:	4a65      	ldr	r2, [pc, #404]	; (8001510 <HAL_GPIO_Init+0x324>)
 800137c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001380:	6453      	str	r3, [r2, #68]	; 0x44
 8001382:	4b63      	ldr	r3, [pc, #396]	; (8001510 <HAL_GPIO_Init+0x324>)
 8001384:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001386:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800138a:	60fb      	str	r3, [r7, #12]
 800138c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800138e:	4a61      	ldr	r2, [pc, #388]	; (8001514 <HAL_GPIO_Init+0x328>)
 8001390:	69fb      	ldr	r3, [r7, #28]
 8001392:	089b      	lsrs	r3, r3, #2
 8001394:	3302      	adds	r3, #2
 8001396:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800139a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800139c:	69fb      	ldr	r3, [r7, #28]
 800139e:	f003 0303 	and.w	r3, r3, #3
 80013a2:	009b      	lsls	r3, r3, #2
 80013a4:	220f      	movs	r2, #15
 80013a6:	fa02 f303 	lsl.w	r3, r2, r3
 80013aa:	43db      	mvns	r3, r3
 80013ac:	69ba      	ldr	r2, [r7, #24]
 80013ae:	4013      	ands	r3, r2
 80013b0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	4a58      	ldr	r2, [pc, #352]	; (8001518 <HAL_GPIO_Init+0x32c>)
 80013b6:	4293      	cmp	r3, r2
 80013b8:	d037      	beq.n	800142a <HAL_GPIO_Init+0x23e>
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	4a57      	ldr	r2, [pc, #348]	; (800151c <HAL_GPIO_Init+0x330>)
 80013be:	4293      	cmp	r3, r2
 80013c0:	d031      	beq.n	8001426 <HAL_GPIO_Init+0x23a>
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	4a56      	ldr	r2, [pc, #344]	; (8001520 <HAL_GPIO_Init+0x334>)
 80013c6:	4293      	cmp	r3, r2
 80013c8:	d02b      	beq.n	8001422 <HAL_GPIO_Init+0x236>
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	4a55      	ldr	r2, [pc, #340]	; (8001524 <HAL_GPIO_Init+0x338>)
 80013ce:	4293      	cmp	r3, r2
 80013d0:	d025      	beq.n	800141e <HAL_GPIO_Init+0x232>
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	4a54      	ldr	r2, [pc, #336]	; (8001528 <HAL_GPIO_Init+0x33c>)
 80013d6:	4293      	cmp	r3, r2
 80013d8:	d01f      	beq.n	800141a <HAL_GPIO_Init+0x22e>
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	4a53      	ldr	r2, [pc, #332]	; (800152c <HAL_GPIO_Init+0x340>)
 80013de:	4293      	cmp	r3, r2
 80013e0:	d019      	beq.n	8001416 <HAL_GPIO_Init+0x22a>
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	4a52      	ldr	r2, [pc, #328]	; (8001530 <HAL_GPIO_Init+0x344>)
 80013e6:	4293      	cmp	r3, r2
 80013e8:	d013      	beq.n	8001412 <HAL_GPIO_Init+0x226>
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	4a51      	ldr	r2, [pc, #324]	; (8001534 <HAL_GPIO_Init+0x348>)
 80013ee:	4293      	cmp	r3, r2
 80013f0:	d00d      	beq.n	800140e <HAL_GPIO_Init+0x222>
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	4a50      	ldr	r2, [pc, #320]	; (8001538 <HAL_GPIO_Init+0x34c>)
 80013f6:	4293      	cmp	r3, r2
 80013f8:	d007      	beq.n	800140a <HAL_GPIO_Init+0x21e>
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	4a4f      	ldr	r2, [pc, #316]	; (800153c <HAL_GPIO_Init+0x350>)
 80013fe:	4293      	cmp	r3, r2
 8001400:	d101      	bne.n	8001406 <HAL_GPIO_Init+0x21a>
 8001402:	2309      	movs	r3, #9
 8001404:	e012      	b.n	800142c <HAL_GPIO_Init+0x240>
 8001406:	230a      	movs	r3, #10
 8001408:	e010      	b.n	800142c <HAL_GPIO_Init+0x240>
 800140a:	2308      	movs	r3, #8
 800140c:	e00e      	b.n	800142c <HAL_GPIO_Init+0x240>
 800140e:	2307      	movs	r3, #7
 8001410:	e00c      	b.n	800142c <HAL_GPIO_Init+0x240>
 8001412:	2306      	movs	r3, #6
 8001414:	e00a      	b.n	800142c <HAL_GPIO_Init+0x240>
 8001416:	2305      	movs	r3, #5
 8001418:	e008      	b.n	800142c <HAL_GPIO_Init+0x240>
 800141a:	2304      	movs	r3, #4
 800141c:	e006      	b.n	800142c <HAL_GPIO_Init+0x240>
 800141e:	2303      	movs	r3, #3
 8001420:	e004      	b.n	800142c <HAL_GPIO_Init+0x240>
 8001422:	2302      	movs	r3, #2
 8001424:	e002      	b.n	800142c <HAL_GPIO_Init+0x240>
 8001426:	2301      	movs	r3, #1
 8001428:	e000      	b.n	800142c <HAL_GPIO_Init+0x240>
 800142a:	2300      	movs	r3, #0
 800142c:	69fa      	ldr	r2, [r7, #28]
 800142e:	f002 0203 	and.w	r2, r2, #3
 8001432:	0092      	lsls	r2, r2, #2
 8001434:	4093      	lsls	r3, r2
 8001436:	69ba      	ldr	r2, [r7, #24]
 8001438:	4313      	orrs	r3, r2
 800143a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800143c:	4935      	ldr	r1, [pc, #212]	; (8001514 <HAL_GPIO_Init+0x328>)
 800143e:	69fb      	ldr	r3, [r7, #28]
 8001440:	089b      	lsrs	r3, r3, #2
 8001442:	3302      	adds	r3, #2
 8001444:	69ba      	ldr	r2, [r7, #24]
 8001446:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800144a:	4b3d      	ldr	r3, [pc, #244]	; (8001540 <HAL_GPIO_Init+0x354>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001450:	693b      	ldr	r3, [r7, #16]
 8001452:	43db      	mvns	r3, r3
 8001454:	69ba      	ldr	r2, [r7, #24]
 8001456:	4013      	ands	r3, r2
 8001458:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800145a:	683b      	ldr	r3, [r7, #0]
 800145c:	685b      	ldr	r3, [r3, #4]
 800145e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001462:	2b00      	cmp	r3, #0
 8001464:	d003      	beq.n	800146e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001466:	69ba      	ldr	r2, [r7, #24]
 8001468:	693b      	ldr	r3, [r7, #16]
 800146a:	4313      	orrs	r3, r2
 800146c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800146e:	4a34      	ldr	r2, [pc, #208]	; (8001540 <HAL_GPIO_Init+0x354>)
 8001470:	69bb      	ldr	r3, [r7, #24]
 8001472:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001474:	4b32      	ldr	r3, [pc, #200]	; (8001540 <HAL_GPIO_Init+0x354>)
 8001476:	685b      	ldr	r3, [r3, #4]
 8001478:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800147a:	693b      	ldr	r3, [r7, #16]
 800147c:	43db      	mvns	r3, r3
 800147e:	69ba      	ldr	r2, [r7, #24]
 8001480:	4013      	ands	r3, r2
 8001482:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001484:	683b      	ldr	r3, [r7, #0]
 8001486:	685b      	ldr	r3, [r3, #4]
 8001488:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800148c:	2b00      	cmp	r3, #0
 800148e:	d003      	beq.n	8001498 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001490:	69ba      	ldr	r2, [r7, #24]
 8001492:	693b      	ldr	r3, [r7, #16]
 8001494:	4313      	orrs	r3, r2
 8001496:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001498:	4a29      	ldr	r2, [pc, #164]	; (8001540 <HAL_GPIO_Init+0x354>)
 800149a:	69bb      	ldr	r3, [r7, #24]
 800149c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800149e:	4b28      	ldr	r3, [pc, #160]	; (8001540 <HAL_GPIO_Init+0x354>)
 80014a0:	689b      	ldr	r3, [r3, #8]
 80014a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014a4:	693b      	ldr	r3, [r7, #16]
 80014a6:	43db      	mvns	r3, r3
 80014a8:	69ba      	ldr	r2, [r7, #24]
 80014aa:	4013      	ands	r3, r2
 80014ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80014ae:	683b      	ldr	r3, [r7, #0]
 80014b0:	685b      	ldr	r3, [r3, #4]
 80014b2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d003      	beq.n	80014c2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80014ba:	69ba      	ldr	r2, [r7, #24]
 80014bc:	693b      	ldr	r3, [r7, #16]
 80014be:	4313      	orrs	r3, r2
 80014c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80014c2:	4a1f      	ldr	r2, [pc, #124]	; (8001540 <HAL_GPIO_Init+0x354>)
 80014c4:	69bb      	ldr	r3, [r7, #24]
 80014c6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80014c8:	4b1d      	ldr	r3, [pc, #116]	; (8001540 <HAL_GPIO_Init+0x354>)
 80014ca:	68db      	ldr	r3, [r3, #12]
 80014cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014ce:	693b      	ldr	r3, [r7, #16]
 80014d0:	43db      	mvns	r3, r3
 80014d2:	69ba      	ldr	r2, [r7, #24]
 80014d4:	4013      	ands	r3, r2
 80014d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80014d8:	683b      	ldr	r3, [r7, #0]
 80014da:	685b      	ldr	r3, [r3, #4]
 80014dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d003      	beq.n	80014ec <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80014e4:	69ba      	ldr	r2, [r7, #24]
 80014e6:	693b      	ldr	r3, [r7, #16]
 80014e8:	4313      	orrs	r3, r2
 80014ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80014ec:	4a14      	ldr	r2, [pc, #80]	; (8001540 <HAL_GPIO_Init+0x354>)
 80014ee:	69bb      	ldr	r3, [r7, #24]
 80014f0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80014f2:	69fb      	ldr	r3, [r7, #28]
 80014f4:	3301      	adds	r3, #1
 80014f6:	61fb      	str	r3, [r7, #28]
 80014f8:	69fb      	ldr	r3, [r7, #28]
 80014fa:	2b0f      	cmp	r3, #15
 80014fc:	f67f ae84 	bls.w	8001208 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001500:	bf00      	nop
 8001502:	bf00      	nop
 8001504:	3724      	adds	r7, #36	; 0x24
 8001506:	46bd      	mov	sp, r7
 8001508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150c:	4770      	bx	lr
 800150e:	bf00      	nop
 8001510:	40023800 	.word	0x40023800
 8001514:	40013800 	.word	0x40013800
 8001518:	40020000 	.word	0x40020000
 800151c:	40020400 	.word	0x40020400
 8001520:	40020800 	.word	0x40020800
 8001524:	40020c00 	.word	0x40020c00
 8001528:	40021000 	.word	0x40021000
 800152c:	40021400 	.word	0x40021400
 8001530:	40021800 	.word	0x40021800
 8001534:	40021c00 	.word	0x40021c00
 8001538:	40022000 	.word	0x40022000
 800153c:	40022400 	.word	0x40022400
 8001540:	40013c00 	.word	0x40013c00

08001544 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001544:	b480      	push	{r7}
 8001546:	b083      	sub	sp, #12
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
 800154c:	460b      	mov	r3, r1
 800154e:	807b      	strh	r3, [r7, #2]
 8001550:	4613      	mov	r3, r2
 8001552:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001554:	787b      	ldrb	r3, [r7, #1]
 8001556:	2b00      	cmp	r3, #0
 8001558:	d003      	beq.n	8001562 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800155a:	887a      	ldrh	r2, [r7, #2]
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001560:	e003      	b.n	800156a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001562:	887b      	ldrh	r3, [r7, #2]
 8001564:	041a      	lsls	r2, r3, #16
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	619a      	str	r2, [r3, #24]
}
 800156a:	bf00      	nop
 800156c:	370c      	adds	r7, #12
 800156e:	46bd      	mov	sp, r7
 8001570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001574:	4770      	bx	lr
	...

08001578 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b084      	sub	sp, #16
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	2b00      	cmp	r3, #0
 8001584:	d101      	bne.n	800158a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001586:	2301      	movs	r3, #1
 8001588:	e12b      	b.n	80017e2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001590:	b2db      	uxtb	r3, r3
 8001592:	2b00      	cmp	r3, #0
 8001594:	d106      	bne.n	80015a4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	2200      	movs	r2, #0
 800159a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800159e:	6878      	ldr	r0, [r7, #4]
 80015a0:	f7ff fc32 	bl	8000e08 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	2224      	movs	r2, #36	; 0x24
 80015a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	681a      	ldr	r2, [r3, #0]
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	f022 0201 	bic.w	r2, r2, #1
 80015ba:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	681a      	ldr	r2, [r3, #0]
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80015ca:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	681a      	ldr	r2, [r3, #0]
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80015da:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80015dc:	f001 fcee 	bl	8002fbc <HAL_RCC_GetPCLK1Freq>
 80015e0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	685b      	ldr	r3, [r3, #4]
 80015e6:	4a81      	ldr	r2, [pc, #516]	; (80017ec <HAL_I2C_Init+0x274>)
 80015e8:	4293      	cmp	r3, r2
 80015ea:	d807      	bhi.n	80015fc <HAL_I2C_Init+0x84>
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	4a80      	ldr	r2, [pc, #512]	; (80017f0 <HAL_I2C_Init+0x278>)
 80015f0:	4293      	cmp	r3, r2
 80015f2:	bf94      	ite	ls
 80015f4:	2301      	movls	r3, #1
 80015f6:	2300      	movhi	r3, #0
 80015f8:	b2db      	uxtb	r3, r3
 80015fa:	e006      	b.n	800160a <HAL_I2C_Init+0x92>
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	4a7d      	ldr	r2, [pc, #500]	; (80017f4 <HAL_I2C_Init+0x27c>)
 8001600:	4293      	cmp	r3, r2
 8001602:	bf94      	ite	ls
 8001604:	2301      	movls	r3, #1
 8001606:	2300      	movhi	r3, #0
 8001608:	b2db      	uxtb	r3, r3
 800160a:	2b00      	cmp	r3, #0
 800160c:	d001      	beq.n	8001612 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800160e:	2301      	movs	r3, #1
 8001610:	e0e7      	b.n	80017e2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	4a78      	ldr	r2, [pc, #480]	; (80017f8 <HAL_I2C_Init+0x280>)
 8001616:	fba2 2303 	umull	r2, r3, r2, r3
 800161a:	0c9b      	lsrs	r3, r3, #18
 800161c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	685b      	ldr	r3, [r3, #4]
 8001624:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	68ba      	ldr	r2, [r7, #8]
 800162e:	430a      	orrs	r2, r1
 8001630:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	6a1b      	ldr	r3, [r3, #32]
 8001638:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	685b      	ldr	r3, [r3, #4]
 8001640:	4a6a      	ldr	r2, [pc, #424]	; (80017ec <HAL_I2C_Init+0x274>)
 8001642:	4293      	cmp	r3, r2
 8001644:	d802      	bhi.n	800164c <HAL_I2C_Init+0xd4>
 8001646:	68bb      	ldr	r3, [r7, #8]
 8001648:	3301      	adds	r3, #1
 800164a:	e009      	b.n	8001660 <HAL_I2C_Init+0xe8>
 800164c:	68bb      	ldr	r3, [r7, #8]
 800164e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001652:	fb02 f303 	mul.w	r3, r2, r3
 8001656:	4a69      	ldr	r2, [pc, #420]	; (80017fc <HAL_I2C_Init+0x284>)
 8001658:	fba2 2303 	umull	r2, r3, r2, r3
 800165c:	099b      	lsrs	r3, r3, #6
 800165e:	3301      	adds	r3, #1
 8001660:	687a      	ldr	r2, [r7, #4]
 8001662:	6812      	ldr	r2, [r2, #0]
 8001664:	430b      	orrs	r3, r1
 8001666:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	69db      	ldr	r3, [r3, #28]
 800166e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001672:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	685b      	ldr	r3, [r3, #4]
 800167a:	495c      	ldr	r1, [pc, #368]	; (80017ec <HAL_I2C_Init+0x274>)
 800167c:	428b      	cmp	r3, r1
 800167e:	d819      	bhi.n	80016b4 <HAL_I2C_Init+0x13c>
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	1e59      	subs	r1, r3, #1
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	685b      	ldr	r3, [r3, #4]
 8001688:	005b      	lsls	r3, r3, #1
 800168a:	fbb1 f3f3 	udiv	r3, r1, r3
 800168e:	1c59      	adds	r1, r3, #1
 8001690:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001694:	400b      	ands	r3, r1
 8001696:	2b00      	cmp	r3, #0
 8001698:	d00a      	beq.n	80016b0 <HAL_I2C_Init+0x138>
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	1e59      	subs	r1, r3, #1
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	685b      	ldr	r3, [r3, #4]
 80016a2:	005b      	lsls	r3, r3, #1
 80016a4:	fbb1 f3f3 	udiv	r3, r1, r3
 80016a8:	3301      	adds	r3, #1
 80016aa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80016ae:	e051      	b.n	8001754 <HAL_I2C_Init+0x1dc>
 80016b0:	2304      	movs	r3, #4
 80016b2:	e04f      	b.n	8001754 <HAL_I2C_Init+0x1dc>
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	689b      	ldr	r3, [r3, #8]
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d111      	bne.n	80016e0 <HAL_I2C_Init+0x168>
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	1e58      	subs	r0, r3, #1
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	6859      	ldr	r1, [r3, #4]
 80016c4:	460b      	mov	r3, r1
 80016c6:	005b      	lsls	r3, r3, #1
 80016c8:	440b      	add	r3, r1
 80016ca:	fbb0 f3f3 	udiv	r3, r0, r3
 80016ce:	3301      	adds	r3, #1
 80016d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	bf0c      	ite	eq
 80016d8:	2301      	moveq	r3, #1
 80016da:	2300      	movne	r3, #0
 80016dc:	b2db      	uxtb	r3, r3
 80016de:	e012      	b.n	8001706 <HAL_I2C_Init+0x18e>
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	1e58      	subs	r0, r3, #1
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	6859      	ldr	r1, [r3, #4]
 80016e8:	460b      	mov	r3, r1
 80016ea:	009b      	lsls	r3, r3, #2
 80016ec:	440b      	add	r3, r1
 80016ee:	0099      	lsls	r1, r3, #2
 80016f0:	440b      	add	r3, r1
 80016f2:	fbb0 f3f3 	udiv	r3, r0, r3
 80016f6:	3301      	adds	r3, #1
 80016f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	bf0c      	ite	eq
 8001700:	2301      	moveq	r3, #1
 8001702:	2300      	movne	r3, #0
 8001704:	b2db      	uxtb	r3, r3
 8001706:	2b00      	cmp	r3, #0
 8001708:	d001      	beq.n	800170e <HAL_I2C_Init+0x196>
 800170a:	2301      	movs	r3, #1
 800170c:	e022      	b.n	8001754 <HAL_I2C_Init+0x1dc>
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	689b      	ldr	r3, [r3, #8]
 8001712:	2b00      	cmp	r3, #0
 8001714:	d10e      	bne.n	8001734 <HAL_I2C_Init+0x1bc>
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	1e58      	subs	r0, r3, #1
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	6859      	ldr	r1, [r3, #4]
 800171e:	460b      	mov	r3, r1
 8001720:	005b      	lsls	r3, r3, #1
 8001722:	440b      	add	r3, r1
 8001724:	fbb0 f3f3 	udiv	r3, r0, r3
 8001728:	3301      	adds	r3, #1
 800172a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800172e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001732:	e00f      	b.n	8001754 <HAL_I2C_Init+0x1dc>
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	1e58      	subs	r0, r3, #1
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	6859      	ldr	r1, [r3, #4]
 800173c:	460b      	mov	r3, r1
 800173e:	009b      	lsls	r3, r3, #2
 8001740:	440b      	add	r3, r1
 8001742:	0099      	lsls	r1, r3, #2
 8001744:	440b      	add	r3, r1
 8001746:	fbb0 f3f3 	udiv	r3, r0, r3
 800174a:	3301      	adds	r3, #1
 800174c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001750:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001754:	6879      	ldr	r1, [r7, #4]
 8001756:	6809      	ldr	r1, [r1, #0]
 8001758:	4313      	orrs	r3, r2
 800175a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	69da      	ldr	r2, [r3, #28]
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	6a1b      	ldr	r3, [r3, #32]
 800176e:	431a      	orrs	r2, r3
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	430a      	orrs	r2, r1
 8001776:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	689b      	ldr	r3, [r3, #8]
 800177e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001782:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001786:	687a      	ldr	r2, [r7, #4]
 8001788:	6911      	ldr	r1, [r2, #16]
 800178a:	687a      	ldr	r2, [r7, #4]
 800178c:	68d2      	ldr	r2, [r2, #12]
 800178e:	4311      	orrs	r1, r2
 8001790:	687a      	ldr	r2, [r7, #4]
 8001792:	6812      	ldr	r2, [r2, #0]
 8001794:	430b      	orrs	r3, r1
 8001796:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	68db      	ldr	r3, [r3, #12]
 800179e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	695a      	ldr	r2, [r3, #20]
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	699b      	ldr	r3, [r3, #24]
 80017aa:	431a      	orrs	r2, r3
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	430a      	orrs	r2, r1
 80017b2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	681a      	ldr	r2, [r3, #0]
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f042 0201 	orr.w	r2, r2, #1
 80017c2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	2200      	movs	r2, #0
 80017c8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	2220      	movs	r2, #32
 80017ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	2200      	movs	r2, #0
 80017d6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	2200      	movs	r2, #0
 80017dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80017e0:	2300      	movs	r3, #0
}
 80017e2:	4618      	mov	r0, r3
 80017e4:	3710      	adds	r7, #16
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bd80      	pop	{r7, pc}
 80017ea:	bf00      	nop
 80017ec:	000186a0 	.word	0x000186a0
 80017f0:	001e847f 	.word	0x001e847f
 80017f4:	003d08ff 	.word	0x003d08ff
 80017f8:	431bde83 	.word	0x431bde83
 80017fc:	10624dd3 	.word	0x10624dd3

08001800 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b088      	sub	sp, #32
 8001804:	af02      	add	r7, sp, #8
 8001806:	60f8      	str	r0, [r7, #12]
 8001808:	607a      	str	r2, [r7, #4]
 800180a:	461a      	mov	r2, r3
 800180c:	460b      	mov	r3, r1
 800180e:	817b      	strh	r3, [r7, #10]
 8001810:	4613      	mov	r3, r2
 8001812:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001814:	f7ff fbd4 	bl	8000fc0 <HAL_GetTick>
 8001818:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001820:	b2db      	uxtb	r3, r3
 8001822:	2b20      	cmp	r3, #32
 8001824:	f040 80e0 	bne.w	80019e8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001828:	697b      	ldr	r3, [r7, #20]
 800182a:	9300      	str	r3, [sp, #0]
 800182c:	2319      	movs	r3, #25
 800182e:	2201      	movs	r2, #1
 8001830:	4970      	ldr	r1, [pc, #448]	; (80019f4 <HAL_I2C_Master_Transmit+0x1f4>)
 8001832:	68f8      	ldr	r0, [r7, #12]
 8001834:	f000 fc58 	bl	80020e8 <I2C_WaitOnFlagUntilTimeout>
 8001838:	4603      	mov	r3, r0
 800183a:	2b00      	cmp	r3, #0
 800183c:	d001      	beq.n	8001842 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800183e:	2302      	movs	r3, #2
 8001840:	e0d3      	b.n	80019ea <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001848:	2b01      	cmp	r3, #1
 800184a:	d101      	bne.n	8001850 <HAL_I2C_Master_Transmit+0x50>
 800184c:	2302      	movs	r3, #2
 800184e:	e0cc      	b.n	80019ea <HAL_I2C_Master_Transmit+0x1ea>
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	2201      	movs	r2, #1
 8001854:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f003 0301 	and.w	r3, r3, #1
 8001862:	2b01      	cmp	r3, #1
 8001864:	d007      	beq.n	8001876 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	681a      	ldr	r2, [r3, #0]
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	f042 0201 	orr.w	r2, r2, #1
 8001874:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	681a      	ldr	r2, [r3, #0]
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001884:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	2221      	movs	r2, #33	; 0x21
 800188a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	2210      	movs	r2, #16
 8001892:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	2200      	movs	r2, #0
 800189a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	687a      	ldr	r2, [r7, #4]
 80018a0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	893a      	ldrh	r2, [r7, #8]
 80018a6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80018ac:	b29a      	uxth	r2, r3
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	4a50      	ldr	r2, [pc, #320]	; (80019f8 <HAL_I2C_Master_Transmit+0x1f8>)
 80018b6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80018b8:	8979      	ldrh	r1, [r7, #10]
 80018ba:	697b      	ldr	r3, [r7, #20]
 80018bc:	6a3a      	ldr	r2, [r7, #32]
 80018be:	68f8      	ldr	r0, [r7, #12]
 80018c0:	f000 fac2 	bl	8001e48 <I2C_MasterRequestWrite>
 80018c4:	4603      	mov	r3, r0
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d001      	beq.n	80018ce <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80018ca:	2301      	movs	r3, #1
 80018cc:	e08d      	b.n	80019ea <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80018ce:	2300      	movs	r3, #0
 80018d0:	613b      	str	r3, [r7, #16]
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	695b      	ldr	r3, [r3, #20]
 80018d8:	613b      	str	r3, [r7, #16]
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	699b      	ldr	r3, [r3, #24]
 80018e0:	613b      	str	r3, [r7, #16]
 80018e2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80018e4:	e066      	b.n	80019b4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80018e6:	697a      	ldr	r2, [r7, #20]
 80018e8:	6a39      	ldr	r1, [r7, #32]
 80018ea:	68f8      	ldr	r0, [r7, #12]
 80018ec:	f000 fcd2 	bl	8002294 <I2C_WaitOnTXEFlagUntilTimeout>
 80018f0:	4603      	mov	r3, r0
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d00d      	beq.n	8001912 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018fa:	2b04      	cmp	r3, #4
 80018fc:	d107      	bne.n	800190e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	681a      	ldr	r2, [r3, #0]
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800190c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800190e:	2301      	movs	r3, #1
 8001910:	e06b      	b.n	80019ea <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001916:	781a      	ldrb	r2, [r3, #0]
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001922:	1c5a      	adds	r2, r3, #1
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800192c:	b29b      	uxth	r3, r3
 800192e:	3b01      	subs	r3, #1
 8001930:	b29a      	uxth	r2, r3
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800193a:	3b01      	subs	r3, #1
 800193c:	b29a      	uxth	r2, r3
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	695b      	ldr	r3, [r3, #20]
 8001948:	f003 0304 	and.w	r3, r3, #4
 800194c:	2b04      	cmp	r3, #4
 800194e:	d11b      	bne.n	8001988 <HAL_I2C_Master_Transmit+0x188>
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001954:	2b00      	cmp	r3, #0
 8001956:	d017      	beq.n	8001988 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800195c:	781a      	ldrb	r2, [r3, #0]
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001968:	1c5a      	adds	r2, r3, #1
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001972:	b29b      	uxth	r3, r3
 8001974:	3b01      	subs	r3, #1
 8001976:	b29a      	uxth	r2, r3
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001980:	3b01      	subs	r3, #1
 8001982:	b29a      	uxth	r2, r3
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001988:	697a      	ldr	r2, [r7, #20]
 800198a:	6a39      	ldr	r1, [r7, #32]
 800198c:	68f8      	ldr	r0, [r7, #12]
 800198e:	f000 fcc2 	bl	8002316 <I2C_WaitOnBTFFlagUntilTimeout>
 8001992:	4603      	mov	r3, r0
 8001994:	2b00      	cmp	r3, #0
 8001996:	d00d      	beq.n	80019b4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800199c:	2b04      	cmp	r3, #4
 800199e:	d107      	bne.n	80019b0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	681a      	ldr	r2, [r3, #0]
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80019ae:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80019b0:	2301      	movs	r3, #1
 80019b2:	e01a      	b.n	80019ea <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d194      	bne.n	80018e6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	681a      	ldr	r2, [r3, #0]
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80019ca:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	2220      	movs	r2, #32
 80019d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	2200      	movs	r2, #0
 80019d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	2200      	movs	r2, #0
 80019e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80019e4:	2300      	movs	r3, #0
 80019e6:	e000      	b.n	80019ea <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80019e8:	2302      	movs	r3, #2
  }
}
 80019ea:	4618      	mov	r0, r3
 80019ec:	3718      	adds	r7, #24
 80019ee:	46bd      	mov	sp, r7
 80019f0:	bd80      	pop	{r7, pc}
 80019f2:	bf00      	nop
 80019f4:	00100002 	.word	0x00100002
 80019f8:	ffff0000 	.word	0xffff0000

080019fc <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b08c      	sub	sp, #48	; 0x30
 8001a00:	af02      	add	r7, sp, #8
 8001a02:	60f8      	str	r0, [r7, #12]
 8001a04:	607a      	str	r2, [r7, #4]
 8001a06:	461a      	mov	r2, r3
 8001a08:	460b      	mov	r3, r1
 8001a0a:	817b      	strh	r3, [r7, #10]
 8001a0c:	4613      	mov	r3, r2
 8001a0e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001a10:	f7ff fad6 	bl	8000fc0 <HAL_GetTick>
 8001a14:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a1c:	b2db      	uxtb	r3, r3
 8001a1e:	2b20      	cmp	r3, #32
 8001a20:	f040 820b 	bne.w	8001e3a <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001a24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a26:	9300      	str	r3, [sp, #0]
 8001a28:	2319      	movs	r3, #25
 8001a2a:	2201      	movs	r2, #1
 8001a2c:	497c      	ldr	r1, [pc, #496]	; (8001c20 <HAL_I2C_Master_Receive+0x224>)
 8001a2e:	68f8      	ldr	r0, [r7, #12]
 8001a30:	f000 fb5a 	bl	80020e8 <I2C_WaitOnFlagUntilTimeout>
 8001a34:	4603      	mov	r3, r0
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d001      	beq.n	8001a3e <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8001a3a:	2302      	movs	r3, #2
 8001a3c:	e1fe      	b.n	8001e3c <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001a44:	2b01      	cmp	r3, #1
 8001a46:	d101      	bne.n	8001a4c <HAL_I2C_Master_Receive+0x50>
 8001a48:	2302      	movs	r3, #2
 8001a4a:	e1f7      	b.n	8001e3c <HAL_I2C_Master_Receive+0x440>
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	2201      	movs	r2, #1
 8001a50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f003 0301 	and.w	r3, r3, #1
 8001a5e:	2b01      	cmp	r3, #1
 8001a60:	d007      	beq.n	8001a72 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	681a      	ldr	r2, [r3, #0]
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	f042 0201 	orr.w	r2, r2, #1
 8001a70:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	681a      	ldr	r2, [r3, #0]
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001a80:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	2222      	movs	r2, #34	; 0x22
 8001a86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	2210      	movs	r2, #16
 8001a8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	2200      	movs	r2, #0
 8001a96:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	687a      	ldr	r2, [r7, #4]
 8001a9c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	893a      	ldrh	r2, [r7, #8]
 8001aa2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001aa8:	b29a      	uxth	r2, r3
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	4a5c      	ldr	r2, [pc, #368]	; (8001c24 <HAL_I2C_Master_Receive+0x228>)
 8001ab2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001ab4:	8979      	ldrh	r1, [r7, #10]
 8001ab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ab8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001aba:	68f8      	ldr	r0, [r7, #12]
 8001abc:	f000 fa46 	bl	8001f4c <I2C_MasterRequestRead>
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d001      	beq.n	8001aca <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8001ac6:	2301      	movs	r3, #1
 8001ac8:	e1b8      	b.n	8001e3c <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d113      	bne.n	8001afa <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	623b      	str	r3, [r7, #32]
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	695b      	ldr	r3, [r3, #20]
 8001adc:	623b      	str	r3, [r7, #32]
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	699b      	ldr	r3, [r3, #24]
 8001ae4:	623b      	str	r3, [r7, #32]
 8001ae6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	681a      	ldr	r2, [r3, #0]
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001af6:	601a      	str	r2, [r3, #0]
 8001af8:	e18c      	b.n	8001e14 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001afe:	2b01      	cmp	r3, #1
 8001b00:	d11b      	bne.n	8001b3a <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	681a      	ldr	r2, [r3, #0]
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001b10:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001b12:	2300      	movs	r3, #0
 8001b14:	61fb      	str	r3, [r7, #28]
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	695b      	ldr	r3, [r3, #20]
 8001b1c:	61fb      	str	r3, [r7, #28]
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	699b      	ldr	r3, [r3, #24]
 8001b24:	61fb      	str	r3, [r7, #28]
 8001b26:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	681a      	ldr	r2, [r3, #0]
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001b36:	601a      	str	r2, [r3, #0]
 8001b38:	e16c      	b.n	8001e14 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b3e:	2b02      	cmp	r3, #2
 8001b40:	d11b      	bne.n	8001b7a <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	681a      	ldr	r2, [r3, #0]
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001b50:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	681a      	ldr	r2, [r3, #0]
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001b60:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001b62:	2300      	movs	r3, #0
 8001b64:	61bb      	str	r3, [r7, #24]
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	695b      	ldr	r3, [r3, #20]
 8001b6c:	61bb      	str	r3, [r7, #24]
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	699b      	ldr	r3, [r3, #24]
 8001b74:	61bb      	str	r3, [r7, #24]
 8001b76:	69bb      	ldr	r3, [r7, #24]
 8001b78:	e14c      	b.n	8001e14 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	681a      	ldr	r2, [r3, #0]
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001b88:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	617b      	str	r3, [r7, #20]
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	695b      	ldr	r3, [r3, #20]
 8001b94:	617b      	str	r3, [r7, #20]
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	699b      	ldr	r3, [r3, #24]
 8001b9c:	617b      	str	r3, [r7, #20]
 8001b9e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8001ba0:	e138      	b.n	8001e14 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ba6:	2b03      	cmp	r3, #3
 8001ba8:	f200 80f1 	bhi.w	8001d8e <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001bb0:	2b01      	cmp	r3, #1
 8001bb2:	d123      	bne.n	8001bfc <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001bb4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001bb6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001bb8:	68f8      	ldr	r0, [r7, #12]
 8001bba:	f000 fbed 	bl	8002398 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d001      	beq.n	8001bc8 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8001bc4:	2301      	movs	r3, #1
 8001bc6:	e139      	b.n	8001e3c <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	691a      	ldr	r2, [r3, #16]
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bd2:	b2d2      	uxtb	r2, r2
 8001bd4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bda:	1c5a      	adds	r2, r3, #1
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001be4:	3b01      	subs	r3, #1
 8001be6:	b29a      	uxth	r2, r3
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001bf0:	b29b      	uxth	r3, r3
 8001bf2:	3b01      	subs	r3, #1
 8001bf4:	b29a      	uxth	r2, r3
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001bfa:	e10b      	b.n	8001e14 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c00:	2b02      	cmp	r3, #2
 8001c02:	d14e      	bne.n	8001ca2 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001c04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c06:	9300      	str	r3, [sp, #0]
 8001c08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	4906      	ldr	r1, [pc, #24]	; (8001c28 <HAL_I2C_Master_Receive+0x22c>)
 8001c0e:	68f8      	ldr	r0, [r7, #12]
 8001c10:	f000 fa6a 	bl	80020e8 <I2C_WaitOnFlagUntilTimeout>
 8001c14:	4603      	mov	r3, r0
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d008      	beq.n	8001c2c <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8001c1a:	2301      	movs	r3, #1
 8001c1c:	e10e      	b.n	8001e3c <HAL_I2C_Master_Receive+0x440>
 8001c1e:	bf00      	nop
 8001c20:	00100002 	.word	0x00100002
 8001c24:	ffff0000 	.word	0xffff0000
 8001c28:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	681a      	ldr	r2, [r3, #0]
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001c3a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	691a      	ldr	r2, [r3, #16]
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c46:	b2d2      	uxtb	r2, r2
 8001c48:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c4e:	1c5a      	adds	r2, r3, #1
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c58:	3b01      	subs	r3, #1
 8001c5a:	b29a      	uxth	r2, r3
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c64:	b29b      	uxth	r3, r3
 8001c66:	3b01      	subs	r3, #1
 8001c68:	b29a      	uxth	r2, r3
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	691a      	ldr	r2, [r3, #16]
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c78:	b2d2      	uxtb	r2, r2
 8001c7a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c80:	1c5a      	adds	r2, r3, #1
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c8a:	3b01      	subs	r3, #1
 8001c8c:	b29a      	uxth	r2, r3
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c96:	b29b      	uxth	r3, r3
 8001c98:	3b01      	subs	r3, #1
 8001c9a:	b29a      	uxth	r2, r3
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001ca0:	e0b8      	b.n	8001e14 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001ca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ca4:	9300      	str	r3, [sp, #0]
 8001ca6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ca8:	2200      	movs	r2, #0
 8001caa:	4966      	ldr	r1, [pc, #408]	; (8001e44 <HAL_I2C_Master_Receive+0x448>)
 8001cac:	68f8      	ldr	r0, [r7, #12]
 8001cae:	f000 fa1b 	bl	80020e8 <I2C_WaitOnFlagUntilTimeout>
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d001      	beq.n	8001cbc <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8001cb8:	2301      	movs	r3, #1
 8001cba:	e0bf      	b.n	8001e3c <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	681a      	ldr	r2, [r3, #0]
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001cca:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	691a      	ldr	r2, [r3, #16]
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cd6:	b2d2      	uxtb	r2, r2
 8001cd8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cde:	1c5a      	adds	r2, r3, #1
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ce8:	3b01      	subs	r3, #1
 8001cea:	b29a      	uxth	r2, r3
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001cf4:	b29b      	uxth	r3, r3
 8001cf6:	3b01      	subs	r3, #1
 8001cf8:	b29a      	uxth	r2, r3
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001cfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d00:	9300      	str	r3, [sp, #0]
 8001d02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d04:	2200      	movs	r2, #0
 8001d06:	494f      	ldr	r1, [pc, #316]	; (8001e44 <HAL_I2C_Master_Receive+0x448>)
 8001d08:	68f8      	ldr	r0, [r7, #12]
 8001d0a:	f000 f9ed 	bl	80020e8 <I2C_WaitOnFlagUntilTimeout>
 8001d0e:	4603      	mov	r3, r0
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d001      	beq.n	8001d18 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8001d14:	2301      	movs	r3, #1
 8001d16:	e091      	b.n	8001e3c <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	681a      	ldr	r2, [r3, #0]
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001d26:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	691a      	ldr	r2, [r3, #16]
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d32:	b2d2      	uxtb	r2, r2
 8001d34:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d3a:	1c5a      	adds	r2, r3, #1
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d44:	3b01      	subs	r3, #1
 8001d46:	b29a      	uxth	r2, r3
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d50:	b29b      	uxth	r3, r3
 8001d52:	3b01      	subs	r3, #1
 8001d54:	b29a      	uxth	r2, r3
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	691a      	ldr	r2, [r3, #16]
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d64:	b2d2      	uxtb	r2, r2
 8001d66:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d6c:	1c5a      	adds	r2, r3, #1
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d76:	3b01      	subs	r3, #1
 8001d78:	b29a      	uxth	r2, r3
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d82:	b29b      	uxth	r3, r3
 8001d84:	3b01      	subs	r3, #1
 8001d86:	b29a      	uxth	r2, r3
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001d8c:	e042      	b.n	8001e14 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001d8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d90:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001d92:	68f8      	ldr	r0, [r7, #12]
 8001d94:	f000 fb00 	bl	8002398 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001d98:	4603      	mov	r3, r0
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d001      	beq.n	8001da2 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8001d9e:	2301      	movs	r3, #1
 8001da0:	e04c      	b.n	8001e3c <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	691a      	ldr	r2, [r3, #16]
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dac:	b2d2      	uxtb	r2, r2
 8001dae:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001db4:	1c5a      	adds	r2, r3, #1
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001dbe:	3b01      	subs	r3, #1
 8001dc0:	b29a      	uxth	r2, r3
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001dca:	b29b      	uxth	r3, r3
 8001dcc:	3b01      	subs	r3, #1
 8001dce:	b29a      	uxth	r2, r3
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	695b      	ldr	r3, [r3, #20]
 8001dda:	f003 0304 	and.w	r3, r3, #4
 8001dde:	2b04      	cmp	r3, #4
 8001de0:	d118      	bne.n	8001e14 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	691a      	ldr	r2, [r3, #16]
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dec:	b2d2      	uxtb	r2, r2
 8001dee:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001df4:	1c5a      	adds	r2, r3, #1
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001dfe:	3b01      	subs	r3, #1
 8001e00:	b29a      	uxth	r2, r3
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e0a:	b29b      	uxth	r3, r3
 8001e0c:	3b01      	subs	r3, #1
 8001e0e:	b29a      	uxth	r2, r3
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	f47f aec2 	bne.w	8001ba2 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	2220      	movs	r2, #32
 8001e22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	2200      	movs	r2, #0
 8001e2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	2200      	movs	r2, #0
 8001e32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001e36:	2300      	movs	r3, #0
 8001e38:	e000      	b.n	8001e3c <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8001e3a:	2302      	movs	r3, #2
  }
}
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	3728      	adds	r7, #40	; 0x28
 8001e40:	46bd      	mov	sp, r7
 8001e42:	bd80      	pop	{r7, pc}
 8001e44:	00010004 	.word	0x00010004

08001e48 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b088      	sub	sp, #32
 8001e4c:	af02      	add	r7, sp, #8
 8001e4e:	60f8      	str	r0, [r7, #12]
 8001e50:	607a      	str	r2, [r7, #4]
 8001e52:	603b      	str	r3, [r7, #0]
 8001e54:	460b      	mov	r3, r1
 8001e56:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e5c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001e5e:	697b      	ldr	r3, [r7, #20]
 8001e60:	2b08      	cmp	r3, #8
 8001e62:	d006      	beq.n	8001e72 <I2C_MasterRequestWrite+0x2a>
 8001e64:	697b      	ldr	r3, [r7, #20]
 8001e66:	2b01      	cmp	r3, #1
 8001e68:	d003      	beq.n	8001e72 <I2C_MasterRequestWrite+0x2a>
 8001e6a:	697b      	ldr	r3, [r7, #20]
 8001e6c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001e70:	d108      	bne.n	8001e84 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	681a      	ldr	r2, [r3, #0]
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001e80:	601a      	str	r2, [r3, #0]
 8001e82:	e00b      	b.n	8001e9c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e88:	2b12      	cmp	r3, #18
 8001e8a:	d107      	bne.n	8001e9c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	681a      	ldr	r2, [r3, #0]
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001e9a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	9300      	str	r3, [sp, #0]
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001ea8:	68f8      	ldr	r0, [r7, #12]
 8001eaa:	f000 f91d 	bl	80020e8 <I2C_WaitOnFlagUntilTimeout>
 8001eae:	4603      	mov	r3, r0
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d00d      	beq.n	8001ed0 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ebe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001ec2:	d103      	bne.n	8001ecc <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001eca:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001ecc:	2303      	movs	r3, #3
 8001ece:	e035      	b.n	8001f3c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	691b      	ldr	r3, [r3, #16]
 8001ed4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001ed8:	d108      	bne.n	8001eec <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001eda:	897b      	ldrh	r3, [r7, #10]
 8001edc:	b2db      	uxtb	r3, r3
 8001ede:	461a      	mov	r2, r3
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001ee8:	611a      	str	r2, [r3, #16]
 8001eea:	e01b      	b.n	8001f24 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001eec:	897b      	ldrh	r3, [r7, #10]
 8001eee:	11db      	asrs	r3, r3, #7
 8001ef0:	b2db      	uxtb	r3, r3
 8001ef2:	f003 0306 	and.w	r3, r3, #6
 8001ef6:	b2db      	uxtb	r3, r3
 8001ef8:	f063 030f 	orn	r3, r3, #15
 8001efc:	b2da      	uxtb	r2, r3
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	687a      	ldr	r2, [r7, #4]
 8001f08:	490e      	ldr	r1, [pc, #56]	; (8001f44 <I2C_MasterRequestWrite+0xfc>)
 8001f0a:	68f8      	ldr	r0, [r7, #12]
 8001f0c:	f000 f943 	bl	8002196 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001f10:	4603      	mov	r3, r0
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d001      	beq.n	8001f1a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8001f16:	2301      	movs	r3, #1
 8001f18:	e010      	b.n	8001f3c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001f1a:	897b      	ldrh	r3, [r7, #10]
 8001f1c:	b2da      	uxtb	r2, r3
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	687a      	ldr	r2, [r7, #4]
 8001f28:	4907      	ldr	r1, [pc, #28]	; (8001f48 <I2C_MasterRequestWrite+0x100>)
 8001f2a:	68f8      	ldr	r0, [r7, #12]
 8001f2c:	f000 f933 	bl	8002196 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001f30:	4603      	mov	r3, r0
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d001      	beq.n	8001f3a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8001f36:	2301      	movs	r3, #1
 8001f38:	e000      	b.n	8001f3c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8001f3a:	2300      	movs	r3, #0
}
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	3718      	adds	r7, #24
 8001f40:	46bd      	mov	sp, r7
 8001f42:	bd80      	pop	{r7, pc}
 8001f44:	00010008 	.word	0x00010008
 8001f48:	00010002 	.word	0x00010002

08001f4c <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b088      	sub	sp, #32
 8001f50:	af02      	add	r7, sp, #8
 8001f52:	60f8      	str	r0, [r7, #12]
 8001f54:	607a      	str	r2, [r7, #4]
 8001f56:	603b      	str	r3, [r7, #0]
 8001f58:	460b      	mov	r3, r1
 8001f5a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f60:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	681a      	ldr	r2, [r3, #0]
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001f70:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001f72:	697b      	ldr	r3, [r7, #20]
 8001f74:	2b08      	cmp	r3, #8
 8001f76:	d006      	beq.n	8001f86 <I2C_MasterRequestRead+0x3a>
 8001f78:	697b      	ldr	r3, [r7, #20]
 8001f7a:	2b01      	cmp	r3, #1
 8001f7c:	d003      	beq.n	8001f86 <I2C_MasterRequestRead+0x3a>
 8001f7e:	697b      	ldr	r3, [r7, #20]
 8001f80:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001f84:	d108      	bne.n	8001f98 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	681a      	ldr	r2, [r3, #0]
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001f94:	601a      	str	r2, [r3, #0]
 8001f96:	e00b      	b.n	8001fb0 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f9c:	2b11      	cmp	r3, #17
 8001f9e:	d107      	bne.n	8001fb0 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	681a      	ldr	r2, [r3, #0]
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001fae:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	9300      	str	r3, [sp, #0]
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001fbc:	68f8      	ldr	r0, [r7, #12]
 8001fbe:	f000 f893 	bl	80020e8 <I2C_WaitOnFlagUntilTimeout>
 8001fc2:	4603      	mov	r3, r0
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d00d      	beq.n	8001fe4 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fd2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001fd6:	d103      	bne.n	8001fe0 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001fde:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001fe0:	2303      	movs	r3, #3
 8001fe2:	e079      	b.n	80020d8 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	691b      	ldr	r3, [r3, #16]
 8001fe8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001fec:	d108      	bne.n	8002000 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8001fee:	897b      	ldrh	r3, [r7, #10]
 8001ff0:	b2db      	uxtb	r3, r3
 8001ff2:	f043 0301 	orr.w	r3, r3, #1
 8001ff6:	b2da      	uxtb	r2, r3
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	611a      	str	r2, [r3, #16]
 8001ffe:	e05f      	b.n	80020c0 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002000:	897b      	ldrh	r3, [r7, #10]
 8002002:	11db      	asrs	r3, r3, #7
 8002004:	b2db      	uxtb	r3, r3
 8002006:	f003 0306 	and.w	r3, r3, #6
 800200a:	b2db      	uxtb	r3, r3
 800200c:	f063 030f 	orn	r3, r3, #15
 8002010:	b2da      	uxtb	r2, r3
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	687a      	ldr	r2, [r7, #4]
 800201c:	4930      	ldr	r1, [pc, #192]	; (80020e0 <I2C_MasterRequestRead+0x194>)
 800201e:	68f8      	ldr	r0, [r7, #12]
 8002020:	f000 f8b9 	bl	8002196 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002024:	4603      	mov	r3, r0
 8002026:	2b00      	cmp	r3, #0
 8002028:	d001      	beq.n	800202e <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800202a:	2301      	movs	r3, #1
 800202c:	e054      	b.n	80020d8 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800202e:	897b      	ldrh	r3, [r7, #10]
 8002030:	b2da      	uxtb	r2, r3
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002038:	683b      	ldr	r3, [r7, #0]
 800203a:	687a      	ldr	r2, [r7, #4]
 800203c:	4929      	ldr	r1, [pc, #164]	; (80020e4 <I2C_MasterRequestRead+0x198>)
 800203e:	68f8      	ldr	r0, [r7, #12]
 8002040:	f000 f8a9 	bl	8002196 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002044:	4603      	mov	r3, r0
 8002046:	2b00      	cmp	r3, #0
 8002048:	d001      	beq.n	800204e <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800204a:	2301      	movs	r3, #1
 800204c:	e044      	b.n	80020d8 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800204e:	2300      	movs	r3, #0
 8002050:	613b      	str	r3, [r7, #16]
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	695b      	ldr	r3, [r3, #20]
 8002058:	613b      	str	r3, [r7, #16]
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	699b      	ldr	r3, [r3, #24]
 8002060:	613b      	str	r3, [r7, #16]
 8002062:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	681a      	ldr	r2, [r3, #0]
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002072:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	9300      	str	r3, [sp, #0]
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	2200      	movs	r2, #0
 800207c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002080:	68f8      	ldr	r0, [r7, #12]
 8002082:	f000 f831 	bl	80020e8 <I2C_WaitOnFlagUntilTimeout>
 8002086:	4603      	mov	r3, r0
 8002088:	2b00      	cmp	r3, #0
 800208a:	d00d      	beq.n	80020a8 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002096:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800209a:	d103      	bne.n	80020a4 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	f44f 7200 	mov.w	r2, #512	; 0x200
 80020a2:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 80020a4:	2303      	movs	r3, #3
 80020a6:	e017      	b.n	80020d8 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80020a8:	897b      	ldrh	r3, [r7, #10]
 80020aa:	11db      	asrs	r3, r3, #7
 80020ac:	b2db      	uxtb	r3, r3
 80020ae:	f003 0306 	and.w	r3, r3, #6
 80020b2:	b2db      	uxtb	r3, r3
 80020b4:	f063 030e 	orn	r3, r3, #14
 80020b8:	b2da      	uxtb	r2, r3
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	687a      	ldr	r2, [r7, #4]
 80020c4:	4907      	ldr	r1, [pc, #28]	; (80020e4 <I2C_MasterRequestRead+0x198>)
 80020c6:	68f8      	ldr	r0, [r7, #12]
 80020c8:	f000 f865 	bl	8002196 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80020cc:	4603      	mov	r3, r0
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d001      	beq.n	80020d6 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80020d2:	2301      	movs	r3, #1
 80020d4:	e000      	b.n	80020d8 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80020d6:	2300      	movs	r3, #0
}
 80020d8:	4618      	mov	r0, r3
 80020da:	3718      	adds	r7, #24
 80020dc:	46bd      	mov	sp, r7
 80020de:	bd80      	pop	{r7, pc}
 80020e0:	00010008 	.word	0x00010008
 80020e4:	00010002 	.word	0x00010002

080020e8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b084      	sub	sp, #16
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	60f8      	str	r0, [r7, #12]
 80020f0:	60b9      	str	r1, [r7, #8]
 80020f2:	603b      	str	r3, [r7, #0]
 80020f4:	4613      	mov	r3, r2
 80020f6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80020f8:	e025      	b.n	8002146 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80020fa:	683b      	ldr	r3, [r7, #0]
 80020fc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002100:	d021      	beq.n	8002146 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002102:	f7fe ff5d 	bl	8000fc0 <HAL_GetTick>
 8002106:	4602      	mov	r2, r0
 8002108:	69bb      	ldr	r3, [r7, #24]
 800210a:	1ad3      	subs	r3, r2, r3
 800210c:	683a      	ldr	r2, [r7, #0]
 800210e:	429a      	cmp	r2, r3
 8002110:	d302      	bcc.n	8002118 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002112:	683b      	ldr	r3, [r7, #0]
 8002114:	2b00      	cmp	r3, #0
 8002116:	d116      	bne.n	8002146 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	2200      	movs	r2, #0
 800211c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	2220      	movs	r2, #32
 8002122:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	2200      	movs	r2, #0
 800212a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002132:	f043 0220 	orr.w	r2, r3, #32
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	2200      	movs	r2, #0
 800213e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002142:	2301      	movs	r3, #1
 8002144:	e023      	b.n	800218e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002146:	68bb      	ldr	r3, [r7, #8]
 8002148:	0c1b      	lsrs	r3, r3, #16
 800214a:	b2db      	uxtb	r3, r3
 800214c:	2b01      	cmp	r3, #1
 800214e:	d10d      	bne.n	800216c <I2C_WaitOnFlagUntilTimeout+0x84>
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	695b      	ldr	r3, [r3, #20]
 8002156:	43da      	mvns	r2, r3
 8002158:	68bb      	ldr	r3, [r7, #8]
 800215a:	4013      	ands	r3, r2
 800215c:	b29b      	uxth	r3, r3
 800215e:	2b00      	cmp	r3, #0
 8002160:	bf0c      	ite	eq
 8002162:	2301      	moveq	r3, #1
 8002164:	2300      	movne	r3, #0
 8002166:	b2db      	uxtb	r3, r3
 8002168:	461a      	mov	r2, r3
 800216a:	e00c      	b.n	8002186 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	699b      	ldr	r3, [r3, #24]
 8002172:	43da      	mvns	r2, r3
 8002174:	68bb      	ldr	r3, [r7, #8]
 8002176:	4013      	ands	r3, r2
 8002178:	b29b      	uxth	r3, r3
 800217a:	2b00      	cmp	r3, #0
 800217c:	bf0c      	ite	eq
 800217e:	2301      	moveq	r3, #1
 8002180:	2300      	movne	r3, #0
 8002182:	b2db      	uxtb	r3, r3
 8002184:	461a      	mov	r2, r3
 8002186:	79fb      	ldrb	r3, [r7, #7]
 8002188:	429a      	cmp	r2, r3
 800218a:	d0b6      	beq.n	80020fa <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800218c:	2300      	movs	r3, #0
}
 800218e:	4618      	mov	r0, r3
 8002190:	3710      	adds	r7, #16
 8002192:	46bd      	mov	sp, r7
 8002194:	bd80      	pop	{r7, pc}

08002196 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002196:	b580      	push	{r7, lr}
 8002198:	b084      	sub	sp, #16
 800219a:	af00      	add	r7, sp, #0
 800219c:	60f8      	str	r0, [r7, #12]
 800219e:	60b9      	str	r1, [r7, #8]
 80021a0:	607a      	str	r2, [r7, #4]
 80021a2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80021a4:	e051      	b.n	800224a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	695b      	ldr	r3, [r3, #20]
 80021ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80021b4:	d123      	bne.n	80021fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	681a      	ldr	r2, [r3, #0]
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80021c4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80021ce:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	2200      	movs	r2, #0
 80021d4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	2220      	movs	r2, #32
 80021da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	2200      	movs	r2, #0
 80021e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ea:	f043 0204 	orr.w	r2, r3, #4
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	2200      	movs	r2, #0
 80021f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80021fa:	2301      	movs	r3, #1
 80021fc:	e046      	b.n	800228c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002204:	d021      	beq.n	800224a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002206:	f7fe fedb 	bl	8000fc0 <HAL_GetTick>
 800220a:	4602      	mov	r2, r0
 800220c:	683b      	ldr	r3, [r7, #0]
 800220e:	1ad3      	subs	r3, r2, r3
 8002210:	687a      	ldr	r2, [r7, #4]
 8002212:	429a      	cmp	r2, r3
 8002214:	d302      	bcc.n	800221c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	2b00      	cmp	r3, #0
 800221a:	d116      	bne.n	800224a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	2200      	movs	r2, #0
 8002220:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	2220      	movs	r2, #32
 8002226:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	2200      	movs	r2, #0
 800222e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002236:	f043 0220 	orr.w	r2, r3, #32
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	2200      	movs	r2, #0
 8002242:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002246:	2301      	movs	r3, #1
 8002248:	e020      	b.n	800228c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800224a:	68bb      	ldr	r3, [r7, #8]
 800224c:	0c1b      	lsrs	r3, r3, #16
 800224e:	b2db      	uxtb	r3, r3
 8002250:	2b01      	cmp	r3, #1
 8002252:	d10c      	bne.n	800226e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	695b      	ldr	r3, [r3, #20]
 800225a:	43da      	mvns	r2, r3
 800225c:	68bb      	ldr	r3, [r7, #8]
 800225e:	4013      	ands	r3, r2
 8002260:	b29b      	uxth	r3, r3
 8002262:	2b00      	cmp	r3, #0
 8002264:	bf14      	ite	ne
 8002266:	2301      	movne	r3, #1
 8002268:	2300      	moveq	r3, #0
 800226a:	b2db      	uxtb	r3, r3
 800226c:	e00b      	b.n	8002286 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	699b      	ldr	r3, [r3, #24]
 8002274:	43da      	mvns	r2, r3
 8002276:	68bb      	ldr	r3, [r7, #8]
 8002278:	4013      	ands	r3, r2
 800227a:	b29b      	uxth	r3, r3
 800227c:	2b00      	cmp	r3, #0
 800227e:	bf14      	ite	ne
 8002280:	2301      	movne	r3, #1
 8002282:	2300      	moveq	r3, #0
 8002284:	b2db      	uxtb	r3, r3
 8002286:	2b00      	cmp	r3, #0
 8002288:	d18d      	bne.n	80021a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800228a:	2300      	movs	r3, #0
}
 800228c:	4618      	mov	r0, r3
 800228e:	3710      	adds	r7, #16
 8002290:	46bd      	mov	sp, r7
 8002292:	bd80      	pop	{r7, pc}

08002294 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	b084      	sub	sp, #16
 8002298:	af00      	add	r7, sp, #0
 800229a:	60f8      	str	r0, [r7, #12]
 800229c:	60b9      	str	r1, [r7, #8]
 800229e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80022a0:	e02d      	b.n	80022fe <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80022a2:	68f8      	ldr	r0, [r7, #12]
 80022a4:	f000 f8ce 	bl	8002444 <I2C_IsAcknowledgeFailed>
 80022a8:	4603      	mov	r3, r0
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d001      	beq.n	80022b2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80022ae:	2301      	movs	r3, #1
 80022b0:	e02d      	b.n	800230e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80022b2:	68bb      	ldr	r3, [r7, #8]
 80022b4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80022b8:	d021      	beq.n	80022fe <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80022ba:	f7fe fe81 	bl	8000fc0 <HAL_GetTick>
 80022be:	4602      	mov	r2, r0
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	1ad3      	subs	r3, r2, r3
 80022c4:	68ba      	ldr	r2, [r7, #8]
 80022c6:	429a      	cmp	r2, r3
 80022c8:	d302      	bcc.n	80022d0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80022ca:	68bb      	ldr	r3, [r7, #8]
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d116      	bne.n	80022fe <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	2200      	movs	r2, #0
 80022d4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	2220      	movs	r2, #32
 80022da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	2200      	movs	r2, #0
 80022e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ea:	f043 0220 	orr.w	r2, r3, #32
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	2200      	movs	r2, #0
 80022f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80022fa:	2301      	movs	r3, #1
 80022fc:	e007      	b.n	800230e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	695b      	ldr	r3, [r3, #20]
 8002304:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002308:	2b80      	cmp	r3, #128	; 0x80
 800230a:	d1ca      	bne.n	80022a2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800230c:	2300      	movs	r3, #0
}
 800230e:	4618      	mov	r0, r3
 8002310:	3710      	adds	r7, #16
 8002312:	46bd      	mov	sp, r7
 8002314:	bd80      	pop	{r7, pc}

08002316 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002316:	b580      	push	{r7, lr}
 8002318:	b084      	sub	sp, #16
 800231a:	af00      	add	r7, sp, #0
 800231c:	60f8      	str	r0, [r7, #12]
 800231e:	60b9      	str	r1, [r7, #8]
 8002320:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002322:	e02d      	b.n	8002380 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002324:	68f8      	ldr	r0, [r7, #12]
 8002326:	f000 f88d 	bl	8002444 <I2C_IsAcknowledgeFailed>
 800232a:	4603      	mov	r3, r0
 800232c:	2b00      	cmp	r3, #0
 800232e:	d001      	beq.n	8002334 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002330:	2301      	movs	r3, #1
 8002332:	e02d      	b.n	8002390 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002334:	68bb      	ldr	r3, [r7, #8]
 8002336:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800233a:	d021      	beq.n	8002380 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800233c:	f7fe fe40 	bl	8000fc0 <HAL_GetTick>
 8002340:	4602      	mov	r2, r0
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	1ad3      	subs	r3, r2, r3
 8002346:	68ba      	ldr	r2, [r7, #8]
 8002348:	429a      	cmp	r2, r3
 800234a:	d302      	bcc.n	8002352 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800234c:	68bb      	ldr	r3, [r7, #8]
 800234e:	2b00      	cmp	r3, #0
 8002350:	d116      	bne.n	8002380 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	2200      	movs	r2, #0
 8002356:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	2220      	movs	r2, #32
 800235c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	2200      	movs	r2, #0
 8002364:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800236c:	f043 0220 	orr.w	r2, r3, #32
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	2200      	movs	r2, #0
 8002378:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800237c:	2301      	movs	r3, #1
 800237e:	e007      	b.n	8002390 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	695b      	ldr	r3, [r3, #20]
 8002386:	f003 0304 	and.w	r3, r3, #4
 800238a:	2b04      	cmp	r3, #4
 800238c:	d1ca      	bne.n	8002324 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800238e:	2300      	movs	r3, #0
}
 8002390:	4618      	mov	r0, r3
 8002392:	3710      	adds	r7, #16
 8002394:	46bd      	mov	sp, r7
 8002396:	bd80      	pop	{r7, pc}

08002398 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	b084      	sub	sp, #16
 800239c:	af00      	add	r7, sp, #0
 800239e:	60f8      	str	r0, [r7, #12]
 80023a0:	60b9      	str	r1, [r7, #8]
 80023a2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80023a4:	e042      	b.n	800242c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	695b      	ldr	r3, [r3, #20]
 80023ac:	f003 0310 	and.w	r3, r3, #16
 80023b0:	2b10      	cmp	r3, #16
 80023b2:	d119      	bne.n	80023e8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f06f 0210 	mvn.w	r2, #16
 80023bc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	2200      	movs	r2, #0
 80023c2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	2220      	movs	r2, #32
 80023c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	2200      	movs	r2, #0
 80023d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	2200      	movs	r2, #0
 80023e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80023e4:	2301      	movs	r3, #1
 80023e6:	e029      	b.n	800243c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80023e8:	f7fe fdea 	bl	8000fc0 <HAL_GetTick>
 80023ec:	4602      	mov	r2, r0
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	1ad3      	subs	r3, r2, r3
 80023f2:	68ba      	ldr	r2, [r7, #8]
 80023f4:	429a      	cmp	r2, r3
 80023f6:	d302      	bcc.n	80023fe <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80023f8:	68bb      	ldr	r3, [r7, #8]
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d116      	bne.n	800242c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	2200      	movs	r2, #0
 8002402:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	2220      	movs	r2, #32
 8002408:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	2200      	movs	r2, #0
 8002410:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002418:	f043 0220 	orr.w	r2, r3, #32
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	2200      	movs	r2, #0
 8002424:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002428:	2301      	movs	r3, #1
 800242a:	e007      	b.n	800243c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	695b      	ldr	r3, [r3, #20]
 8002432:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002436:	2b40      	cmp	r3, #64	; 0x40
 8002438:	d1b5      	bne.n	80023a6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800243a:	2300      	movs	r3, #0
}
 800243c:	4618      	mov	r0, r3
 800243e:	3710      	adds	r7, #16
 8002440:	46bd      	mov	sp, r7
 8002442:	bd80      	pop	{r7, pc}

08002444 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002444:	b480      	push	{r7}
 8002446:	b083      	sub	sp, #12
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	695b      	ldr	r3, [r3, #20]
 8002452:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002456:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800245a:	d11b      	bne.n	8002494 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002464:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	2200      	movs	r2, #0
 800246a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	2220      	movs	r2, #32
 8002470:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	2200      	movs	r2, #0
 8002478:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002480:	f043 0204 	orr.w	r2, r3, #4
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	2200      	movs	r2, #0
 800248c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002490:	2301      	movs	r3, #1
 8002492:	e000      	b.n	8002496 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002494:	2300      	movs	r3, #0
}
 8002496:	4618      	mov	r0, r3
 8002498:	370c      	adds	r7, #12
 800249a:	46bd      	mov	sp, r7
 800249c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a0:	4770      	bx	lr

080024a2 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80024a2:	b480      	push	{r7}
 80024a4:	b083      	sub	sp, #12
 80024a6:	af00      	add	r7, sp, #0
 80024a8:	6078      	str	r0, [r7, #4]
 80024aa:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024b2:	b2db      	uxtb	r3, r3
 80024b4:	2b20      	cmp	r3, #32
 80024b6:	d129      	bne.n	800250c <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	2224      	movs	r2, #36	; 0x24
 80024bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	681a      	ldr	r2, [r3, #0]
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f022 0201 	bic.w	r2, r2, #1
 80024ce:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f022 0210 	bic.w	r2, r2, #16
 80024de:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	683a      	ldr	r2, [r7, #0]
 80024ec:	430a      	orrs	r2, r1
 80024ee:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	681a      	ldr	r2, [r3, #0]
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f042 0201 	orr.w	r2, r2, #1
 80024fe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	2220      	movs	r2, #32
 8002504:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002508:	2300      	movs	r3, #0
 800250a:	e000      	b.n	800250e <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 800250c:	2302      	movs	r3, #2
  }
}
 800250e:	4618      	mov	r0, r3
 8002510:	370c      	adds	r7, #12
 8002512:	46bd      	mov	sp, r7
 8002514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002518:	4770      	bx	lr

0800251a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800251a:	b480      	push	{r7}
 800251c:	b085      	sub	sp, #20
 800251e:	af00      	add	r7, sp, #0
 8002520:	6078      	str	r0, [r7, #4]
 8002522:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8002524:	2300      	movs	r3, #0
 8002526:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800252e:	b2db      	uxtb	r3, r3
 8002530:	2b20      	cmp	r3, #32
 8002532:	d12a      	bne.n	800258a <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	2224      	movs	r2, #36	; 0x24
 8002538:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	681a      	ldr	r2, [r3, #0]
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f022 0201 	bic.w	r2, r2, #1
 800254a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002552:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8002554:	89fb      	ldrh	r3, [r7, #14]
 8002556:	f023 030f 	bic.w	r3, r3, #15
 800255a:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	b29a      	uxth	r2, r3
 8002560:	89fb      	ldrh	r3, [r7, #14]
 8002562:	4313      	orrs	r3, r2
 8002564:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	89fa      	ldrh	r2, [r7, #14]
 800256c:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	681a      	ldr	r2, [r3, #0]
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f042 0201 	orr.w	r2, r2, #1
 800257c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	2220      	movs	r2, #32
 8002582:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002586:	2300      	movs	r3, #0
 8002588:	e000      	b.n	800258c <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 800258a:	2302      	movs	r3, #2
  }
}
 800258c:	4618      	mov	r0, r3
 800258e:	3714      	adds	r7, #20
 8002590:	46bd      	mov	sp, r7
 8002592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002596:	4770      	bx	lr

08002598 <HAL_UART_MspInit>:
  *           - Peripheral's GPIO Configuration
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	b08a      	sub	sp, #40	; 0x28
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  GPIO_InitStruct;


  /*##-1- Enable peripherals and GPIO Clocks #################################*/
  /* Enable GPIO TX/RX clock */
  USARTx_TX_GPIO_CLK_ENABLE();
 80025a0:	2300      	movs	r3, #0
 80025a2:	613b      	str	r3, [r7, #16]
 80025a4:	4b23      	ldr	r3, [pc, #140]	; (8002634 <HAL_UART_MspInit+0x9c>)
 80025a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025a8:	4a22      	ldr	r2, [pc, #136]	; (8002634 <HAL_UART_MspInit+0x9c>)
 80025aa:	f043 0308 	orr.w	r3, r3, #8
 80025ae:	6313      	str	r3, [r2, #48]	; 0x30
 80025b0:	4b20      	ldr	r3, [pc, #128]	; (8002634 <HAL_UART_MspInit+0x9c>)
 80025b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025b4:	f003 0308 	and.w	r3, r3, #8
 80025b8:	613b      	str	r3, [r7, #16]
 80025ba:	693b      	ldr	r3, [r7, #16]
  USARTx_RX_GPIO_CLK_ENABLE();
 80025bc:	2300      	movs	r3, #0
 80025be:	60fb      	str	r3, [r7, #12]
 80025c0:	4b1c      	ldr	r3, [pc, #112]	; (8002634 <HAL_UART_MspInit+0x9c>)
 80025c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025c4:	4a1b      	ldr	r2, [pc, #108]	; (8002634 <HAL_UART_MspInit+0x9c>)
 80025c6:	f043 0308 	orr.w	r3, r3, #8
 80025ca:	6313      	str	r3, [r2, #48]	; 0x30
 80025cc:	4b19      	ldr	r3, [pc, #100]	; (8002634 <HAL_UART_MspInit+0x9c>)
 80025ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025d0:	f003 0308 	and.w	r3, r3, #8
 80025d4:	60fb      	str	r3, [r7, #12]
 80025d6:	68fb      	ldr	r3, [r7, #12]


  /* Enable USARTx clock */
  USARTx_CLK_ENABLE();
 80025d8:	2300      	movs	r3, #0
 80025da:	60bb      	str	r3, [r7, #8]
 80025dc:	4b15      	ldr	r3, [pc, #84]	; (8002634 <HAL_UART_MspInit+0x9c>)
 80025de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025e0:	4a14      	ldr	r2, [pc, #80]	; (8002634 <HAL_UART_MspInit+0x9c>)
 80025e2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80025e6:	6413      	str	r3, [r2, #64]	; 0x40
 80025e8:	4b12      	ldr	r3, [pc, #72]	; (8002634 <HAL_UART_MspInit+0x9c>)
 80025ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ec:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80025f0:	60bb      	str	r3, [r7, #8]
 80025f2:	68bb      	ldr	r3, [r7, #8]

  /*##-2- Configure peripheral GPIO ##########################################*/
  /* UART TX GPIO pin configuration  */
  GPIO_InitStruct.Pin       = USARTx_TX_PIN;
 80025f4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80025f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 80025fa:	2302      	movs	r3, #2
 80025fc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull      = GPIO_PULLUP;
 80025fe:	2301      	movs	r3, #1
 8002600:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 8002602:	2303      	movs	r3, #3
 8002604:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = USARTx_TX_AF;
 8002606:	2307      	movs	r3, #7
 8002608:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_GPIO_Init(USARTx_TX_GPIO_PORT, &GPIO_InitStruct);
 800260a:	f107 0314 	add.w	r3, r7, #20
 800260e:	4619      	mov	r1, r3
 8002610:	4809      	ldr	r0, [pc, #36]	; (8002638 <HAL_UART_MspInit+0xa0>)
 8002612:	f7fe fdeb 	bl	80011ec <HAL_GPIO_Init>

  /* UART RX GPIO pin configuration  */
  GPIO_InitStruct.Pin = USARTx_RX_PIN;
 8002616:	f44f 7300 	mov.w	r3, #512	; 0x200
 800261a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = USARTx_RX_AF;
 800261c:	2307      	movs	r3, #7
 800261e:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_GPIO_Init(USARTx_RX_GPIO_PORT, &GPIO_InitStruct);
 8002620:	f107 0314 	add.w	r3, r7, #20
 8002624:	4619      	mov	r1, r3
 8002626:	4804      	ldr	r0, [pc, #16]	; (8002638 <HAL_UART_MspInit+0xa0>)
 8002628:	f7fe fde0 	bl	80011ec <HAL_GPIO_Init>
}
 800262c:	bf00      	nop
 800262e:	3728      	adds	r7, #40	; 0x28
 8002630:	46bd      	mov	sp, r7
 8002632:	bd80      	pop	{r7, pc}
 8002634:	40023800 	.word	0x40023800
 8002638:	40020c00 	.word	0x40020c00

0800263c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	b082      	sub	sp, #8
 8002640:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8002642:	2300      	movs	r3, #0
 8002644:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002646:	2300      	movs	r3, #0
 8002648:	603b      	str	r3, [r7, #0]
 800264a:	4b20      	ldr	r3, [pc, #128]	; (80026cc <HAL_PWREx_EnableOverDrive+0x90>)
 800264c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800264e:	4a1f      	ldr	r2, [pc, #124]	; (80026cc <HAL_PWREx_EnableOverDrive+0x90>)
 8002650:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002654:	6413      	str	r3, [r2, #64]	; 0x40
 8002656:	4b1d      	ldr	r3, [pc, #116]	; (80026cc <HAL_PWREx_EnableOverDrive+0x90>)
 8002658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800265a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800265e:	603b      	str	r3, [r7, #0]
 8002660:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002662:	4b1b      	ldr	r3, [pc, #108]	; (80026d0 <HAL_PWREx_EnableOverDrive+0x94>)
 8002664:	2201      	movs	r2, #1
 8002666:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002668:	f7fe fcaa 	bl	8000fc0 <HAL_GetTick>
 800266c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800266e:	e009      	b.n	8002684 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002670:	f7fe fca6 	bl	8000fc0 <HAL_GetTick>
 8002674:	4602      	mov	r2, r0
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	1ad3      	subs	r3, r2, r3
 800267a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800267e:	d901      	bls.n	8002684 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8002680:	2303      	movs	r3, #3
 8002682:	e01f      	b.n	80026c4 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002684:	4b13      	ldr	r3, [pc, #76]	; (80026d4 <HAL_PWREx_EnableOverDrive+0x98>)
 8002686:	685b      	ldr	r3, [r3, #4]
 8002688:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800268c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002690:	d1ee      	bne.n	8002670 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002692:	4b11      	ldr	r3, [pc, #68]	; (80026d8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002694:	2201      	movs	r2, #1
 8002696:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002698:	f7fe fc92 	bl	8000fc0 <HAL_GetTick>
 800269c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800269e:	e009      	b.n	80026b4 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80026a0:	f7fe fc8e 	bl	8000fc0 <HAL_GetTick>
 80026a4:	4602      	mov	r2, r0
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	1ad3      	subs	r3, r2, r3
 80026aa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80026ae:	d901      	bls.n	80026b4 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 80026b0:	2303      	movs	r3, #3
 80026b2:	e007      	b.n	80026c4 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80026b4:	4b07      	ldr	r3, [pc, #28]	; (80026d4 <HAL_PWREx_EnableOverDrive+0x98>)
 80026b6:	685b      	ldr	r3, [r3, #4]
 80026b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026bc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80026c0:	d1ee      	bne.n	80026a0 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 80026c2:	2300      	movs	r3, #0
}
 80026c4:	4618      	mov	r0, r3
 80026c6:	3708      	adds	r7, #8
 80026c8:	46bd      	mov	sp, r7
 80026ca:	bd80      	pop	{r7, pc}
 80026cc:	40023800 	.word	0x40023800
 80026d0:	420e0040 	.word	0x420e0040
 80026d4:	40007000 	.word	0x40007000
 80026d8:	420e0044 	.word	0x420e0044

080026dc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	b086      	sub	sp, #24
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d101      	bne.n	80026ee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80026ea:	2301      	movs	r3, #1
 80026ec:	e267      	b.n	8002bbe <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f003 0301 	and.w	r3, r3, #1
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d075      	beq.n	80027e6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80026fa:	4b88      	ldr	r3, [pc, #544]	; (800291c <HAL_RCC_OscConfig+0x240>)
 80026fc:	689b      	ldr	r3, [r3, #8]
 80026fe:	f003 030c 	and.w	r3, r3, #12
 8002702:	2b04      	cmp	r3, #4
 8002704:	d00c      	beq.n	8002720 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002706:	4b85      	ldr	r3, [pc, #532]	; (800291c <HAL_RCC_OscConfig+0x240>)
 8002708:	689b      	ldr	r3, [r3, #8]
 800270a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800270e:	2b08      	cmp	r3, #8
 8002710:	d112      	bne.n	8002738 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002712:	4b82      	ldr	r3, [pc, #520]	; (800291c <HAL_RCC_OscConfig+0x240>)
 8002714:	685b      	ldr	r3, [r3, #4]
 8002716:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800271a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800271e:	d10b      	bne.n	8002738 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002720:	4b7e      	ldr	r3, [pc, #504]	; (800291c <HAL_RCC_OscConfig+0x240>)
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002728:	2b00      	cmp	r3, #0
 800272a:	d05b      	beq.n	80027e4 <HAL_RCC_OscConfig+0x108>
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	685b      	ldr	r3, [r3, #4]
 8002730:	2b00      	cmp	r3, #0
 8002732:	d157      	bne.n	80027e4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002734:	2301      	movs	r3, #1
 8002736:	e242      	b.n	8002bbe <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	685b      	ldr	r3, [r3, #4]
 800273c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002740:	d106      	bne.n	8002750 <HAL_RCC_OscConfig+0x74>
 8002742:	4b76      	ldr	r3, [pc, #472]	; (800291c <HAL_RCC_OscConfig+0x240>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	4a75      	ldr	r2, [pc, #468]	; (800291c <HAL_RCC_OscConfig+0x240>)
 8002748:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800274c:	6013      	str	r3, [r2, #0]
 800274e:	e01d      	b.n	800278c <HAL_RCC_OscConfig+0xb0>
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	685b      	ldr	r3, [r3, #4]
 8002754:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002758:	d10c      	bne.n	8002774 <HAL_RCC_OscConfig+0x98>
 800275a:	4b70      	ldr	r3, [pc, #448]	; (800291c <HAL_RCC_OscConfig+0x240>)
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	4a6f      	ldr	r2, [pc, #444]	; (800291c <HAL_RCC_OscConfig+0x240>)
 8002760:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002764:	6013      	str	r3, [r2, #0]
 8002766:	4b6d      	ldr	r3, [pc, #436]	; (800291c <HAL_RCC_OscConfig+0x240>)
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	4a6c      	ldr	r2, [pc, #432]	; (800291c <HAL_RCC_OscConfig+0x240>)
 800276c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002770:	6013      	str	r3, [r2, #0]
 8002772:	e00b      	b.n	800278c <HAL_RCC_OscConfig+0xb0>
 8002774:	4b69      	ldr	r3, [pc, #420]	; (800291c <HAL_RCC_OscConfig+0x240>)
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	4a68      	ldr	r2, [pc, #416]	; (800291c <HAL_RCC_OscConfig+0x240>)
 800277a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800277e:	6013      	str	r3, [r2, #0]
 8002780:	4b66      	ldr	r3, [pc, #408]	; (800291c <HAL_RCC_OscConfig+0x240>)
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	4a65      	ldr	r2, [pc, #404]	; (800291c <HAL_RCC_OscConfig+0x240>)
 8002786:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800278a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	685b      	ldr	r3, [r3, #4]
 8002790:	2b00      	cmp	r3, #0
 8002792:	d013      	beq.n	80027bc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002794:	f7fe fc14 	bl	8000fc0 <HAL_GetTick>
 8002798:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800279a:	e008      	b.n	80027ae <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800279c:	f7fe fc10 	bl	8000fc0 <HAL_GetTick>
 80027a0:	4602      	mov	r2, r0
 80027a2:	693b      	ldr	r3, [r7, #16]
 80027a4:	1ad3      	subs	r3, r2, r3
 80027a6:	2b64      	cmp	r3, #100	; 0x64
 80027a8:	d901      	bls.n	80027ae <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80027aa:	2303      	movs	r3, #3
 80027ac:	e207      	b.n	8002bbe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027ae:	4b5b      	ldr	r3, [pc, #364]	; (800291c <HAL_RCC_OscConfig+0x240>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d0f0      	beq.n	800279c <HAL_RCC_OscConfig+0xc0>
 80027ba:	e014      	b.n	80027e6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027bc:	f7fe fc00 	bl	8000fc0 <HAL_GetTick>
 80027c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80027c2:	e008      	b.n	80027d6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80027c4:	f7fe fbfc 	bl	8000fc0 <HAL_GetTick>
 80027c8:	4602      	mov	r2, r0
 80027ca:	693b      	ldr	r3, [r7, #16]
 80027cc:	1ad3      	subs	r3, r2, r3
 80027ce:	2b64      	cmp	r3, #100	; 0x64
 80027d0:	d901      	bls.n	80027d6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80027d2:	2303      	movs	r3, #3
 80027d4:	e1f3      	b.n	8002bbe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80027d6:	4b51      	ldr	r3, [pc, #324]	; (800291c <HAL_RCC_OscConfig+0x240>)
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d1f0      	bne.n	80027c4 <HAL_RCC_OscConfig+0xe8>
 80027e2:	e000      	b.n	80027e6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f003 0302 	and.w	r3, r3, #2
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d063      	beq.n	80028ba <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80027f2:	4b4a      	ldr	r3, [pc, #296]	; (800291c <HAL_RCC_OscConfig+0x240>)
 80027f4:	689b      	ldr	r3, [r3, #8]
 80027f6:	f003 030c 	and.w	r3, r3, #12
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d00b      	beq.n	8002816 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80027fe:	4b47      	ldr	r3, [pc, #284]	; (800291c <HAL_RCC_OscConfig+0x240>)
 8002800:	689b      	ldr	r3, [r3, #8]
 8002802:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002806:	2b08      	cmp	r3, #8
 8002808:	d11c      	bne.n	8002844 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800280a:	4b44      	ldr	r3, [pc, #272]	; (800291c <HAL_RCC_OscConfig+0x240>)
 800280c:	685b      	ldr	r3, [r3, #4]
 800280e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002812:	2b00      	cmp	r3, #0
 8002814:	d116      	bne.n	8002844 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002816:	4b41      	ldr	r3, [pc, #260]	; (800291c <HAL_RCC_OscConfig+0x240>)
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f003 0302 	and.w	r3, r3, #2
 800281e:	2b00      	cmp	r3, #0
 8002820:	d005      	beq.n	800282e <HAL_RCC_OscConfig+0x152>
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	68db      	ldr	r3, [r3, #12]
 8002826:	2b01      	cmp	r3, #1
 8002828:	d001      	beq.n	800282e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800282a:	2301      	movs	r3, #1
 800282c:	e1c7      	b.n	8002bbe <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800282e:	4b3b      	ldr	r3, [pc, #236]	; (800291c <HAL_RCC_OscConfig+0x240>)
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	691b      	ldr	r3, [r3, #16]
 800283a:	00db      	lsls	r3, r3, #3
 800283c:	4937      	ldr	r1, [pc, #220]	; (800291c <HAL_RCC_OscConfig+0x240>)
 800283e:	4313      	orrs	r3, r2
 8002840:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002842:	e03a      	b.n	80028ba <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	68db      	ldr	r3, [r3, #12]
 8002848:	2b00      	cmp	r3, #0
 800284a:	d020      	beq.n	800288e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800284c:	4b34      	ldr	r3, [pc, #208]	; (8002920 <HAL_RCC_OscConfig+0x244>)
 800284e:	2201      	movs	r2, #1
 8002850:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002852:	f7fe fbb5 	bl	8000fc0 <HAL_GetTick>
 8002856:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002858:	e008      	b.n	800286c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800285a:	f7fe fbb1 	bl	8000fc0 <HAL_GetTick>
 800285e:	4602      	mov	r2, r0
 8002860:	693b      	ldr	r3, [r7, #16]
 8002862:	1ad3      	subs	r3, r2, r3
 8002864:	2b02      	cmp	r3, #2
 8002866:	d901      	bls.n	800286c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002868:	2303      	movs	r3, #3
 800286a:	e1a8      	b.n	8002bbe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800286c:	4b2b      	ldr	r3, [pc, #172]	; (800291c <HAL_RCC_OscConfig+0x240>)
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f003 0302 	and.w	r3, r3, #2
 8002874:	2b00      	cmp	r3, #0
 8002876:	d0f0      	beq.n	800285a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002878:	4b28      	ldr	r3, [pc, #160]	; (800291c <HAL_RCC_OscConfig+0x240>)
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	691b      	ldr	r3, [r3, #16]
 8002884:	00db      	lsls	r3, r3, #3
 8002886:	4925      	ldr	r1, [pc, #148]	; (800291c <HAL_RCC_OscConfig+0x240>)
 8002888:	4313      	orrs	r3, r2
 800288a:	600b      	str	r3, [r1, #0]
 800288c:	e015      	b.n	80028ba <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800288e:	4b24      	ldr	r3, [pc, #144]	; (8002920 <HAL_RCC_OscConfig+0x244>)
 8002890:	2200      	movs	r2, #0
 8002892:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002894:	f7fe fb94 	bl	8000fc0 <HAL_GetTick>
 8002898:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800289a:	e008      	b.n	80028ae <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800289c:	f7fe fb90 	bl	8000fc0 <HAL_GetTick>
 80028a0:	4602      	mov	r2, r0
 80028a2:	693b      	ldr	r3, [r7, #16]
 80028a4:	1ad3      	subs	r3, r2, r3
 80028a6:	2b02      	cmp	r3, #2
 80028a8:	d901      	bls.n	80028ae <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80028aa:	2303      	movs	r3, #3
 80028ac:	e187      	b.n	8002bbe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80028ae:	4b1b      	ldr	r3, [pc, #108]	; (800291c <HAL_RCC_OscConfig+0x240>)
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f003 0302 	and.w	r3, r3, #2
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d1f0      	bne.n	800289c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f003 0308 	and.w	r3, r3, #8
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d036      	beq.n	8002934 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	695b      	ldr	r3, [r3, #20]
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d016      	beq.n	80028fc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80028ce:	4b15      	ldr	r3, [pc, #84]	; (8002924 <HAL_RCC_OscConfig+0x248>)
 80028d0:	2201      	movs	r2, #1
 80028d2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028d4:	f7fe fb74 	bl	8000fc0 <HAL_GetTick>
 80028d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80028da:	e008      	b.n	80028ee <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80028dc:	f7fe fb70 	bl	8000fc0 <HAL_GetTick>
 80028e0:	4602      	mov	r2, r0
 80028e2:	693b      	ldr	r3, [r7, #16]
 80028e4:	1ad3      	subs	r3, r2, r3
 80028e6:	2b02      	cmp	r3, #2
 80028e8:	d901      	bls.n	80028ee <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80028ea:	2303      	movs	r3, #3
 80028ec:	e167      	b.n	8002bbe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80028ee:	4b0b      	ldr	r3, [pc, #44]	; (800291c <HAL_RCC_OscConfig+0x240>)
 80028f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80028f2:	f003 0302 	and.w	r3, r3, #2
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d0f0      	beq.n	80028dc <HAL_RCC_OscConfig+0x200>
 80028fa:	e01b      	b.n	8002934 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80028fc:	4b09      	ldr	r3, [pc, #36]	; (8002924 <HAL_RCC_OscConfig+0x248>)
 80028fe:	2200      	movs	r2, #0
 8002900:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002902:	f7fe fb5d 	bl	8000fc0 <HAL_GetTick>
 8002906:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002908:	e00e      	b.n	8002928 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800290a:	f7fe fb59 	bl	8000fc0 <HAL_GetTick>
 800290e:	4602      	mov	r2, r0
 8002910:	693b      	ldr	r3, [r7, #16]
 8002912:	1ad3      	subs	r3, r2, r3
 8002914:	2b02      	cmp	r3, #2
 8002916:	d907      	bls.n	8002928 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002918:	2303      	movs	r3, #3
 800291a:	e150      	b.n	8002bbe <HAL_RCC_OscConfig+0x4e2>
 800291c:	40023800 	.word	0x40023800
 8002920:	42470000 	.word	0x42470000
 8002924:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002928:	4b88      	ldr	r3, [pc, #544]	; (8002b4c <HAL_RCC_OscConfig+0x470>)
 800292a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800292c:	f003 0302 	and.w	r3, r3, #2
 8002930:	2b00      	cmp	r3, #0
 8002932:	d1ea      	bne.n	800290a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f003 0304 	and.w	r3, r3, #4
 800293c:	2b00      	cmp	r3, #0
 800293e:	f000 8097 	beq.w	8002a70 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002942:	2300      	movs	r3, #0
 8002944:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002946:	4b81      	ldr	r3, [pc, #516]	; (8002b4c <HAL_RCC_OscConfig+0x470>)
 8002948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800294a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800294e:	2b00      	cmp	r3, #0
 8002950:	d10f      	bne.n	8002972 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002952:	2300      	movs	r3, #0
 8002954:	60bb      	str	r3, [r7, #8]
 8002956:	4b7d      	ldr	r3, [pc, #500]	; (8002b4c <HAL_RCC_OscConfig+0x470>)
 8002958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800295a:	4a7c      	ldr	r2, [pc, #496]	; (8002b4c <HAL_RCC_OscConfig+0x470>)
 800295c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002960:	6413      	str	r3, [r2, #64]	; 0x40
 8002962:	4b7a      	ldr	r3, [pc, #488]	; (8002b4c <HAL_RCC_OscConfig+0x470>)
 8002964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002966:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800296a:	60bb      	str	r3, [r7, #8]
 800296c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800296e:	2301      	movs	r3, #1
 8002970:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002972:	4b77      	ldr	r3, [pc, #476]	; (8002b50 <HAL_RCC_OscConfig+0x474>)
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800297a:	2b00      	cmp	r3, #0
 800297c:	d118      	bne.n	80029b0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800297e:	4b74      	ldr	r3, [pc, #464]	; (8002b50 <HAL_RCC_OscConfig+0x474>)
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	4a73      	ldr	r2, [pc, #460]	; (8002b50 <HAL_RCC_OscConfig+0x474>)
 8002984:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002988:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800298a:	f7fe fb19 	bl	8000fc0 <HAL_GetTick>
 800298e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002990:	e008      	b.n	80029a4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002992:	f7fe fb15 	bl	8000fc0 <HAL_GetTick>
 8002996:	4602      	mov	r2, r0
 8002998:	693b      	ldr	r3, [r7, #16]
 800299a:	1ad3      	subs	r3, r2, r3
 800299c:	2b02      	cmp	r3, #2
 800299e:	d901      	bls.n	80029a4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80029a0:	2303      	movs	r3, #3
 80029a2:	e10c      	b.n	8002bbe <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029a4:	4b6a      	ldr	r3, [pc, #424]	; (8002b50 <HAL_RCC_OscConfig+0x474>)
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d0f0      	beq.n	8002992 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	689b      	ldr	r3, [r3, #8]
 80029b4:	2b01      	cmp	r3, #1
 80029b6:	d106      	bne.n	80029c6 <HAL_RCC_OscConfig+0x2ea>
 80029b8:	4b64      	ldr	r3, [pc, #400]	; (8002b4c <HAL_RCC_OscConfig+0x470>)
 80029ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029bc:	4a63      	ldr	r2, [pc, #396]	; (8002b4c <HAL_RCC_OscConfig+0x470>)
 80029be:	f043 0301 	orr.w	r3, r3, #1
 80029c2:	6713      	str	r3, [r2, #112]	; 0x70
 80029c4:	e01c      	b.n	8002a00 <HAL_RCC_OscConfig+0x324>
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	689b      	ldr	r3, [r3, #8]
 80029ca:	2b05      	cmp	r3, #5
 80029cc:	d10c      	bne.n	80029e8 <HAL_RCC_OscConfig+0x30c>
 80029ce:	4b5f      	ldr	r3, [pc, #380]	; (8002b4c <HAL_RCC_OscConfig+0x470>)
 80029d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029d2:	4a5e      	ldr	r2, [pc, #376]	; (8002b4c <HAL_RCC_OscConfig+0x470>)
 80029d4:	f043 0304 	orr.w	r3, r3, #4
 80029d8:	6713      	str	r3, [r2, #112]	; 0x70
 80029da:	4b5c      	ldr	r3, [pc, #368]	; (8002b4c <HAL_RCC_OscConfig+0x470>)
 80029dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029de:	4a5b      	ldr	r2, [pc, #364]	; (8002b4c <HAL_RCC_OscConfig+0x470>)
 80029e0:	f043 0301 	orr.w	r3, r3, #1
 80029e4:	6713      	str	r3, [r2, #112]	; 0x70
 80029e6:	e00b      	b.n	8002a00 <HAL_RCC_OscConfig+0x324>
 80029e8:	4b58      	ldr	r3, [pc, #352]	; (8002b4c <HAL_RCC_OscConfig+0x470>)
 80029ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029ec:	4a57      	ldr	r2, [pc, #348]	; (8002b4c <HAL_RCC_OscConfig+0x470>)
 80029ee:	f023 0301 	bic.w	r3, r3, #1
 80029f2:	6713      	str	r3, [r2, #112]	; 0x70
 80029f4:	4b55      	ldr	r3, [pc, #340]	; (8002b4c <HAL_RCC_OscConfig+0x470>)
 80029f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029f8:	4a54      	ldr	r2, [pc, #336]	; (8002b4c <HAL_RCC_OscConfig+0x470>)
 80029fa:	f023 0304 	bic.w	r3, r3, #4
 80029fe:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	689b      	ldr	r3, [r3, #8]
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d015      	beq.n	8002a34 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a08:	f7fe fada 	bl	8000fc0 <HAL_GetTick>
 8002a0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a0e:	e00a      	b.n	8002a26 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a10:	f7fe fad6 	bl	8000fc0 <HAL_GetTick>
 8002a14:	4602      	mov	r2, r0
 8002a16:	693b      	ldr	r3, [r7, #16]
 8002a18:	1ad3      	subs	r3, r2, r3
 8002a1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a1e:	4293      	cmp	r3, r2
 8002a20:	d901      	bls.n	8002a26 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002a22:	2303      	movs	r3, #3
 8002a24:	e0cb      	b.n	8002bbe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a26:	4b49      	ldr	r3, [pc, #292]	; (8002b4c <HAL_RCC_OscConfig+0x470>)
 8002a28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a2a:	f003 0302 	and.w	r3, r3, #2
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d0ee      	beq.n	8002a10 <HAL_RCC_OscConfig+0x334>
 8002a32:	e014      	b.n	8002a5e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a34:	f7fe fac4 	bl	8000fc0 <HAL_GetTick>
 8002a38:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a3a:	e00a      	b.n	8002a52 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a3c:	f7fe fac0 	bl	8000fc0 <HAL_GetTick>
 8002a40:	4602      	mov	r2, r0
 8002a42:	693b      	ldr	r3, [r7, #16]
 8002a44:	1ad3      	subs	r3, r2, r3
 8002a46:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a4a:	4293      	cmp	r3, r2
 8002a4c:	d901      	bls.n	8002a52 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002a4e:	2303      	movs	r3, #3
 8002a50:	e0b5      	b.n	8002bbe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a52:	4b3e      	ldr	r3, [pc, #248]	; (8002b4c <HAL_RCC_OscConfig+0x470>)
 8002a54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a56:	f003 0302 	and.w	r3, r3, #2
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d1ee      	bne.n	8002a3c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002a5e:	7dfb      	ldrb	r3, [r7, #23]
 8002a60:	2b01      	cmp	r3, #1
 8002a62:	d105      	bne.n	8002a70 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a64:	4b39      	ldr	r3, [pc, #228]	; (8002b4c <HAL_RCC_OscConfig+0x470>)
 8002a66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a68:	4a38      	ldr	r2, [pc, #224]	; (8002b4c <HAL_RCC_OscConfig+0x470>)
 8002a6a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a6e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	699b      	ldr	r3, [r3, #24]
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	f000 80a1 	beq.w	8002bbc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002a7a:	4b34      	ldr	r3, [pc, #208]	; (8002b4c <HAL_RCC_OscConfig+0x470>)
 8002a7c:	689b      	ldr	r3, [r3, #8]
 8002a7e:	f003 030c 	and.w	r3, r3, #12
 8002a82:	2b08      	cmp	r3, #8
 8002a84:	d05c      	beq.n	8002b40 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	699b      	ldr	r3, [r3, #24]
 8002a8a:	2b02      	cmp	r3, #2
 8002a8c:	d141      	bne.n	8002b12 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a8e:	4b31      	ldr	r3, [pc, #196]	; (8002b54 <HAL_RCC_OscConfig+0x478>)
 8002a90:	2200      	movs	r2, #0
 8002a92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a94:	f7fe fa94 	bl	8000fc0 <HAL_GetTick>
 8002a98:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a9a:	e008      	b.n	8002aae <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a9c:	f7fe fa90 	bl	8000fc0 <HAL_GetTick>
 8002aa0:	4602      	mov	r2, r0
 8002aa2:	693b      	ldr	r3, [r7, #16]
 8002aa4:	1ad3      	subs	r3, r2, r3
 8002aa6:	2b02      	cmp	r3, #2
 8002aa8:	d901      	bls.n	8002aae <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002aaa:	2303      	movs	r3, #3
 8002aac:	e087      	b.n	8002bbe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002aae:	4b27      	ldr	r3, [pc, #156]	; (8002b4c <HAL_RCC_OscConfig+0x470>)
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d1f0      	bne.n	8002a9c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	69da      	ldr	r2, [r3, #28]
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	6a1b      	ldr	r3, [r3, #32]
 8002ac2:	431a      	orrs	r2, r3
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ac8:	019b      	lsls	r3, r3, #6
 8002aca:	431a      	orrs	r2, r3
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ad0:	085b      	lsrs	r3, r3, #1
 8002ad2:	3b01      	subs	r3, #1
 8002ad4:	041b      	lsls	r3, r3, #16
 8002ad6:	431a      	orrs	r2, r3
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002adc:	061b      	lsls	r3, r3, #24
 8002ade:	491b      	ldr	r1, [pc, #108]	; (8002b4c <HAL_RCC_OscConfig+0x470>)
 8002ae0:	4313      	orrs	r3, r2
 8002ae2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ae4:	4b1b      	ldr	r3, [pc, #108]	; (8002b54 <HAL_RCC_OscConfig+0x478>)
 8002ae6:	2201      	movs	r2, #1
 8002ae8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002aea:	f7fe fa69 	bl	8000fc0 <HAL_GetTick>
 8002aee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002af0:	e008      	b.n	8002b04 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002af2:	f7fe fa65 	bl	8000fc0 <HAL_GetTick>
 8002af6:	4602      	mov	r2, r0
 8002af8:	693b      	ldr	r3, [r7, #16]
 8002afa:	1ad3      	subs	r3, r2, r3
 8002afc:	2b02      	cmp	r3, #2
 8002afe:	d901      	bls.n	8002b04 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002b00:	2303      	movs	r3, #3
 8002b02:	e05c      	b.n	8002bbe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b04:	4b11      	ldr	r3, [pc, #68]	; (8002b4c <HAL_RCC_OscConfig+0x470>)
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d0f0      	beq.n	8002af2 <HAL_RCC_OscConfig+0x416>
 8002b10:	e054      	b.n	8002bbc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b12:	4b10      	ldr	r3, [pc, #64]	; (8002b54 <HAL_RCC_OscConfig+0x478>)
 8002b14:	2200      	movs	r2, #0
 8002b16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b18:	f7fe fa52 	bl	8000fc0 <HAL_GetTick>
 8002b1c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b1e:	e008      	b.n	8002b32 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b20:	f7fe fa4e 	bl	8000fc0 <HAL_GetTick>
 8002b24:	4602      	mov	r2, r0
 8002b26:	693b      	ldr	r3, [r7, #16]
 8002b28:	1ad3      	subs	r3, r2, r3
 8002b2a:	2b02      	cmp	r3, #2
 8002b2c:	d901      	bls.n	8002b32 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002b2e:	2303      	movs	r3, #3
 8002b30:	e045      	b.n	8002bbe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b32:	4b06      	ldr	r3, [pc, #24]	; (8002b4c <HAL_RCC_OscConfig+0x470>)
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d1f0      	bne.n	8002b20 <HAL_RCC_OscConfig+0x444>
 8002b3e:	e03d      	b.n	8002bbc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	699b      	ldr	r3, [r3, #24]
 8002b44:	2b01      	cmp	r3, #1
 8002b46:	d107      	bne.n	8002b58 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002b48:	2301      	movs	r3, #1
 8002b4a:	e038      	b.n	8002bbe <HAL_RCC_OscConfig+0x4e2>
 8002b4c:	40023800 	.word	0x40023800
 8002b50:	40007000 	.word	0x40007000
 8002b54:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002b58:	4b1b      	ldr	r3, [pc, #108]	; (8002bc8 <HAL_RCC_OscConfig+0x4ec>)
 8002b5a:	685b      	ldr	r3, [r3, #4]
 8002b5c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	699b      	ldr	r3, [r3, #24]
 8002b62:	2b01      	cmp	r3, #1
 8002b64:	d028      	beq.n	8002bb8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b70:	429a      	cmp	r2, r3
 8002b72:	d121      	bne.n	8002bb8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b7e:	429a      	cmp	r2, r3
 8002b80:	d11a      	bne.n	8002bb8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002b82:	68fa      	ldr	r2, [r7, #12]
 8002b84:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002b88:	4013      	ands	r3, r2
 8002b8a:	687a      	ldr	r2, [r7, #4]
 8002b8c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002b8e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002b90:	4293      	cmp	r3, r2
 8002b92:	d111      	bne.n	8002bb8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b9e:	085b      	lsrs	r3, r3, #1
 8002ba0:	3b01      	subs	r3, #1
 8002ba2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002ba4:	429a      	cmp	r2, r3
 8002ba6:	d107      	bne.n	8002bb8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bb2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002bb4:	429a      	cmp	r2, r3
 8002bb6:	d001      	beq.n	8002bbc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002bb8:	2301      	movs	r3, #1
 8002bba:	e000      	b.n	8002bbe <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002bbc:	2300      	movs	r3, #0
}
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	3718      	adds	r7, #24
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	bd80      	pop	{r7, pc}
 8002bc6:	bf00      	nop
 8002bc8:	40023800 	.word	0x40023800

08002bcc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	b084      	sub	sp, #16
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]
 8002bd4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d101      	bne.n	8002be0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002bdc:	2301      	movs	r3, #1
 8002bde:	e0cc      	b.n	8002d7a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002be0:	4b68      	ldr	r3, [pc, #416]	; (8002d84 <HAL_RCC_ClockConfig+0x1b8>)
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f003 030f 	and.w	r3, r3, #15
 8002be8:	683a      	ldr	r2, [r7, #0]
 8002bea:	429a      	cmp	r2, r3
 8002bec:	d90c      	bls.n	8002c08 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bee:	4b65      	ldr	r3, [pc, #404]	; (8002d84 <HAL_RCC_ClockConfig+0x1b8>)
 8002bf0:	683a      	ldr	r2, [r7, #0]
 8002bf2:	b2d2      	uxtb	r2, r2
 8002bf4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bf6:	4b63      	ldr	r3, [pc, #396]	; (8002d84 <HAL_RCC_ClockConfig+0x1b8>)
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f003 030f 	and.w	r3, r3, #15
 8002bfe:	683a      	ldr	r2, [r7, #0]
 8002c00:	429a      	cmp	r2, r3
 8002c02:	d001      	beq.n	8002c08 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002c04:	2301      	movs	r3, #1
 8002c06:	e0b8      	b.n	8002d7a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f003 0302 	and.w	r3, r3, #2
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d020      	beq.n	8002c56 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f003 0304 	and.w	r3, r3, #4
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d005      	beq.n	8002c2c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002c20:	4b59      	ldr	r3, [pc, #356]	; (8002d88 <HAL_RCC_ClockConfig+0x1bc>)
 8002c22:	689b      	ldr	r3, [r3, #8]
 8002c24:	4a58      	ldr	r2, [pc, #352]	; (8002d88 <HAL_RCC_ClockConfig+0x1bc>)
 8002c26:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002c2a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f003 0308 	and.w	r3, r3, #8
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d005      	beq.n	8002c44 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002c38:	4b53      	ldr	r3, [pc, #332]	; (8002d88 <HAL_RCC_ClockConfig+0x1bc>)
 8002c3a:	689b      	ldr	r3, [r3, #8]
 8002c3c:	4a52      	ldr	r2, [pc, #328]	; (8002d88 <HAL_RCC_ClockConfig+0x1bc>)
 8002c3e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002c42:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c44:	4b50      	ldr	r3, [pc, #320]	; (8002d88 <HAL_RCC_ClockConfig+0x1bc>)
 8002c46:	689b      	ldr	r3, [r3, #8]
 8002c48:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	689b      	ldr	r3, [r3, #8]
 8002c50:	494d      	ldr	r1, [pc, #308]	; (8002d88 <HAL_RCC_ClockConfig+0x1bc>)
 8002c52:	4313      	orrs	r3, r2
 8002c54:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f003 0301 	and.w	r3, r3, #1
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d044      	beq.n	8002cec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	685b      	ldr	r3, [r3, #4]
 8002c66:	2b01      	cmp	r3, #1
 8002c68:	d107      	bne.n	8002c7a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c6a:	4b47      	ldr	r3, [pc, #284]	; (8002d88 <HAL_RCC_ClockConfig+0x1bc>)
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d119      	bne.n	8002caa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c76:	2301      	movs	r3, #1
 8002c78:	e07f      	b.n	8002d7a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	685b      	ldr	r3, [r3, #4]
 8002c7e:	2b02      	cmp	r3, #2
 8002c80:	d003      	beq.n	8002c8a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002c86:	2b03      	cmp	r3, #3
 8002c88:	d107      	bne.n	8002c9a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c8a:	4b3f      	ldr	r3, [pc, #252]	; (8002d88 <HAL_RCC_ClockConfig+0x1bc>)
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d109      	bne.n	8002caa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c96:	2301      	movs	r3, #1
 8002c98:	e06f      	b.n	8002d7a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c9a:	4b3b      	ldr	r3, [pc, #236]	; (8002d88 <HAL_RCC_ClockConfig+0x1bc>)
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f003 0302 	and.w	r3, r3, #2
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d101      	bne.n	8002caa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ca6:	2301      	movs	r3, #1
 8002ca8:	e067      	b.n	8002d7a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002caa:	4b37      	ldr	r3, [pc, #220]	; (8002d88 <HAL_RCC_ClockConfig+0x1bc>)
 8002cac:	689b      	ldr	r3, [r3, #8]
 8002cae:	f023 0203 	bic.w	r2, r3, #3
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	685b      	ldr	r3, [r3, #4]
 8002cb6:	4934      	ldr	r1, [pc, #208]	; (8002d88 <HAL_RCC_ClockConfig+0x1bc>)
 8002cb8:	4313      	orrs	r3, r2
 8002cba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002cbc:	f7fe f980 	bl	8000fc0 <HAL_GetTick>
 8002cc0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cc2:	e00a      	b.n	8002cda <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002cc4:	f7fe f97c 	bl	8000fc0 <HAL_GetTick>
 8002cc8:	4602      	mov	r2, r0
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	1ad3      	subs	r3, r2, r3
 8002cce:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cd2:	4293      	cmp	r3, r2
 8002cd4:	d901      	bls.n	8002cda <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002cd6:	2303      	movs	r3, #3
 8002cd8:	e04f      	b.n	8002d7a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cda:	4b2b      	ldr	r3, [pc, #172]	; (8002d88 <HAL_RCC_ClockConfig+0x1bc>)
 8002cdc:	689b      	ldr	r3, [r3, #8]
 8002cde:	f003 020c 	and.w	r2, r3, #12
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	685b      	ldr	r3, [r3, #4]
 8002ce6:	009b      	lsls	r3, r3, #2
 8002ce8:	429a      	cmp	r2, r3
 8002cea:	d1eb      	bne.n	8002cc4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002cec:	4b25      	ldr	r3, [pc, #148]	; (8002d84 <HAL_RCC_ClockConfig+0x1b8>)
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f003 030f 	and.w	r3, r3, #15
 8002cf4:	683a      	ldr	r2, [r7, #0]
 8002cf6:	429a      	cmp	r2, r3
 8002cf8:	d20c      	bcs.n	8002d14 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cfa:	4b22      	ldr	r3, [pc, #136]	; (8002d84 <HAL_RCC_ClockConfig+0x1b8>)
 8002cfc:	683a      	ldr	r2, [r7, #0]
 8002cfe:	b2d2      	uxtb	r2, r2
 8002d00:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d02:	4b20      	ldr	r3, [pc, #128]	; (8002d84 <HAL_RCC_ClockConfig+0x1b8>)
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f003 030f 	and.w	r3, r3, #15
 8002d0a:	683a      	ldr	r2, [r7, #0]
 8002d0c:	429a      	cmp	r2, r3
 8002d0e:	d001      	beq.n	8002d14 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002d10:	2301      	movs	r3, #1
 8002d12:	e032      	b.n	8002d7a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f003 0304 	and.w	r3, r3, #4
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d008      	beq.n	8002d32 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002d20:	4b19      	ldr	r3, [pc, #100]	; (8002d88 <HAL_RCC_ClockConfig+0x1bc>)
 8002d22:	689b      	ldr	r3, [r3, #8]
 8002d24:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	68db      	ldr	r3, [r3, #12]
 8002d2c:	4916      	ldr	r1, [pc, #88]	; (8002d88 <HAL_RCC_ClockConfig+0x1bc>)
 8002d2e:	4313      	orrs	r3, r2
 8002d30:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f003 0308 	and.w	r3, r3, #8
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d009      	beq.n	8002d52 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002d3e:	4b12      	ldr	r3, [pc, #72]	; (8002d88 <HAL_RCC_ClockConfig+0x1bc>)
 8002d40:	689b      	ldr	r3, [r3, #8]
 8002d42:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	691b      	ldr	r3, [r3, #16]
 8002d4a:	00db      	lsls	r3, r3, #3
 8002d4c:	490e      	ldr	r1, [pc, #56]	; (8002d88 <HAL_RCC_ClockConfig+0x1bc>)
 8002d4e:	4313      	orrs	r3, r2
 8002d50:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002d52:	f000 f821 	bl	8002d98 <HAL_RCC_GetSysClockFreq>
 8002d56:	4602      	mov	r2, r0
 8002d58:	4b0b      	ldr	r3, [pc, #44]	; (8002d88 <HAL_RCC_ClockConfig+0x1bc>)
 8002d5a:	689b      	ldr	r3, [r3, #8]
 8002d5c:	091b      	lsrs	r3, r3, #4
 8002d5e:	f003 030f 	and.w	r3, r3, #15
 8002d62:	490a      	ldr	r1, [pc, #40]	; (8002d8c <HAL_RCC_ClockConfig+0x1c0>)
 8002d64:	5ccb      	ldrb	r3, [r1, r3]
 8002d66:	fa22 f303 	lsr.w	r3, r2, r3
 8002d6a:	4a09      	ldr	r2, [pc, #36]	; (8002d90 <HAL_RCC_ClockConfig+0x1c4>)
 8002d6c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002d6e:	4b09      	ldr	r3, [pc, #36]	; (8002d94 <HAL_RCC_ClockConfig+0x1c8>)
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	4618      	mov	r0, r3
 8002d74:	f7fe f8e0 	bl	8000f38 <HAL_InitTick>

  return HAL_OK;
 8002d78:	2300      	movs	r3, #0
}
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	3710      	adds	r7, #16
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	bd80      	pop	{r7, pc}
 8002d82:	bf00      	nop
 8002d84:	40023c00 	.word	0x40023c00
 8002d88:	40023800 	.word	0x40023800
 8002d8c:	08005124 	.word	0x08005124
 8002d90:	2000000c 	.word	0x2000000c
 8002d94:	20000048 	.word	0x20000048

08002d98 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d98:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002d9c:	b094      	sub	sp, #80	; 0x50
 8002d9e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002da0:	2300      	movs	r3, #0
 8002da2:	647b      	str	r3, [r7, #68]	; 0x44
 8002da4:	2300      	movs	r3, #0
 8002da6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002da8:	2300      	movs	r3, #0
 8002daa:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002dac:	2300      	movs	r3, #0
 8002dae:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002db0:	4b79      	ldr	r3, [pc, #484]	; (8002f98 <HAL_RCC_GetSysClockFreq+0x200>)
 8002db2:	689b      	ldr	r3, [r3, #8]
 8002db4:	f003 030c 	and.w	r3, r3, #12
 8002db8:	2b08      	cmp	r3, #8
 8002dba:	d00d      	beq.n	8002dd8 <HAL_RCC_GetSysClockFreq+0x40>
 8002dbc:	2b08      	cmp	r3, #8
 8002dbe:	f200 80e1 	bhi.w	8002f84 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d002      	beq.n	8002dcc <HAL_RCC_GetSysClockFreq+0x34>
 8002dc6:	2b04      	cmp	r3, #4
 8002dc8:	d003      	beq.n	8002dd2 <HAL_RCC_GetSysClockFreq+0x3a>
 8002dca:	e0db      	b.n	8002f84 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002dcc:	4b73      	ldr	r3, [pc, #460]	; (8002f9c <HAL_RCC_GetSysClockFreq+0x204>)
 8002dce:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002dd0:	e0db      	b.n	8002f8a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002dd2:	4b73      	ldr	r3, [pc, #460]	; (8002fa0 <HAL_RCC_GetSysClockFreq+0x208>)
 8002dd4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002dd6:	e0d8      	b.n	8002f8a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002dd8:	4b6f      	ldr	r3, [pc, #444]	; (8002f98 <HAL_RCC_GetSysClockFreq+0x200>)
 8002dda:	685b      	ldr	r3, [r3, #4]
 8002ddc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002de0:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002de2:	4b6d      	ldr	r3, [pc, #436]	; (8002f98 <HAL_RCC_GetSysClockFreq+0x200>)
 8002de4:	685b      	ldr	r3, [r3, #4]
 8002de6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d063      	beq.n	8002eb6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002dee:	4b6a      	ldr	r3, [pc, #424]	; (8002f98 <HAL_RCC_GetSysClockFreq+0x200>)
 8002df0:	685b      	ldr	r3, [r3, #4]
 8002df2:	099b      	lsrs	r3, r3, #6
 8002df4:	2200      	movs	r2, #0
 8002df6:	63bb      	str	r3, [r7, #56]	; 0x38
 8002df8:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002dfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002dfc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e00:	633b      	str	r3, [r7, #48]	; 0x30
 8002e02:	2300      	movs	r3, #0
 8002e04:	637b      	str	r3, [r7, #52]	; 0x34
 8002e06:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002e0a:	4622      	mov	r2, r4
 8002e0c:	462b      	mov	r3, r5
 8002e0e:	f04f 0000 	mov.w	r0, #0
 8002e12:	f04f 0100 	mov.w	r1, #0
 8002e16:	0159      	lsls	r1, r3, #5
 8002e18:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002e1c:	0150      	lsls	r0, r2, #5
 8002e1e:	4602      	mov	r2, r0
 8002e20:	460b      	mov	r3, r1
 8002e22:	4621      	mov	r1, r4
 8002e24:	1a51      	subs	r1, r2, r1
 8002e26:	6139      	str	r1, [r7, #16]
 8002e28:	4629      	mov	r1, r5
 8002e2a:	eb63 0301 	sbc.w	r3, r3, r1
 8002e2e:	617b      	str	r3, [r7, #20]
 8002e30:	f04f 0200 	mov.w	r2, #0
 8002e34:	f04f 0300 	mov.w	r3, #0
 8002e38:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002e3c:	4659      	mov	r1, fp
 8002e3e:	018b      	lsls	r3, r1, #6
 8002e40:	4651      	mov	r1, sl
 8002e42:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002e46:	4651      	mov	r1, sl
 8002e48:	018a      	lsls	r2, r1, #6
 8002e4a:	4651      	mov	r1, sl
 8002e4c:	ebb2 0801 	subs.w	r8, r2, r1
 8002e50:	4659      	mov	r1, fp
 8002e52:	eb63 0901 	sbc.w	r9, r3, r1
 8002e56:	f04f 0200 	mov.w	r2, #0
 8002e5a:	f04f 0300 	mov.w	r3, #0
 8002e5e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002e62:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002e66:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002e6a:	4690      	mov	r8, r2
 8002e6c:	4699      	mov	r9, r3
 8002e6e:	4623      	mov	r3, r4
 8002e70:	eb18 0303 	adds.w	r3, r8, r3
 8002e74:	60bb      	str	r3, [r7, #8]
 8002e76:	462b      	mov	r3, r5
 8002e78:	eb49 0303 	adc.w	r3, r9, r3
 8002e7c:	60fb      	str	r3, [r7, #12]
 8002e7e:	f04f 0200 	mov.w	r2, #0
 8002e82:	f04f 0300 	mov.w	r3, #0
 8002e86:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002e8a:	4629      	mov	r1, r5
 8002e8c:	024b      	lsls	r3, r1, #9
 8002e8e:	4621      	mov	r1, r4
 8002e90:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002e94:	4621      	mov	r1, r4
 8002e96:	024a      	lsls	r2, r1, #9
 8002e98:	4610      	mov	r0, r2
 8002e9a:	4619      	mov	r1, r3
 8002e9c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	62bb      	str	r3, [r7, #40]	; 0x28
 8002ea2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002ea4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002ea8:	f7fd f9fa 	bl	80002a0 <__aeabi_uldivmod>
 8002eac:	4602      	mov	r2, r0
 8002eae:	460b      	mov	r3, r1
 8002eb0:	4613      	mov	r3, r2
 8002eb2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002eb4:	e058      	b.n	8002f68 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002eb6:	4b38      	ldr	r3, [pc, #224]	; (8002f98 <HAL_RCC_GetSysClockFreq+0x200>)
 8002eb8:	685b      	ldr	r3, [r3, #4]
 8002eba:	099b      	lsrs	r3, r3, #6
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	4611      	mov	r1, r2
 8002ec2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002ec6:	623b      	str	r3, [r7, #32]
 8002ec8:	2300      	movs	r3, #0
 8002eca:	627b      	str	r3, [r7, #36]	; 0x24
 8002ecc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002ed0:	4642      	mov	r2, r8
 8002ed2:	464b      	mov	r3, r9
 8002ed4:	f04f 0000 	mov.w	r0, #0
 8002ed8:	f04f 0100 	mov.w	r1, #0
 8002edc:	0159      	lsls	r1, r3, #5
 8002ede:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002ee2:	0150      	lsls	r0, r2, #5
 8002ee4:	4602      	mov	r2, r0
 8002ee6:	460b      	mov	r3, r1
 8002ee8:	4641      	mov	r1, r8
 8002eea:	ebb2 0a01 	subs.w	sl, r2, r1
 8002eee:	4649      	mov	r1, r9
 8002ef0:	eb63 0b01 	sbc.w	fp, r3, r1
 8002ef4:	f04f 0200 	mov.w	r2, #0
 8002ef8:	f04f 0300 	mov.w	r3, #0
 8002efc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002f00:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002f04:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002f08:	ebb2 040a 	subs.w	r4, r2, sl
 8002f0c:	eb63 050b 	sbc.w	r5, r3, fp
 8002f10:	f04f 0200 	mov.w	r2, #0
 8002f14:	f04f 0300 	mov.w	r3, #0
 8002f18:	00eb      	lsls	r3, r5, #3
 8002f1a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002f1e:	00e2      	lsls	r2, r4, #3
 8002f20:	4614      	mov	r4, r2
 8002f22:	461d      	mov	r5, r3
 8002f24:	4643      	mov	r3, r8
 8002f26:	18e3      	adds	r3, r4, r3
 8002f28:	603b      	str	r3, [r7, #0]
 8002f2a:	464b      	mov	r3, r9
 8002f2c:	eb45 0303 	adc.w	r3, r5, r3
 8002f30:	607b      	str	r3, [r7, #4]
 8002f32:	f04f 0200 	mov.w	r2, #0
 8002f36:	f04f 0300 	mov.w	r3, #0
 8002f3a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002f3e:	4629      	mov	r1, r5
 8002f40:	028b      	lsls	r3, r1, #10
 8002f42:	4621      	mov	r1, r4
 8002f44:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002f48:	4621      	mov	r1, r4
 8002f4a:	028a      	lsls	r2, r1, #10
 8002f4c:	4610      	mov	r0, r2
 8002f4e:	4619      	mov	r1, r3
 8002f50:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002f52:	2200      	movs	r2, #0
 8002f54:	61bb      	str	r3, [r7, #24]
 8002f56:	61fa      	str	r2, [r7, #28]
 8002f58:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002f5c:	f7fd f9a0 	bl	80002a0 <__aeabi_uldivmod>
 8002f60:	4602      	mov	r2, r0
 8002f62:	460b      	mov	r3, r1
 8002f64:	4613      	mov	r3, r2
 8002f66:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002f68:	4b0b      	ldr	r3, [pc, #44]	; (8002f98 <HAL_RCC_GetSysClockFreq+0x200>)
 8002f6a:	685b      	ldr	r3, [r3, #4]
 8002f6c:	0c1b      	lsrs	r3, r3, #16
 8002f6e:	f003 0303 	and.w	r3, r3, #3
 8002f72:	3301      	adds	r3, #1
 8002f74:	005b      	lsls	r3, r3, #1
 8002f76:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002f78:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002f7a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002f7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f80:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002f82:	e002      	b.n	8002f8a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002f84:	4b05      	ldr	r3, [pc, #20]	; (8002f9c <HAL_RCC_GetSysClockFreq+0x204>)
 8002f86:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002f88:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002f8a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	3750      	adds	r7, #80	; 0x50
 8002f90:	46bd      	mov	sp, r7
 8002f92:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002f96:	bf00      	nop
 8002f98:	40023800 	.word	0x40023800
 8002f9c:	00f42400 	.word	0x00f42400
 8002fa0:	007a1200 	.word	0x007a1200

08002fa4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002fa4:	b480      	push	{r7}
 8002fa6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002fa8:	4b03      	ldr	r3, [pc, #12]	; (8002fb8 <HAL_RCC_GetHCLKFreq+0x14>)
 8002faa:	681b      	ldr	r3, [r3, #0]
}
 8002fac:	4618      	mov	r0, r3
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb4:	4770      	bx	lr
 8002fb6:	bf00      	nop
 8002fb8:	2000000c 	.word	0x2000000c

08002fbc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002fc0:	f7ff fff0 	bl	8002fa4 <HAL_RCC_GetHCLKFreq>
 8002fc4:	4602      	mov	r2, r0
 8002fc6:	4b05      	ldr	r3, [pc, #20]	; (8002fdc <HAL_RCC_GetPCLK1Freq+0x20>)
 8002fc8:	689b      	ldr	r3, [r3, #8]
 8002fca:	0a9b      	lsrs	r3, r3, #10
 8002fcc:	f003 0307 	and.w	r3, r3, #7
 8002fd0:	4903      	ldr	r1, [pc, #12]	; (8002fe0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002fd2:	5ccb      	ldrb	r3, [r1, r3]
 8002fd4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002fd8:	4618      	mov	r0, r3
 8002fda:	bd80      	pop	{r7, pc}
 8002fdc:	40023800 	.word	0x40023800
 8002fe0:	08005134 	.word	0x08005134

08002fe4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002fe8:	f7ff ffdc 	bl	8002fa4 <HAL_RCC_GetHCLKFreq>
 8002fec:	4602      	mov	r2, r0
 8002fee:	4b05      	ldr	r3, [pc, #20]	; (8003004 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002ff0:	689b      	ldr	r3, [r3, #8]
 8002ff2:	0b5b      	lsrs	r3, r3, #13
 8002ff4:	f003 0307 	and.w	r3, r3, #7
 8002ff8:	4903      	ldr	r1, [pc, #12]	; (8003008 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002ffa:	5ccb      	ldrb	r3, [r1, r3]
 8002ffc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003000:	4618      	mov	r0, r3
 8003002:	bd80      	pop	{r7, pc}
 8003004:	40023800 	.word	0x40023800
 8003008:	08005134 	.word	0x08005134

0800300c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800300c:	b580      	push	{r7, lr}
 800300e:	b082      	sub	sp, #8
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	2b00      	cmp	r3, #0
 8003018:	d101      	bne.n	800301e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800301a:	2301      	movs	r3, #1
 800301c:	e03f      	b.n	800309e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003024:	b2db      	uxtb	r3, r3
 8003026:	2b00      	cmp	r3, #0
 8003028:	d106      	bne.n	8003038 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	2200      	movs	r2, #0
 800302e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003032:	6878      	ldr	r0, [r7, #4]
 8003034:	f7ff fab0 	bl	8002598 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	2224      	movs	r2, #36	; 0x24
 800303c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	68da      	ldr	r2, [r3, #12]
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800304e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003050:	6878      	ldr	r0, [r7, #4]
 8003052:	f000 f929 	bl	80032a8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	691a      	ldr	r2, [r3, #16]
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003064:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	695a      	ldr	r2, [r3, #20]
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003074:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	68da      	ldr	r2, [r3, #12]
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003084:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	2200      	movs	r2, #0
 800308a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	2220      	movs	r2, #32
 8003090:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	2220      	movs	r2, #32
 8003098:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800309c:	2300      	movs	r3, #0
}
 800309e:	4618      	mov	r0, r3
 80030a0:	3708      	adds	r7, #8
 80030a2:	46bd      	mov	sp, r7
 80030a4:	bd80      	pop	{r7, pc}

080030a6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80030a6:	b580      	push	{r7, lr}
 80030a8:	b08a      	sub	sp, #40	; 0x28
 80030aa:	af02      	add	r7, sp, #8
 80030ac:	60f8      	str	r0, [r7, #12]
 80030ae:	60b9      	str	r1, [r7, #8]
 80030b0:	603b      	str	r3, [r7, #0]
 80030b2:	4613      	mov	r3, r2
 80030b4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80030b6:	2300      	movs	r3, #0
 80030b8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030c0:	b2db      	uxtb	r3, r3
 80030c2:	2b20      	cmp	r3, #32
 80030c4:	d17c      	bne.n	80031c0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80030c6:	68bb      	ldr	r3, [r7, #8]
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d002      	beq.n	80030d2 <HAL_UART_Transmit+0x2c>
 80030cc:	88fb      	ldrh	r3, [r7, #6]
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d101      	bne.n	80030d6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80030d2:	2301      	movs	r3, #1
 80030d4:	e075      	b.n	80031c2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80030dc:	2b01      	cmp	r3, #1
 80030de:	d101      	bne.n	80030e4 <HAL_UART_Transmit+0x3e>
 80030e0:	2302      	movs	r3, #2
 80030e2:	e06e      	b.n	80031c2 <HAL_UART_Transmit+0x11c>
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	2201      	movs	r2, #1
 80030e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	2200      	movs	r2, #0
 80030f0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	2221      	movs	r2, #33	; 0x21
 80030f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80030fa:	f7fd ff61 	bl	8000fc0 <HAL_GetTick>
 80030fe:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	88fa      	ldrh	r2, [r7, #6]
 8003104:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	88fa      	ldrh	r2, [r7, #6]
 800310a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	689b      	ldr	r3, [r3, #8]
 8003110:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003114:	d108      	bne.n	8003128 <HAL_UART_Transmit+0x82>
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	691b      	ldr	r3, [r3, #16]
 800311a:	2b00      	cmp	r3, #0
 800311c:	d104      	bne.n	8003128 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800311e:	2300      	movs	r3, #0
 8003120:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003122:	68bb      	ldr	r3, [r7, #8]
 8003124:	61bb      	str	r3, [r7, #24]
 8003126:	e003      	b.n	8003130 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003128:	68bb      	ldr	r3, [r7, #8]
 800312a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800312c:	2300      	movs	r3, #0
 800312e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	2200      	movs	r2, #0
 8003134:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003138:	e02a      	b.n	8003190 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800313a:	683b      	ldr	r3, [r7, #0]
 800313c:	9300      	str	r3, [sp, #0]
 800313e:	697b      	ldr	r3, [r7, #20]
 8003140:	2200      	movs	r2, #0
 8003142:	2180      	movs	r1, #128	; 0x80
 8003144:	68f8      	ldr	r0, [r7, #12]
 8003146:	f000 f840 	bl	80031ca <UART_WaitOnFlagUntilTimeout>
 800314a:	4603      	mov	r3, r0
 800314c:	2b00      	cmp	r3, #0
 800314e:	d001      	beq.n	8003154 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003150:	2303      	movs	r3, #3
 8003152:	e036      	b.n	80031c2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003154:	69fb      	ldr	r3, [r7, #28]
 8003156:	2b00      	cmp	r3, #0
 8003158:	d10b      	bne.n	8003172 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800315a:	69bb      	ldr	r3, [r7, #24]
 800315c:	881b      	ldrh	r3, [r3, #0]
 800315e:	461a      	mov	r2, r3
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003168:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800316a:	69bb      	ldr	r3, [r7, #24]
 800316c:	3302      	adds	r3, #2
 800316e:	61bb      	str	r3, [r7, #24]
 8003170:	e007      	b.n	8003182 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003172:	69fb      	ldr	r3, [r7, #28]
 8003174:	781a      	ldrb	r2, [r3, #0]
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800317c:	69fb      	ldr	r3, [r7, #28]
 800317e:	3301      	adds	r3, #1
 8003180:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003186:	b29b      	uxth	r3, r3
 8003188:	3b01      	subs	r3, #1
 800318a:	b29a      	uxth	r2, r3
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003194:	b29b      	uxth	r3, r3
 8003196:	2b00      	cmp	r3, #0
 8003198:	d1cf      	bne.n	800313a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800319a:	683b      	ldr	r3, [r7, #0]
 800319c:	9300      	str	r3, [sp, #0]
 800319e:	697b      	ldr	r3, [r7, #20]
 80031a0:	2200      	movs	r2, #0
 80031a2:	2140      	movs	r1, #64	; 0x40
 80031a4:	68f8      	ldr	r0, [r7, #12]
 80031a6:	f000 f810 	bl	80031ca <UART_WaitOnFlagUntilTimeout>
 80031aa:	4603      	mov	r3, r0
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d001      	beq.n	80031b4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80031b0:	2303      	movs	r3, #3
 80031b2:	e006      	b.n	80031c2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	2220      	movs	r2, #32
 80031b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80031bc:	2300      	movs	r3, #0
 80031be:	e000      	b.n	80031c2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80031c0:	2302      	movs	r3, #2
  }
}
 80031c2:	4618      	mov	r0, r3
 80031c4:	3720      	adds	r7, #32
 80031c6:	46bd      	mov	sp, r7
 80031c8:	bd80      	pop	{r7, pc}

080031ca <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80031ca:	b580      	push	{r7, lr}
 80031cc:	b090      	sub	sp, #64	; 0x40
 80031ce:	af00      	add	r7, sp, #0
 80031d0:	60f8      	str	r0, [r7, #12]
 80031d2:	60b9      	str	r1, [r7, #8]
 80031d4:	603b      	str	r3, [r7, #0]
 80031d6:	4613      	mov	r3, r2
 80031d8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80031da:	e050      	b.n	800327e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80031dc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80031de:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80031e2:	d04c      	beq.n	800327e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80031e4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d007      	beq.n	80031fa <UART_WaitOnFlagUntilTimeout+0x30>
 80031ea:	f7fd fee9 	bl	8000fc0 <HAL_GetTick>
 80031ee:	4602      	mov	r2, r0
 80031f0:	683b      	ldr	r3, [r7, #0]
 80031f2:	1ad3      	subs	r3, r2, r3
 80031f4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80031f6:	429a      	cmp	r2, r3
 80031f8:	d241      	bcs.n	800327e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	330c      	adds	r3, #12
 8003200:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003202:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003204:	e853 3f00 	ldrex	r3, [r3]
 8003208:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800320a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800320c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003210:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	330c      	adds	r3, #12
 8003218:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800321a:	637a      	str	r2, [r7, #52]	; 0x34
 800321c:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800321e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003220:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003222:	e841 2300 	strex	r3, r2, [r1]
 8003226:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003228:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800322a:	2b00      	cmp	r3, #0
 800322c:	d1e5      	bne.n	80031fa <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	3314      	adds	r3, #20
 8003234:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003236:	697b      	ldr	r3, [r7, #20]
 8003238:	e853 3f00 	ldrex	r3, [r3]
 800323c:	613b      	str	r3, [r7, #16]
   return(result);
 800323e:	693b      	ldr	r3, [r7, #16]
 8003240:	f023 0301 	bic.w	r3, r3, #1
 8003244:	63bb      	str	r3, [r7, #56]	; 0x38
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	3314      	adds	r3, #20
 800324c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800324e:	623a      	str	r2, [r7, #32]
 8003250:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003252:	69f9      	ldr	r1, [r7, #28]
 8003254:	6a3a      	ldr	r2, [r7, #32]
 8003256:	e841 2300 	strex	r3, r2, [r1]
 800325a:	61bb      	str	r3, [r7, #24]
   return(result);
 800325c:	69bb      	ldr	r3, [r7, #24]
 800325e:	2b00      	cmp	r3, #0
 8003260:	d1e5      	bne.n	800322e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	2220      	movs	r2, #32
 8003266:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	2220      	movs	r2, #32
 800326e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	2200      	movs	r2, #0
 8003276:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800327a:	2303      	movs	r3, #3
 800327c:	e00f      	b.n	800329e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	681a      	ldr	r2, [r3, #0]
 8003284:	68bb      	ldr	r3, [r7, #8]
 8003286:	4013      	ands	r3, r2
 8003288:	68ba      	ldr	r2, [r7, #8]
 800328a:	429a      	cmp	r2, r3
 800328c:	bf0c      	ite	eq
 800328e:	2301      	moveq	r3, #1
 8003290:	2300      	movne	r3, #0
 8003292:	b2db      	uxtb	r3, r3
 8003294:	461a      	mov	r2, r3
 8003296:	79fb      	ldrb	r3, [r7, #7]
 8003298:	429a      	cmp	r2, r3
 800329a:	d09f      	beq.n	80031dc <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800329c:	2300      	movs	r3, #0
}
 800329e:	4618      	mov	r0, r3
 80032a0:	3740      	adds	r7, #64	; 0x40
 80032a2:	46bd      	mov	sp, r7
 80032a4:	bd80      	pop	{r7, pc}
	...

080032a8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80032a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80032ac:	b0c0      	sub	sp, #256	; 0x100
 80032ae:	af00      	add	r7, sp, #0
 80032b0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80032b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	691b      	ldr	r3, [r3, #16]
 80032bc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80032c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032c4:	68d9      	ldr	r1, [r3, #12]
 80032c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032ca:	681a      	ldr	r2, [r3, #0]
 80032cc:	ea40 0301 	orr.w	r3, r0, r1
 80032d0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80032d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032d6:	689a      	ldr	r2, [r3, #8]
 80032d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032dc:	691b      	ldr	r3, [r3, #16]
 80032de:	431a      	orrs	r2, r3
 80032e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032e4:	695b      	ldr	r3, [r3, #20]
 80032e6:	431a      	orrs	r2, r3
 80032e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032ec:	69db      	ldr	r3, [r3, #28]
 80032ee:	4313      	orrs	r3, r2
 80032f0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80032f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	68db      	ldr	r3, [r3, #12]
 80032fc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003300:	f021 010c 	bic.w	r1, r1, #12
 8003304:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003308:	681a      	ldr	r2, [r3, #0]
 800330a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800330e:	430b      	orrs	r3, r1
 8003310:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003312:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	695b      	ldr	r3, [r3, #20]
 800331a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800331e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003322:	6999      	ldr	r1, [r3, #24]
 8003324:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003328:	681a      	ldr	r2, [r3, #0]
 800332a:	ea40 0301 	orr.w	r3, r0, r1
 800332e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003330:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003334:	681a      	ldr	r2, [r3, #0]
 8003336:	4b8f      	ldr	r3, [pc, #572]	; (8003574 <UART_SetConfig+0x2cc>)
 8003338:	429a      	cmp	r2, r3
 800333a:	d005      	beq.n	8003348 <UART_SetConfig+0xa0>
 800333c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003340:	681a      	ldr	r2, [r3, #0]
 8003342:	4b8d      	ldr	r3, [pc, #564]	; (8003578 <UART_SetConfig+0x2d0>)
 8003344:	429a      	cmp	r2, r3
 8003346:	d104      	bne.n	8003352 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003348:	f7ff fe4c 	bl	8002fe4 <HAL_RCC_GetPCLK2Freq>
 800334c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003350:	e003      	b.n	800335a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003352:	f7ff fe33 	bl	8002fbc <HAL_RCC_GetPCLK1Freq>
 8003356:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800335a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800335e:	69db      	ldr	r3, [r3, #28]
 8003360:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003364:	f040 810c 	bne.w	8003580 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003368:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800336c:	2200      	movs	r2, #0
 800336e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003372:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003376:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800337a:	4622      	mov	r2, r4
 800337c:	462b      	mov	r3, r5
 800337e:	1891      	adds	r1, r2, r2
 8003380:	65b9      	str	r1, [r7, #88]	; 0x58
 8003382:	415b      	adcs	r3, r3
 8003384:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003386:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800338a:	4621      	mov	r1, r4
 800338c:	eb12 0801 	adds.w	r8, r2, r1
 8003390:	4629      	mov	r1, r5
 8003392:	eb43 0901 	adc.w	r9, r3, r1
 8003396:	f04f 0200 	mov.w	r2, #0
 800339a:	f04f 0300 	mov.w	r3, #0
 800339e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80033a2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80033a6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80033aa:	4690      	mov	r8, r2
 80033ac:	4699      	mov	r9, r3
 80033ae:	4623      	mov	r3, r4
 80033b0:	eb18 0303 	adds.w	r3, r8, r3
 80033b4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80033b8:	462b      	mov	r3, r5
 80033ba:	eb49 0303 	adc.w	r3, r9, r3
 80033be:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80033c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033c6:	685b      	ldr	r3, [r3, #4]
 80033c8:	2200      	movs	r2, #0
 80033ca:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80033ce:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80033d2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80033d6:	460b      	mov	r3, r1
 80033d8:	18db      	adds	r3, r3, r3
 80033da:	653b      	str	r3, [r7, #80]	; 0x50
 80033dc:	4613      	mov	r3, r2
 80033de:	eb42 0303 	adc.w	r3, r2, r3
 80033e2:	657b      	str	r3, [r7, #84]	; 0x54
 80033e4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80033e8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80033ec:	f7fc ff58 	bl	80002a0 <__aeabi_uldivmod>
 80033f0:	4602      	mov	r2, r0
 80033f2:	460b      	mov	r3, r1
 80033f4:	4b61      	ldr	r3, [pc, #388]	; (800357c <UART_SetConfig+0x2d4>)
 80033f6:	fba3 2302 	umull	r2, r3, r3, r2
 80033fa:	095b      	lsrs	r3, r3, #5
 80033fc:	011c      	lsls	r4, r3, #4
 80033fe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003402:	2200      	movs	r2, #0
 8003404:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003408:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800340c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003410:	4642      	mov	r2, r8
 8003412:	464b      	mov	r3, r9
 8003414:	1891      	adds	r1, r2, r2
 8003416:	64b9      	str	r1, [r7, #72]	; 0x48
 8003418:	415b      	adcs	r3, r3
 800341a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800341c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003420:	4641      	mov	r1, r8
 8003422:	eb12 0a01 	adds.w	sl, r2, r1
 8003426:	4649      	mov	r1, r9
 8003428:	eb43 0b01 	adc.w	fp, r3, r1
 800342c:	f04f 0200 	mov.w	r2, #0
 8003430:	f04f 0300 	mov.w	r3, #0
 8003434:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003438:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800343c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003440:	4692      	mov	sl, r2
 8003442:	469b      	mov	fp, r3
 8003444:	4643      	mov	r3, r8
 8003446:	eb1a 0303 	adds.w	r3, sl, r3
 800344a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800344e:	464b      	mov	r3, r9
 8003450:	eb4b 0303 	adc.w	r3, fp, r3
 8003454:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003458:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800345c:	685b      	ldr	r3, [r3, #4]
 800345e:	2200      	movs	r2, #0
 8003460:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003464:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003468:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800346c:	460b      	mov	r3, r1
 800346e:	18db      	adds	r3, r3, r3
 8003470:	643b      	str	r3, [r7, #64]	; 0x40
 8003472:	4613      	mov	r3, r2
 8003474:	eb42 0303 	adc.w	r3, r2, r3
 8003478:	647b      	str	r3, [r7, #68]	; 0x44
 800347a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800347e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003482:	f7fc ff0d 	bl	80002a0 <__aeabi_uldivmod>
 8003486:	4602      	mov	r2, r0
 8003488:	460b      	mov	r3, r1
 800348a:	4611      	mov	r1, r2
 800348c:	4b3b      	ldr	r3, [pc, #236]	; (800357c <UART_SetConfig+0x2d4>)
 800348e:	fba3 2301 	umull	r2, r3, r3, r1
 8003492:	095b      	lsrs	r3, r3, #5
 8003494:	2264      	movs	r2, #100	; 0x64
 8003496:	fb02 f303 	mul.w	r3, r2, r3
 800349a:	1acb      	subs	r3, r1, r3
 800349c:	00db      	lsls	r3, r3, #3
 800349e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80034a2:	4b36      	ldr	r3, [pc, #216]	; (800357c <UART_SetConfig+0x2d4>)
 80034a4:	fba3 2302 	umull	r2, r3, r3, r2
 80034a8:	095b      	lsrs	r3, r3, #5
 80034aa:	005b      	lsls	r3, r3, #1
 80034ac:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80034b0:	441c      	add	r4, r3
 80034b2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80034b6:	2200      	movs	r2, #0
 80034b8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80034bc:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80034c0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80034c4:	4642      	mov	r2, r8
 80034c6:	464b      	mov	r3, r9
 80034c8:	1891      	adds	r1, r2, r2
 80034ca:	63b9      	str	r1, [r7, #56]	; 0x38
 80034cc:	415b      	adcs	r3, r3
 80034ce:	63fb      	str	r3, [r7, #60]	; 0x3c
 80034d0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80034d4:	4641      	mov	r1, r8
 80034d6:	1851      	adds	r1, r2, r1
 80034d8:	6339      	str	r1, [r7, #48]	; 0x30
 80034da:	4649      	mov	r1, r9
 80034dc:	414b      	adcs	r3, r1
 80034de:	637b      	str	r3, [r7, #52]	; 0x34
 80034e0:	f04f 0200 	mov.w	r2, #0
 80034e4:	f04f 0300 	mov.w	r3, #0
 80034e8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80034ec:	4659      	mov	r1, fp
 80034ee:	00cb      	lsls	r3, r1, #3
 80034f0:	4651      	mov	r1, sl
 80034f2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80034f6:	4651      	mov	r1, sl
 80034f8:	00ca      	lsls	r2, r1, #3
 80034fa:	4610      	mov	r0, r2
 80034fc:	4619      	mov	r1, r3
 80034fe:	4603      	mov	r3, r0
 8003500:	4642      	mov	r2, r8
 8003502:	189b      	adds	r3, r3, r2
 8003504:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003508:	464b      	mov	r3, r9
 800350a:	460a      	mov	r2, r1
 800350c:	eb42 0303 	adc.w	r3, r2, r3
 8003510:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003514:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003518:	685b      	ldr	r3, [r3, #4]
 800351a:	2200      	movs	r2, #0
 800351c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003520:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003524:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003528:	460b      	mov	r3, r1
 800352a:	18db      	adds	r3, r3, r3
 800352c:	62bb      	str	r3, [r7, #40]	; 0x28
 800352e:	4613      	mov	r3, r2
 8003530:	eb42 0303 	adc.w	r3, r2, r3
 8003534:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003536:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800353a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800353e:	f7fc feaf 	bl	80002a0 <__aeabi_uldivmod>
 8003542:	4602      	mov	r2, r0
 8003544:	460b      	mov	r3, r1
 8003546:	4b0d      	ldr	r3, [pc, #52]	; (800357c <UART_SetConfig+0x2d4>)
 8003548:	fba3 1302 	umull	r1, r3, r3, r2
 800354c:	095b      	lsrs	r3, r3, #5
 800354e:	2164      	movs	r1, #100	; 0x64
 8003550:	fb01 f303 	mul.w	r3, r1, r3
 8003554:	1ad3      	subs	r3, r2, r3
 8003556:	00db      	lsls	r3, r3, #3
 8003558:	3332      	adds	r3, #50	; 0x32
 800355a:	4a08      	ldr	r2, [pc, #32]	; (800357c <UART_SetConfig+0x2d4>)
 800355c:	fba2 2303 	umull	r2, r3, r2, r3
 8003560:	095b      	lsrs	r3, r3, #5
 8003562:	f003 0207 	and.w	r2, r3, #7
 8003566:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	4422      	add	r2, r4
 800356e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003570:	e105      	b.n	800377e <UART_SetConfig+0x4d6>
 8003572:	bf00      	nop
 8003574:	40011000 	.word	0x40011000
 8003578:	40011400 	.word	0x40011400
 800357c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003580:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003584:	2200      	movs	r2, #0
 8003586:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800358a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800358e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003592:	4642      	mov	r2, r8
 8003594:	464b      	mov	r3, r9
 8003596:	1891      	adds	r1, r2, r2
 8003598:	6239      	str	r1, [r7, #32]
 800359a:	415b      	adcs	r3, r3
 800359c:	627b      	str	r3, [r7, #36]	; 0x24
 800359e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80035a2:	4641      	mov	r1, r8
 80035a4:	1854      	adds	r4, r2, r1
 80035a6:	4649      	mov	r1, r9
 80035a8:	eb43 0501 	adc.w	r5, r3, r1
 80035ac:	f04f 0200 	mov.w	r2, #0
 80035b0:	f04f 0300 	mov.w	r3, #0
 80035b4:	00eb      	lsls	r3, r5, #3
 80035b6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80035ba:	00e2      	lsls	r2, r4, #3
 80035bc:	4614      	mov	r4, r2
 80035be:	461d      	mov	r5, r3
 80035c0:	4643      	mov	r3, r8
 80035c2:	18e3      	adds	r3, r4, r3
 80035c4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80035c8:	464b      	mov	r3, r9
 80035ca:	eb45 0303 	adc.w	r3, r5, r3
 80035ce:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80035d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035d6:	685b      	ldr	r3, [r3, #4]
 80035d8:	2200      	movs	r2, #0
 80035da:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80035de:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80035e2:	f04f 0200 	mov.w	r2, #0
 80035e6:	f04f 0300 	mov.w	r3, #0
 80035ea:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80035ee:	4629      	mov	r1, r5
 80035f0:	008b      	lsls	r3, r1, #2
 80035f2:	4621      	mov	r1, r4
 80035f4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80035f8:	4621      	mov	r1, r4
 80035fa:	008a      	lsls	r2, r1, #2
 80035fc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003600:	f7fc fe4e 	bl	80002a0 <__aeabi_uldivmod>
 8003604:	4602      	mov	r2, r0
 8003606:	460b      	mov	r3, r1
 8003608:	4b60      	ldr	r3, [pc, #384]	; (800378c <UART_SetConfig+0x4e4>)
 800360a:	fba3 2302 	umull	r2, r3, r3, r2
 800360e:	095b      	lsrs	r3, r3, #5
 8003610:	011c      	lsls	r4, r3, #4
 8003612:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003616:	2200      	movs	r2, #0
 8003618:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800361c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003620:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003624:	4642      	mov	r2, r8
 8003626:	464b      	mov	r3, r9
 8003628:	1891      	adds	r1, r2, r2
 800362a:	61b9      	str	r1, [r7, #24]
 800362c:	415b      	adcs	r3, r3
 800362e:	61fb      	str	r3, [r7, #28]
 8003630:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003634:	4641      	mov	r1, r8
 8003636:	1851      	adds	r1, r2, r1
 8003638:	6139      	str	r1, [r7, #16]
 800363a:	4649      	mov	r1, r9
 800363c:	414b      	adcs	r3, r1
 800363e:	617b      	str	r3, [r7, #20]
 8003640:	f04f 0200 	mov.w	r2, #0
 8003644:	f04f 0300 	mov.w	r3, #0
 8003648:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800364c:	4659      	mov	r1, fp
 800364e:	00cb      	lsls	r3, r1, #3
 8003650:	4651      	mov	r1, sl
 8003652:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003656:	4651      	mov	r1, sl
 8003658:	00ca      	lsls	r2, r1, #3
 800365a:	4610      	mov	r0, r2
 800365c:	4619      	mov	r1, r3
 800365e:	4603      	mov	r3, r0
 8003660:	4642      	mov	r2, r8
 8003662:	189b      	adds	r3, r3, r2
 8003664:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003668:	464b      	mov	r3, r9
 800366a:	460a      	mov	r2, r1
 800366c:	eb42 0303 	adc.w	r3, r2, r3
 8003670:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003674:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003678:	685b      	ldr	r3, [r3, #4]
 800367a:	2200      	movs	r2, #0
 800367c:	67bb      	str	r3, [r7, #120]	; 0x78
 800367e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003680:	f04f 0200 	mov.w	r2, #0
 8003684:	f04f 0300 	mov.w	r3, #0
 8003688:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800368c:	4649      	mov	r1, r9
 800368e:	008b      	lsls	r3, r1, #2
 8003690:	4641      	mov	r1, r8
 8003692:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003696:	4641      	mov	r1, r8
 8003698:	008a      	lsls	r2, r1, #2
 800369a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800369e:	f7fc fdff 	bl	80002a0 <__aeabi_uldivmod>
 80036a2:	4602      	mov	r2, r0
 80036a4:	460b      	mov	r3, r1
 80036a6:	4b39      	ldr	r3, [pc, #228]	; (800378c <UART_SetConfig+0x4e4>)
 80036a8:	fba3 1302 	umull	r1, r3, r3, r2
 80036ac:	095b      	lsrs	r3, r3, #5
 80036ae:	2164      	movs	r1, #100	; 0x64
 80036b0:	fb01 f303 	mul.w	r3, r1, r3
 80036b4:	1ad3      	subs	r3, r2, r3
 80036b6:	011b      	lsls	r3, r3, #4
 80036b8:	3332      	adds	r3, #50	; 0x32
 80036ba:	4a34      	ldr	r2, [pc, #208]	; (800378c <UART_SetConfig+0x4e4>)
 80036bc:	fba2 2303 	umull	r2, r3, r2, r3
 80036c0:	095b      	lsrs	r3, r3, #5
 80036c2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80036c6:	441c      	add	r4, r3
 80036c8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80036cc:	2200      	movs	r2, #0
 80036ce:	673b      	str	r3, [r7, #112]	; 0x70
 80036d0:	677a      	str	r2, [r7, #116]	; 0x74
 80036d2:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80036d6:	4642      	mov	r2, r8
 80036d8:	464b      	mov	r3, r9
 80036da:	1891      	adds	r1, r2, r2
 80036dc:	60b9      	str	r1, [r7, #8]
 80036de:	415b      	adcs	r3, r3
 80036e0:	60fb      	str	r3, [r7, #12]
 80036e2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80036e6:	4641      	mov	r1, r8
 80036e8:	1851      	adds	r1, r2, r1
 80036ea:	6039      	str	r1, [r7, #0]
 80036ec:	4649      	mov	r1, r9
 80036ee:	414b      	adcs	r3, r1
 80036f0:	607b      	str	r3, [r7, #4]
 80036f2:	f04f 0200 	mov.w	r2, #0
 80036f6:	f04f 0300 	mov.w	r3, #0
 80036fa:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80036fe:	4659      	mov	r1, fp
 8003700:	00cb      	lsls	r3, r1, #3
 8003702:	4651      	mov	r1, sl
 8003704:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003708:	4651      	mov	r1, sl
 800370a:	00ca      	lsls	r2, r1, #3
 800370c:	4610      	mov	r0, r2
 800370e:	4619      	mov	r1, r3
 8003710:	4603      	mov	r3, r0
 8003712:	4642      	mov	r2, r8
 8003714:	189b      	adds	r3, r3, r2
 8003716:	66bb      	str	r3, [r7, #104]	; 0x68
 8003718:	464b      	mov	r3, r9
 800371a:	460a      	mov	r2, r1
 800371c:	eb42 0303 	adc.w	r3, r2, r3
 8003720:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003722:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003726:	685b      	ldr	r3, [r3, #4]
 8003728:	2200      	movs	r2, #0
 800372a:	663b      	str	r3, [r7, #96]	; 0x60
 800372c:	667a      	str	r2, [r7, #100]	; 0x64
 800372e:	f04f 0200 	mov.w	r2, #0
 8003732:	f04f 0300 	mov.w	r3, #0
 8003736:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800373a:	4649      	mov	r1, r9
 800373c:	008b      	lsls	r3, r1, #2
 800373e:	4641      	mov	r1, r8
 8003740:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003744:	4641      	mov	r1, r8
 8003746:	008a      	lsls	r2, r1, #2
 8003748:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800374c:	f7fc fda8 	bl	80002a0 <__aeabi_uldivmod>
 8003750:	4602      	mov	r2, r0
 8003752:	460b      	mov	r3, r1
 8003754:	4b0d      	ldr	r3, [pc, #52]	; (800378c <UART_SetConfig+0x4e4>)
 8003756:	fba3 1302 	umull	r1, r3, r3, r2
 800375a:	095b      	lsrs	r3, r3, #5
 800375c:	2164      	movs	r1, #100	; 0x64
 800375e:	fb01 f303 	mul.w	r3, r1, r3
 8003762:	1ad3      	subs	r3, r2, r3
 8003764:	011b      	lsls	r3, r3, #4
 8003766:	3332      	adds	r3, #50	; 0x32
 8003768:	4a08      	ldr	r2, [pc, #32]	; (800378c <UART_SetConfig+0x4e4>)
 800376a:	fba2 2303 	umull	r2, r3, r2, r3
 800376e:	095b      	lsrs	r3, r3, #5
 8003770:	f003 020f 	and.w	r2, r3, #15
 8003774:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	4422      	add	r2, r4
 800377c:	609a      	str	r2, [r3, #8]
}
 800377e:	bf00      	nop
 8003780:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003784:	46bd      	mov	sp, r7
 8003786:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800378a:	bf00      	nop
 800378c:	51eb851f 	.word	0x51eb851f

08003790 <main>:
/**
 * @brief  Main program
 * @param  None
 * @retval None
 */
int main(void) {
 8003790:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003794:	b0b4      	sub	sp, #208	; 0xd0
 8003796:	af08      	add	r7, sp, #32
	 handled in milliseconds basis.
	 - Set NVIC Group Priority to 4
	 - Low Level Initialization
	 */
	PN532_response_t res;
	HAL_Init();
 8003798:	f7fd fbb2 	bl	8000f00 <HAL_Init>

	/* Configure the system clock to 180 MHz */
	SystemClock_Config();
 800379c:	f000 f956 	bl	8003a4c <SystemClock_Config>

	uartInit();
 80037a0:	f7fc ff00 	bl	80005a4 <uartInit>

	uartSendString(pn532Driver_I2C_init()? "Init Success \n" : "Init Failure \n");
 80037a4:	f7fd f8b4 	bl	8000910 <pn532Driver_I2C_init>
 80037a8:	4603      	mov	r3, r0
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d001      	beq.n	80037b2 <main+0x22>
 80037ae:	4b80      	ldr	r3, [pc, #512]	; (80039b0 <main+0x220>)
 80037b0:	e000      	b.n	80037b4 <main+0x24>
 80037b2:	4b80      	ldr	r3, [pc, #512]	; (80039b4 <main+0x224>)
 80037b4:	4618      	mov	r0, r3
 80037b6:	f7fc ff1f 	bl	80005f8 <uartSendString>

	PN532_firmware_t firmwareBuffer;
	res = pn532Driver_I2C_getFirmware(&firmwareBuffer);
 80037ba:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 80037be:	4618      	mov	r0, r3
 80037c0:	f7fd f8e2 	bl	8000988 <pn532Driver_I2C_getFirmware>
 80037c4:	4603      	mov	r3, r0
 80037c6:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
	switch(res) {
 80037ca:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 80037ce:	2b04      	cmp	r3, #4
 80037d0:	d831      	bhi.n	8003836 <main+0xa6>
 80037d2:	a201      	add	r2, pc, #4	; (adr r2, 80037d8 <main+0x48>)
 80037d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037d8:	08003805 	.word	0x08003805
 80037dc:	080037ed 	.word	0x080037ed
 80037e0:	080037f5 	.word	0x080037f5
 80037e4:	08003837 	.word	0x08003837
 80037e8:	080037fd 	.word	0x080037fd
		case PN532_CMD_ERROR: uartSendString("CMD ERROR \n"); break;
 80037ec:	4872      	ldr	r0, [pc, #456]	; (80039b8 <main+0x228>)
 80037ee:	f7fc ff03 	bl	80005f8 <uartSendString>
 80037f2:	e023      	b.n	800383c <main+0xac>
		case PN532_ACK_NOT_RECEIVED: uartSendString("ACK ERROR \n"); break;
 80037f4:	4871      	ldr	r0, [pc, #452]	; (80039bc <main+0x22c>)
 80037f6:	f7fc feff 	bl	80005f8 <uartSendString>
 80037fa:	e01f      	b.n	800383c <main+0xac>
		case PN532_RESPONSE_ERROR: uartSendString("RESPONSE ERROR \n"); break;
 80037fc:	4870      	ldr	r0, [pc, #448]	; (80039c0 <main+0x230>)
 80037fe:	f7fc fefb 	bl	80005f8 <uartSendString>
 8003802:	e01b      	b.n	800383c <main+0xac>
		case PN532_OK: {
			char firmware_string[50];
			sprintf(firmware_string, "Firmware- IC: %02X , ver: %02X, rev: %02X, supp: %02X \n", firmwareBuffer.IC,firmwareBuffer.version,firmwareBuffer.revision,firmwareBuffer.support);
 8003804:	f897 30a8 	ldrb.w	r3, [r7, #168]	; 0xa8
 8003808:	4619      	mov	r1, r3
 800380a:	f897 30a9 	ldrb.w	r3, [r7, #169]	; 0xa9
 800380e:	461c      	mov	r4, r3
 8003810:	f897 30aa 	ldrb.w	r3, [r7, #170]	; 0xaa
 8003814:	f897 20ab 	ldrb.w	r2, [r7, #171]	; 0xab
 8003818:	f107 0038 	add.w	r0, r7, #56	; 0x38
 800381c:	9201      	str	r2, [sp, #4]
 800381e:	9300      	str	r3, [sp, #0]
 8003820:	4623      	mov	r3, r4
 8003822:	460a      	mov	r2, r1
 8003824:	4967      	ldr	r1, [pc, #412]	; (80039c4 <main+0x234>)
 8003826:	f000 fdeb 	bl	8004400 <siprintf>
			uartSendString(firmware_string);
 800382a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800382e:	4618      	mov	r0, r3
 8003830:	f7fc fee2 	bl	80005f8 <uartSendString>
			break;
 8003834:	e002      	b.n	800383c <main+0xac>
		}
		default: uartSendString("UNKNOWN ERROR");
 8003836:	4864      	ldr	r0, [pc, #400]	; (80039c8 <main+0x238>)
 8003838:	f7fc fede 	bl	80005f8 <uartSendString>
	}
	HAL_Delay(10);
 800383c:	200a      	movs	r0, #10
 800383e:	f7fd fbcb 	bl	8000fd8 <HAL_Delay>
	res = pn532Driver_I2C_configureSAM();
 8003842:	f7fd f909 	bl	8000a58 <pn532Driver_I2C_configureSAM>
 8003846:	4603      	mov	r3, r0
 8003848:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
	switch(res) {
 800384c:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 8003850:	2b04      	cmp	r3, #4
 8003852:	d81d      	bhi.n	8003890 <main+0x100>
 8003854:	a201      	add	r2, pc, #4	; (adr r2, 800385c <main+0xcc>)
 8003856:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800385a:	bf00      	nop
 800385c:	08003889 	.word	0x08003889
 8003860:	08003871 	.word	0x08003871
 8003864:	08003879 	.word	0x08003879
 8003868:	08003891 	.word	0x08003891
 800386c:	08003881 	.word	0x08003881
		case PN532_CMD_ERROR: uartSendString("CMD ERROR \n"); break;
 8003870:	4851      	ldr	r0, [pc, #324]	; (80039b8 <main+0x228>)
 8003872:	f7fc fec1 	bl	80005f8 <uartSendString>
 8003876:	e00f      	b.n	8003898 <main+0x108>
		case PN532_ACK_NOT_RECEIVED: uartSendString("ACK ERROR \n"); break;
 8003878:	4850      	ldr	r0, [pc, #320]	; (80039bc <main+0x22c>)
 800387a:	f7fc febd 	bl	80005f8 <uartSendString>
 800387e:	e00b      	b.n	8003898 <main+0x108>
		case PN532_RESPONSE_ERROR: uartSendString("RESPONSE ERROR \n"); break;
 8003880:	484f      	ldr	r0, [pc, #316]	; (80039c0 <main+0x230>)
 8003882:	f7fc feb9 	bl	80005f8 <uartSendString>
 8003886:	e007      	b.n	8003898 <main+0x108>
		case PN532_OK: uartSendString("SAM SUCCESFULLY CONFIGURED \n"); break;
 8003888:	4850      	ldr	r0, [pc, #320]	; (80039cc <main+0x23c>)
 800388a:	f7fc feb5 	bl	80005f8 <uartSendString>
 800388e:	e003      	b.n	8003898 <main+0x108>
		default: uartSendString("UNKNOWN ERROR"); break;
 8003890:	484d      	ldr	r0, [pc, #308]	; (80039c8 <main+0x238>)
 8003892:	f7fc feb1 	bl	80005f8 <uartSendString>
 8003896:	bf00      	nop
	}
	HAL_Delay(10);
 8003898:	200a      	movs	r0, #10
 800389a:	f7fd fb9d 	bl	8000fd8 <HAL_Delay>
	/* Infinite loop */
	PN532_target_t targetBuffer;
	while (1) {
		res = pn532Driver_I2C_listPassiveTarget(&targetBuffer);
 800389e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80038a2:	4618      	mov	r0, r3
 80038a4:	f7fd f92c 	bl	8000b00 <pn532Driver_I2C_listPassiveTarget>
 80038a8:	4603      	mov	r3, r0
 80038aa:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
		switch(res) {
 80038ae:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 80038b2:	2b06      	cmp	r3, #6
 80038b4:	d873      	bhi.n	800399e <main+0x20e>
 80038b6:	a201      	add	r2, pc, #4	; (adr r2, 80038bc <main+0x12c>)
 80038b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038bc:	080038f9 	.word	0x080038f9
 80038c0:	080038d9 	.word	0x080038d9
 80038c4:	080038e1 	.word	0x080038e1
 80038c8:	0800399f 	.word	0x0800399f
 80038cc:	080038e9 	.word	0x080038e9
 80038d0:	0800399f 	.word	0x0800399f
 80038d4:	080038f1 	.word	0x080038f1
			case PN532_CMD_ERROR: uartSendString("CMD ERROR \n"); break;
 80038d8:	4837      	ldr	r0, [pc, #220]	; (80039b8 <main+0x228>)
 80038da:	f7fc fe8d 	bl	80005f8 <uartSendString>
 80038de:	e062      	b.n	80039a6 <main+0x216>
			case PN532_ACK_NOT_RECEIVED: uartSendString("ACK ERROR \n"); break;
 80038e0:	4836      	ldr	r0, [pc, #216]	; (80039bc <main+0x22c>)
 80038e2:	f7fc fe89 	bl	80005f8 <uartSendString>
 80038e6:	e05e      	b.n	80039a6 <main+0x216>
			case PN532_RESPONSE_ERROR: uartSendString("RESPONSE ERROR \n"); break;
 80038e8:	4835      	ldr	r0, [pc, #212]	; (80039c0 <main+0x230>)
 80038ea:	f7fc fe85 	bl	80005f8 <uartSendString>
 80038ee:	e05a      	b.n	80039a6 <main+0x216>
			case PN532_EMPTY: uartSendString("."); break;
 80038f0:	4837      	ldr	r0, [pc, #220]	; (80039d0 <main+0x240>)
 80038f2:	f7fc fe81 	bl	80005f8 <uartSendString>
 80038f6:	e056      	b.n	80039a6 <main+0x216>
			case PN532_OK: {
				uartSendString("\nCARD FOUND\n");
 80038f8:	4836      	ldr	r0, [pc, #216]	; (80039d4 <main+0x244>)
 80038fa:	f7fc fe7d 	bl	80005f8 <uartSendString>
				char target_string[50];
				sprintf(target_string, "Target- ln: %02X , SENS_RES: %02X %02X, SEL_RES: %02X, NFCID_Length: %02X, NFCID: %02X %02X %02X %02X \n",
						targetBuffer.logical_number,
 80038fe:	f897 309c 	ldrb.w	r3, [r7, #156]	; 0x9c
				sprintf(target_string, "Target- ln: %02X , SENS_RES: %02X %02X, SEL_RES: %02X, NFCID_Length: %02X, NFCID: %02X %02X %02X %02X \n",
 8003902:	469c      	mov	ip, r3
						targetBuffer.SENS_RES[0],
 8003904:	f897 309d 	ldrb.w	r3, [r7, #157]	; 0x9d
				sprintf(target_string, "Target- ln: %02X , SENS_RES: %02X %02X, SEL_RES: %02X, NFCID_Length: %02X, NFCID: %02X %02X %02X %02X \n",
 8003908:	469e      	mov	lr, r3
						targetBuffer.SENS_RES[1],
 800390a:	f897 309e 	ldrb.w	r3, [r7, #158]	; 0x9e
						targetBuffer.SEL_RES,
 800390e:	f897 209f 	ldrb.w	r2, [r7, #159]	; 0x9f
						targetBuffer.NFCID_length,
 8003912:	f897 10a0 	ldrb.w	r1, [r7, #160]	; 0xa0
						targetBuffer.NFCID[0],
 8003916:	f897 00a1 	ldrb.w	r0, [r7, #161]	; 0xa1
				sprintf(target_string, "Target- ln: %02X , SENS_RES: %02X %02X, SEL_RES: %02X, NFCID_Length: %02X, NFCID: %02X %02X %02X %02X \n",
 800391a:	4604      	mov	r4, r0
						targetBuffer.NFCID[1],
 800391c:	f897 00a2 	ldrb.w	r0, [r7, #162]	; 0xa2
				sprintf(target_string, "Target- ln: %02X , SENS_RES: %02X %02X, SEL_RES: %02X, NFCID_Length: %02X, NFCID: %02X %02X %02X %02X \n",
 8003920:	4605      	mov	r5, r0
						targetBuffer.NFCID[2],
 8003922:	f897 00a3 	ldrb.w	r0, [r7, #163]	; 0xa3
				sprintf(target_string, "Target- ln: %02X , SENS_RES: %02X %02X, SEL_RES: %02X, NFCID_Length: %02X, NFCID: %02X %02X %02X %02X \n",
 8003926:	4606      	mov	r6, r0
						targetBuffer.NFCID[3]
 8003928:	f897 00a4 	ldrb.w	r0, [r7, #164]	; 0xa4
				sprintf(target_string, "Target- ln: %02X , SENS_RES: %02X %02X, SEL_RES: %02X, NFCID_Length: %02X, NFCID: %02X %02X %02X %02X \n",
 800392c:	f107 0804 	add.w	r8, r7, #4
 8003930:	9006      	str	r0, [sp, #24]
 8003932:	9605      	str	r6, [sp, #20]
 8003934:	9504      	str	r5, [sp, #16]
 8003936:	9403      	str	r4, [sp, #12]
 8003938:	9102      	str	r1, [sp, #8]
 800393a:	9201      	str	r2, [sp, #4]
 800393c:	9300      	str	r3, [sp, #0]
 800393e:	4673      	mov	r3, lr
 8003940:	4662      	mov	r2, ip
 8003942:	4925      	ldr	r1, [pc, #148]	; (80039d8 <main+0x248>)
 8003944:	4640      	mov	r0, r8
 8003946:	f000 fd5b 	bl	8004400 <siprintf>
						);
				uartSendString(target_string);
 800394a:	1d3b      	adds	r3, r7, #4
 800394c:	4618      	mov	r0, r3
 800394e:	f7fc fe53 	bl	80005f8 <uartSendString>
				uint8_t dataBuffer[100];
				HAL_Delay(1);
 8003952:	2001      	movs	r0, #1
 8003954:	f7fd fb40 	bl	8000fd8 <HAL_Delay>
				res = pn532Driver_I2C_readMifareData(dataBuffer, sizeof(dataBuffer), targetBuffer);
 8003958:	f107 0038 	add.w	r0, r7, #56	; 0x38
 800395c:	f897 30a4 	ldrb.w	r3, [r7, #164]	; 0xa4
 8003960:	f88d 3000 	strb.w	r3, [sp]
 8003964:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8003968:	cb0c      	ldmia	r3, {r2, r3}
 800396a:	2164      	movs	r1, #100	; 0x64
 800396c:	f7fd f92e 	bl	8000bcc <pn532Driver_I2C_readMifareData>
 8003970:	4603      	mov	r3, r0
 8003972:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
				switch(res){
 8003976:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 800397a:	2b00      	cmp	r3, #0
 800397c:	d10a      	bne.n	8003994 <main+0x204>
				case PN532_OK: uartSendString(hex_string(dataBuffer, sizeof(dataBuffer))); break;
 800397e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8003982:	2164      	movs	r1, #100	; 0x64
 8003984:	4618      	mov	r0, r3
 8003986:	f000 f82b 	bl	80039e0 <hex_string>
 800398a:	4603      	mov	r3, r0
 800398c:	4618      	mov	r0, r3
 800398e:	f7fc fe33 	bl	80005f8 <uartSendString>
 8003992:	e003      	b.n	800399c <main+0x20c>
				default: uartSendString("ERROR"); break;
 8003994:	4811      	ldr	r0, [pc, #68]	; (80039dc <main+0x24c>)
 8003996:	f7fc fe2f 	bl	80005f8 <uartSendString>
 800399a:	bf00      	nop
				}

				break;
 800399c:	e003      	b.n	80039a6 <main+0x216>
			}
			default: uartSendString("UNKNOWN ERROR"); break;
 800399e:	480a      	ldr	r0, [pc, #40]	; (80039c8 <main+0x238>)
 80039a0:	f7fc fe2a 	bl	80005f8 <uartSendString>
 80039a4:	bf00      	nop
		}
		HAL_Delay(1000);
 80039a6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80039aa:	f7fd fb15 	bl	8000fd8 <HAL_Delay>
		res = pn532Driver_I2C_listPassiveTarget(&targetBuffer);
 80039ae:	e776      	b.n	800389e <main+0x10e>
 80039b0:	08004fcc 	.word	0x08004fcc
 80039b4:	08004fdc 	.word	0x08004fdc
 80039b8:	08004fec 	.word	0x08004fec
 80039bc:	08004ff8 	.word	0x08004ff8
 80039c0:	08005004 	.word	0x08005004
 80039c4:	08005018 	.word	0x08005018
 80039c8:	08005050 	.word	0x08005050
 80039cc:	08005060 	.word	0x08005060
 80039d0:	08005080 	.word	0x08005080
 80039d4:	08005084 	.word	0x08005084
 80039d8:	08005094 	.word	0x08005094
 80039dc:	080050fc 	.word	0x080050fc

080039e0 <hex_string>:

	}

}

static char* hex_string(uint8_t *array, size_t length) {
 80039e0:	b580      	push	{r7, lr}
 80039e2:	b084      	sub	sp, #16
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	6078      	str	r0, [r7, #4]
 80039e8:	6039      	str	r1, [r7, #0]
    char *result = (char*)malloc(length*3+1); // Allocate space for the string
 80039ea:	683a      	ldr	r2, [r7, #0]
 80039ec:	4613      	mov	r3, r2
 80039ee:	005b      	lsls	r3, r3, #1
 80039f0:	4413      	add	r3, r2
 80039f2:	3301      	adds	r3, #1
 80039f4:	4618      	mov	r0, r3
 80039f6:	f000 f915 	bl	8003c24 <malloc>
 80039fa:	4603      	mov	r3, r0
 80039fc:	60bb      	str	r3, [r7, #8]
    for (size_t i = 0; i < length; i++) {
 80039fe:	2300      	movs	r3, #0
 8003a00:	60fb      	str	r3, [r7, #12]
 8003a02:	e010      	b.n	8003a26 <hex_string+0x46>
        sprintf(result+i*3, "%02X ", array[i]); // Format the hex value and store it in the string
 8003a04:	68fa      	ldr	r2, [r7, #12]
 8003a06:	4613      	mov	r3, r2
 8003a08:	005b      	lsls	r3, r3, #1
 8003a0a:	4413      	add	r3, r2
 8003a0c:	68ba      	ldr	r2, [r7, #8]
 8003a0e:	18d0      	adds	r0, r2, r3
 8003a10:	687a      	ldr	r2, [r7, #4]
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	4413      	add	r3, r2
 8003a16:	781b      	ldrb	r3, [r3, #0]
 8003a18:	461a      	mov	r2, r3
 8003a1a:	490b      	ldr	r1, [pc, #44]	; (8003a48 <hex_string+0x68>)
 8003a1c:	f000 fcf0 	bl	8004400 <siprintf>
    for (size_t i = 0; i < length; i++) {
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	3301      	adds	r3, #1
 8003a24:	60fb      	str	r3, [r7, #12]
 8003a26:	68fa      	ldr	r2, [r7, #12]
 8003a28:	683b      	ldr	r3, [r7, #0]
 8003a2a:	429a      	cmp	r2, r3
 8003a2c:	d3ea      	bcc.n	8003a04 <hex_string+0x24>
    }
    result[length*3] = '\0'; // Add null-terminator to the end of the string
 8003a2e:	683a      	ldr	r2, [r7, #0]
 8003a30:	4613      	mov	r3, r2
 8003a32:	005b      	lsls	r3, r3, #1
 8003a34:	4413      	add	r3, r2
 8003a36:	68ba      	ldr	r2, [r7, #8]
 8003a38:	4413      	add	r3, r2
 8003a3a:	2200      	movs	r2, #0
 8003a3c:	701a      	strb	r2, [r3, #0]
    return result;
 8003a3e:	68bb      	ldr	r3, [r7, #8]
}
 8003a40:	4618      	mov	r0, r3
 8003a42:	3710      	adds	r7, #16
 8003a44:	46bd      	mov	sp, r7
 8003a46:	bd80      	pop	{r7, pc}
 8003a48:	08005104 	.word	0x08005104

08003a4c <SystemClock_Config>:
 *            Main regulator output voltage  = Scale1 mode
 *            Flash Latency(WS)              = 5
 * @param  None
 * @retval None
 */
static void SystemClock_Config(void) {
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	b094      	sub	sp, #80	; 0x50
 8003a50:	af00      	add	r7, sp, #0
	RCC_ClkInitTypeDef RCC_ClkInitStruct;
	RCC_OscInitTypeDef RCC_OscInitStruct;

	/* Enable Power Control clock */
	__HAL_RCC_PWR_CLK_ENABLE();
 8003a52:	2300      	movs	r3, #0
 8003a54:	60bb      	str	r3, [r7, #8]
 8003a56:	4b2c      	ldr	r3, [pc, #176]	; (8003b08 <SystemClock_Config+0xbc>)
 8003a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a5a:	4a2b      	ldr	r2, [pc, #172]	; (8003b08 <SystemClock_Config+0xbc>)
 8003a5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a60:	6413      	str	r3, [r2, #64]	; 0x40
 8003a62:	4b29      	ldr	r3, [pc, #164]	; (8003b08 <SystemClock_Config+0xbc>)
 8003a64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a6a:	60bb      	str	r3, [r7, #8]
 8003a6c:	68bb      	ldr	r3, [r7, #8]

	/* The voltage scaling allows optimizing the power consumption when the device is
	 clocked below the maximum system frequency, to update the voltage scaling value
	 regarding system frequency refer to product datasheet.  */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003a6e:	2300      	movs	r3, #0
 8003a70:	607b      	str	r3, [r7, #4]
 8003a72:	4b26      	ldr	r3, [pc, #152]	; (8003b0c <SystemClock_Config+0xc0>)
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	4a25      	ldr	r2, [pc, #148]	; (8003b0c <SystemClock_Config+0xc0>)
 8003a78:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003a7c:	6013      	str	r3, [r2, #0]
 8003a7e:	4b23      	ldr	r3, [pc, #140]	; (8003b0c <SystemClock_Config+0xc0>)
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003a86:	607b      	str	r3, [r7, #4]
 8003a88:	687b      	ldr	r3, [r7, #4]

	/* Enable HSE Oscillator and activate PLL with HSE as source */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003a8a:	2301      	movs	r3, #1
 8003a8c:	60fb      	str	r3, [r7, #12]
	RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8003a8e:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8003a92:	613b      	str	r3, [r7, #16]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003a94:	2302      	movs	r3, #2
 8003a96:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003a98:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003a9c:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLM = 8;
 8003a9e:	2308      	movs	r3, #8
 8003aa0:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.PLL.PLLN = 360;
 8003aa2:	f44f 73b4 	mov.w	r3, #360	; 0x168
 8003aa6:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003aa8:	2302      	movs	r3, #2
 8003aaa:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLQ = 7;
 8003aac:	2307      	movs	r3, #7
 8003aae:	63bb      	str	r3, [r7, #56]	; 0x38
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8003ab0:	f107 030c 	add.w	r3, r7, #12
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	f7fe fe11 	bl	80026dc <HAL_RCC_OscConfig>
 8003aba:	4603      	mov	r3, r0
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d001      	beq.n	8003ac4 <SystemClock_Config+0x78>
		/* Initialization Error */
		Error_Handler();
 8003ac0:	f000 f826 	bl	8003b10 <Error_Handler>
	}

	if (HAL_PWREx_EnableOverDrive() != HAL_OK) {
 8003ac4:	f7fe fdba 	bl	800263c <HAL_PWREx_EnableOverDrive>
 8003ac8:	4603      	mov	r3, r0
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d001      	beq.n	8003ad2 <SystemClock_Config+0x86>
		/* Initialization Error */
		Error_Handler();
 8003ace:	f000 f81f 	bl	8003b10 <Error_Handler>
	}

	/* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2
	 clocks dividers */
	RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK
 8003ad2:	230f      	movs	r3, #15
 8003ad4:	63fb      	str	r3, [r7, #60]	; 0x3c
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003ad6:	2302      	movs	r3, #2
 8003ad8:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003ada:	2300      	movs	r3, #0
 8003adc:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8003ade:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8003ae2:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8003ae4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003ae8:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK) {
 8003aea:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003aee:	2105      	movs	r1, #5
 8003af0:	4618      	mov	r0, r3
 8003af2:	f7ff f86b 	bl	8002bcc <HAL_RCC_ClockConfig>
 8003af6:	4603      	mov	r3, r0
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d001      	beq.n	8003b00 <SystemClock_Config+0xb4>
		/* Initialization Error */
		Error_Handler();
 8003afc:	f000 f808 	bl	8003b10 <Error_Handler>
	}
}
 8003b00:	bf00      	nop
 8003b02:	3750      	adds	r7, #80	; 0x50
 8003b04:	46bd      	mov	sp, r7
 8003b06:	bd80      	pop	{r7, pc}
 8003b08:	40023800 	.word	0x40023800
 8003b0c:	40007000 	.word	0x40007000

08003b10 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @param  None
 * @retval None
 */
static void Error_Handler(void) {
 8003b10:	b580      	push	{r7, lr}
 8003b12:	af00      	add	r7, sp, #0
	/* Turn LED2 on */
	BSP_LED_On(LED2);
 8003b14:	2001      	movs	r0, #1
 8003b16:	f7fc fd93 	bl	8000640 <BSP_LED_On>
	while (1) {
 8003b1a:	e7fe      	b.n	8003b1a <Error_Handler+0xa>

08003b1c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8003b1c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003b54 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003b20:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8003b22:	e003      	b.n	8003b2c <LoopCopyDataInit>

08003b24 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003b24:	4b0c      	ldr	r3, [pc, #48]	; (8003b58 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8003b26:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003b28:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8003b2a:	3104      	adds	r1, #4

08003b2c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003b2c:	480b      	ldr	r0, [pc, #44]	; (8003b5c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8003b2e:	4b0c      	ldr	r3, [pc, #48]	; (8003b60 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003b30:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8003b32:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003b34:	d3f6      	bcc.n	8003b24 <CopyDataInit>
  ldr  r2, =_sbss
 8003b36:	4a0b      	ldr	r2, [pc, #44]	; (8003b64 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8003b38:	e002      	b.n	8003b40 <LoopFillZerobss>

08003b3a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8003b3a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003b3c:	f842 3b04 	str.w	r3, [r2], #4

08003b40 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003b40:	4b09      	ldr	r3, [pc, #36]	; (8003b68 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8003b42:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003b44:	d3f9      	bcc.n	8003b3a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003b46:	f7fc fd95 	bl	8000674 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003b4a:	f000 f847 	bl	8003bdc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003b4e:	f7ff fe1f 	bl	8003790 <main>
  bx  lr    
 8003b52:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8003b54:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8003b58:	08005234 	.word	0x08005234
  ldr  r0, =_sdata
 8003b5c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003b60:	200000b4 	.word	0x200000b4
  ldr  r2, =_sbss
 8003b64:	200000b4 	.word	0x200000b4
  ldr  r3, = _ebss
 8003b68:	20000184 	.word	0x20000184

08003b6c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003b6c:	e7fe      	b.n	8003b6c <ADC_IRQHandler>
	...

08003b70 <__assert_func>:
 8003b70:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8003b72:	4614      	mov	r4, r2
 8003b74:	461a      	mov	r2, r3
 8003b76:	4b09      	ldr	r3, [pc, #36]	; (8003b9c <__assert_func+0x2c>)
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	4605      	mov	r5, r0
 8003b7c:	68d8      	ldr	r0, [r3, #12]
 8003b7e:	b14c      	cbz	r4, 8003b94 <__assert_func+0x24>
 8003b80:	4b07      	ldr	r3, [pc, #28]	; (8003ba0 <__assert_func+0x30>)
 8003b82:	9100      	str	r1, [sp, #0]
 8003b84:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8003b88:	4906      	ldr	r1, [pc, #24]	; (8003ba4 <__assert_func+0x34>)
 8003b8a:	462b      	mov	r3, r5
 8003b8c:	f000 f814 	bl	8003bb8 <fiprintf>
 8003b90:	f000 fd16 	bl	80045c0 <abort>
 8003b94:	4b04      	ldr	r3, [pc, #16]	; (8003ba8 <__assert_func+0x38>)
 8003b96:	461c      	mov	r4, r3
 8003b98:	e7f3      	b.n	8003b82 <__assert_func+0x12>
 8003b9a:	bf00      	nop
 8003b9c:	20000050 	.word	0x20000050
 8003ba0:	0800514f 	.word	0x0800514f
 8003ba4:	0800515c 	.word	0x0800515c
 8003ba8:	0800518a 	.word	0x0800518a

08003bac <__errno>:
 8003bac:	4b01      	ldr	r3, [pc, #4]	; (8003bb4 <__errno+0x8>)
 8003bae:	6818      	ldr	r0, [r3, #0]
 8003bb0:	4770      	bx	lr
 8003bb2:	bf00      	nop
 8003bb4:	20000050 	.word	0x20000050

08003bb8 <fiprintf>:
 8003bb8:	b40e      	push	{r1, r2, r3}
 8003bba:	b503      	push	{r0, r1, lr}
 8003bbc:	4601      	mov	r1, r0
 8003bbe:	ab03      	add	r3, sp, #12
 8003bc0:	4805      	ldr	r0, [pc, #20]	; (8003bd8 <fiprintf+0x20>)
 8003bc2:	f853 2b04 	ldr.w	r2, [r3], #4
 8003bc6:	6800      	ldr	r0, [r0, #0]
 8003bc8:	9301      	str	r3, [sp, #4]
 8003bca:	f000 f945 	bl	8003e58 <_vfiprintf_r>
 8003bce:	b002      	add	sp, #8
 8003bd0:	f85d eb04 	ldr.w	lr, [sp], #4
 8003bd4:	b003      	add	sp, #12
 8003bd6:	4770      	bx	lr
 8003bd8:	20000050 	.word	0x20000050

08003bdc <__libc_init_array>:
 8003bdc:	b570      	push	{r4, r5, r6, lr}
 8003bde:	4d0d      	ldr	r5, [pc, #52]	; (8003c14 <__libc_init_array+0x38>)
 8003be0:	4c0d      	ldr	r4, [pc, #52]	; (8003c18 <__libc_init_array+0x3c>)
 8003be2:	1b64      	subs	r4, r4, r5
 8003be4:	10a4      	asrs	r4, r4, #2
 8003be6:	2600      	movs	r6, #0
 8003be8:	42a6      	cmp	r6, r4
 8003bea:	d109      	bne.n	8003c00 <__libc_init_array+0x24>
 8003bec:	4d0b      	ldr	r5, [pc, #44]	; (8003c1c <__libc_init_array+0x40>)
 8003bee:	4c0c      	ldr	r4, [pc, #48]	; (8003c20 <__libc_init_array+0x44>)
 8003bf0:	f001 f9c4 	bl	8004f7c <_init>
 8003bf4:	1b64      	subs	r4, r4, r5
 8003bf6:	10a4      	asrs	r4, r4, #2
 8003bf8:	2600      	movs	r6, #0
 8003bfa:	42a6      	cmp	r6, r4
 8003bfc:	d105      	bne.n	8003c0a <__libc_init_array+0x2e>
 8003bfe:	bd70      	pop	{r4, r5, r6, pc}
 8003c00:	f855 3b04 	ldr.w	r3, [r5], #4
 8003c04:	4798      	blx	r3
 8003c06:	3601      	adds	r6, #1
 8003c08:	e7ee      	b.n	8003be8 <__libc_init_array+0xc>
 8003c0a:	f855 3b04 	ldr.w	r3, [r5], #4
 8003c0e:	4798      	blx	r3
 8003c10:	3601      	adds	r6, #1
 8003c12:	e7f2      	b.n	8003bfa <__libc_init_array+0x1e>
 8003c14:	0800522c 	.word	0x0800522c
 8003c18:	0800522c 	.word	0x0800522c
 8003c1c:	0800522c 	.word	0x0800522c
 8003c20:	08005230 	.word	0x08005230

08003c24 <malloc>:
 8003c24:	4b02      	ldr	r3, [pc, #8]	; (8003c30 <malloc+0xc>)
 8003c26:	4601      	mov	r1, r0
 8003c28:	6818      	ldr	r0, [r3, #0]
 8003c2a:	f000 b877 	b.w	8003d1c <_malloc_r>
 8003c2e:	bf00      	nop
 8003c30:	20000050 	.word	0x20000050

08003c34 <memset>:
 8003c34:	4402      	add	r2, r0
 8003c36:	4603      	mov	r3, r0
 8003c38:	4293      	cmp	r3, r2
 8003c3a:	d100      	bne.n	8003c3e <memset+0xa>
 8003c3c:	4770      	bx	lr
 8003c3e:	f803 1b01 	strb.w	r1, [r3], #1
 8003c42:	e7f9      	b.n	8003c38 <memset+0x4>

08003c44 <_free_r>:
 8003c44:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003c46:	2900      	cmp	r1, #0
 8003c48:	d044      	beq.n	8003cd4 <_free_r+0x90>
 8003c4a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003c4e:	9001      	str	r0, [sp, #4]
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	f1a1 0404 	sub.w	r4, r1, #4
 8003c56:	bfb8      	it	lt
 8003c58:	18e4      	addlt	r4, r4, r3
 8003c5a:	f000 ff01 	bl	8004a60 <__malloc_lock>
 8003c5e:	4a1e      	ldr	r2, [pc, #120]	; (8003cd8 <_free_r+0x94>)
 8003c60:	9801      	ldr	r0, [sp, #4]
 8003c62:	6813      	ldr	r3, [r2, #0]
 8003c64:	b933      	cbnz	r3, 8003c74 <_free_r+0x30>
 8003c66:	6063      	str	r3, [r4, #4]
 8003c68:	6014      	str	r4, [r2, #0]
 8003c6a:	b003      	add	sp, #12
 8003c6c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003c70:	f000 befc 	b.w	8004a6c <__malloc_unlock>
 8003c74:	42a3      	cmp	r3, r4
 8003c76:	d908      	bls.n	8003c8a <_free_r+0x46>
 8003c78:	6825      	ldr	r5, [r4, #0]
 8003c7a:	1961      	adds	r1, r4, r5
 8003c7c:	428b      	cmp	r3, r1
 8003c7e:	bf01      	itttt	eq
 8003c80:	6819      	ldreq	r1, [r3, #0]
 8003c82:	685b      	ldreq	r3, [r3, #4]
 8003c84:	1949      	addeq	r1, r1, r5
 8003c86:	6021      	streq	r1, [r4, #0]
 8003c88:	e7ed      	b.n	8003c66 <_free_r+0x22>
 8003c8a:	461a      	mov	r2, r3
 8003c8c:	685b      	ldr	r3, [r3, #4]
 8003c8e:	b10b      	cbz	r3, 8003c94 <_free_r+0x50>
 8003c90:	42a3      	cmp	r3, r4
 8003c92:	d9fa      	bls.n	8003c8a <_free_r+0x46>
 8003c94:	6811      	ldr	r1, [r2, #0]
 8003c96:	1855      	adds	r5, r2, r1
 8003c98:	42a5      	cmp	r5, r4
 8003c9a:	d10b      	bne.n	8003cb4 <_free_r+0x70>
 8003c9c:	6824      	ldr	r4, [r4, #0]
 8003c9e:	4421      	add	r1, r4
 8003ca0:	1854      	adds	r4, r2, r1
 8003ca2:	42a3      	cmp	r3, r4
 8003ca4:	6011      	str	r1, [r2, #0]
 8003ca6:	d1e0      	bne.n	8003c6a <_free_r+0x26>
 8003ca8:	681c      	ldr	r4, [r3, #0]
 8003caa:	685b      	ldr	r3, [r3, #4]
 8003cac:	6053      	str	r3, [r2, #4]
 8003cae:	4421      	add	r1, r4
 8003cb0:	6011      	str	r1, [r2, #0]
 8003cb2:	e7da      	b.n	8003c6a <_free_r+0x26>
 8003cb4:	d902      	bls.n	8003cbc <_free_r+0x78>
 8003cb6:	230c      	movs	r3, #12
 8003cb8:	6003      	str	r3, [r0, #0]
 8003cba:	e7d6      	b.n	8003c6a <_free_r+0x26>
 8003cbc:	6825      	ldr	r5, [r4, #0]
 8003cbe:	1961      	adds	r1, r4, r5
 8003cc0:	428b      	cmp	r3, r1
 8003cc2:	bf04      	itt	eq
 8003cc4:	6819      	ldreq	r1, [r3, #0]
 8003cc6:	685b      	ldreq	r3, [r3, #4]
 8003cc8:	6063      	str	r3, [r4, #4]
 8003cca:	bf04      	itt	eq
 8003ccc:	1949      	addeq	r1, r1, r5
 8003cce:	6021      	streq	r1, [r4, #0]
 8003cd0:	6054      	str	r4, [r2, #4]
 8003cd2:	e7ca      	b.n	8003c6a <_free_r+0x26>
 8003cd4:	b003      	add	sp, #12
 8003cd6:	bd30      	pop	{r4, r5, pc}
 8003cd8:	20000174 	.word	0x20000174

08003cdc <sbrk_aligned>:
 8003cdc:	b570      	push	{r4, r5, r6, lr}
 8003cde:	4e0e      	ldr	r6, [pc, #56]	; (8003d18 <sbrk_aligned+0x3c>)
 8003ce0:	460c      	mov	r4, r1
 8003ce2:	6831      	ldr	r1, [r6, #0]
 8003ce4:	4605      	mov	r5, r0
 8003ce6:	b911      	cbnz	r1, 8003cee <sbrk_aligned+0x12>
 8003ce8:	f000 fb7a 	bl	80043e0 <_sbrk_r>
 8003cec:	6030      	str	r0, [r6, #0]
 8003cee:	4621      	mov	r1, r4
 8003cf0:	4628      	mov	r0, r5
 8003cf2:	f000 fb75 	bl	80043e0 <_sbrk_r>
 8003cf6:	1c43      	adds	r3, r0, #1
 8003cf8:	d00a      	beq.n	8003d10 <sbrk_aligned+0x34>
 8003cfa:	1cc4      	adds	r4, r0, #3
 8003cfc:	f024 0403 	bic.w	r4, r4, #3
 8003d00:	42a0      	cmp	r0, r4
 8003d02:	d007      	beq.n	8003d14 <sbrk_aligned+0x38>
 8003d04:	1a21      	subs	r1, r4, r0
 8003d06:	4628      	mov	r0, r5
 8003d08:	f000 fb6a 	bl	80043e0 <_sbrk_r>
 8003d0c:	3001      	adds	r0, #1
 8003d0e:	d101      	bne.n	8003d14 <sbrk_aligned+0x38>
 8003d10:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8003d14:	4620      	mov	r0, r4
 8003d16:	bd70      	pop	{r4, r5, r6, pc}
 8003d18:	20000178 	.word	0x20000178

08003d1c <_malloc_r>:
 8003d1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003d20:	1ccd      	adds	r5, r1, #3
 8003d22:	f025 0503 	bic.w	r5, r5, #3
 8003d26:	3508      	adds	r5, #8
 8003d28:	2d0c      	cmp	r5, #12
 8003d2a:	bf38      	it	cc
 8003d2c:	250c      	movcc	r5, #12
 8003d2e:	2d00      	cmp	r5, #0
 8003d30:	4607      	mov	r7, r0
 8003d32:	db01      	blt.n	8003d38 <_malloc_r+0x1c>
 8003d34:	42a9      	cmp	r1, r5
 8003d36:	d905      	bls.n	8003d44 <_malloc_r+0x28>
 8003d38:	230c      	movs	r3, #12
 8003d3a:	603b      	str	r3, [r7, #0]
 8003d3c:	2600      	movs	r6, #0
 8003d3e:	4630      	mov	r0, r6
 8003d40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003d44:	4e2e      	ldr	r6, [pc, #184]	; (8003e00 <_malloc_r+0xe4>)
 8003d46:	f000 fe8b 	bl	8004a60 <__malloc_lock>
 8003d4a:	6833      	ldr	r3, [r6, #0]
 8003d4c:	461c      	mov	r4, r3
 8003d4e:	bb34      	cbnz	r4, 8003d9e <_malloc_r+0x82>
 8003d50:	4629      	mov	r1, r5
 8003d52:	4638      	mov	r0, r7
 8003d54:	f7ff ffc2 	bl	8003cdc <sbrk_aligned>
 8003d58:	1c43      	adds	r3, r0, #1
 8003d5a:	4604      	mov	r4, r0
 8003d5c:	d14d      	bne.n	8003dfa <_malloc_r+0xde>
 8003d5e:	6834      	ldr	r4, [r6, #0]
 8003d60:	4626      	mov	r6, r4
 8003d62:	2e00      	cmp	r6, #0
 8003d64:	d140      	bne.n	8003de8 <_malloc_r+0xcc>
 8003d66:	6823      	ldr	r3, [r4, #0]
 8003d68:	4631      	mov	r1, r6
 8003d6a:	4638      	mov	r0, r7
 8003d6c:	eb04 0803 	add.w	r8, r4, r3
 8003d70:	f000 fb36 	bl	80043e0 <_sbrk_r>
 8003d74:	4580      	cmp	r8, r0
 8003d76:	d13a      	bne.n	8003dee <_malloc_r+0xd2>
 8003d78:	6821      	ldr	r1, [r4, #0]
 8003d7a:	3503      	adds	r5, #3
 8003d7c:	1a6d      	subs	r5, r5, r1
 8003d7e:	f025 0503 	bic.w	r5, r5, #3
 8003d82:	3508      	adds	r5, #8
 8003d84:	2d0c      	cmp	r5, #12
 8003d86:	bf38      	it	cc
 8003d88:	250c      	movcc	r5, #12
 8003d8a:	4629      	mov	r1, r5
 8003d8c:	4638      	mov	r0, r7
 8003d8e:	f7ff ffa5 	bl	8003cdc <sbrk_aligned>
 8003d92:	3001      	adds	r0, #1
 8003d94:	d02b      	beq.n	8003dee <_malloc_r+0xd2>
 8003d96:	6823      	ldr	r3, [r4, #0]
 8003d98:	442b      	add	r3, r5
 8003d9a:	6023      	str	r3, [r4, #0]
 8003d9c:	e00e      	b.n	8003dbc <_malloc_r+0xa0>
 8003d9e:	6822      	ldr	r2, [r4, #0]
 8003da0:	1b52      	subs	r2, r2, r5
 8003da2:	d41e      	bmi.n	8003de2 <_malloc_r+0xc6>
 8003da4:	2a0b      	cmp	r2, #11
 8003da6:	d916      	bls.n	8003dd6 <_malloc_r+0xba>
 8003da8:	1961      	adds	r1, r4, r5
 8003daa:	42a3      	cmp	r3, r4
 8003dac:	6025      	str	r5, [r4, #0]
 8003dae:	bf18      	it	ne
 8003db0:	6059      	strne	r1, [r3, #4]
 8003db2:	6863      	ldr	r3, [r4, #4]
 8003db4:	bf08      	it	eq
 8003db6:	6031      	streq	r1, [r6, #0]
 8003db8:	5162      	str	r2, [r4, r5]
 8003dba:	604b      	str	r3, [r1, #4]
 8003dbc:	4638      	mov	r0, r7
 8003dbe:	f104 060b 	add.w	r6, r4, #11
 8003dc2:	f000 fe53 	bl	8004a6c <__malloc_unlock>
 8003dc6:	f026 0607 	bic.w	r6, r6, #7
 8003dca:	1d23      	adds	r3, r4, #4
 8003dcc:	1af2      	subs	r2, r6, r3
 8003dce:	d0b6      	beq.n	8003d3e <_malloc_r+0x22>
 8003dd0:	1b9b      	subs	r3, r3, r6
 8003dd2:	50a3      	str	r3, [r4, r2]
 8003dd4:	e7b3      	b.n	8003d3e <_malloc_r+0x22>
 8003dd6:	6862      	ldr	r2, [r4, #4]
 8003dd8:	42a3      	cmp	r3, r4
 8003dda:	bf0c      	ite	eq
 8003ddc:	6032      	streq	r2, [r6, #0]
 8003dde:	605a      	strne	r2, [r3, #4]
 8003de0:	e7ec      	b.n	8003dbc <_malloc_r+0xa0>
 8003de2:	4623      	mov	r3, r4
 8003de4:	6864      	ldr	r4, [r4, #4]
 8003de6:	e7b2      	b.n	8003d4e <_malloc_r+0x32>
 8003de8:	4634      	mov	r4, r6
 8003dea:	6876      	ldr	r6, [r6, #4]
 8003dec:	e7b9      	b.n	8003d62 <_malloc_r+0x46>
 8003dee:	230c      	movs	r3, #12
 8003df0:	603b      	str	r3, [r7, #0]
 8003df2:	4638      	mov	r0, r7
 8003df4:	f000 fe3a 	bl	8004a6c <__malloc_unlock>
 8003df8:	e7a1      	b.n	8003d3e <_malloc_r+0x22>
 8003dfa:	6025      	str	r5, [r4, #0]
 8003dfc:	e7de      	b.n	8003dbc <_malloc_r+0xa0>
 8003dfe:	bf00      	nop
 8003e00:	20000174 	.word	0x20000174

08003e04 <__sfputc_r>:
 8003e04:	6893      	ldr	r3, [r2, #8]
 8003e06:	3b01      	subs	r3, #1
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	b410      	push	{r4}
 8003e0c:	6093      	str	r3, [r2, #8]
 8003e0e:	da08      	bge.n	8003e22 <__sfputc_r+0x1e>
 8003e10:	6994      	ldr	r4, [r2, #24]
 8003e12:	42a3      	cmp	r3, r4
 8003e14:	db01      	blt.n	8003e1a <__sfputc_r+0x16>
 8003e16:	290a      	cmp	r1, #10
 8003e18:	d103      	bne.n	8003e22 <__sfputc_r+0x1e>
 8003e1a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003e1e:	f000 bb0f 	b.w	8004440 <__swbuf_r>
 8003e22:	6813      	ldr	r3, [r2, #0]
 8003e24:	1c58      	adds	r0, r3, #1
 8003e26:	6010      	str	r0, [r2, #0]
 8003e28:	7019      	strb	r1, [r3, #0]
 8003e2a:	4608      	mov	r0, r1
 8003e2c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003e30:	4770      	bx	lr

08003e32 <__sfputs_r>:
 8003e32:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e34:	4606      	mov	r6, r0
 8003e36:	460f      	mov	r7, r1
 8003e38:	4614      	mov	r4, r2
 8003e3a:	18d5      	adds	r5, r2, r3
 8003e3c:	42ac      	cmp	r4, r5
 8003e3e:	d101      	bne.n	8003e44 <__sfputs_r+0x12>
 8003e40:	2000      	movs	r0, #0
 8003e42:	e007      	b.n	8003e54 <__sfputs_r+0x22>
 8003e44:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003e48:	463a      	mov	r2, r7
 8003e4a:	4630      	mov	r0, r6
 8003e4c:	f7ff ffda 	bl	8003e04 <__sfputc_r>
 8003e50:	1c43      	adds	r3, r0, #1
 8003e52:	d1f3      	bne.n	8003e3c <__sfputs_r+0xa>
 8003e54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003e58 <_vfiprintf_r>:
 8003e58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e5c:	460d      	mov	r5, r1
 8003e5e:	b09d      	sub	sp, #116	; 0x74
 8003e60:	4614      	mov	r4, r2
 8003e62:	4698      	mov	r8, r3
 8003e64:	4606      	mov	r6, r0
 8003e66:	b118      	cbz	r0, 8003e70 <_vfiprintf_r+0x18>
 8003e68:	6983      	ldr	r3, [r0, #24]
 8003e6a:	b90b      	cbnz	r3, 8003e70 <_vfiprintf_r+0x18>
 8003e6c:	f000 fcca 	bl	8004804 <__sinit>
 8003e70:	4b89      	ldr	r3, [pc, #548]	; (8004098 <_vfiprintf_r+0x240>)
 8003e72:	429d      	cmp	r5, r3
 8003e74:	d11b      	bne.n	8003eae <_vfiprintf_r+0x56>
 8003e76:	6875      	ldr	r5, [r6, #4]
 8003e78:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003e7a:	07d9      	lsls	r1, r3, #31
 8003e7c:	d405      	bmi.n	8003e8a <_vfiprintf_r+0x32>
 8003e7e:	89ab      	ldrh	r3, [r5, #12]
 8003e80:	059a      	lsls	r2, r3, #22
 8003e82:	d402      	bmi.n	8003e8a <_vfiprintf_r+0x32>
 8003e84:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003e86:	f000 fd5b 	bl	8004940 <__retarget_lock_acquire_recursive>
 8003e8a:	89ab      	ldrh	r3, [r5, #12]
 8003e8c:	071b      	lsls	r3, r3, #28
 8003e8e:	d501      	bpl.n	8003e94 <_vfiprintf_r+0x3c>
 8003e90:	692b      	ldr	r3, [r5, #16]
 8003e92:	b9eb      	cbnz	r3, 8003ed0 <_vfiprintf_r+0x78>
 8003e94:	4629      	mov	r1, r5
 8003e96:	4630      	mov	r0, r6
 8003e98:	f000 fb24 	bl	80044e4 <__swsetup_r>
 8003e9c:	b1c0      	cbz	r0, 8003ed0 <_vfiprintf_r+0x78>
 8003e9e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003ea0:	07dc      	lsls	r4, r3, #31
 8003ea2:	d50e      	bpl.n	8003ec2 <_vfiprintf_r+0x6a>
 8003ea4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003ea8:	b01d      	add	sp, #116	; 0x74
 8003eaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003eae:	4b7b      	ldr	r3, [pc, #492]	; (800409c <_vfiprintf_r+0x244>)
 8003eb0:	429d      	cmp	r5, r3
 8003eb2:	d101      	bne.n	8003eb8 <_vfiprintf_r+0x60>
 8003eb4:	68b5      	ldr	r5, [r6, #8]
 8003eb6:	e7df      	b.n	8003e78 <_vfiprintf_r+0x20>
 8003eb8:	4b79      	ldr	r3, [pc, #484]	; (80040a0 <_vfiprintf_r+0x248>)
 8003eba:	429d      	cmp	r5, r3
 8003ebc:	bf08      	it	eq
 8003ebe:	68f5      	ldreq	r5, [r6, #12]
 8003ec0:	e7da      	b.n	8003e78 <_vfiprintf_r+0x20>
 8003ec2:	89ab      	ldrh	r3, [r5, #12]
 8003ec4:	0598      	lsls	r0, r3, #22
 8003ec6:	d4ed      	bmi.n	8003ea4 <_vfiprintf_r+0x4c>
 8003ec8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003eca:	f000 fd3a 	bl	8004942 <__retarget_lock_release_recursive>
 8003ece:	e7e9      	b.n	8003ea4 <_vfiprintf_r+0x4c>
 8003ed0:	2300      	movs	r3, #0
 8003ed2:	9309      	str	r3, [sp, #36]	; 0x24
 8003ed4:	2320      	movs	r3, #32
 8003ed6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003eda:	f8cd 800c 	str.w	r8, [sp, #12]
 8003ede:	2330      	movs	r3, #48	; 0x30
 8003ee0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80040a4 <_vfiprintf_r+0x24c>
 8003ee4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003ee8:	f04f 0901 	mov.w	r9, #1
 8003eec:	4623      	mov	r3, r4
 8003eee:	469a      	mov	sl, r3
 8003ef0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003ef4:	b10a      	cbz	r2, 8003efa <_vfiprintf_r+0xa2>
 8003ef6:	2a25      	cmp	r2, #37	; 0x25
 8003ef8:	d1f9      	bne.n	8003eee <_vfiprintf_r+0x96>
 8003efa:	ebba 0b04 	subs.w	fp, sl, r4
 8003efe:	d00b      	beq.n	8003f18 <_vfiprintf_r+0xc0>
 8003f00:	465b      	mov	r3, fp
 8003f02:	4622      	mov	r2, r4
 8003f04:	4629      	mov	r1, r5
 8003f06:	4630      	mov	r0, r6
 8003f08:	f7ff ff93 	bl	8003e32 <__sfputs_r>
 8003f0c:	3001      	adds	r0, #1
 8003f0e:	f000 80aa 	beq.w	8004066 <_vfiprintf_r+0x20e>
 8003f12:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003f14:	445a      	add	r2, fp
 8003f16:	9209      	str	r2, [sp, #36]	; 0x24
 8003f18:	f89a 3000 	ldrb.w	r3, [sl]
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	f000 80a2 	beq.w	8004066 <_vfiprintf_r+0x20e>
 8003f22:	2300      	movs	r3, #0
 8003f24:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003f28:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003f2c:	f10a 0a01 	add.w	sl, sl, #1
 8003f30:	9304      	str	r3, [sp, #16]
 8003f32:	9307      	str	r3, [sp, #28]
 8003f34:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003f38:	931a      	str	r3, [sp, #104]	; 0x68
 8003f3a:	4654      	mov	r4, sl
 8003f3c:	2205      	movs	r2, #5
 8003f3e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003f42:	4858      	ldr	r0, [pc, #352]	; (80040a4 <_vfiprintf_r+0x24c>)
 8003f44:	f7fc f95c 	bl	8000200 <memchr>
 8003f48:	9a04      	ldr	r2, [sp, #16]
 8003f4a:	b9d8      	cbnz	r0, 8003f84 <_vfiprintf_r+0x12c>
 8003f4c:	06d1      	lsls	r1, r2, #27
 8003f4e:	bf44      	itt	mi
 8003f50:	2320      	movmi	r3, #32
 8003f52:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003f56:	0713      	lsls	r3, r2, #28
 8003f58:	bf44      	itt	mi
 8003f5a:	232b      	movmi	r3, #43	; 0x2b
 8003f5c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003f60:	f89a 3000 	ldrb.w	r3, [sl]
 8003f64:	2b2a      	cmp	r3, #42	; 0x2a
 8003f66:	d015      	beq.n	8003f94 <_vfiprintf_r+0x13c>
 8003f68:	9a07      	ldr	r2, [sp, #28]
 8003f6a:	4654      	mov	r4, sl
 8003f6c:	2000      	movs	r0, #0
 8003f6e:	f04f 0c0a 	mov.w	ip, #10
 8003f72:	4621      	mov	r1, r4
 8003f74:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003f78:	3b30      	subs	r3, #48	; 0x30
 8003f7a:	2b09      	cmp	r3, #9
 8003f7c:	d94e      	bls.n	800401c <_vfiprintf_r+0x1c4>
 8003f7e:	b1b0      	cbz	r0, 8003fae <_vfiprintf_r+0x156>
 8003f80:	9207      	str	r2, [sp, #28]
 8003f82:	e014      	b.n	8003fae <_vfiprintf_r+0x156>
 8003f84:	eba0 0308 	sub.w	r3, r0, r8
 8003f88:	fa09 f303 	lsl.w	r3, r9, r3
 8003f8c:	4313      	orrs	r3, r2
 8003f8e:	9304      	str	r3, [sp, #16]
 8003f90:	46a2      	mov	sl, r4
 8003f92:	e7d2      	b.n	8003f3a <_vfiprintf_r+0xe2>
 8003f94:	9b03      	ldr	r3, [sp, #12]
 8003f96:	1d19      	adds	r1, r3, #4
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	9103      	str	r1, [sp, #12]
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	bfbb      	ittet	lt
 8003fa0:	425b      	neglt	r3, r3
 8003fa2:	f042 0202 	orrlt.w	r2, r2, #2
 8003fa6:	9307      	strge	r3, [sp, #28]
 8003fa8:	9307      	strlt	r3, [sp, #28]
 8003faa:	bfb8      	it	lt
 8003fac:	9204      	strlt	r2, [sp, #16]
 8003fae:	7823      	ldrb	r3, [r4, #0]
 8003fb0:	2b2e      	cmp	r3, #46	; 0x2e
 8003fb2:	d10c      	bne.n	8003fce <_vfiprintf_r+0x176>
 8003fb4:	7863      	ldrb	r3, [r4, #1]
 8003fb6:	2b2a      	cmp	r3, #42	; 0x2a
 8003fb8:	d135      	bne.n	8004026 <_vfiprintf_r+0x1ce>
 8003fba:	9b03      	ldr	r3, [sp, #12]
 8003fbc:	1d1a      	adds	r2, r3, #4
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	9203      	str	r2, [sp, #12]
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	bfb8      	it	lt
 8003fc6:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8003fca:	3402      	adds	r4, #2
 8003fcc:	9305      	str	r3, [sp, #20]
 8003fce:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80040b4 <_vfiprintf_r+0x25c>
 8003fd2:	7821      	ldrb	r1, [r4, #0]
 8003fd4:	2203      	movs	r2, #3
 8003fd6:	4650      	mov	r0, sl
 8003fd8:	f7fc f912 	bl	8000200 <memchr>
 8003fdc:	b140      	cbz	r0, 8003ff0 <_vfiprintf_r+0x198>
 8003fde:	2340      	movs	r3, #64	; 0x40
 8003fe0:	eba0 000a 	sub.w	r0, r0, sl
 8003fe4:	fa03 f000 	lsl.w	r0, r3, r0
 8003fe8:	9b04      	ldr	r3, [sp, #16]
 8003fea:	4303      	orrs	r3, r0
 8003fec:	3401      	adds	r4, #1
 8003fee:	9304      	str	r3, [sp, #16]
 8003ff0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003ff4:	482c      	ldr	r0, [pc, #176]	; (80040a8 <_vfiprintf_r+0x250>)
 8003ff6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003ffa:	2206      	movs	r2, #6
 8003ffc:	f7fc f900 	bl	8000200 <memchr>
 8004000:	2800      	cmp	r0, #0
 8004002:	d03f      	beq.n	8004084 <_vfiprintf_r+0x22c>
 8004004:	4b29      	ldr	r3, [pc, #164]	; (80040ac <_vfiprintf_r+0x254>)
 8004006:	bb1b      	cbnz	r3, 8004050 <_vfiprintf_r+0x1f8>
 8004008:	9b03      	ldr	r3, [sp, #12]
 800400a:	3307      	adds	r3, #7
 800400c:	f023 0307 	bic.w	r3, r3, #7
 8004010:	3308      	adds	r3, #8
 8004012:	9303      	str	r3, [sp, #12]
 8004014:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004016:	443b      	add	r3, r7
 8004018:	9309      	str	r3, [sp, #36]	; 0x24
 800401a:	e767      	b.n	8003eec <_vfiprintf_r+0x94>
 800401c:	fb0c 3202 	mla	r2, ip, r2, r3
 8004020:	460c      	mov	r4, r1
 8004022:	2001      	movs	r0, #1
 8004024:	e7a5      	b.n	8003f72 <_vfiprintf_r+0x11a>
 8004026:	2300      	movs	r3, #0
 8004028:	3401      	adds	r4, #1
 800402a:	9305      	str	r3, [sp, #20]
 800402c:	4619      	mov	r1, r3
 800402e:	f04f 0c0a 	mov.w	ip, #10
 8004032:	4620      	mov	r0, r4
 8004034:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004038:	3a30      	subs	r2, #48	; 0x30
 800403a:	2a09      	cmp	r2, #9
 800403c:	d903      	bls.n	8004046 <_vfiprintf_r+0x1ee>
 800403e:	2b00      	cmp	r3, #0
 8004040:	d0c5      	beq.n	8003fce <_vfiprintf_r+0x176>
 8004042:	9105      	str	r1, [sp, #20]
 8004044:	e7c3      	b.n	8003fce <_vfiprintf_r+0x176>
 8004046:	fb0c 2101 	mla	r1, ip, r1, r2
 800404a:	4604      	mov	r4, r0
 800404c:	2301      	movs	r3, #1
 800404e:	e7f0      	b.n	8004032 <_vfiprintf_r+0x1da>
 8004050:	ab03      	add	r3, sp, #12
 8004052:	9300      	str	r3, [sp, #0]
 8004054:	462a      	mov	r2, r5
 8004056:	4b16      	ldr	r3, [pc, #88]	; (80040b0 <_vfiprintf_r+0x258>)
 8004058:	a904      	add	r1, sp, #16
 800405a:	4630      	mov	r0, r6
 800405c:	f3af 8000 	nop.w
 8004060:	4607      	mov	r7, r0
 8004062:	1c78      	adds	r0, r7, #1
 8004064:	d1d6      	bne.n	8004014 <_vfiprintf_r+0x1bc>
 8004066:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004068:	07d9      	lsls	r1, r3, #31
 800406a:	d405      	bmi.n	8004078 <_vfiprintf_r+0x220>
 800406c:	89ab      	ldrh	r3, [r5, #12]
 800406e:	059a      	lsls	r2, r3, #22
 8004070:	d402      	bmi.n	8004078 <_vfiprintf_r+0x220>
 8004072:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004074:	f000 fc65 	bl	8004942 <__retarget_lock_release_recursive>
 8004078:	89ab      	ldrh	r3, [r5, #12]
 800407a:	065b      	lsls	r3, r3, #25
 800407c:	f53f af12 	bmi.w	8003ea4 <_vfiprintf_r+0x4c>
 8004080:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004082:	e711      	b.n	8003ea8 <_vfiprintf_r+0x50>
 8004084:	ab03      	add	r3, sp, #12
 8004086:	9300      	str	r3, [sp, #0]
 8004088:	462a      	mov	r2, r5
 800408a:	4b09      	ldr	r3, [pc, #36]	; (80040b0 <_vfiprintf_r+0x258>)
 800408c:	a904      	add	r1, sp, #16
 800408e:	4630      	mov	r0, r6
 8004090:	f000 f880 	bl	8004194 <_printf_i>
 8004094:	e7e4      	b.n	8004060 <_vfiprintf_r+0x208>
 8004096:	bf00      	nop
 8004098:	080051e4 	.word	0x080051e4
 800409c:	08005204 	.word	0x08005204
 80040a0:	080051c4 	.word	0x080051c4
 80040a4:	08005190 	.word	0x08005190
 80040a8:	0800519a 	.word	0x0800519a
 80040ac:	00000000 	.word	0x00000000
 80040b0:	08003e33 	.word	0x08003e33
 80040b4:	08005196 	.word	0x08005196

080040b8 <_printf_common>:
 80040b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80040bc:	4616      	mov	r6, r2
 80040be:	4699      	mov	r9, r3
 80040c0:	688a      	ldr	r2, [r1, #8]
 80040c2:	690b      	ldr	r3, [r1, #16]
 80040c4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80040c8:	4293      	cmp	r3, r2
 80040ca:	bfb8      	it	lt
 80040cc:	4613      	movlt	r3, r2
 80040ce:	6033      	str	r3, [r6, #0]
 80040d0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80040d4:	4607      	mov	r7, r0
 80040d6:	460c      	mov	r4, r1
 80040d8:	b10a      	cbz	r2, 80040de <_printf_common+0x26>
 80040da:	3301      	adds	r3, #1
 80040dc:	6033      	str	r3, [r6, #0]
 80040de:	6823      	ldr	r3, [r4, #0]
 80040e0:	0699      	lsls	r1, r3, #26
 80040e2:	bf42      	ittt	mi
 80040e4:	6833      	ldrmi	r3, [r6, #0]
 80040e6:	3302      	addmi	r3, #2
 80040e8:	6033      	strmi	r3, [r6, #0]
 80040ea:	6825      	ldr	r5, [r4, #0]
 80040ec:	f015 0506 	ands.w	r5, r5, #6
 80040f0:	d106      	bne.n	8004100 <_printf_common+0x48>
 80040f2:	f104 0a19 	add.w	sl, r4, #25
 80040f6:	68e3      	ldr	r3, [r4, #12]
 80040f8:	6832      	ldr	r2, [r6, #0]
 80040fa:	1a9b      	subs	r3, r3, r2
 80040fc:	42ab      	cmp	r3, r5
 80040fe:	dc26      	bgt.n	800414e <_printf_common+0x96>
 8004100:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004104:	1e13      	subs	r3, r2, #0
 8004106:	6822      	ldr	r2, [r4, #0]
 8004108:	bf18      	it	ne
 800410a:	2301      	movne	r3, #1
 800410c:	0692      	lsls	r2, r2, #26
 800410e:	d42b      	bmi.n	8004168 <_printf_common+0xb0>
 8004110:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004114:	4649      	mov	r1, r9
 8004116:	4638      	mov	r0, r7
 8004118:	47c0      	blx	r8
 800411a:	3001      	adds	r0, #1
 800411c:	d01e      	beq.n	800415c <_printf_common+0xa4>
 800411e:	6823      	ldr	r3, [r4, #0]
 8004120:	68e5      	ldr	r5, [r4, #12]
 8004122:	6832      	ldr	r2, [r6, #0]
 8004124:	f003 0306 	and.w	r3, r3, #6
 8004128:	2b04      	cmp	r3, #4
 800412a:	bf08      	it	eq
 800412c:	1aad      	subeq	r5, r5, r2
 800412e:	68a3      	ldr	r3, [r4, #8]
 8004130:	6922      	ldr	r2, [r4, #16]
 8004132:	bf0c      	ite	eq
 8004134:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004138:	2500      	movne	r5, #0
 800413a:	4293      	cmp	r3, r2
 800413c:	bfc4      	itt	gt
 800413e:	1a9b      	subgt	r3, r3, r2
 8004140:	18ed      	addgt	r5, r5, r3
 8004142:	2600      	movs	r6, #0
 8004144:	341a      	adds	r4, #26
 8004146:	42b5      	cmp	r5, r6
 8004148:	d11a      	bne.n	8004180 <_printf_common+0xc8>
 800414a:	2000      	movs	r0, #0
 800414c:	e008      	b.n	8004160 <_printf_common+0xa8>
 800414e:	2301      	movs	r3, #1
 8004150:	4652      	mov	r2, sl
 8004152:	4649      	mov	r1, r9
 8004154:	4638      	mov	r0, r7
 8004156:	47c0      	blx	r8
 8004158:	3001      	adds	r0, #1
 800415a:	d103      	bne.n	8004164 <_printf_common+0xac>
 800415c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004160:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004164:	3501      	adds	r5, #1
 8004166:	e7c6      	b.n	80040f6 <_printf_common+0x3e>
 8004168:	18e1      	adds	r1, r4, r3
 800416a:	1c5a      	adds	r2, r3, #1
 800416c:	2030      	movs	r0, #48	; 0x30
 800416e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004172:	4422      	add	r2, r4
 8004174:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004178:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800417c:	3302      	adds	r3, #2
 800417e:	e7c7      	b.n	8004110 <_printf_common+0x58>
 8004180:	2301      	movs	r3, #1
 8004182:	4622      	mov	r2, r4
 8004184:	4649      	mov	r1, r9
 8004186:	4638      	mov	r0, r7
 8004188:	47c0      	blx	r8
 800418a:	3001      	adds	r0, #1
 800418c:	d0e6      	beq.n	800415c <_printf_common+0xa4>
 800418e:	3601      	adds	r6, #1
 8004190:	e7d9      	b.n	8004146 <_printf_common+0x8e>
	...

08004194 <_printf_i>:
 8004194:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004198:	7e0f      	ldrb	r7, [r1, #24]
 800419a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800419c:	2f78      	cmp	r7, #120	; 0x78
 800419e:	4691      	mov	r9, r2
 80041a0:	4680      	mov	r8, r0
 80041a2:	460c      	mov	r4, r1
 80041a4:	469a      	mov	sl, r3
 80041a6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80041aa:	d807      	bhi.n	80041bc <_printf_i+0x28>
 80041ac:	2f62      	cmp	r7, #98	; 0x62
 80041ae:	d80a      	bhi.n	80041c6 <_printf_i+0x32>
 80041b0:	2f00      	cmp	r7, #0
 80041b2:	f000 80d8 	beq.w	8004366 <_printf_i+0x1d2>
 80041b6:	2f58      	cmp	r7, #88	; 0x58
 80041b8:	f000 80a3 	beq.w	8004302 <_printf_i+0x16e>
 80041bc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80041c0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80041c4:	e03a      	b.n	800423c <_printf_i+0xa8>
 80041c6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80041ca:	2b15      	cmp	r3, #21
 80041cc:	d8f6      	bhi.n	80041bc <_printf_i+0x28>
 80041ce:	a101      	add	r1, pc, #4	; (adr r1, 80041d4 <_printf_i+0x40>)
 80041d0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80041d4:	0800422d 	.word	0x0800422d
 80041d8:	08004241 	.word	0x08004241
 80041dc:	080041bd 	.word	0x080041bd
 80041e0:	080041bd 	.word	0x080041bd
 80041e4:	080041bd 	.word	0x080041bd
 80041e8:	080041bd 	.word	0x080041bd
 80041ec:	08004241 	.word	0x08004241
 80041f0:	080041bd 	.word	0x080041bd
 80041f4:	080041bd 	.word	0x080041bd
 80041f8:	080041bd 	.word	0x080041bd
 80041fc:	080041bd 	.word	0x080041bd
 8004200:	0800434d 	.word	0x0800434d
 8004204:	08004271 	.word	0x08004271
 8004208:	0800432f 	.word	0x0800432f
 800420c:	080041bd 	.word	0x080041bd
 8004210:	080041bd 	.word	0x080041bd
 8004214:	0800436f 	.word	0x0800436f
 8004218:	080041bd 	.word	0x080041bd
 800421c:	08004271 	.word	0x08004271
 8004220:	080041bd 	.word	0x080041bd
 8004224:	080041bd 	.word	0x080041bd
 8004228:	08004337 	.word	0x08004337
 800422c:	682b      	ldr	r3, [r5, #0]
 800422e:	1d1a      	adds	r2, r3, #4
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	602a      	str	r2, [r5, #0]
 8004234:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004238:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800423c:	2301      	movs	r3, #1
 800423e:	e0a3      	b.n	8004388 <_printf_i+0x1f4>
 8004240:	6820      	ldr	r0, [r4, #0]
 8004242:	6829      	ldr	r1, [r5, #0]
 8004244:	0606      	lsls	r6, r0, #24
 8004246:	f101 0304 	add.w	r3, r1, #4
 800424a:	d50a      	bpl.n	8004262 <_printf_i+0xce>
 800424c:	680e      	ldr	r6, [r1, #0]
 800424e:	602b      	str	r3, [r5, #0]
 8004250:	2e00      	cmp	r6, #0
 8004252:	da03      	bge.n	800425c <_printf_i+0xc8>
 8004254:	232d      	movs	r3, #45	; 0x2d
 8004256:	4276      	negs	r6, r6
 8004258:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800425c:	485e      	ldr	r0, [pc, #376]	; (80043d8 <_printf_i+0x244>)
 800425e:	230a      	movs	r3, #10
 8004260:	e019      	b.n	8004296 <_printf_i+0x102>
 8004262:	680e      	ldr	r6, [r1, #0]
 8004264:	602b      	str	r3, [r5, #0]
 8004266:	f010 0f40 	tst.w	r0, #64	; 0x40
 800426a:	bf18      	it	ne
 800426c:	b236      	sxthne	r6, r6
 800426e:	e7ef      	b.n	8004250 <_printf_i+0xbc>
 8004270:	682b      	ldr	r3, [r5, #0]
 8004272:	6820      	ldr	r0, [r4, #0]
 8004274:	1d19      	adds	r1, r3, #4
 8004276:	6029      	str	r1, [r5, #0]
 8004278:	0601      	lsls	r1, r0, #24
 800427a:	d501      	bpl.n	8004280 <_printf_i+0xec>
 800427c:	681e      	ldr	r6, [r3, #0]
 800427e:	e002      	b.n	8004286 <_printf_i+0xf2>
 8004280:	0646      	lsls	r6, r0, #25
 8004282:	d5fb      	bpl.n	800427c <_printf_i+0xe8>
 8004284:	881e      	ldrh	r6, [r3, #0]
 8004286:	4854      	ldr	r0, [pc, #336]	; (80043d8 <_printf_i+0x244>)
 8004288:	2f6f      	cmp	r7, #111	; 0x6f
 800428a:	bf0c      	ite	eq
 800428c:	2308      	moveq	r3, #8
 800428e:	230a      	movne	r3, #10
 8004290:	2100      	movs	r1, #0
 8004292:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004296:	6865      	ldr	r5, [r4, #4]
 8004298:	60a5      	str	r5, [r4, #8]
 800429a:	2d00      	cmp	r5, #0
 800429c:	bfa2      	ittt	ge
 800429e:	6821      	ldrge	r1, [r4, #0]
 80042a0:	f021 0104 	bicge.w	r1, r1, #4
 80042a4:	6021      	strge	r1, [r4, #0]
 80042a6:	b90e      	cbnz	r6, 80042ac <_printf_i+0x118>
 80042a8:	2d00      	cmp	r5, #0
 80042aa:	d04d      	beq.n	8004348 <_printf_i+0x1b4>
 80042ac:	4615      	mov	r5, r2
 80042ae:	fbb6 f1f3 	udiv	r1, r6, r3
 80042b2:	fb03 6711 	mls	r7, r3, r1, r6
 80042b6:	5dc7      	ldrb	r7, [r0, r7]
 80042b8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80042bc:	4637      	mov	r7, r6
 80042be:	42bb      	cmp	r3, r7
 80042c0:	460e      	mov	r6, r1
 80042c2:	d9f4      	bls.n	80042ae <_printf_i+0x11a>
 80042c4:	2b08      	cmp	r3, #8
 80042c6:	d10b      	bne.n	80042e0 <_printf_i+0x14c>
 80042c8:	6823      	ldr	r3, [r4, #0]
 80042ca:	07de      	lsls	r6, r3, #31
 80042cc:	d508      	bpl.n	80042e0 <_printf_i+0x14c>
 80042ce:	6923      	ldr	r3, [r4, #16]
 80042d0:	6861      	ldr	r1, [r4, #4]
 80042d2:	4299      	cmp	r1, r3
 80042d4:	bfde      	ittt	le
 80042d6:	2330      	movle	r3, #48	; 0x30
 80042d8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80042dc:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80042e0:	1b52      	subs	r2, r2, r5
 80042e2:	6122      	str	r2, [r4, #16]
 80042e4:	f8cd a000 	str.w	sl, [sp]
 80042e8:	464b      	mov	r3, r9
 80042ea:	aa03      	add	r2, sp, #12
 80042ec:	4621      	mov	r1, r4
 80042ee:	4640      	mov	r0, r8
 80042f0:	f7ff fee2 	bl	80040b8 <_printf_common>
 80042f4:	3001      	adds	r0, #1
 80042f6:	d14c      	bne.n	8004392 <_printf_i+0x1fe>
 80042f8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80042fc:	b004      	add	sp, #16
 80042fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004302:	4835      	ldr	r0, [pc, #212]	; (80043d8 <_printf_i+0x244>)
 8004304:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004308:	6829      	ldr	r1, [r5, #0]
 800430a:	6823      	ldr	r3, [r4, #0]
 800430c:	f851 6b04 	ldr.w	r6, [r1], #4
 8004310:	6029      	str	r1, [r5, #0]
 8004312:	061d      	lsls	r5, r3, #24
 8004314:	d514      	bpl.n	8004340 <_printf_i+0x1ac>
 8004316:	07df      	lsls	r7, r3, #31
 8004318:	bf44      	itt	mi
 800431a:	f043 0320 	orrmi.w	r3, r3, #32
 800431e:	6023      	strmi	r3, [r4, #0]
 8004320:	b91e      	cbnz	r6, 800432a <_printf_i+0x196>
 8004322:	6823      	ldr	r3, [r4, #0]
 8004324:	f023 0320 	bic.w	r3, r3, #32
 8004328:	6023      	str	r3, [r4, #0]
 800432a:	2310      	movs	r3, #16
 800432c:	e7b0      	b.n	8004290 <_printf_i+0xfc>
 800432e:	6823      	ldr	r3, [r4, #0]
 8004330:	f043 0320 	orr.w	r3, r3, #32
 8004334:	6023      	str	r3, [r4, #0]
 8004336:	2378      	movs	r3, #120	; 0x78
 8004338:	4828      	ldr	r0, [pc, #160]	; (80043dc <_printf_i+0x248>)
 800433a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800433e:	e7e3      	b.n	8004308 <_printf_i+0x174>
 8004340:	0659      	lsls	r1, r3, #25
 8004342:	bf48      	it	mi
 8004344:	b2b6      	uxthmi	r6, r6
 8004346:	e7e6      	b.n	8004316 <_printf_i+0x182>
 8004348:	4615      	mov	r5, r2
 800434a:	e7bb      	b.n	80042c4 <_printf_i+0x130>
 800434c:	682b      	ldr	r3, [r5, #0]
 800434e:	6826      	ldr	r6, [r4, #0]
 8004350:	6961      	ldr	r1, [r4, #20]
 8004352:	1d18      	adds	r0, r3, #4
 8004354:	6028      	str	r0, [r5, #0]
 8004356:	0635      	lsls	r5, r6, #24
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	d501      	bpl.n	8004360 <_printf_i+0x1cc>
 800435c:	6019      	str	r1, [r3, #0]
 800435e:	e002      	b.n	8004366 <_printf_i+0x1d2>
 8004360:	0670      	lsls	r0, r6, #25
 8004362:	d5fb      	bpl.n	800435c <_printf_i+0x1c8>
 8004364:	8019      	strh	r1, [r3, #0]
 8004366:	2300      	movs	r3, #0
 8004368:	6123      	str	r3, [r4, #16]
 800436a:	4615      	mov	r5, r2
 800436c:	e7ba      	b.n	80042e4 <_printf_i+0x150>
 800436e:	682b      	ldr	r3, [r5, #0]
 8004370:	1d1a      	adds	r2, r3, #4
 8004372:	602a      	str	r2, [r5, #0]
 8004374:	681d      	ldr	r5, [r3, #0]
 8004376:	6862      	ldr	r2, [r4, #4]
 8004378:	2100      	movs	r1, #0
 800437a:	4628      	mov	r0, r5
 800437c:	f7fb ff40 	bl	8000200 <memchr>
 8004380:	b108      	cbz	r0, 8004386 <_printf_i+0x1f2>
 8004382:	1b40      	subs	r0, r0, r5
 8004384:	6060      	str	r0, [r4, #4]
 8004386:	6863      	ldr	r3, [r4, #4]
 8004388:	6123      	str	r3, [r4, #16]
 800438a:	2300      	movs	r3, #0
 800438c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004390:	e7a8      	b.n	80042e4 <_printf_i+0x150>
 8004392:	6923      	ldr	r3, [r4, #16]
 8004394:	462a      	mov	r2, r5
 8004396:	4649      	mov	r1, r9
 8004398:	4640      	mov	r0, r8
 800439a:	47d0      	blx	sl
 800439c:	3001      	adds	r0, #1
 800439e:	d0ab      	beq.n	80042f8 <_printf_i+0x164>
 80043a0:	6823      	ldr	r3, [r4, #0]
 80043a2:	079b      	lsls	r3, r3, #30
 80043a4:	d413      	bmi.n	80043ce <_printf_i+0x23a>
 80043a6:	68e0      	ldr	r0, [r4, #12]
 80043a8:	9b03      	ldr	r3, [sp, #12]
 80043aa:	4298      	cmp	r0, r3
 80043ac:	bfb8      	it	lt
 80043ae:	4618      	movlt	r0, r3
 80043b0:	e7a4      	b.n	80042fc <_printf_i+0x168>
 80043b2:	2301      	movs	r3, #1
 80043b4:	4632      	mov	r2, r6
 80043b6:	4649      	mov	r1, r9
 80043b8:	4640      	mov	r0, r8
 80043ba:	47d0      	blx	sl
 80043bc:	3001      	adds	r0, #1
 80043be:	d09b      	beq.n	80042f8 <_printf_i+0x164>
 80043c0:	3501      	adds	r5, #1
 80043c2:	68e3      	ldr	r3, [r4, #12]
 80043c4:	9903      	ldr	r1, [sp, #12]
 80043c6:	1a5b      	subs	r3, r3, r1
 80043c8:	42ab      	cmp	r3, r5
 80043ca:	dcf2      	bgt.n	80043b2 <_printf_i+0x21e>
 80043cc:	e7eb      	b.n	80043a6 <_printf_i+0x212>
 80043ce:	2500      	movs	r5, #0
 80043d0:	f104 0619 	add.w	r6, r4, #25
 80043d4:	e7f5      	b.n	80043c2 <_printf_i+0x22e>
 80043d6:	bf00      	nop
 80043d8:	080051a1 	.word	0x080051a1
 80043dc:	080051b2 	.word	0x080051b2

080043e0 <_sbrk_r>:
 80043e0:	b538      	push	{r3, r4, r5, lr}
 80043e2:	4d06      	ldr	r5, [pc, #24]	; (80043fc <_sbrk_r+0x1c>)
 80043e4:	2300      	movs	r3, #0
 80043e6:	4604      	mov	r4, r0
 80043e8:	4608      	mov	r0, r1
 80043ea:	602b      	str	r3, [r5, #0]
 80043ec:	f7fc fa36 	bl	800085c <_sbrk>
 80043f0:	1c43      	adds	r3, r0, #1
 80043f2:	d102      	bne.n	80043fa <_sbrk_r+0x1a>
 80043f4:	682b      	ldr	r3, [r5, #0]
 80043f6:	b103      	cbz	r3, 80043fa <_sbrk_r+0x1a>
 80043f8:	6023      	str	r3, [r4, #0]
 80043fa:	bd38      	pop	{r3, r4, r5, pc}
 80043fc:	20000180 	.word	0x20000180

08004400 <siprintf>:
 8004400:	b40e      	push	{r1, r2, r3}
 8004402:	b500      	push	{lr}
 8004404:	b09c      	sub	sp, #112	; 0x70
 8004406:	ab1d      	add	r3, sp, #116	; 0x74
 8004408:	9002      	str	r0, [sp, #8]
 800440a:	9006      	str	r0, [sp, #24]
 800440c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004410:	4809      	ldr	r0, [pc, #36]	; (8004438 <siprintf+0x38>)
 8004412:	9107      	str	r1, [sp, #28]
 8004414:	9104      	str	r1, [sp, #16]
 8004416:	4909      	ldr	r1, [pc, #36]	; (800443c <siprintf+0x3c>)
 8004418:	f853 2b04 	ldr.w	r2, [r3], #4
 800441c:	9105      	str	r1, [sp, #20]
 800441e:	6800      	ldr	r0, [r0, #0]
 8004420:	9301      	str	r3, [sp, #4]
 8004422:	a902      	add	r1, sp, #8
 8004424:	f000 fbb2 	bl	8004b8c <_svfiprintf_r>
 8004428:	9b02      	ldr	r3, [sp, #8]
 800442a:	2200      	movs	r2, #0
 800442c:	701a      	strb	r2, [r3, #0]
 800442e:	b01c      	add	sp, #112	; 0x70
 8004430:	f85d eb04 	ldr.w	lr, [sp], #4
 8004434:	b003      	add	sp, #12
 8004436:	4770      	bx	lr
 8004438:	20000050 	.word	0x20000050
 800443c:	ffff0208 	.word	0xffff0208

08004440 <__swbuf_r>:
 8004440:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004442:	460e      	mov	r6, r1
 8004444:	4614      	mov	r4, r2
 8004446:	4605      	mov	r5, r0
 8004448:	b118      	cbz	r0, 8004452 <__swbuf_r+0x12>
 800444a:	6983      	ldr	r3, [r0, #24]
 800444c:	b90b      	cbnz	r3, 8004452 <__swbuf_r+0x12>
 800444e:	f000 f9d9 	bl	8004804 <__sinit>
 8004452:	4b21      	ldr	r3, [pc, #132]	; (80044d8 <__swbuf_r+0x98>)
 8004454:	429c      	cmp	r4, r3
 8004456:	d12b      	bne.n	80044b0 <__swbuf_r+0x70>
 8004458:	686c      	ldr	r4, [r5, #4]
 800445a:	69a3      	ldr	r3, [r4, #24]
 800445c:	60a3      	str	r3, [r4, #8]
 800445e:	89a3      	ldrh	r3, [r4, #12]
 8004460:	071a      	lsls	r2, r3, #28
 8004462:	d52f      	bpl.n	80044c4 <__swbuf_r+0x84>
 8004464:	6923      	ldr	r3, [r4, #16]
 8004466:	b36b      	cbz	r3, 80044c4 <__swbuf_r+0x84>
 8004468:	6923      	ldr	r3, [r4, #16]
 800446a:	6820      	ldr	r0, [r4, #0]
 800446c:	1ac0      	subs	r0, r0, r3
 800446e:	6963      	ldr	r3, [r4, #20]
 8004470:	b2f6      	uxtb	r6, r6
 8004472:	4283      	cmp	r3, r0
 8004474:	4637      	mov	r7, r6
 8004476:	dc04      	bgt.n	8004482 <__swbuf_r+0x42>
 8004478:	4621      	mov	r1, r4
 800447a:	4628      	mov	r0, r5
 800447c:	f000 f92e 	bl	80046dc <_fflush_r>
 8004480:	bb30      	cbnz	r0, 80044d0 <__swbuf_r+0x90>
 8004482:	68a3      	ldr	r3, [r4, #8]
 8004484:	3b01      	subs	r3, #1
 8004486:	60a3      	str	r3, [r4, #8]
 8004488:	6823      	ldr	r3, [r4, #0]
 800448a:	1c5a      	adds	r2, r3, #1
 800448c:	6022      	str	r2, [r4, #0]
 800448e:	701e      	strb	r6, [r3, #0]
 8004490:	6963      	ldr	r3, [r4, #20]
 8004492:	3001      	adds	r0, #1
 8004494:	4283      	cmp	r3, r0
 8004496:	d004      	beq.n	80044a2 <__swbuf_r+0x62>
 8004498:	89a3      	ldrh	r3, [r4, #12]
 800449a:	07db      	lsls	r3, r3, #31
 800449c:	d506      	bpl.n	80044ac <__swbuf_r+0x6c>
 800449e:	2e0a      	cmp	r6, #10
 80044a0:	d104      	bne.n	80044ac <__swbuf_r+0x6c>
 80044a2:	4621      	mov	r1, r4
 80044a4:	4628      	mov	r0, r5
 80044a6:	f000 f919 	bl	80046dc <_fflush_r>
 80044aa:	b988      	cbnz	r0, 80044d0 <__swbuf_r+0x90>
 80044ac:	4638      	mov	r0, r7
 80044ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80044b0:	4b0a      	ldr	r3, [pc, #40]	; (80044dc <__swbuf_r+0x9c>)
 80044b2:	429c      	cmp	r4, r3
 80044b4:	d101      	bne.n	80044ba <__swbuf_r+0x7a>
 80044b6:	68ac      	ldr	r4, [r5, #8]
 80044b8:	e7cf      	b.n	800445a <__swbuf_r+0x1a>
 80044ba:	4b09      	ldr	r3, [pc, #36]	; (80044e0 <__swbuf_r+0xa0>)
 80044bc:	429c      	cmp	r4, r3
 80044be:	bf08      	it	eq
 80044c0:	68ec      	ldreq	r4, [r5, #12]
 80044c2:	e7ca      	b.n	800445a <__swbuf_r+0x1a>
 80044c4:	4621      	mov	r1, r4
 80044c6:	4628      	mov	r0, r5
 80044c8:	f000 f80c 	bl	80044e4 <__swsetup_r>
 80044cc:	2800      	cmp	r0, #0
 80044ce:	d0cb      	beq.n	8004468 <__swbuf_r+0x28>
 80044d0:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80044d4:	e7ea      	b.n	80044ac <__swbuf_r+0x6c>
 80044d6:	bf00      	nop
 80044d8:	080051e4 	.word	0x080051e4
 80044dc:	08005204 	.word	0x08005204
 80044e0:	080051c4 	.word	0x080051c4

080044e4 <__swsetup_r>:
 80044e4:	4b32      	ldr	r3, [pc, #200]	; (80045b0 <__swsetup_r+0xcc>)
 80044e6:	b570      	push	{r4, r5, r6, lr}
 80044e8:	681d      	ldr	r5, [r3, #0]
 80044ea:	4606      	mov	r6, r0
 80044ec:	460c      	mov	r4, r1
 80044ee:	b125      	cbz	r5, 80044fa <__swsetup_r+0x16>
 80044f0:	69ab      	ldr	r3, [r5, #24]
 80044f2:	b913      	cbnz	r3, 80044fa <__swsetup_r+0x16>
 80044f4:	4628      	mov	r0, r5
 80044f6:	f000 f985 	bl	8004804 <__sinit>
 80044fa:	4b2e      	ldr	r3, [pc, #184]	; (80045b4 <__swsetup_r+0xd0>)
 80044fc:	429c      	cmp	r4, r3
 80044fe:	d10f      	bne.n	8004520 <__swsetup_r+0x3c>
 8004500:	686c      	ldr	r4, [r5, #4]
 8004502:	89a3      	ldrh	r3, [r4, #12]
 8004504:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004508:	0719      	lsls	r1, r3, #28
 800450a:	d42c      	bmi.n	8004566 <__swsetup_r+0x82>
 800450c:	06dd      	lsls	r5, r3, #27
 800450e:	d411      	bmi.n	8004534 <__swsetup_r+0x50>
 8004510:	2309      	movs	r3, #9
 8004512:	6033      	str	r3, [r6, #0]
 8004514:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004518:	81a3      	strh	r3, [r4, #12]
 800451a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800451e:	e03e      	b.n	800459e <__swsetup_r+0xba>
 8004520:	4b25      	ldr	r3, [pc, #148]	; (80045b8 <__swsetup_r+0xd4>)
 8004522:	429c      	cmp	r4, r3
 8004524:	d101      	bne.n	800452a <__swsetup_r+0x46>
 8004526:	68ac      	ldr	r4, [r5, #8]
 8004528:	e7eb      	b.n	8004502 <__swsetup_r+0x1e>
 800452a:	4b24      	ldr	r3, [pc, #144]	; (80045bc <__swsetup_r+0xd8>)
 800452c:	429c      	cmp	r4, r3
 800452e:	bf08      	it	eq
 8004530:	68ec      	ldreq	r4, [r5, #12]
 8004532:	e7e6      	b.n	8004502 <__swsetup_r+0x1e>
 8004534:	0758      	lsls	r0, r3, #29
 8004536:	d512      	bpl.n	800455e <__swsetup_r+0x7a>
 8004538:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800453a:	b141      	cbz	r1, 800454e <__swsetup_r+0x6a>
 800453c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004540:	4299      	cmp	r1, r3
 8004542:	d002      	beq.n	800454a <__swsetup_r+0x66>
 8004544:	4630      	mov	r0, r6
 8004546:	f7ff fb7d 	bl	8003c44 <_free_r>
 800454a:	2300      	movs	r3, #0
 800454c:	6363      	str	r3, [r4, #52]	; 0x34
 800454e:	89a3      	ldrh	r3, [r4, #12]
 8004550:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004554:	81a3      	strh	r3, [r4, #12]
 8004556:	2300      	movs	r3, #0
 8004558:	6063      	str	r3, [r4, #4]
 800455a:	6923      	ldr	r3, [r4, #16]
 800455c:	6023      	str	r3, [r4, #0]
 800455e:	89a3      	ldrh	r3, [r4, #12]
 8004560:	f043 0308 	orr.w	r3, r3, #8
 8004564:	81a3      	strh	r3, [r4, #12]
 8004566:	6923      	ldr	r3, [r4, #16]
 8004568:	b94b      	cbnz	r3, 800457e <__swsetup_r+0x9a>
 800456a:	89a3      	ldrh	r3, [r4, #12]
 800456c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004570:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004574:	d003      	beq.n	800457e <__swsetup_r+0x9a>
 8004576:	4621      	mov	r1, r4
 8004578:	4630      	mov	r0, r6
 800457a:	f000 fa09 	bl	8004990 <__smakebuf_r>
 800457e:	89a0      	ldrh	r0, [r4, #12]
 8004580:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004584:	f010 0301 	ands.w	r3, r0, #1
 8004588:	d00a      	beq.n	80045a0 <__swsetup_r+0xbc>
 800458a:	2300      	movs	r3, #0
 800458c:	60a3      	str	r3, [r4, #8]
 800458e:	6963      	ldr	r3, [r4, #20]
 8004590:	425b      	negs	r3, r3
 8004592:	61a3      	str	r3, [r4, #24]
 8004594:	6923      	ldr	r3, [r4, #16]
 8004596:	b943      	cbnz	r3, 80045aa <__swsetup_r+0xc6>
 8004598:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800459c:	d1ba      	bne.n	8004514 <__swsetup_r+0x30>
 800459e:	bd70      	pop	{r4, r5, r6, pc}
 80045a0:	0781      	lsls	r1, r0, #30
 80045a2:	bf58      	it	pl
 80045a4:	6963      	ldrpl	r3, [r4, #20]
 80045a6:	60a3      	str	r3, [r4, #8]
 80045a8:	e7f4      	b.n	8004594 <__swsetup_r+0xb0>
 80045aa:	2000      	movs	r0, #0
 80045ac:	e7f7      	b.n	800459e <__swsetup_r+0xba>
 80045ae:	bf00      	nop
 80045b0:	20000050 	.word	0x20000050
 80045b4:	080051e4 	.word	0x080051e4
 80045b8:	08005204 	.word	0x08005204
 80045bc:	080051c4 	.word	0x080051c4

080045c0 <abort>:
 80045c0:	b508      	push	{r3, lr}
 80045c2:	2006      	movs	r0, #6
 80045c4:	f000 fc0a 	bl	8004ddc <raise>
 80045c8:	2001      	movs	r0, #1
 80045ca:	f7fc f8cf 	bl	800076c <_exit>
	...

080045d0 <__sflush_r>:
 80045d0:	898a      	ldrh	r2, [r1, #12]
 80045d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80045d6:	4605      	mov	r5, r0
 80045d8:	0710      	lsls	r0, r2, #28
 80045da:	460c      	mov	r4, r1
 80045dc:	d458      	bmi.n	8004690 <__sflush_r+0xc0>
 80045de:	684b      	ldr	r3, [r1, #4]
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	dc05      	bgt.n	80045f0 <__sflush_r+0x20>
 80045e4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	dc02      	bgt.n	80045f0 <__sflush_r+0x20>
 80045ea:	2000      	movs	r0, #0
 80045ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80045f0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80045f2:	2e00      	cmp	r6, #0
 80045f4:	d0f9      	beq.n	80045ea <__sflush_r+0x1a>
 80045f6:	2300      	movs	r3, #0
 80045f8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80045fc:	682f      	ldr	r7, [r5, #0]
 80045fe:	602b      	str	r3, [r5, #0]
 8004600:	d032      	beq.n	8004668 <__sflush_r+0x98>
 8004602:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004604:	89a3      	ldrh	r3, [r4, #12]
 8004606:	075a      	lsls	r2, r3, #29
 8004608:	d505      	bpl.n	8004616 <__sflush_r+0x46>
 800460a:	6863      	ldr	r3, [r4, #4]
 800460c:	1ac0      	subs	r0, r0, r3
 800460e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004610:	b10b      	cbz	r3, 8004616 <__sflush_r+0x46>
 8004612:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004614:	1ac0      	subs	r0, r0, r3
 8004616:	2300      	movs	r3, #0
 8004618:	4602      	mov	r2, r0
 800461a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800461c:	6a21      	ldr	r1, [r4, #32]
 800461e:	4628      	mov	r0, r5
 8004620:	47b0      	blx	r6
 8004622:	1c43      	adds	r3, r0, #1
 8004624:	89a3      	ldrh	r3, [r4, #12]
 8004626:	d106      	bne.n	8004636 <__sflush_r+0x66>
 8004628:	6829      	ldr	r1, [r5, #0]
 800462a:	291d      	cmp	r1, #29
 800462c:	d82c      	bhi.n	8004688 <__sflush_r+0xb8>
 800462e:	4a2a      	ldr	r2, [pc, #168]	; (80046d8 <__sflush_r+0x108>)
 8004630:	40ca      	lsrs	r2, r1
 8004632:	07d6      	lsls	r6, r2, #31
 8004634:	d528      	bpl.n	8004688 <__sflush_r+0xb8>
 8004636:	2200      	movs	r2, #0
 8004638:	6062      	str	r2, [r4, #4]
 800463a:	04d9      	lsls	r1, r3, #19
 800463c:	6922      	ldr	r2, [r4, #16]
 800463e:	6022      	str	r2, [r4, #0]
 8004640:	d504      	bpl.n	800464c <__sflush_r+0x7c>
 8004642:	1c42      	adds	r2, r0, #1
 8004644:	d101      	bne.n	800464a <__sflush_r+0x7a>
 8004646:	682b      	ldr	r3, [r5, #0]
 8004648:	b903      	cbnz	r3, 800464c <__sflush_r+0x7c>
 800464a:	6560      	str	r0, [r4, #84]	; 0x54
 800464c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800464e:	602f      	str	r7, [r5, #0]
 8004650:	2900      	cmp	r1, #0
 8004652:	d0ca      	beq.n	80045ea <__sflush_r+0x1a>
 8004654:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004658:	4299      	cmp	r1, r3
 800465a:	d002      	beq.n	8004662 <__sflush_r+0x92>
 800465c:	4628      	mov	r0, r5
 800465e:	f7ff faf1 	bl	8003c44 <_free_r>
 8004662:	2000      	movs	r0, #0
 8004664:	6360      	str	r0, [r4, #52]	; 0x34
 8004666:	e7c1      	b.n	80045ec <__sflush_r+0x1c>
 8004668:	6a21      	ldr	r1, [r4, #32]
 800466a:	2301      	movs	r3, #1
 800466c:	4628      	mov	r0, r5
 800466e:	47b0      	blx	r6
 8004670:	1c41      	adds	r1, r0, #1
 8004672:	d1c7      	bne.n	8004604 <__sflush_r+0x34>
 8004674:	682b      	ldr	r3, [r5, #0]
 8004676:	2b00      	cmp	r3, #0
 8004678:	d0c4      	beq.n	8004604 <__sflush_r+0x34>
 800467a:	2b1d      	cmp	r3, #29
 800467c:	d001      	beq.n	8004682 <__sflush_r+0xb2>
 800467e:	2b16      	cmp	r3, #22
 8004680:	d101      	bne.n	8004686 <__sflush_r+0xb6>
 8004682:	602f      	str	r7, [r5, #0]
 8004684:	e7b1      	b.n	80045ea <__sflush_r+0x1a>
 8004686:	89a3      	ldrh	r3, [r4, #12]
 8004688:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800468c:	81a3      	strh	r3, [r4, #12]
 800468e:	e7ad      	b.n	80045ec <__sflush_r+0x1c>
 8004690:	690f      	ldr	r7, [r1, #16]
 8004692:	2f00      	cmp	r7, #0
 8004694:	d0a9      	beq.n	80045ea <__sflush_r+0x1a>
 8004696:	0793      	lsls	r3, r2, #30
 8004698:	680e      	ldr	r6, [r1, #0]
 800469a:	bf08      	it	eq
 800469c:	694b      	ldreq	r3, [r1, #20]
 800469e:	600f      	str	r7, [r1, #0]
 80046a0:	bf18      	it	ne
 80046a2:	2300      	movne	r3, #0
 80046a4:	eba6 0807 	sub.w	r8, r6, r7
 80046a8:	608b      	str	r3, [r1, #8]
 80046aa:	f1b8 0f00 	cmp.w	r8, #0
 80046ae:	dd9c      	ble.n	80045ea <__sflush_r+0x1a>
 80046b0:	6a21      	ldr	r1, [r4, #32]
 80046b2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80046b4:	4643      	mov	r3, r8
 80046b6:	463a      	mov	r2, r7
 80046b8:	4628      	mov	r0, r5
 80046ba:	47b0      	blx	r6
 80046bc:	2800      	cmp	r0, #0
 80046be:	dc06      	bgt.n	80046ce <__sflush_r+0xfe>
 80046c0:	89a3      	ldrh	r3, [r4, #12]
 80046c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80046c6:	81a3      	strh	r3, [r4, #12]
 80046c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80046cc:	e78e      	b.n	80045ec <__sflush_r+0x1c>
 80046ce:	4407      	add	r7, r0
 80046d0:	eba8 0800 	sub.w	r8, r8, r0
 80046d4:	e7e9      	b.n	80046aa <__sflush_r+0xda>
 80046d6:	bf00      	nop
 80046d8:	20400001 	.word	0x20400001

080046dc <_fflush_r>:
 80046dc:	b538      	push	{r3, r4, r5, lr}
 80046de:	690b      	ldr	r3, [r1, #16]
 80046e0:	4605      	mov	r5, r0
 80046e2:	460c      	mov	r4, r1
 80046e4:	b913      	cbnz	r3, 80046ec <_fflush_r+0x10>
 80046e6:	2500      	movs	r5, #0
 80046e8:	4628      	mov	r0, r5
 80046ea:	bd38      	pop	{r3, r4, r5, pc}
 80046ec:	b118      	cbz	r0, 80046f6 <_fflush_r+0x1a>
 80046ee:	6983      	ldr	r3, [r0, #24]
 80046f0:	b90b      	cbnz	r3, 80046f6 <_fflush_r+0x1a>
 80046f2:	f000 f887 	bl	8004804 <__sinit>
 80046f6:	4b14      	ldr	r3, [pc, #80]	; (8004748 <_fflush_r+0x6c>)
 80046f8:	429c      	cmp	r4, r3
 80046fa:	d11b      	bne.n	8004734 <_fflush_r+0x58>
 80046fc:	686c      	ldr	r4, [r5, #4]
 80046fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004702:	2b00      	cmp	r3, #0
 8004704:	d0ef      	beq.n	80046e6 <_fflush_r+0xa>
 8004706:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004708:	07d0      	lsls	r0, r2, #31
 800470a:	d404      	bmi.n	8004716 <_fflush_r+0x3a>
 800470c:	0599      	lsls	r1, r3, #22
 800470e:	d402      	bmi.n	8004716 <_fflush_r+0x3a>
 8004710:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004712:	f000 f915 	bl	8004940 <__retarget_lock_acquire_recursive>
 8004716:	4628      	mov	r0, r5
 8004718:	4621      	mov	r1, r4
 800471a:	f7ff ff59 	bl	80045d0 <__sflush_r>
 800471e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004720:	07da      	lsls	r2, r3, #31
 8004722:	4605      	mov	r5, r0
 8004724:	d4e0      	bmi.n	80046e8 <_fflush_r+0xc>
 8004726:	89a3      	ldrh	r3, [r4, #12]
 8004728:	059b      	lsls	r3, r3, #22
 800472a:	d4dd      	bmi.n	80046e8 <_fflush_r+0xc>
 800472c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800472e:	f000 f908 	bl	8004942 <__retarget_lock_release_recursive>
 8004732:	e7d9      	b.n	80046e8 <_fflush_r+0xc>
 8004734:	4b05      	ldr	r3, [pc, #20]	; (800474c <_fflush_r+0x70>)
 8004736:	429c      	cmp	r4, r3
 8004738:	d101      	bne.n	800473e <_fflush_r+0x62>
 800473a:	68ac      	ldr	r4, [r5, #8]
 800473c:	e7df      	b.n	80046fe <_fflush_r+0x22>
 800473e:	4b04      	ldr	r3, [pc, #16]	; (8004750 <_fflush_r+0x74>)
 8004740:	429c      	cmp	r4, r3
 8004742:	bf08      	it	eq
 8004744:	68ec      	ldreq	r4, [r5, #12]
 8004746:	e7da      	b.n	80046fe <_fflush_r+0x22>
 8004748:	080051e4 	.word	0x080051e4
 800474c:	08005204 	.word	0x08005204
 8004750:	080051c4 	.word	0x080051c4

08004754 <std>:
 8004754:	2300      	movs	r3, #0
 8004756:	b510      	push	{r4, lr}
 8004758:	4604      	mov	r4, r0
 800475a:	e9c0 3300 	strd	r3, r3, [r0]
 800475e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004762:	6083      	str	r3, [r0, #8]
 8004764:	8181      	strh	r1, [r0, #12]
 8004766:	6643      	str	r3, [r0, #100]	; 0x64
 8004768:	81c2      	strh	r2, [r0, #14]
 800476a:	6183      	str	r3, [r0, #24]
 800476c:	4619      	mov	r1, r3
 800476e:	2208      	movs	r2, #8
 8004770:	305c      	adds	r0, #92	; 0x5c
 8004772:	f7ff fa5f 	bl	8003c34 <memset>
 8004776:	4b05      	ldr	r3, [pc, #20]	; (800478c <std+0x38>)
 8004778:	6263      	str	r3, [r4, #36]	; 0x24
 800477a:	4b05      	ldr	r3, [pc, #20]	; (8004790 <std+0x3c>)
 800477c:	62a3      	str	r3, [r4, #40]	; 0x28
 800477e:	4b05      	ldr	r3, [pc, #20]	; (8004794 <std+0x40>)
 8004780:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004782:	4b05      	ldr	r3, [pc, #20]	; (8004798 <std+0x44>)
 8004784:	6224      	str	r4, [r4, #32]
 8004786:	6323      	str	r3, [r4, #48]	; 0x30
 8004788:	bd10      	pop	{r4, pc}
 800478a:	bf00      	nop
 800478c:	08004e15 	.word	0x08004e15
 8004790:	08004e37 	.word	0x08004e37
 8004794:	08004e6f 	.word	0x08004e6f
 8004798:	08004e93 	.word	0x08004e93

0800479c <_cleanup_r>:
 800479c:	4901      	ldr	r1, [pc, #4]	; (80047a4 <_cleanup_r+0x8>)
 800479e:	f000 b8af 	b.w	8004900 <_fwalk_reent>
 80047a2:	bf00      	nop
 80047a4:	080046dd 	.word	0x080046dd

080047a8 <__sfmoreglue>:
 80047a8:	b570      	push	{r4, r5, r6, lr}
 80047aa:	2268      	movs	r2, #104	; 0x68
 80047ac:	1e4d      	subs	r5, r1, #1
 80047ae:	4355      	muls	r5, r2
 80047b0:	460e      	mov	r6, r1
 80047b2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80047b6:	f7ff fab1 	bl	8003d1c <_malloc_r>
 80047ba:	4604      	mov	r4, r0
 80047bc:	b140      	cbz	r0, 80047d0 <__sfmoreglue+0x28>
 80047be:	2100      	movs	r1, #0
 80047c0:	e9c0 1600 	strd	r1, r6, [r0]
 80047c4:	300c      	adds	r0, #12
 80047c6:	60a0      	str	r0, [r4, #8]
 80047c8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80047cc:	f7ff fa32 	bl	8003c34 <memset>
 80047d0:	4620      	mov	r0, r4
 80047d2:	bd70      	pop	{r4, r5, r6, pc}

080047d4 <__sfp_lock_acquire>:
 80047d4:	4801      	ldr	r0, [pc, #4]	; (80047dc <__sfp_lock_acquire+0x8>)
 80047d6:	f000 b8b3 	b.w	8004940 <__retarget_lock_acquire_recursive>
 80047da:	bf00      	nop
 80047dc:	2000017d 	.word	0x2000017d

080047e0 <__sfp_lock_release>:
 80047e0:	4801      	ldr	r0, [pc, #4]	; (80047e8 <__sfp_lock_release+0x8>)
 80047e2:	f000 b8ae 	b.w	8004942 <__retarget_lock_release_recursive>
 80047e6:	bf00      	nop
 80047e8:	2000017d 	.word	0x2000017d

080047ec <__sinit_lock_acquire>:
 80047ec:	4801      	ldr	r0, [pc, #4]	; (80047f4 <__sinit_lock_acquire+0x8>)
 80047ee:	f000 b8a7 	b.w	8004940 <__retarget_lock_acquire_recursive>
 80047f2:	bf00      	nop
 80047f4:	2000017e 	.word	0x2000017e

080047f8 <__sinit_lock_release>:
 80047f8:	4801      	ldr	r0, [pc, #4]	; (8004800 <__sinit_lock_release+0x8>)
 80047fa:	f000 b8a2 	b.w	8004942 <__retarget_lock_release_recursive>
 80047fe:	bf00      	nop
 8004800:	2000017e 	.word	0x2000017e

08004804 <__sinit>:
 8004804:	b510      	push	{r4, lr}
 8004806:	4604      	mov	r4, r0
 8004808:	f7ff fff0 	bl	80047ec <__sinit_lock_acquire>
 800480c:	69a3      	ldr	r3, [r4, #24]
 800480e:	b11b      	cbz	r3, 8004818 <__sinit+0x14>
 8004810:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004814:	f7ff bff0 	b.w	80047f8 <__sinit_lock_release>
 8004818:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800481c:	6523      	str	r3, [r4, #80]	; 0x50
 800481e:	4b13      	ldr	r3, [pc, #76]	; (800486c <__sinit+0x68>)
 8004820:	4a13      	ldr	r2, [pc, #76]	; (8004870 <__sinit+0x6c>)
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	62a2      	str	r2, [r4, #40]	; 0x28
 8004826:	42a3      	cmp	r3, r4
 8004828:	bf04      	itt	eq
 800482a:	2301      	moveq	r3, #1
 800482c:	61a3      	streq	r3, [r4, #24]
 800482e:	4620      	mov	r0, r4
 8004830:	f000 f820 	bl	8004874 <__sfp>
 8004834:	6060      	str	r0, [r4, #4]
 8004836:	4620      	mov	r0, r4
 8004838:	f000 f81c 	bl	8004874 <__sfp>
 800483c:	60a0      	str	r0, [r4, #8]
 800483e:	4620      	mov	r0, r4
 8004840:	f000 f818 	bl	8004874 <__sfp>
 8004844:	2200      	movs	r2, #0
 8004846:	60e0      	str	r0, [r4, #12]
 8004848:	2104      	movs	r1, #4
 800484a:	6860      	ldr	r0, [r4, #4]
 800484c:	f7ff ff82 	bl	8004754 <std>
 8004850:	68a0      	ldr	r0, [r4, #8]
 8004852:	2201      	movs	r2, #1
 8004854:	2109      	movs	r1, #9
 8004856:	f7ff ff7d 	bl	8004754 <std>
 800485a:	68e0      	ldr	r0, [r4, #12]
 800485c:	2202      	movs	r2, #2
 800485e:	2112      	movs	r1, #18
 8004860:	f7ff ff78 	bl	8004754 <std>
 8004864:	2301      	movs	r3, #1
 8004866:	61a3      	str	r3, [r4, #24]
 8004868:	e7d2      	b.n	8004810 <__sinit+0xc>
 800486a:	bf00      	nop
 800486c:	0800518c 	.word	0x0800518c
 8004870:	0800479d 	.word	0x0800479d

08004874 <__sfp>:
 8004874:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004876:	4607      	mov	r7, r0
 8004878:	f7ff ffac 	bl	80047d4 <__sfp_lock_acquire>
 800487c:	4b1e      	ldr	r3, [pc, #120]	; (80048f8 <__sfp+0x84>)
 800487e:	681e      	ldr	r6, [r3, #0]
 8004880:	69b3      	ldr	r3, [r6, #24]
 8004882:	b913      	cbnz	r3, 800488a <__sfp+0x16>
 8004884:	4630      	mov	r0, r6
 8004886:	f7ff ffbd 	bl	8004804 <__sinit>
 800488a:	3648      	adds	r6, #72	; 0x48
 800488c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004890:	3b01      	subs	r3, #1
 8004892:	d503      	bpl.n	800489c <__sfp+0x28>
 8004894:	6833      	ldr	r3, [r6, #0]
 8004896:	b30b      	cbz	r3, 80048dc <__sfp+0x68>
 8004898:	6836      	ldr	r6, [r6, #0]
 800489a:	e7f7      	b.n	800488c <__sfp+0x18>
 800489c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80048a0:	b9d5      	cbnz	r5, 80048d8 <__sfp+0x64>
 80048a2:	4b16      	ldr	r3, [pc, #88]	; (80048fc <__sfp+0x88>)
 80048a4:	60e3      	str	r3, [r4, #12]
 80048a6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80048aa:	6665      	str	r5, [r4, #100]	; 0x64
 80048ac:	f000 f847 	bl	800493e <__retarget_lock_init_recursive>
 80048b0:	f7ff ff96 	bl	80047e0 <__sfp_lock_release>
 80048b4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80048b8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80048bc:	6025      	str	r5, [r4, #0]
 80048be:	61a5      	str	r5, [r4, #24]
 80048c0:	2208      	movs	r2, #8
 80048c2:	4629      	mov	r1, r5
 80048c4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80048c8:	f7ff f9b4 	bl	8003c34 <memset>
 80048cc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80048d0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80048d4:	4620      	mov	r0, r4
 80048d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80048d8:	3468      	adds	r4, #104	; 0x68
 80048da:	e7d9      	b.n	8004890 <__sfp+0x1c>
 80048dc:	2104      	movs	r1, #4
 80048de:	4638      	mov	r0, r7
 80048e0:	f7ff ff62 	bl	80047a8 <__sfmoreglue>
 80048e4:	4604      	mov	r4, r0
 80048e6:	6030      	str	r0, [r6, #0]
 80048e8:	2800      	cmp	r0, #0
 80048ea:	d1d5      	bne.n	8004898 <__sfp+0x24>
 80048ec:	f7ff ff78 	bl	80047e0 <__sfp_lock_release>
 80048f0:	230c      	movs	r3, #12
 80048f2:	603b      	str	r3, [r7, #0]
 80048f4:	e7ee      	b.n	80048d4 <__sfp+0x60>
 80048f6:	bf00      	nop
 80048f8:	0800518c 	.word	0x0800518c
 80048fc:	ffff0001 	.word	0xffff0001

08004900 <_fwalk_reent>:
 8004900:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004904:	4606      	mov	r6, r0
 8004906:	4688      	mov	r8, r1
 8004908:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800490c:	2700      	movs	r7, #0
 800490e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004912:	f1b9 0901 	subs.w	r9, r9, #1
 8004916:	d505      	bpl.n	8004924 <_fwalk_reent+0x24>
 8004918:	6824      	ldr	r4, [r4, #0]
 800491a:	2c00      	cmp	r4, #0
 800491c:	d1f7      	bne.n	800490e <_fwalk_reent+0xe>
 800491e:	4638      	mov	r0, r7
 8004920:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004924:	89ab      	ldrh	r3, [r5, #12]
 8004926:	2b01      	cmp	r3, #1
 8004928:	d907      	bls.n	800493a <_fwalk_reent+0x3a>
 800492a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800492e:	3301      	adds	r3, #1
 8004930:	d003      	beq.n	800493a <_fwalk_reent+0x3a>
 8004932:	4629      	mov	r1, r5
 8004934:	4630      	mov	r0, r6
 8004936:	47c0      	blx	r8
 8004938:	4307      	orrs	r7, r0
 800493a:	3568      	adds	r5, #104	; 0x68
 800493c:	e7e9      	b.n	8004912 <_fwalk_reent+0x12>

0800493e <__retarget_lock_init_recursive>:
 800493e:	4770      	bx	lr

08004940 <__retarget_lock_acquire_recursive>:
 8004940:	4770      	bx	lr

08004942 <__retarget_lock_release_recursive>:
 8004942:	4770      	bx	lr

08004944 <__swhatbuf_r>:
 8004944:	b570      	push	{r4, r5, r6, lr}
 8004946:	460e      	mov	r6, r1
 8004948:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800494c:	2900      	cmp	r1, #0
 800494e:	b096      	sub	sp, #88	; 0x58
 8004950:	4614      	mov	r4, r2
 8004952:	461d      	mov	r5, r3
 8004954:	da08      	bge.n	8004968 <__swhatbuf_r+0x24>
 8004956:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800495a:	2200      	movs	r2, #0
 800495c:	602a      	str	r2, [r5, #0]
 800495e:	061a      	lsls	r2, r3, #24
 8004960:	d410      	bmi.n	8004984 <__swhatbuf_r+0x40>
 8004962:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004966:	e00e      	b.n	8004986 <__swhatbuf_r+0x42>
 8004968:	466a      	mov	r2, sp
 800496a:	f000 fab9 	bl	8004ee0 <_fstat_r>
 800496e:	2800      	cmp	r0, #0
 8004970:	dbf1      	blt.n	8004956 <__swhatbuf_r+0x12>
 8004972:	9a01      	ldr	r2, [sp, #4]
 8004974:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004978:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800497c:	425a      	negs	r2, r3
 800497e:	415a      	adcs	r2, r3
 8004980:	602a      	str	r2, [r5, #0]
 8004982:	e7ee      	b.n	8004962 <__swhatbuf_r+0x1e>
 8004984:	2340      	movs	r3, #64	; 0x40
 8004986:	2000      	movs	r0, #0
 8004988:	6023      	str	r3, [r4, #0]
 800498a:	b016      	add	sp, #88	; 0x58
 800498c:	bd70      	pop	{r4, r5, r6, pc}
	...

08004990 <__smakebuf_r>:
 8004990:	898b      	ldrh	r3, [r1, #12]
 8004992:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004994:	079d      	lsls	r5, r3, #30
 8004996:	4606      	mov	r6, r0
 8004998:	460c      	mov	r4, r1
 800499a:	d507      	bpl.n	80049ac <__smakebuf_r+0x1c>
 800499c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80049a0:	6023      	str	r3, [r4, #0]
 80049a2:	6123      	str	r3, [r4, #16]
 80049a4:	2301      	movs	r3, #1
 80049a6:	6163      	str	r3, [r4, #20]
 80049a8:	b002      	add	sp, #8
 80049aa:	bd70      	pop	{r4, r5, r6, pc}
 80049ac:	ab01      	add	r3, sp, #4
 80049ae:	466a      	mov	r2, sp
 80049b0:	f7ff ffc8 	bl	8004944 <__swhatbuf_r>
 80049b4:	9900      	ldr	r1, [sp, #0]
 80049b6:	4605      	mov	r5, r0
 80049b8:	4630      	mov	r0, r6
 80049ba:	f7ff f9af 	bl	8003d1c <_malloc_r>
 80049be:	b948      	cbnz	r0, 80049d4 <__smakebuf_r+0x44>
 80049c0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80049c4:	059a      	lsls	r2, r3, #22
 80049c6:	d4ef      	bmi.n	80049a8 <__smakebuf_r+0x18>
 80049c8:	f023 0303 	bic.w	r3, r3, #3
 80049cc:	f043 0302 	orr.w	r3, r3, #2
 80049d0:	81a3      	strh	r3, [r4, #12]
 80049d2:	e7e3      	b.n	800499c <__smakebuf_r+0xc>
 80049d4:	4b0d      	ldr	r3, [pc, #52]	; (8004a0c <__smakebuf_r+0x7c>)
 80049d6:	62b3      	str	r3, [r6, #40]	; 0x28
 80049d8:	89a3      	ldrh	r3, [r4, #12]
 80049da:	6020      	str	r0, [r4, #0]
 80049dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80049e0:	81a3      	strh	r3, [r4, #12]
 80049e2:	9b00      	ldr	r3, [sp, #0]
 80049e4:	6163      	str	r3, [r4, #20]
 80049e6:	9b01      	ldr	r3, [sp, #4]
 80049e8:	6120      	str	r0, [r4, #16]
 80049ea:	b15b      	cbz	r3, 8004a04 <__smakebuf_r+0x74>
 80049ec:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80049f0:	4630      	mov	r0, r6
 80049f2:	f000 fa87 	bl	8004f04 <_isatty_r>
 80049f6:	b128      	cbz	r0, 8004a04 <__smakebuf_r+0x74>
 80049f8:	89a3      	ldrh	r3, [r4, #12]
 80049fa:	f023 0303 	bic.w	r3, r3, #3
 80049fe:	f043 0301 	orr.w	r3, r3, #1
 8004a02:	81a3      	strh	r3, [r4, #12]
 8004a04:	89a0      	ldrh	r0, [r4, #12]
 8004a06:	4305      	orrs	r5, r0
 8004a08:	81a5      	strh	r5, [r4, #12]
 8004a0a:	e7cd      	b.n	80049a8 <__smakebuf_r+0x18>
 8004a0c:	0800479d 	.word	0x0800479d

08004a10 <memcpy>:
 8004a10:	440a      	add	r2, r1
 8004a12:	4291      	cmp	r1, r2
 8004a14:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8004a18:	d100      	bne.n	8004a1c <memcpy+0xc>
 8004a1a:	4770      	bx	lr
 8004a1c:	b510      	push	{r4, lr}
 8004a1e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004a22:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004a26:	4291      	cmp	r1, r2
 8004a28:	d1f9      	bne.n	8004a1e <memcpy+0xe>
 8004a2a:	bd10      	pop	{r4, pc}

08004a2c <memmove>:
 8004a2c:	4288      	cmp	r0, r1
 8004a2e:	b510      	push	{r4, lr}
 8004a30:	eb01 0402 	add.w	r4, r1, r2
 8004a34:	d902      	bls.n	8004a3c <memmove+0x10>
 8004a36:	4284      	cmp	r4, r0
 8004a38:	4623      	mov	r3, r4
 8004a3a:	d807      	bhi.n	8004a4c <memmove+0x20>
 8004a3c:	1e43      	subs	r3, r0, #1
 8004a3e:	42a1      	cmp	r1, r4
 8004a40:	d008      	beq.n	8004a54 <memmove+0x28>
 8004a42:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004a46:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004a4a:	e7f8      	b.n	8004a3e <memmove+0x12>
 8004a4c:	4402      	add	r2, r0
 8004a4e:	4601      	mov	r1, r0
 8004a50:	428a      	cmp	r2, r1
 8004a52:	d100      	bne.n	8004a56 <memmove+0x2a>
 8004a54:	bd10      	pop	{r4, pc}
 8004a56:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004a5a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004a5e:	e7f7      	b.n	8004a50 <memmove+0x24>

08004a60 <__malloc_lock>:
 8004a60:	4801      	ldr	r0, [pc, #4]	; (8004a68 <__malloc_lock+0x8>)
 8004a62:	f7ff bf6d 	b.w	8004940 <__retarget_lock_acquire_recursive>
 8004a66:	bf00      	nop
 8004a68:	2000017c 	.word	0x2000017c

08004a6c <__malloc_unlock>:
 8004a6c:	4801      	ldr	r0, [pc, #4]	; (8004a74 <__malloc_unlock+0x8>)
 8004a6e:	f7ff bf68 	b.w	8004942 <__retarget_lock_release_recursive>
 8004a72:	bf00      	nop
 8004a74:	2000017c 	.word	0x2000017c

08004a78 <_realloc_r>:
 8004a78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004a7c:	4680      	mov	r8, r0
 8004a7e:	4614      	mov	r4, r2
 8004a80:	460e      	mov	r6, r1
 8004a82:	b921      	cbnz	r1, 8004a8e <_realloc_r+0x16>
 8004a84:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004a88:	4611      	mov	r1, r2
 8004a8a:	f7ff b947 	b.w	8003d1c <_malloc_r>
 8004a8e:	b92a      	cbnz	r2, 8004a9c <_realloc_r+0x24>
 8004a90:	f7ff f8d8 	bl	8003c44 <_free_r>
 8004a94:	4625      	mov	r5, r4
 8004a96:	4628      	mov	r0, r5
 8004a98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004a9c:	f000 fa54 	bl	8004f48 <_malloc_usable_size_r>
 8004aa0:	4284      	cmp	r4, r0
 8004aa2:	4607      	mov	r7, r0
 8004aa4:	d802      	bhi.n	8004aac <_realloc_r+0x34>
 8004aa6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004aaa:	d812      	bhi.n	8004ad2 <_realloc_r+0x5a>
 8004aac:	4621      	mov	r1, r4
 8004aae:	4640      	mov	r0, r8
 8004ab0:	f7ff f934 	bl	8003d1c <_malloc_r>
 8004ab4:	4605      	mov	r5, r0
 8004ab6:	2800      	cmp	r0, #0
 8004ab8:	d0ed      	beq.n	8004a96 <_realloc_r+0x1e>
 8004aba:	42bc      	cmp	r4, r7
 8004abc:	4622      	mov	r2, r4
 8004abe:	4631      	mov	r1, r6
 8004ac0:	bf28      	it	cs
 8004ac2:	463a      	movcs	r2, r7
 8004ac4:	f7ff ffa4 	bl	8004a10 <memcpy>
 8004ac8:	4631      	mov	r1, r6
 8004aca:	4640      	mov	r0, r8
 8004acc:	f7ff f8ba 	bl	8003c44 <_free_r>
 8004ad0:	e7e1      	b.n	8004a96 <_realloc_r+0x1e>
 8004ad2:	4635      	mov	r5, r6
 8004ad4:	e7df      	b.n	8004a96 <_realloc_r+0x1e>

08004ad6 <__ssputs_r>:
 8004ad6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004ada:	688e      	ldr	r6, [r1, #8]
 8004adc:	429e      	cmp	r6, r3
 8004ade:	4682      	mov	sl, r0
 8004ae0:	460c      	mov	r4, r1
 8004ae2:	4690      	mov	r8, r2
 8004ae4:	461f      	mov	r7, r3
 8004ae6:	d838      	bhi.n	8004b5a <__ssputs_r+0x84>
 8004ae8:	898a      	ldrh	r2, [r1, #12]
 8004aea:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004aee:	d032      	beq.n	8004b56 <__ssputs_r+0x80>
 8004af0:	6825      	ldr	r5, [r4, #0]
 8004af2:	6909      	ldr	r1, [r1, #16]
 8004af4:	eba5 0901 	sub.w	r9, r5, r1
 8004af8:	6965      	ldr	r5, [r4, #20]
 8004afa:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004afe:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004b02:	3301      	adds	r3, #1
 8004b04:	444b      	add	r3, r9
 8004b06:	106d      	asrs	r5, r5, #1
 8004b08:	429d      	cmp	r5, r3
 8004b0a:	bf38      	it	cc
 8004b0c:	461d      	movcc	r5, r3
 8004b0e:	0553      	lsls	r3, r2, #21
 8004b10:	d531      	bpl.n	8004b76 <__ssputs_r+0xa0>
 8004b12:	4629      	mov	r1, r5
 8004b14:	f7ff f902 	bl	8003d1c <_malloc_r>
 8004b18:	4606      	mov	r6, r0
 8004b1a:	b950      	cbnz	r0, 8004b32 <__ssputs_r+0x5c>
 8004b1c:	230c      	movs	r3, #12
 8004b1e:	f8ca 3000 	str.w	r3, [sl]
 8004b22:	89a3      	ldrh	r3, [r4, #12]
 8004b24:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004b28:	81a3      	strh	r3, [r4, #12]
 8004b2a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004b2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b32:	6921      	ldr	r1, [r4, #16]
 8004b34:	464a      	mov	r2, r9
 8004b36:	f7ff ff6b 	bl	8004a10 <memcpy>
 8004b3a:	89a3      	ldrh	r3, [r4, #12]
 8004b3c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004b40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b44:	81a3      	strh	r3, [r4, #12]
 8004b46:	6126      	str	r6, [r4, #16]
 8004b48:	6165      	str	r5, [r4, #20]
 8004b4a:	444e      	add	r6, r9
 8004b4c:	eba5 0509 	sub.w	r5, r5, r9
 8004b50:	6026      	str	r6, [r4, #0]
 8004b52:	60a5      	str	r5, [r4, #8]
 8004b54:	463e      	mov	r6, r7
 8004b56:	42be      	cmp	r6, r7
 8004b58:	d900      	bls.n	8004b5c <__ssputs_r+0x86>
 8004b5a:	463e      	mov	r6, r7
 8004b5c:	6820      	ldr	r0, [r4, #0]
 8004b5e:	4632      	mov	r2, r6
 8004b60:	4641      	mov	r1, r8
 8004b62:	f7ff ff63 	bl	8004a2c <memmove>
 8004b66:	68a3      	ldr	r3, [r4, #8]
 8004b68:	1b9b      	subs	r3, r3, r6
 8004b6a:	60a3      	str	r3, [r4, #8]
 8004b6c:	6823      	ldr	r3, [r4, #0]
 8004b6e:	4433      	add	r3, r6
 8004b70:	6023      	str	r3, [r4, #0]
 8004b72:	2000      	movs	r0, #0
 8004b74:	e7db      	b.n	8004b2e <__ssputs_r+0x58>
 8004b76:	462a      	mov	r2, r5
 8004b78:	f7ff ff7e 	bl	8004a78 <_realloc_r>
 8004b7c:	4606      	mov	r6, r0
 8004b7e:	2800      	cmp	r0, #0
 8004b80:	d1e1      	bne.n	8004b46 <__ssputs_r+0x70>
 8004b82:	6921      	ldr	r1, [r4, #16]
 8004b84:	4650      	mov	r0, sl
 8004b86:	f7ff f85d 	bl	8003c44 <_free_r>
 8004b8a:	e7c7      	b.n	8004b1c <__ssputs_r+0x46>

08004b8c <_svfiprintf_r>:
 8004b8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b90:	4698      	mov	r8, r3
 8004b92:	898b      	ldrh	r3, [r1, #12]
 8004b94:	061b      	lsls	r3, r3, #24
 8004b96:	b09d      	sub	sp, #116	; 0x74
 8004b98:	4607      	mov	r7, r0
 8004b9a:	460d      	mov	r5, r1
 8004b9c:	4614      	mov	r4, r2
 8004b9e:	d50e      	bpl.n	8004bbe <_svfiprintf_r+0x32>
 8004ba0:	690b      	ldr	r3, [r1, #16]
 8004ba2:	b963      	cbnz	r3, 8004bbe <_svfiprintf_r+0x32>
 8004ba4:	2140      	movs	r1, #64	; 0x40
 8004ba6:	f7ff f8b9 	bl	8003d1c <_malloc_r>
 8004baa:	6028      	str	r0, [r5, #0]
 8004bac:	6128      	str	r0, [r5, #16]
 8004bae:	b920      	cbnz	r0, 8004bba <_svfiprintf_r+0x2e>
 8004bb0:	230c      	movs	r3, #12
 8004bb2:	603b      	str	r3, [r7, #0]
 8004bb4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004bb8:	e0d1      	b.n	8004d5e <_svfiprintf_r+0x1d2>
 8004bba:	2340      	movs	r3, #64	; 0x40
 8004bbc:	616b      	str	r3, [r5, #20]
 8004bbe:	2300      	movs	r3, #0
 8004bc0:	9309      	str	r3, [sp, #36]	; 0x24
 8004bc2:	2320      	movs	r3, #32
 8004bc4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004bc8:	f8cd 800c 	str.w	r8, [sp, #12]
 8004bcc:	2330      	movs	r3, #48	; 0x30
 8004bce:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8004d78 <_svfiprintf_r+0x1ec>
 8004bd2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004bd6:	f04f 0901 	mov.w	r9, #1
 8004bda:	4623      	mov	r3, r4
 8004bdc:	469a      	mov	sl, r3
 8004bde:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004be2:	b10a      	cbz	r2, 8004be8 <_svfiprintf_r+0x5c>
 8004be4:	2a25      	cmp	r2, #37	; 0x25
 8004be6:	d1f9      	bne.n	8004bdc <_svfiprintf_r+0x50>
 8004be8:	ebba 0b04 	subs.w	fp, sl, r4
 8004bec:	d00b      	beq.n	8004c06 <_svfiprintf_r+0x7a>
 8004bee:	465b      	mov	r3, fp
 8004bf0:	4622      	mov	r2, r4
 8004bf2:	4629      	mov	r1, r5
 8004bf4:	4638      	mov	r0, r7
 8004bf6:	f7ff ff6e 	bl	8004ad6 <__ssputs_r>
 8004bfa:	3001      	adds	r0, #1
 8004bfc:	f000 80aa 	beq.w	8004d54 <_svfiprintf_r+0x1c8>
 8004c00:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004c02:	445a      	add	r2, fp
 8004c04:	9209      	str	r2, [sp, #36]	; 0x24
 8004c06:	f89a 3000 	ldrb.w	r3, [sl]
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	f000 80a2 	beq.w	8004d54 <_svfiprintf_r+0x1c8>
 8004c10:	2300      	movs	r3, #0
 8004c12:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004c16:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004c1a:	f10a 0a01 	add.w	sl, sl, #1
 8004c1e:	9304      	str	r3, [sp, #16]
 8004c20:	9307      	str	r3, [sp, #28]
 8004c22:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004c26:	931a      	str	r3, [sp, #104]	; 0x68
 8004c28:	4654      	mov	r4, sl
 8004c2a:	2205      	movs	r2, #5
 8004c2c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004c30:	4851      	ldr	r0, [pc, #324]	; (8004d78 <_svfiprintf_r+0x1ec>)
 8004c32:	f7fb fae5 	bl	8000200 <memchr>
 8004c36:	9a04      	ldr	r2, [sp, #16]
 8004c38:	b9d8      	cbnz	r0, 8004c72 <_svfiprintf_r+0xe6>
 8004c3a:	06d0      	lsls	r0, r2, #27
 8004c3c:	bf44      	itt	mi
 8004c3e:	2320      	movmi	r3, #32
 8004c40:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004c44:	0711      	lsls	r1, r2, #28
 8004c46:	bf44      	itt	mi
 8004c48:	232b      	movmi	r3, #43	; 0x2b
 8004c4a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004c4e:	f89a 3000 	ldrb.w	r3, [sl]
 8004c52:	2b2a      	cmp	r3, #42	; 0x2a
 8004c54:	d015      	beq.n	8004c82 <_svfiprintf_r+0xf6>
 8004c56:	9a07      	ldr	r2, [sp, #28]
 8004c58:	4654      	mov	r4, sl
 8004c5a:	2000      	movs	r0, #0
 8004c5c:	f04f 0c0a 	mov.w	ip, #10
 8004c60:	4621      	mov	r1, r4
 8004c62:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004c66:	3b30      	subs	r3, #48	; 0x30
 8004c68:	2b09      	cmp	r3, #9
 8004c6a:	d94e      	bls.n	8004d0a <_svfiprintf_r+0x17e>
 8004c6c:	b1b0      	cbz	r0, 8004c9c <_svfiprintf_r+0x110>
 8004c6e:	9207      	str	r2, [sp, #28]
 8004c70:	e014      	b.n	8004c9c <_svfiprintf_r+0x110>
 8004c72:	eba0 0308 	sub.w	r3, r0, r8
 8004c76:	fa09 f303 	lsl.w	r3, r9, r3
 8004c7a:	4313      	orrs	r3, r2
 8004c7c:	9304      	str	r3, [sp, #16]
 8004c7e:	46a2      	mov	sl, r4
 8004c80:	e7d2      	b.n	8004c28 <_svfiprintf_r+0x9c>
 8004c82:	9b03      	ldr	r3, [sp, #12]
 8004c84:	1d19      	adds	r1, r3, #4
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	9103      	str	r1, [sp, #12]
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	bfbb      	ittet	lt
 8004c8e:	425b      	neglt	r3, r3
 8004c90:	f042 0202 	orrlt.w	r2, r2, #2
 8004c94:	9307      	strge	r3, [sp, #28]
 8004c96:	9307      	strlt	r3, [sp, #28]
 8004c98:	bfb8      	it	lt
 8004c9a:	9204      	strlt	r2, [sp, #16]
 8004c9c:	7823      	ldrb	r3, [r4, #0]
 8004c9e:	2b2e      	cmp	r3, #46	; 0x2e
 8004ca0:	d10c      	bne.n	8004cbc <_svfiprintf_r+0x130>
 8004ca2:	7863      	ldrb	r3, [r4, #1]
 8004ca4:	2b2a      	cmp	r3, #42	; 0x2a
 8004ca6:	d135      	bne.n	8004d14 <_svfiprintf_r+0x188>
 8004ca8:	9b03      	ldr	r3, [sp, #12]
 8004caa:	1d1a      	adds	r2, r3, #4
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	9203      	str	r2, [sp, #12]
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	bfb8      	it	lt
 8004cb4:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8004cb8:	3402      	adds	r4, #2
 8004cba:	9305      	str	r3, [sp, #20]
 8004cbc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004d88 <_svfiprintf_r+0x1fc>
 8004cc0:	7821      	ldrb	r1, [r4, #0]
 8004cc2:	2203      	movs	r2, #3
 8004cc4:	4650      	mov	r0, sl
 8004cc6:	f7fb fa9b 	bl	8000200 <memchr>
 8004cca:	b140      	cbz	r0, 8004cde <_svfiprintf_r+0x152>
 8004ccc:	2340      	movs	r3, #64	; 0x40
 8004cce:	eba0 000a 	sub.w	r0, r0, sl
 8004cd2:	fa03 f000 	lsl.w	r0, r3, r0
 8004cd6:	9b04      	ldr	r3, [sp, #16]
 8004cd8:	4303      	orrs	r3, r0
 8004cda:	3401      	adds	r4, #1
 8004cdc:	9304      	str	r3, [sp, #16]
 8004cde:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004ce2:	4826      	ldr	r0, [pc, #152]	; (8004d7c <_svfiprintf_r+0x1f0>)
 8004ce4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004ce8:	2206      	movs	r2, #6
 8004cea:	f7fb fa89 	bl	8000200 <memchr>
 8004cee:	2800      	cmp	r0, #0
 8004cf0:	d038      	beq.n	8004d64 <_svfiprintf_r+0x1d8>
 8004cf2:	4b23      	ldr	r3, [pc, #140]	; (8004d80 <_svfiprintf_r+0x1f4>)
 8004cf4:	bb1b      	cbnz	r3, 8004d3e <_svfiprintf_r+0x1b2>
 8004cf6:	9b03      	ldr	r3, [sp, #12]
 8004cf8:	3307      	adds	r3, #7
 8004cfa:	f023 0307 	bic.w	r3, r3, #7
 8004cfe:	3308      	adds	r3, #8
 8004d00:	9303      	str	r3, [sp, #12]
 8004d02:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004d04:	4433      	add	r3, r6
 8004d06:	9309      	str	r3, [sp, #36]	; 0x24
 8004d08:	e767      	b.n	8004bda <_svfiprintf_r+0x4e>
 8004d0a:	fb0c 3202 	mla	r2, ip, r2, r3
 8004d0e:	460c      	mov	r4, r1
 8004d10:	2001      	movs	r0, #1
 8004d12:	e7a5      	b.n	8004c60 <_svfiprintf_r+0xd4>
 8004d14:	2300      	movs	r3, #0
 8004d16:	3401      	adds	r4, #1
 8004d18:	9305      	str	r3, [sp, #20]
 8004d1a:	4619      	mov	r1, r3
 8004d1c:	f04f 0c0a 	mov.w	ip, #10
 8004d20:	4620      	mov	r0, r4
 8004d22:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004d26:	3a30      	subs	r2, #48	; 0x30
 8004d28:	2a09      	cmp	r2, #9
 8004d2a:	d903      	bls.n	8004d34 <_svfiprintf_r+0x1a8>
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d0c5      	beq.n	8004cbc <_svfiprintf_r+0x130>
 8004d30:	9105      	str	r1, [sp, #20]
 8004d32:	e7c3      	b.n	8004cbc <_svfiprintf_r+0x130>
 8004d34:	fb0c 2101 	mla	r1, ip, r1, r2
 8004d38:	4604      	mov	r4, r0
 8004d3a:	2301      	movs	r3, #1
 8004d3c:	e7f0      	b.n	8004d20 <_svfiprintf_r+0x194>
 8004d3e:	ab03      	add	r3, sp, #12
 8004d40:	9300      	str	r3, [sp, #0]
 8004d42:	462a      	mov	r2, r5
 8004d44:	4b0f      	ldr	r3, [pc, #60]	; (8004d84 <_svfiprintf_r+0x1f8>)
 8004d46:	a904      	add	r1, sp, #16
 8004d48:	4638      	mov	r0, r7
 8004d4a:	f3af 8000 	nop.w
 8004d4e:	1c42      	adds	r2, r0, #1
 8004d50:	4606      	mov	r6, r0
 8004d52:	d1d6      	bne.n	8004d02 <_svfiprintf_r+0x176>
 8004d54:	89ab      	ldrh	r3, [r5, #12]
 8004d56:	065b      	lsls	r3, r3, #25
 8004d58:	f53f af2c 	bmi.w	8004bb4 <_svfiprintf_r+0x28>
 8004d5c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004d5e:	b01d      	add	sp, #116	; 0x74
 8004d60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004d64:	ab03      	add	r3, sp, #12
 8004d66:	9300      	str	r3, [sp, #0]
 8004d68:	462a      	mov	r2, r5
 8004d6a:	4b06      	ldr	r3, [pc, #24]	; (8004d84 <_svfiprintf_r+0x1f8>)
 8004d6c:	a904      	add	r1, sp, #16
 8004d6e:	4638      	mov	r0, r7
 8004d70:	f7ff fa10 	bl	8004194 <_printf_i>
 8004d74:	e7eb      	b.n	8004d4e <_svfiprintf_r+0x1c2>
 8004d76:	bf00      	nop
 8004d78:	08005190 	.word	0x08005190
 8004d7c:	0800519a 	.word	0x0800519a
 8004d80:	00000000 	.word	0x00000000
 8004d84:	08004ad7 	.word	0x08004ad7
 8004d88:	08005196 	.word	0x08005196

08004d8c <_raise_r>:
 8004d8c:	291f      	cmp	r1, #31
 8004d8e:	b538      	push	{r3, r4, r5, lr}
 8004d90:	4604      	mov	r4, r0
 8004d92:	460d      	mov	r5, r1
 8004d94:	d904      	bls.n	8004da0 <_raise_r+0x14>
 8004d96:	2316      	movs	r3, #22
 8004d98:	6003      	str	r3, [r0, #0]
 8004d9a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004d9e:	bd38      	pop	{r3, r4, r5, pc}
 8004da0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8004da2:	b112      	cbz	r2, 8004daa <_raise_r+0x1e>
 8004da4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8004da8:	b94b      	cbnz	r3, 8004dbe <_raise_r+0x32>
 8004daa:	4620      	mov	r0, r4
 8004dac:	f000 f830 	bl	8004e10 <_getpid_r>
 8004db0:	462a      	mov	r2, r5
 8004db2:	4601      	mov	r1, r0
 8004db4:	4620      	mov	r0, r4
 8004db6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004dba:	f000 b817 	b.w	8004dec <_kill_r>
 8004dbe:	2b01      	cmp	r3, #1
 8004dc0:	d00a      	beq.n	8004dd8 <_raise_r+0x4c>
 8004dc2:	1c59      	adds	r1, r3, #1
 8004dc4:	d103      	bne.n	8004dce <_raise_r+0x42>
 8004dc6:	2316      	movs	r3, #22
 8004dc8:	6003      	str	r3, [r0, #0]
 8004dca:	2001      	movs	r0, #1
 8004dcc:	e7e7      	b.n	8004d9e <_raise_r+0x12>
 8004dce:	2400      	movs	r4, #0
 8004dd0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8004dd4:	4628      	mov	r0, r5
 8004dd6:	4798      	blx	r3
 8004dd8:	2000      	movs	r0, #0
 8004dda:	e7e0      	b.n	8004d9e <_raise_r+0x12>

08004ddc <raise>:
 8004ddc:	4b02      	ldr	r3, [pc, #8]	; (8004de8 <raise+0xc>)
 8004dde:	4601      	mov	r1, r0
 8004de0:	6818      	ldr	r0, [r3, #0]
 8004de2:	f7ff bfd3 	b.w	8004d8c <_raise_r>
 8004de6:	bf00      	nop
 8004de8:	20000050 	.word	0x20000050

08004dec <_kill_r>:
 8004dec:	b538      	push	{r3, r4, r5, lr}
 8004dee:	4d07      	ldr	r5, [pc, #28]	; (8004e0c <_kill_r+0x20>)
 8004df0:	2300      	movs	r3, #0
 8004df2:	4604      	mov	r4, r0
 8004df4:	4608      	mov	r0, r1
 8004df6:	4611      	mov	r1, r2
 8004df8:	602b      	str	r3, [r5, #0]
 8004dfa:	f7fb fca7 	bl	800074c <_kill>
 8004dfe:	1c43      	adds	r3, r0, #1
 8004e00:	d102      	bne.n	8004e08 <_kill_r+0x1c>
 8004e02:	682b      	ldr	r3, [r5, #0]
 8004e04:	b103      	cbz	r3, 8004e08 <_kill_r+0x1c>
 8004e06:	6023      	str	r3, [r4, #0]
 8004e08:	bd38      	pop	{r3, r4, r5, pc}
 8004e0a:	bf00      	nop
 8004e0c:	20000180 	.word	0x20000180

08004e10 <_getpid_r>:
 8004e10:	f7fb bc94 	b.w	800073c <_getpid>

08004e14 <__sread>:
 8004e14:	b510      	push	{r4, lr}
 8004e16:	460c      	mov	r4, r1
 8004e18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004e1c:	f000 f89c 	bl	8004f58 <_read_r>
 8004e20:	2800      	cmp	r0, #0
 8004e22:	bfab      	itete	ge
 8004e24:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004e26:	89a3      	ldrhlt	r3, [r4, #12]
 8004e28:	181b      	addge	r3, r3, r0
 8004e2a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004e2e:	bfac      	ite	ge
 8004e30:	6563      	strge	r3, [r4, #84]	; 0x54
 8004e32:	81a3      	strhlt	r3, [r4, #12]
 8004e34:	bd10      	pop	{r4, pc}

08004e36 <__swrite>:
 8004e36:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004e3a:	461f      	mov	r7, r3
 8004e3c:	898b      	ldrh	r3, [r1, #12]
 8004e3e:	05db      	lsls	r3, r3, #23
 8004e40:	4605      	mov	r5, r0
 8004e42:	460c      	mov	r4, r1
 8004e44:	4616      	mov	r6, r2
 8004e46:	d505      	bpl.n	8004e54 <__swrite+0x1e>
 8004e48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004e4c:	2302      	movs	r3, #2
 8004e4e:	2200      	movs	r2, #0
 8004e50:	f000 f868 	bl	8004f24 <_lseek_r>
 8004e54:	89a3      	ldrh	r3, [r4, #12]
 8004e56:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004e5a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004e5e:	81a3      	strh	r3, [r4, #12]
 8004e60:	4632      	mov	r2, r6
 8004e62:	463b      	mov	r3, r7
 8004e64:	4628      	mov	r0, r5
 8004e66:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004e6a:	f000 b817 	b.w	8004e9c <_write_r>

08004e6e <__sseek>:
 8004e6e:	b510      	push	{r4, lr}
 8004e70:	460c      	mov	r4, r1
 8004e72:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004e76:	f000 f855 	bl	8004f24 <_lseek_r>
 8004e7a:	1c43      	adds	r3, r0, #1
 8004e7c:	89a3      	ldrh	r3, [r4, #12]
 8004e7e:	bf15      	itete	ne
 8004e80:	6560      	strne	r0, [r4, #84]	; 0x54
 8004e82:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004e86:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004e8a:	81a3      	strheq	r3, [r4, #12]
 8004e8c:	bf18      	it	ne
 8004e8e:	81a3      	strhne	r3, [r4, #12]
 8004e90:	bd10      	pop	{r4, pc}

08004e92 <__sclose>:
 8004e92:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004e96:	f000 b813 	b.w	8004ec0 <_close_r>
	...

08004e9c <_write_r>:
 8004e9c:	b538      	push	{r3, r4, r5, lr}
 8004e9e:	4d07      	ldr	r5, [pc, #28]	; (8004ebc <_write_r+0x20>)
 8004ea0:	4604      	mov	r4, r0
 8004ea2:	4608      	mov	r0, r1
 8004ea4:	4611      	mov	r1, r2
 8004ea6:	2200      	movs	r2, #0
 8004ea8:	602a      	str	r2, [r5, #0]
 8004eaa:	461a      	mov	r2, r3
 8004eac:	f7fb fc85 	bl	80007ba <_write>
 8004eb0:	1c43      	adds	r3, r0, #1
 8004eb2:	d102      	bne.n	8004eba <_write_r+0x1e>
 8004eb4:	682b      	ldr	r3, [r5, #0]
 8004eb6:	b103      	cbz	r3, 8004eba <_write_r+0x1e>
 8004eb8:	6023      	str	r3, [r4, #0]
 8004eba:	bd38      	pop	{r3, r4, r5, pc}
 8004ebc:	20000180 	.word	0x20000180

08004ec0 <_close_r>:
 8004ec0:	b538      	push	{r3, r4, r5, lr}
 8004ec2:	4d06      	ldr	r5, [pc, #24]	; (8004edc <_close_r+0x1c>)
 8004ec4:	2300      	movs	r3, #0
 8004ec6:	4604      	mov	r4, r0
 8004ec8:	4608      	mov	r0, r1
 8004eca:	602b      	str	r3, [r5, #0]
 8004ecc:	f7fb fc91 	bl	80007f2 <_close>
 8004ed0:	1c43      	adds	r3, r0, #1
 8004ed2:	d102      	bne.n	8004eda <_close_r+0x1a>
 8004ed4:	682b      	ldr	r3, [r5, #0]
 8004ed6:	b103      	cbz	r3, 8004eda <_close_r+0x1a>
 8004ed8:	6023      	str	r3, [r4, #0]
 8004eda:	bd38      	pop	{r3, r4, r5, pc}
 8004edc:	20000180 	.word	0x20000180

08004ee0 <_fstat_r>:
 8004ee0:	b538      	push	{r3, r4, r5, lr}
 8004ee2:	4d07      	ldr	r5, [pc, #28]	; (8004f00 <_fstat_r+0x20>)
 8004ee4:	2300      	movs	r3, #0
 8004ee6:	4604      	mov	r4, r0
 8004ee8:	4608      	mov	r0, r1
 8004eea:	4611      	mov	r1, r2
 8004eec:	602b      	str	r3, [r5, #0]
 8004eee:	f7fb fc8c 	bl	800080a <_fstat>
 8004ef2:	1c43      	adds	r3, r0, #1
 8004ef4:	d102      	bne.n	8004efc <_fstat_r+0x1c>
 8004ef6:	682b      	ldr	r3, [r5, #0]
 8004ef8:	b103      	cbz	r3, 8004efc <_fstat_r+0x1c>
 8004efa:	6023      	str	r3, [r4, #0]
 8004efc:	bd38      	pop	{r3, r4, r5, pc}
 8004efe:	bf00      	nop
 8004f00:	20000180 	.word	0x20000180

08004f04 <_isatty_r>:
 8004f04:	b538      	push	{r3, r4, r5, lr}
 8004f06:	4d06      	ldr	r5, [pc, #24]	; (8004f20 <_isatty_r+0x1c>)
 8004f08:	2300      	movs	r3, #0
 8004f0a:	4604      	mov	r4, r0
 8004f0c:	4608      	mov	r0, r1
 8004f0e:	602b      	str	r3, [r5, #0]
 8004f10:	f7fb fc8b 	bl	800082a <_isatty>
 8004f14:	1c43      	adds	r3, r0, #1
 8004f16:	d102      	bne.n	8004f1e <_isatty_r+0x1a>
 8004f18:	682b      	ldr	r3, [r5, #0]
 8004f1a:	b103      	cbz	r3, 8004f1e <_isatty_r+0x1a>
 8004f1c:	6023      	str	r3, [r4, #0]
 8004f1e:	bd38      	pop	{r3, r4, r5, pc}
 8004f20:	20000180 	.word	0x20000180

08004f24 <_lseek_r>:
 8004f24:	b538      	push	{r3, r4, r5, lr}
 8004f26:	4d07      	ldr	r5, [pc, #28]	; (8004f44 <_lseek_r+0x20>)
 8004f28:	4604      	mov	r4, r0
 8004f2a:	4608      	mov	r0, r1
 8004f2c:	4611      	mov	r1, r2
 8004f2e:	2200      	movs	r2, #0
 8004f30:	602a      	str	r2, [r5, #0]
 8004f32:	461a      	mov	r2, r3
 8004f34:	f7fb fc84 	bl	8000840 <_lseek>
 8004f38:	1c43      	adds	r3, r0, #1
 8004f3a:	d102      	bne.n	8004f42 <_lseek_r+0x1e>
 8004f3c:	682b      	ldr	r3, [r5, #0]
 8004f3e:	b103      	cbz	r3, 8004f42 <_lseek_r+0x1e>
 8004f40:	6023      	str	r3, [r4, #0]
 8004f42:	bd38      	pop	{r3, r4, r5, pc}
 8004f44:	20000180 	.word	0x20000180

08004f48 <_malloc_usable_size_r>:
 8004f48:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004f4c:	1f18      	subs	r0, r3, #4
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	bfbc      	itt	lt
 8004f52:	580b      	ldrlt	r3, [r1, r0]
 8004f54:	18c0      	addlt	r0, r0, r3
 8004f56:	4770      	bx	lr

08004f58 <_read_r>:
 8004f58:	b538      	push	{r3, r4, r5, lr}
 8004f5a:	4d07      	ldr	r5, [pc, #28]	; (8004f78 <_read_r+0x20>)
 8004f5c:	4604      	mov	r4, r0
 8004f5e:	4608      	mov	r0, r1
 8004f60:	4611      	mov	r1, r2
 8004f62:	2200      	movs	r2, #0
 8004f64:	602a      	str	r2, [r5, #0]
 8004f66:	461a      	mov	r2, r3
 8004f68:	f7fb fc0a 	bl	8000780 <_read>
 8004f6c:	1c43      	adds	r3, r0, #1
 8004f6e:	d102      	bne.n	8004f76 <_read_r+0x1e>
 8004f70:	682b      	ldr	r3, [r5, #0]
 8004f72:	b103      	cbz	r3, 8004f76 <_read_r+0x1e>
 8004f74:	6023      	str	r3, [r4, #0]
 8004f76:	bd38      	pop	{r3, r4, r5, pc}
 8004f78:	20000180 	.word	0x20000180

08004f7c <_init>:
 8004f7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f7e:	bf00      	nop
 8004f80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f82:	bc08      	pop	{r3}
 8004f84:	469e      	mov	lr, r3
 8004f86:	4770      	bx	lr

08004f88 <_fini>:
 8004f88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f8a:	bf00      	nop
 8004f8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f8e:	bc08      	pop	{r3}
 8004f90:	469e      	mov	lr, r3
 8004f92:	4770      	bx	lr
