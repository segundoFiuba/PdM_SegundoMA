
ProyectoFinalPdMPdC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005728  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000510  080058d8  080058d8  000158d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005de8  08005de8  000200e0  2**0
                  CONTENTS
  4 .ARM          00000008  08005de8  08005de8  00015de8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005df0  08005df0  000200e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005df0  08005df0  00015df0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005df4  08005df4  00015df4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000e0  20000000  08005df8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000200e0  2**0
                  CONTENTS
 10 .bss          000000e4  200000e0  200000e0  000200e0  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200001c4  200001c4  000200e0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000200e0  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000e41f  00000000  00000000  00020110  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002530  00000000  00000000  0002e52f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c30  00000000  00000000  00030a60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000b40  00000000  00000000  00031690  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002727e  00000000  00000000  000321d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000127b3  00000000  00000000  0005944e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e46c7  00000000  00000000  0006bc01  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001502c8  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003b64  00000000  00000000  00150318  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200000e0 	.word	0x200000e0
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080058c0 	.word	0x080058c0

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200000e4 	.word	0x200000e4
 80001ec:	080058c0 	.word	0x080058c0

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002b4:	f000 b974 	b.w	80005a0 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	4604      	mov	r4, r0
 80002d8:	468e      	mov	lr, r1
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d14d      	bne.n	800037a <__udivmoddi4+0xaa>
 80002de:	428a      	cmp	r2, r1
 80002e0:	4694      	mov	ip, r2
 80002e2:	d969      	bls.n	80003b8 <__udivmoddi4+0xe8>
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	b152      	cbz	r2, 8000300 <__udivmoddi4+0x30>
 80002ea:	fa01 f302 	lsl.w	r3, r1, r2
 80002ee:	f1c2 0120 	rsb	r1, r2, #32
 80002f2:	fa20 f101 	lsr.w	r1, r0, r1
 80002f6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002fa:	ea41 0e03 	orr.w	lr, r1, r3
 80002fe:	4094      	lsls	r4, r2
 8000300:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000304:	0c21      	lsrs	r1, r4, #16
 8000306:	fbbe f6f8 	udiv	r6, lr, r8
 800030a:	fa1f f78c 	uxth.w	r7, ip
 800030e:	fb08 e316 	mls	r3, r8, r6, lr
 8000312:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000316:	fb06 f107 	mul.w	r1, r6, r7
 800031a:	4299      	cmp	r1, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x64>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000326:	f080 811f 	bcs.w	8000568 <__udivmoddi4+0x298>
 800032a:	4299      	cmp	r1, r3
 800032c:	f240 811c 	bls.w	8000568 <__udivmoddi4+0x298>
 8000330:	3e02      	subs	r6, #2
 8000332:	4463      	add	r3, ip
 8000334:	1a5b      	subs	r3, r3, r1
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb3 f0f8 	udiv	r0, r3, r8
 800033c:	fb08 3310 	mls	r3, r8, r0, r3
 8000340:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000344:	fb00 f707 	mul.w	r7, r0, r7
 8000348:	42a7      	cmp	r7, r4
 800034a:	d90a      	bls.n	8000362 <__udivmoddi4+0x92>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000354:	f080 810a 	bcs.w	800056c <__udivmoddi4+0x29c>
 8000358:	42a7      	cmp	r7, r4
 800035a:	f240 8107 	bls.w	800056c <__udivmoddi4+0x29c>
 800035e:	4464      	add	r4, ip
 8000360:	3802      	subs	r0, #2
 8000362:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000366:	1be4      	subs	r4, r4, r7
 8000368:	2600      	movs	r6, #0
 800036a:	b11d      	cbz	r5, 8000374 <__udivmoddi4+0xa4>
 800036c:	40d4      	lsrs	r4, r2
 800036e:	2300      	movs	r3, #0
 8000370:	e9c5 4300 	strd	r4, r3, [r5]
 8000374:	4631      	mov	r1, r6
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	428b      	cmp	r3, r1
 800037c:	d909      	bls.n	8000392 <__udivmoddi4+0xc2>
 800037e:	2d00      	cmp	r5, #0
 8000380:	f000 80ef 	beq.w	8000562 <__udivmoddi4+0x292>
 8000384:	2600      	movs	r6, #0
 8000386:	e9c5 0100 	strd	r0, r1, [r5]
 800038a:	4630      	mov	r0, r6
 800038c:	4631      	mov	r1, r6
 800038e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000392:	fab3 f683 	clz	r6, r3
 8000396:	2e00      	cmp	r6, #0
 8000398:	d14a      	bne.n	8000430 <__udivmoddi4+0x160>
 800039a:	428b      	cmp	r3, r1
 800039c:	d302      	bcc.n	80003a4 <__udivmoddi4+0xd4>
 800039e:	4282      	cmp	r2, r0
 80003a0:	f200 80f9 	bhi.w	8000596 <__udivmoddi4+0x2c6>
 80003a4:	1a84      	subs	r4, r0, r2
 80003a6:	eb61 0303 	sbc.w	r3, r1, r3
 80003aa:	2001      	movs	r0, #1
 80003ac:	469e      	mov	lr, r3
 80003ae:	2d00      	cmp	r5, #0
 80003b0:	d0e0      	beq.n	8000374 <__udivmoddi4+0xa4>
 80003b2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003b6:	e7dd      	b.n	8000374 <__udivmoddi4+0xa4>
 80003b8:	b902      	cbnz	r2, 80003bc <__udivmoddi4+0xec>
 80003ba:	deff      	udf	#255	; 0xff
 80003bc:	fab2 f282 	clz	r2, r2
 80003c0:	2a00      	cmp	r2, #0
 80003c2:	f040 8092 	bne.w	80004ea <__udivmoddi4+0x21a>
 80003c6:	eba1 010c 	sub.w	r1, r1, ip
 80003ca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ce:	fa1f fe8c 	uxth.w	lr, ip
 80003d2:	2601      	movs	r6, #1
 80003d4:	0c20      	lsrs	r0, r4, #16
 80003d6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003da:	fb07 1113 	mls	r1, r7, r3, r1
 80003de:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003e2:	fb0e f003 	mul.w	r0, lr, r3
 80003e6:	4288      	cmp	r0, r1
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x12c>
 80003ea:	eb1c 0101 	adds.w	r1, ip, r1
 80003ee:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x12a>
 80003f4:	4288      	cmp	r0, r1
 80003f6:	f200 80cb 	bhi.w	8000590 <__udivmoddi4+0x2c0>
 80003fa:	4643      	mov	r3, r8
 80003fc:	1a09      	subs	r1, r1, r0
 80003fe:	b2a4      	uxth	r4, r4
 8000400:	fbb1 f0f7 	udiv	r0, r1, r7
 8000404:	fb07 1110 	mls	r1, r7, r0, r1
 8000408:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800040c:	fb0e fe00 	mul.w	lr, lr, r0
 8000410:	45a6      	cmp	lr, r4
 8000412:	d908      	bls.n	8000426 <__udivmoddi4+0x156>
 8000414:	eb1c 0404 	adds.w	r4, ip, r4
 8000418:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800041c:	d202      	bcs.n	8000424 <__udivmoddi4+0x154>
 800041e:	45a6      	cmp	lr, r4
 8000420:	f200 80bb 	bhi.w	800059a <__udivmoddi4+0x2ca>
 8000424:	4608      	mov	r0, r1
 8000426:	eba4 040e 	sub.w	r4, r4, lr
 800042a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800042e:	e79c      	b.n	800036a <__udivmoddi4+0x9a>
 8000430:	f1c6 0720 	rsb	r7, r6, #32
 8000434:	40b3      	lsls	r3, r6
 8000436:	fa22 fc07 	lsr.w	ip, r2, r7
 800043a:	ea4c 0c03 	orr.w	ip, ip, r3
 800043e:	fa20 f407 	lsr.w	r4, r0, r7
 8000442:	fa01 f306 	lsl.w	r3, r1, r6
 8000446:	431c      	orrs	r4, r3
 8000448:	40f9      	lsrs	r1, r7
 800044a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800044e:	fa00 f306 	lsl.w	r3, r0, r6
 8000452:	fbb1 f8f9 	udiv	r8, r1, r9
 8000456:	0c20      	lsrs	r0, r4, #16
 8000458:	fa1f fe8c 	uxth.w	lr, ip
 800045c:	fb09 1118 	mls	r1, r9, r8, r1
 8000460:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000464:	fb08 f00e 	mul.w	r0, r8, lr
 8000468:	4288      	cmp	r0, r1
 800046a:	fa02 f206 	lsl.w	r2, r2, r6
 800046e:	d90b      	bls.n	8000488 <__udivmoddi4+0x1b8>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000478:	f080 8088 	bcs.w	800058c <__udivmoddi4+0x2bc>
 800047c:	4288      	cmp	r0, r1
 800047e:	f240 8085 	bls.w	800058c <__udivmoddi4+0x2bc>
 8000482:	f1a8 0802 	sub.w	r8, r8, #2
 8000486:	4461      	add	r1, ip
 8000488:	1a09      	subs	r1, r1, r0
 800048a:	b2a4      	uxth	r4, r4
 800048c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000490:	fb09 1110 	mls	r1, r9, r0, r1
 8000494:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000498:	fb00 fe0e 	mul.w	lr, r0, lr
 800049c:	458e      	cmp	lr, r1
 800049e:	d908      	bls.n	80004b2 <__udivmoddi4+0x1e2>
 80004a0:	eb1c 0101 	adds.w	r1, ip, r1
 80004a4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80004a8:	d26c      	bcs.n	8000584 <__udivmoddi4+0x2b4>
 80004aa:	458e      	cmp	lr, r1
 80004ac:	d96a      	bls.n	8000584 <__udivmoddi4+0x2b4>
 80004ae:	3802      	subs	r0, #2
 80004b0:	4461      	add	r1, ip
 80004b2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004b6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ba:	eba1 010e 	sub.w	r1, r1, lr
 80004be:	42a1      	cmp	r1, r4
 80004c0:	46c8      	mov	r8, r9
 80004c2:	46a6      	mov	lr, r4
 80004c4:	d356      	bcc.n	8000574 <__udivmoddi4+0x2a4>
 80004c6:	d053      	beq.n	8000570 <__udivmoddi4+0x2a0>
 80004c8:	b15d      	cbz	r5, 80004e2 <__udivmoddi4+0x212>
 80004ca:	ebb3 0208 	subs.w	r2, r3, r8
 80004ce:	eb61 010e 	sbc.w	r1, r1, lr
 80004d2:	fa01 f707 	lsl.w	r7, r1, r7
 80004d6:	fa22 f306 	lsr.w	r3, r2, r6
 80004da:	40f1      	lsrs	r1, r6
 80004dc:	431f      	orrs	r7, r3
 80004de:	e9c5 7100 	strd	r7, r1, [r5]
 80004e2:	2600      	movs	r6, #0
 80004e4:	4631      	mov	r1, r6
 80004e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ea:	f1c2 0320 	rsb	r3, r2, #32
 80004ee:	40d8      	lsrs	r0, r3
 80004f0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f4:	fa21 f303 	lsr.w	r3, r1, r3
 80004f8:	4091      	lsls	r1, r2
 80004fa:	4301      	orrs	r1, r0
 80004fc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000500:	fa1f fe8c 	uxth.w	lr, ip
 8000504:	fbb3 f0f7 	udiv	r0, r3, r7
 8000508:	fb07 3610 	mls	r6, r7, r0, r3
 800050c:	0c0b      	lsrs	r3, r1, #16
 800050e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000512:	fb00 f60e 	mul.w	r6, r0, lr
 8000516:	429e      	cmp	r6, r3
 8000518:	fa04 f402 	lsl.w	r4, r4, r2
 800051c:	d908      	bls.n	8000530 <__udivmoddi4+0x260>
 800051e:	eb1c 0303 	adds.w	r3, ip, r3
 8000522:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000526:	d22f      	bcs.n	8000588 <__udivmoddi4+0x2b8>
 8000528:	429e      	cmp	r6, r3
 800052a:	d92d      	bls.n	8000588 <__udivmoddi4+0x2b8>
 800052c:	3802      	subs	r0, #2
 800052e:	4463      	add	r3, ip
 8000530:	1b9b      	subs	r3, r3, r6
 8000532:	b289      	uxth	r1, r1
 8000534:	fbb3 f6f7 	udiv	r6, r3, r7
 8000538:	fb07 3316 	mls	r3, r7, r6, r3
 800053c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000540:	fb06 f30e 	mul.w	r3, r6, lr
 8000544:	428b      	cmp	r3, r1
 8000546:	d908      	bls.n	800055a <__udivmoddi4+0x28a>
 8000548:	eb1c 0101 	adds.w	r1, ip, r1
 800054c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000550:	d216      	bcs.n	8000580 <__udivmoddi4+0x2b0>
 8000552:	428b      	cmp	r3, r1
 8000554:	d914      	bls.n	8000580 <__udivmoddi4+0x2b0>
 8000556:	3e02      	subs	r6, #2
 8000558:	4461      	add	r1, ip
 800055a:	1ac9      	subs	r1, r1, r3
 800055c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000560:	e738      	b.n	80003d4 <__udivmoddi4+0x104>
 8000562:	462e      	mov	r6, r5
 8000564:	4628      	mov	r0, r5
 8000566:	e705      	b.n	8000374 <__udivmoddi4+0xa4>
 8000568:	4606      	mov	r6, r0
 800056a:	e6e3      	b.n	8000334 <__udivmoddi4+0x64>
 800056c:	4618      	mov	r0, r3
 800056e:	e6f8      	b.n	8000362 <__udivmoddi4+0x92>
 8000570:	454b      	cmp	r3, r9
 8000572:	d2a9      	bcs.n	80004c8 <__udivmoddi4+0x1f8>
 8000574:	ebb9 0802 	subs.w	r8, r9, r2
 8000578:	eb64 0e0c 	sbc.w	lr, r4, ip
 800057c:	3801      	subs	r0, #1
 800057e:	e7a3      	b.n	80004c8 <__udivmoddi4+0x1f8>
 8000580:	4646      	mov	r6, r8
 8000582:	e7ea      	b.n	800055a <__udivmoddi4+0x28a>
 8000584:	4620      	mov	r0, r4
 8000586:	e794      	b.n	80004b2 <__udivmoddi4+0x1e2>
 8000588:	4640      	mov	r0, r8
 800058a:	e7d1      	b.n	8000530 <__udivmoddi4+0x260>
 800058c:	46d0      	mov	r8, sl
 800058e:	e77b      	b.n	8000488 <__udivmoddi4+0x1b8>
 8000590:	3b02      	subs	r3, #2
 8000592:	4461      	add	r1, ip
 8000594:	e732      	b.n	80003fc <__udivmoddi4+0x12c>
 8000596:	4630      	mov	r0, r6
 8000598:	e709      	b.n	80003ae <__udivmoddi4+0xde>
 800059a:	4464      	add	r4, ip
 800059c:	3802      	subs	r0, #2
 800059e:	e742      	b.n	8000426 <__udivmoddi4+0x156>

080005a0 <__aeabi_idiv0>:
 80005a0:	4770      	bx	lr
 80005a2:	bf00      	nop

080005a4 <read_button>:
		break;
	}
}

//Funcion intermeria para acceder interna pressed
bool_t read_button() {
 80005a4:	b480      	push	{r7}
 80005a6:	af00      	add	r7, sp, #0
	if (pressed){
 80005a8:	4b07      	ldr	r3, [pc, #28]	; (80005c8 <read_button+0x24>)
 80005aa:	781b      	ldrb	r3, [r3, #0]
 80005ac:	2b00      	cmp	r3, #0
 80005ae:	d004      	beq.n	80005ba <read_button+0x16>
		pressed=false;
 80005b0:	4b05      	ldr	r3, [pc, #20]	; (80005c8 <read_button+0x24>)
 80005b2:	2200      	movs	r2, #0
 80005b4:	701a      	strb	r2, [r3, #0]
		return true;
 80005b6:	2301      	movs	r3, #1
 80005b8:	e000      	b.n	80005bc <read_button+0x18>
	}
	else
		return false;
 80005ba:	2300      	movs	r3, #0
}
 80005bc:	4618      	mov	r0, r3
 80005be:	46bd      	mov	sp, r7
 80005c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c4:	4770      	bx	lr
 80005c6:	bf00      	nop
 80005c8:	200000fc 	.word	0x200000fc

080005cc <delayInit>:
 * con el tiempo indicado.
 *
 * @param delay apunta a la estructura de delay que hay que inicializar
 * @param duration es la duración en milisegundoas del delay
 * */
void delayInit(delay_t *delay, tick_t duration) {
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b082      	sub	sp, #8
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	6078      	str	r0, [r7, #4]
 80005d4:	6039      	str	r1, [r7, #0]
	assert(duration >0);
 80005d6:	683b      	ldr	r3, [r7, #0]
 80005d8:	2b00      	cmp	r3, #0
 80005da:	d105      	bne.n	80005e8 <delayInit+0x1c>
 80005dc:	4b0c      	ldr	r3, [pc, #48]	; (8000610 <delayInit+0x44>)
 80005de:	4a0d      	ldr	r2, [pc, #52]	; (8000614 <delayInit+0x48>)
 80005e0:	2114      	movs	r1, #20
 80005e2:	480d      	ldr	r0, [pc, #52]	; (8000618 <delayInit+0x4c>)
 80005e4:	f003 ff66 	bl	80044b4 <__assert_func>
	assert(delay != NULL);
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	d105      	bne.n	80005fa <delayInit+0x2e>
 80005ee:	4b0b      	ldr	r3, [pc, #44]	; (800061c <delayInit+0x50>)
 80005f0:	4a08      	ldr	r2, [pc, #32]	; (8000614 <delayInit+0x48>)
 80005f2:	2115      	movs	r1, #21
 80005f4:	4808      	ldr	r0, [pc, #32]	; (8000618 <delayInit+0x4c>)
 80005f6:	f003 ff5d 	bl	80044b4 <__assert_func>
	delay->duration = duration;
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	683a      	ldr	r2, [r7, #0]
 80005fe:	605a      	str	r2, [r3, #4]
	delay->running = false;
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	2200      	movs	r2, #0
 8000604:	721a      	strb	r2, [r3, #8]
}
 8000606:	bf00      	nop
 8000608:	3708      	adds	r7, #8
 800060a:	46bd      	mov	sp, r7
 800060c:	bd80      	pop	{r7, pc}
 800060e:	bf00      	nop
 8000610:	080058d8 	.word	0x080058d8
 8000614:	08005cb8 	.word	0x08005cb8
 8000618:	080058e4 	.word	0x080058e4
 800061c:	08005904 	.word	0x08005904

08000620 <delayRead>:
 * se encuentra corriendo, verifica que no se haya pasado el tiempo.
 *
 * @param delay apunta a la estructura de delay que se lee
 * @returns true si se cumplió el tiempo o false si no
 * */
bool_t delayRead(delay_t *delay) {
 8000620:	b580      	push	{r7, lr}
 8000622:	b082      	sub	sp, #8
 8000624:	af00      	add	r7, sp, #0
 8000626:	6078      	str	r0, [r7, #4]
	assert(delay!=NULL);
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	2b00      	cmp	r3, #0
 800062c:	d105      	bne.n	800063a <delayRead+0x1a>
 800062e:	4b15      	ldr	r3, [pc, #84]	; (8000684 <delayRead+0x64>)
 8000630:	4a15      	ldr	r2, [pc, #84]	; (8000688 <delayRead+0x68>)
 8000632:	2125      	movs	r1, #37	; 0x25
 8000634:	4815      	ldr	r0, [pc, #84]	; (800068c <delayRead+0x6c>)
 8000636:	f003 ff3d 	bl	80044b4 <__assert_func>
	if (!delay->running) {
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	7a1b      	ldrb	r3, [r3, #8]
 800063e:	f083 0301 	eor.w	r3, r3, #1
 8000642:	b2db      	uxtb	r3, r3
 8000644:	2b00      	cmp	r3, #0
 8000646:	d009      	beq.n	800065c <delayRead+0x3c>
		delay->running = true;
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	2201      	movs	r2, #1
 800064c:	721a      	strb	r2, [r3, #8]
		delay->startTime = HAL_GetTick();
 800064e:	f000 ffb3 	bl	80015b8 <HAL_GetTick>
 8000652:	4602      	mov	r2, r0
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	601a      	str	r2, [r3, #0]
		return false;
 8000658:	2300      	movs	r3, #0
 800065a:	e00f      	b.n	800067c <delayRead+0x5c>
	} else {
		if ((HAL_GetTick() - delay->startTime) >= delay->duration) {
 800065c:	f000 ffac 	bl	80015b8 <HAL_GetTick>
 8000660:	4602      	mov	r2, r0
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	681b      	ldr	r3, [r3, #0]
 8000666:	1ad2      	subs	r2, r2, r3
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	685b      	ldr	r3, [r3, #4]
 800066c:	429a      	cmp	r2, r3
 800066e:	d304      	bcc.n	800067a <delayRead+0x5a>
			delay->running = false;
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	2200      	movs	r2, #0
 8000674:	721a      	strb	r2, [r3, #8]
			return true;
 8000676:	2301      	movs	r3, #1
 8000678:	e000      	b.n	800067c <delayRead+0x5c>
		} else
			return false;
 800067a:	2300      	movs	r3, #0
	}
}
 800067c:	4618      	mov	r0, r3
 800067e:	3708      	adds	r7, #8
 8000680:	46bd      	mov	sp, r7
 8000682:	bd80      	pop	{r7, pc}
 8000684:	08005914 	.word	0x08005914
 8000688:	08005cc4 	.word	0x08005cc4
 800068c:	080058e4 	.word	0x080058e4

08000690 <uartInit>:
 * Inicializa la UART con los parámetros por defecto y envía por serial la configuración inicial.
 *
 * @fn bool_t uartInit()
 * @return true si se inicializó bien
 */
bool_t uartInit(){
 8000690:	b580      	push	{r7, lr}
 8000692:	af00      	add	r7, sp, #0
		                  BE CAREFUL : Program 7 data bits + 1 parity bit in PC HyperTerminal
	      - Stop Bit    = One Stop bit
	      - Parity      = ODD parity
	      - BaudRate    = 9600 baud
	      - Hardware flow control disabled (RTS and CTS signals) */
	  UartHandle.Instance        = USARTx;
 8000694:	4b11      	ldr	r3, [pc, #68]	; (80006dc <uartInit+0x4c>)
 8000696:	4a12      	ldr	r2, [pc, #72]	; (80006e0 <uartInit+0x50>)
 8000698:	601a      	str	r2, [r3, #0]

	  UartHandle.Init.BaudRate   = BAUD_RATE;
 800069a:	4b10      	ldr	r3, [pc, #64]	; (80006dc <uartInit+0x4c>)
 800069c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006a0:	605a      	str	r2, [r3, #4]
	  UartHandle.Init.WordLength = UART_WORDLENGTH_8B;
 80006a2:	4b0e      	ldr	r3, [pc, #56]	; (80006dc <uartInit+0x4c>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	609a      	str	r2, [r3, #8]
	  UartHandle.Init.StopBits   = UART_STOPBITS_1;
 80006a8:	4b0c      	ldr	r3, [pc, #48]	; (80006dc <uartInit+0x4c>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	60da      	str	r2, [r3, #12]
	  UartHandle.Init.Parity     = UART_PARITY_NONE;
 80006ae:	4b0b      	ldr	r3, [pc, #44]	; (80006dc <uartInit+0x4c>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	611a      	str	r2, [r3, #16]
	  UartHandle.Init.HwFlowCtl  = UART_HWCONTROL_NONE;
 80006b4:	4b09      	ldr	r3, [pc, #36]	; (80006dc <uartInit+0x4c>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	619a      	str	r2, [r3, #24]
	  UartHandle.Init.Mode       = UART_MODE_TX_RX;
 80006ba:	4b08      	ldr	r3, [pc, #32]	; (80006dc <uartInit+0x4c>)
 80006bc:	220c      	movs	r2, #12
 80006be:	615a      	str	r2, [r3, #20]
	  UartHandle.Init.OverSampling = UART_OVERSAMPLING_16;
 80006c0:	4b06      	ldr	r3, [pc, #24]	; (80006dc <uartInit+0x4c>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	61da      	str	r2, [r3, #28]


	  if (HAL_UART_Init(&UartHandle) != HAL_OK)
 80006c6:	4805      	ldr	r0, [pc, #20]	; (80006dc <uartInit+0x4c>)
 80006c8:	f002 ff9c 	bl	8003604 <HAL_UART_Init>
 80006cc:	4603      	mov	r3, r0
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d001      	beq.n	80006d6 <uartInit+0x46>
	  {
	    return false;
 80006d2:	2300      	movs	r3, #0
 80006d4:	e000      	b.n	80006d8 <uartInit+0x48>
	  }
	  return true;
 80006d6:	2301      	movs	r3, #1

}
 80006d8:	4618      	mov	r0, r3
 80006da:	bd80      	pop	{r7, pc}
 80006dc:	20000100 	.word	0x20000100
 80006e0:	40004800 	.word	0x40004800

080006e4 <uartSendString>:
 * y luego lo envía usando la función de la HAL, calculando el
 * tamaño del string con strlen()
 *
 * @param pstring puntero al string, que debe terminar con \0
 */
void uartSendString(uint8_t * pstring){
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b082      	sub	sp, #8
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	6078      	str	r0, [r7, #4]

	assert(pstring != NULL);
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d105      	bne.n	80006fe <uartSendString+0x1a>
 80006f2:	4b0a      	ldr	r3, [pc, #40]	; (800071c <uartSendString+0x38>)
 80006f4:	4a0a      	ldr	r2, [pc, #40]	; (8000720 <uartSendString+0x3c>)
 80006f6:	2140      	movs	r1, #64	; 0x40
 80006f8:	480a      	ldr	r0, [pc, #40]	; (8000724 <uartSendString+0x40>)
 80006fa:	f003 fedb 	bl	80044b4 <__assert_func>
	HAL_UART_Transmit(&UartHandle, pstring, strlen(pstring), 0xFFFF);
 80006fe:	6878      	ldr	r0, [r7, #4]
 8000700:	f7ff fd76 	bl	80001f0 <strlen>
 8000704:	4603      	mov	r3, r0
 8000706:	b29a      	uxth	r2, r3
 8000708:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800070c:	6879      	ldr	r1, [r7, #4]
 800070e:	4806      	ldr	r0, [pc, #24]	; (8000728 <uartSendString+0x44>)
 8000710:	f002 ffc5 	bl	800369e <HAL_UART_Transmit>

}
 8000714:	bf00      	nop
 8000716:	3708      	adds	r7, #8
 8000718:	46bd      	mov	sp, r7
 800071a:	bd80      	pop	{r7, pc}
 800071c:	08005920 	.word	0x08005920
 8000720:	08005cd0 	.word	0x08005cd0
 8000724:	08005930 	.word	0x08005930
 8000728:	20000100 	.word	0x20000100

0800072c <BSP_LED_On>:
  * @param  Led: Specifies the Led to be set on. 
  *   This parameter can be one of following parameters:
  *     @arg LED2
  */
void BSP_LED_On(Led_TypeDef Led)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	b082      	sub	sp, #8
 8000730:	af00      	add	r7, sp, #0
 8000732:	4603      	mov	r3, r0
 8000734:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET); 
 8000736:	79fb      	ldrb	r3, [r7, #7]
 8000738:	4a07      	ldr	r2, [pc, #28]	; (8000758 <BSP_LED_On+0x2c>)
 800073a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800073e:	79fb      	ldrb	r3, [r7, #7]
 8000740:	4a06      	ldr	r2, [pc, #24]	; (800075c <BSP_LED_On+0x30>)
 8000742:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000746:	2201      	movs	r2, #1
 8000748:	4619      	mov	r1, r3
 800074a:	f001 f9f7 	bl	8001b3c <HAL_GPIO_WritePin>
}
 800074e:	bf00      	nop
 8000750:	3708      	adds	r7, #8
 8000752:	46bd      	mov	sp, r7
 8000754:	bd80      	pop	{r7, pc}
 8000756:	bf00      	nop
 8000758:	20000000 	.word	0x20000000
 800075c:	08005ce0 	.word	0x08005ce0

08000760 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000760:	b480      	push	{r7}
 8000762:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000764:	4b16      	ldr	r3, [pc, #88]	; (80007c0 <SystemInit+0x60>)
 8000766:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800076a:	4a15      	ldr	r2, [pc, #84]	; (80007c0 <SystemInit+0x60>)
 800076c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000770:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000774:	4b13      	ldr	r3, [pc, #76]	; (80007c4 <SystemInit+0x64>)
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	4a12      	ldr	r2, [pc, #72]	; (80007c4 <SystemInit+0x64>)
 800077a:	f043 0301 	orr.w	r3, r3, #1
 800077e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000780:	4b10      	ldr	r3, [pc, #64]	; (80007c4 <SystemInit+0x64>)
 8000782:	2200      	movs	r2, #0
 8000784:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000786:	4b0f      	ldr	r3, [pc, #60]	; (80007c4 <SystemInit+0x64>)
 8000788:	681b      	ldr	r3, [r3, #0]
 800078a:	4a0e      	ldr	r2, [pc, #56]	; (80007c4 <SystemInit+0x64>)
 800078c:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000790:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000794:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8000796:	4b0b      	ldr	r3, [pc, #44]	; (80007c4 <SystemInit+0x64>)
 8000798:	4a0b      	ldr	r2, [pc, #44]	; (80007c8 <SystemInit+0x68>)
 800079a:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800079c:	4b09      	ldr	r3, [pc, #36]	; (80007c4 <SystemInit+0x64>)
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	4a08      	ldr	r2, [pc, #32]	; (80007c4 <SystemInit+0x64>)
 80007a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80007a6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80007a8:	4b06      	ldr	r3, [pc, #24]	; (80007c4 <SystemInit+0x64>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80007ae:	4b04      	ldr	r3, [pc, #16]	; (80007c0 <SystemInit+0x60>)
 80007b0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80007b4:	609a      	str	r2, [r3, #8]
#endif
}
 80007b6:	bf00      	nop
 80007b8:	46bd      	mov	sp, r7
 80007ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007be:	4770      	bx	lr
 80007c0:	e000ed00 	.word	0xe000ed00
 80007c4:	40023800 	.word	0x40023800
 80007c8:	24003010 	.word	0x24003010

080007cc <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 80007cc:	b480      	push	{r7}
 80007ce:	af00      	add	r7, sp, #0
}
 80007d0:	bf00      	nop
 80007d2:	46bd      	mov	sp, r7
 80007d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d8:	4770      	bx	lr

080007da <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 80007da:	b480      	push	{r7}
 80007dc:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 80007de:	e7fe      	b.n	80007de <HardFault_Handler+0x4>

080007e0 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 80007e0:	b480      	push	{r7}
 80007e2:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 80007e4:	e7fe      	b.n	80007e4 <MemManage_Handler+0x4>

080007e6 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 80007e6:	b480      	push	{r7}
 80007e8:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 80007ea:	e7fe      	b.n	80007ea <BusFault_Handler+0x4>

080007ec <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 80007ec:	b480      	push	{r7}
 80007ee:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 80007f0:	e7fe      	b.n	80007f0 <UsageFault_Handler+0x4>

080007f2 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 80007f2:	b480      	push	{r7}
 80007f4:	af00      	add	r7, sp, #0
}
 80007f6:	bf00      	nop
 80007f8:	46bd      	mov	sp, r7
 80007fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007fe:	4770      	bx	lr

08000800 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8000800:	b480      	push	{r7}
 8000802:	af00      	add	r7, sp, #0
}
 8000804:	bf00      	nop
 8000806:	46bd      	mov	sp, r7
 8000808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800080c:	4770      	bx	lr

0800080e <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 800080e:	b480      	push	{r7}
 8000810:	af00      	add	r7, sp, #0
}
 8000812:	bf00      	nop
 8000814:	46bd      	mov	sp, r7
 8000816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800081a:	4770      	bx	lr

0800081c <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	af00      	add	r7, sp, #0
    HAL_IncTick();
 8000820:	f000 feb6 	bl	8001590 <HAL_IncTick>
}
 8000824:	bf00      	nop
 8000826:	bd80      	pop	{r7, pc}

08000828 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000828:	b480      	push	{r7}
 800082a:	af00      	add	r7, sp, #0
	return 1;
 800082c:	2301      	movs	r3, #1
}
 800082e:	4618      	mov	r0, r3
 8000830:	46bd      	mov	sp, r7
 8000832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000836:	4770      	bx	lr

08000838 <_kill>:

int _kill(int pid, int sig)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	b082      	sub	sp, #8
 800083c:	af00      	add	r7, sp, #0
 800083e:	6078      	str	r0, [r7, #4]
 8000840:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000842:	f003 fe55 	bl	80044f0 <__errno>
 8000846:	4603      	mov	r3, r0
 8000848:	2216      	movs	r2, #22
 800084a:	601a      	str	r2, [r3, #0]
	return -1;
 800084c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000850:	4618      	mov	r0, r3
 8000852:	3708      	adds	r7, #8
 8000854:	46bd      	mov	sp, r7
 8000856:	bd80      	pop	{r7, pc}

08000858 <_exit>:

void _exit (int status)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b082      	sub	sp, #8
 800085c:	af00      	add	r7, sp, #0
 800085e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000860:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000864:	6878      	ldr	r0, [r7, #4]
 8000866:	f7ff ffe7 	bl	8000838 <_kill>
	while (1) {}		/* Make sure we hang here */
 800086a:	e7fe      	b.n	800086a <_exit+0x12>

0800086c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	b086      	sub	sp, #24
 8000870:	af00      	add	r7, sp, #0
 8000872:	60f8      	str	r0, [r7, #12]
 8000874:	60b9      	str	r1, [r7, #8]
 8000876:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000878:	2300      	movs	r3, #0
 800087a:	617b      	str	r3, [r7, #20]
 800087c:	e00a      	b.n	8000894 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800087e:	f3af 8000 	nop.w
 8000882:	4601      	mov	r1, r0
 8000884:	68bb      	ldr	r3, [r7, #8]
 8000886:	1c5a      	adds	r2, r3, #1
 8000888:	60ba      	str	r2, [r7, #8]
 800088a:	b2ca      	uxtb	r2, r1
 800088c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800088e:	697b      	ldr	r3, [r7, #20]
 8000890:	3301      	adds	r3, #1
 8000892:	617b      	str	r3, [r7, #20]
 8000894:	697a      	ldr	r2, [r7, #20]
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	429a      	cmp	r2, r3
 800089a:	dbf0      	blt.n	800087e <_read+0x12>
	}

return len;
 800089c:	687b      	ldr	r3, [r7, #4]
}
 800089e:	4618      	mov	r0, r3
 80008a0:	3718      	adds	r7, #24
 80008a2:	46bd      	mov	sp, r7
 80008a4:	bd80      	pop	{r7, pc}

080008a6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80008a6:	b580      	push	{r7, lr}
 80008a8:	b086      	sub	sp, #24
 80008aa:	af00      	add	r7, sp, #0
 80008ac:	60f8      	str	r0, [r7, #12]
 80008ae:	60b9      	str	r1, [r7, #8]
 80008b0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008b2:	2300      	movs	r3, #0
 80008b4:	617b      	str	r3, [r7, #20]
 80008b6:	e009      	b.n	80008cc <_write+0x26>
	{
		__io_putchar(*ptr++);
 80008b8:	68bb      	ldr	r3, [r7, #8]
 80008ba:	1c5a      	adds	r2, r3, #1
 80008bc:	60ba      	str	r2, [r7, #8]
 80008be:	781b      	ldrb	r3, [r3, #0]
 80008c0:	4618      	mov	r0, r3
 80008c2:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008c6:	697b      	ldr	r3, [r7, #20]
 80008c8:	3301      	adds	r3, #1
 80008ca:	617b      	str	r3, [r7, #20]
 80008cc:	697a      	ldr	r2, [r7, #20]
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	429a      	cmp	r2, r3
 80008d2:	dbf1      	blt.n	80008b8 <_write+0x12>
	}
	return len;
 80008d4:	687b      	ldr	r3, [r7, #4]
}
 80008d6:	4618      	mov	r0, r3
 80008d8:	3718      	adds	r7, #24
 80008da:	46bd      	mov	sp, r7
 80008dc:	bd80      	pop	{r7, pc}

080008de <_close>:

int _close(int file)
{
 80008de:	b480      	push	{r7}
 80008e0:	b083      	sub	sp, #12
 80008e2:	af00      	add	r7, sp, #0
 80008e4:	6078      	str	r0, [r7, #4]
	return -1;
 80008e6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80008ea:	4618      	mov	r0, r3
 80008ec:	370c      	adds	r7, #12
 80008ee:	46bd      	mov	sp, r7
 80008f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f4:	4770      	bx	lr

080008f6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80008f6:	b480      	push	{r7}
 80008f8:	b083      	sub	sp, #12
 80008fa:	af00      	add	r7, sp, #0
 80008fc:	6078      	str	r0, [r7, #4]
 80008fe:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000900:	683b      	ldr	r3, [r7, #0]
 8000902:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000906:	605a      	str	r2, [r3, #4]
	return 0;
 8000908:	2300      	movs	r3, #0
}
 800090a:	4618      	mov	r0, r3
 800090c:	370c      	adds	r7, #12
 800090e:	46bd      	mov	sp, r7
 8000910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000914:	4770      	bx	lr

08000916 <_isatty>:

int _isatty(int file)
{
 8000916:	b480      	push	{r7}
 8000918:	b083      	sub	sp, #12
 800091a:	af00      	add	r7, sp, #0
 800091c:	6078      	str	r0, [r7, #4]
	return 1;
 800091e:	2301      	movs	r3, #1
}
 8000920:	4618      	mov	r0, r3
 8000922:	370c      	adds	r7, #12
 8000924:	46bd      	mov	sp, r7
 8000926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092a:	4770      	bx	lr

0800092c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800092c:	b480      	push	{r7}
 800092e:	b085      	sub	sp, #20
 8000930:	af00      	add	r7, sp, #0
 8000932:	60f8      	str	r0, [r7, #12]
 8000934:	60b9      	str	r1, [r7, #8]
 8000936:	607a      	str	r2, [r7, #4]
	return 0;
 8000938:	2300      	movs	r3, #0
}
 800093a:	4618      	mov	r0, r3
 800093c:	3714      	adds	r7, #20
 800093e:	46bd      	mov	sp, r7
 8000940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000944:	4770      	bx	lr
	...

08000948 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	b086      	sub	sp, #24
 800094c:	af00      	add	r7, sp, #0
 800094e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000950:	4a14      	ldr	r2, [pc, #80]	; (80009a4 <_sbrk+0x5c>)
 8000952:	4b15      	ldr	r3, [pc, #84]	; (80009a8 <_sbrk+0x60>)
 8000954:	1ad3      	subs	r3, r2, r3
 8000956:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000958:	697b      	ldr	r3, [r7, #20]
 800095a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800095c:	4b13      	ldr	r3, [pc, #76]	; (80009ac <_sbrk+0x64>)
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	2b00      	cmp	r3, #0
 8000962:	d102      	bne.n	800096a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000964:	4b11      	ldr	r3, [pc, #68]	; (80009ac <_sbrk+0x64>)
 8000966:	4a12      	ldr	r2, [pc, #72]	; (80009b0 <_sbrk+0x68>)
 8000968:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800096a:	4b10      	ldr	r3, [pc, #64]	; (80009ac <_sbrk+0x64>)
 800096c:	681a      	ldr	r2, [r3, #0]
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	4413      	add	r3, r2
 8000972:	693a      	ldr	r2, [r7, #16]
 8000974:	429a      	cmp	r2, r3
 8000976:	d207      	bcs.n	8000988 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000978:	f003 fdba 	bl	80044f0 <__errno>
 800097c:	4603      	mov	r3, r0
 800097e:	220c      	movs	r2, #12
 8000980:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000982:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000986:	e009      	b.n	800099c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000988:	4b08      	ldr	r3, [pc, #32]	; (80009ac <_sbrk+0x64>)
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800098e:	4b07      	ldr	r3, [pc, #28]	; (80009ac <_sbrk+0x64>)
 8000990:	681a      	ldr	r2, [r3, #0]
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	4413      	add	r3, r2
 8000996:	4a05      	ldr	r2, [pc, #20]	; (80009ac <_sbrk+0x64>)
 8000998:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800099a:	68fb      	ldr	r3, [r7, #12]
}
 800099c:	4618      	mov	r0, r3
 800099e:	3718      	adds	r7, #24
 80009a0:	46bd      	mov	sp, r7
 80009a2:	bd80      	pop	{r7, pc}
 80009a4:	20030000 	.word	0x20030000
 80009a8:	00000400 	.word	0x00000400
 80009ac:	20000144 	.word	0x20000144
 80009b0:	200001c8 	.word	0x200001c8

080009b4 <arrays_equal>:
		0x0D,
		0xE0, //DCS TFI+CMDN=X00
		0x00
};

static bool arrays_equal(uint8_t* arr1, uint8_t* arr2, uint8_t len) {
 80009b4:	b480      	push	{r7}
 80009b6:	b087      	sub	sp, #28
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	60f8      	str	r0, [r7, #12]
 80009bc:	60b9      	str	r1, [r7, #8]
 80009be:	4613      	mov	r3, r2
 80009c0:	71fb      	strb	r3, [r7, #7]
    for (uint8_t i = 0; i < len; i++) {
 80009c2:	2300      	movs	r3, #0
 80009c4:	75fb      	strb	r3, [r7, #23]
 80009c6:	e00e      	b.n	80009e6 <arrays_equal+0x32>
        if (arr1[i] != arr2[i]) {
 80009c8:	7dfb      	ldrb	r3, [r7, #23]
 80009ca:	68fa      	ldr	r2, [r7, #12]
 80009cc:	4413      	add	r3, r2
 80009ce:	781a      	ldrb	r2, [r3, #0]
 80009d0:	7dfb      	ldrb	r3, [r7, #23]
 80009d2:	68b9      	ldr	r1, [r7, #8]
 80009d4:	440b      	add	r3, r1
 80009d6:	781b      	ldrb	r3, [r3, #0]
 80009d8:	429a      	cmp	r2, r3
 80009da:	d001      	beq.n	80009e0 <arrays_equal+0x2c>
            return false;
 80009dc:	2300      	movs	r3, #0
 80009de:	e007      	b.n	80009f0 <arrays_equal+0x3c>
    for (uint8_t i = 0; i < len; i++) {
 80009e0:	7dfb      	ldrb	r3, [r7, #23]
 80009e2:	3301      	adds	r3, #1
 80009e4:	75fb      	strb	r3, [r7, #23]
 80009e6:	7dfa      	ldrb	r2, [r7, #23]
 80009e8:	79fb      	ldrb	r3, [r7, #7]
 80009ea:	429a      	cmp	r2, r3
 80009ec:	d3ec      	bcc.n	80009c8 <arrays_equal+0x14>
        }
    }
    return true;
 80009ee:	2301      	movs	r3, #1
}
 80009f0:	4618      	mov	r0, r3
 80009f2:	371c      	adds	r7, #28
 80009f4:	46bd      	mov	sp, r7
 80009f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fa:	4770      	bx	lr

080009fc <pn532_get_pn532Driver_initialized>:
static command_t pn532Driver_I2C_createCommand(uint8_t * input_command, uint8_t len);
static uint8_t calculate_lcs(uint8_t length);
static uint8_t calculate_DCS(uint8_t *data, uint8_t len);


bool pn532_get_pn532Driver_initialized(){
 80009fc:	b480      	push	{r7}
 80009fe:	af00      	add	r7, sp, #0
	return pn532Driver_initialized;
 8000a00:	4b03      	ldr	r3, [pc, #12]	; (8000a10 <pn532_get_pn532Driver_initialized+0x14>)
 8000a02:	781b      	ldrb	r3, [r3, #0]
}
 8000a04:	4618      	mov	r0, r3
 8000a06:	46bd      	mov	sp, r7
 8000a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0c:	4770      	bx	lr
 8000a0e:	bf00      	nop
 8000a10:	20000148 	.word	0x20000148

08000a14 <pn532_get_card_found>:

void pn532_set_pn532_address(uint8_t address){
	pn532_address = address;
}

bool pn532_get_card_found(){
 8000a14:	b480      	push	{r7}
 8000a16:	af00      	add	r7, sp, #0
	return card_found;
 8000a18:	4b03      	ldr	r3, [pc, #12]	; (8000a28 <pn532_get_card_found+0x14>)
 8000a1a:	781b      	ldrb	r3, [r3, #0]
}
 8000a1c:	4618      	mov	r0, r3
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a24:	4770      	bx	lr
 8000a26:	bf00      	nop
 8000a28:	2000014a 	.word	0x2000014a

08000a2c <pn532Driver_I2C_init>:

bool pn532Driver_I2C_init(){
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	af00      	add	r7, sp, #0
	if(pn532Driver_I2C_portNucleo_init()){
 8000a30:	f000 fc5c 	bl	80012ec <pn532Driver_I2C_portNucleo_init>
 8000a34:	4603      	mov	r3, r0
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d004      	beq.n	8000a44 <pn532Driver_I2C_init+0x18>
		pn532Driver_initialized=true;
 8000a3a:	4b04      	ldr	r3, [pc, #16]	; (8000a4c <pn532Driver_I2C_init+0x20>)
 8000a3c:	2201      	movs	r2, #1
 8000a3e:	701a      	strb	r2, [r3, #0]
		return true;
 8000a40:	2301      	movs	r3, #1
 8000a42:	e000      	b.n	8000a46 <pn532Driver_I2C_init+0x1a>
	}
	return false;
 8000a44:	2300      	movs	r3, #0
}
 8000a46:	4618      	mov	r0, r3
 8000a48:	bd80      	pop	{r7, pc}
 8000a4a:	bf00      	nop
 8000a4c:	20000148 	.word	0x20000148

08000a50 <receive_ACK>:
		return true;
	}
	return false;
}

static bool receive_ACK(){
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b082      	sub	sp, #8
 8000a54:	af00      	add	r7, sp, #0
	uint8_t ackBuffer[7]={0};
 8000a56:	2300      	movs	r3, #0
 8000a58:	603b      	str	r3, [r7, #0]
 8000a5a:	1d3b      	adds	r3, r7, #4
 8000a5c:	2100      	movs	r1, #0
 8000a5e:	460a      	mov	r2, r1
 8000a60:	801a      	strh	r2, [r3, #0]
 8000a62:	460a      	mov	r2, r1
 8000a64:	709a      	strb	r2, [r3, #2]

	if(!pn532Driver_I2C_portNucleo_receiveToBuffer(ackBuffer, LENGTH_OF_ACK_FRAME, pn532_address)){
 8000a66:	4b10      	ldr	r3, [pc, #64]	; (8000aa8 <receive_ACK+0x58>)
 8000a68:	781b      	ldrb	r3, [r3, #0]
 8000a6a:	461a      	mov	r2, r3
 8000a6c:	463b      	mov	r3, r7
 8000a6e:	2107      	movs	r1, #7
 8000a70:	4618      	mov	r0, r3
 8000a72:	f000 fca7 	bl	80013c4 <pn532Driver_I2C_portNucleo_receiveToBuffer>
 8000a76:	4603      	mov	r3, r0
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d101      	bne.n	8000a80 <receive_ACK+0x30>
		return false;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	e00e      	b.n	8000a9e <receive_ACK+0x4e>
	}
	if(!arrays_equal(pn532AckFrame,ackBuffer, LENGTH_OF_ACK_FRAME )){
 8000a80:	463b      	mov	r3, r7
 8000a82:	2207      	movs	r2, #7
 8000a84:	4619      	mov	r1, r3
 8000a86:	4809      	ldr	r0, [pc, #36]	; (8000aac <receive_ACK+0x5c>)
 8000a88:	f7ff ff94 	bl	80009b4 <arrays_equal>
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	f083 0301 	eor.w	r3, r3, #1
 8000a92:	b2db      	uxtb	r3, r3
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d001      	beq.n	8000a9c <receive_ACK+0x4c>
		return false;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	e000      	b.n	8000a9e <receive_ACK+0x4e>
	}
	return true;
 8000a9c:	2301      	movs	r3, #1
}
 8000a9e:	4618      	mov	r0, r3
 8000aa0:	3708      	adds	r7, #8
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	bd80      	pop	{r7, pc}
 8000aa6:	bf00      	nop
 8000aa8:	20000010 	.word	0x20000010
 8000aac:	08005d0c 	.word	0x08005d0c

08000ab0 <pn532Driver_I2C_getFirmware>:

PN532_response_t pn532Driver_I2C_getFirmware(PN532_firmware_t* firmware){
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b098      	sub	sp, #96	; 0x60
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	6078      	str	r0, [r7, #4]
	if(firmware ==  NULL) return PN532_PARAM_ERROR;
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d101      	bne.n	8000ac2 <pn532Driver_I2C_getFirmware+0x12>
 8000abe:	2305      	movs	r3, #5
 8000ac0:	e063      	b.n	8000b8a <pn532Driver_I2C_getFirmware+0xda>

	uint8_t responseBuffer[LENGTH_OF_FIRMWARE_RESPONSE+LENGTH_OF_PREAMBLE+LENGTH_LEN_LCS+LENGTH_OF_FIRMWARE_RESPONSE_CODE+LENGTH_OF_POSTAMBLE];

	uint8_t command1[2] = {0xD4, 0x02};
 8000ac2:	f44f 7335 	mov.w	r3, #724	; 0x2d4
 8000ac6:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
	command_t test_command_get_firmware = pn532Driver_I2C_createCommand(command1, 2);
 8000aca:	f107 030c 	add.w	r3, r7, #12
 8000ace:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 8000ad2:	2202      	movs	r2, #2
 8000ad4:	4618      	mov	r0, r3
 8000ad6:	f000 fb6b 	bl	80011b0 <pn532Driver_I2C_createCommand>

	if(!pn532Driver_I2C_portNucleo_sendCommand(command_get_firmware, sizeof(command_get_firmware) , pn532_address)){
 8000ada:	4b2e      	ldr	r3, [pc, #184]	; (8000b94 <pn532Driver_I2C_getFirmware+0xe4>)
 8000adc:	781b      	ldrb	r3, [r3, #0]
 8000ade:	461a      	mov	r2, r3
 8000ae0:	2109      	movs	r1, #9
 8000ae2:	482d      	ldr	r0, [pc, #180]	; (8000b98 <pn532Driver_I2C_getFirmware+0xe8>)
 8000ae4:	f000 fc50 	bl	8001388 <pn532Driver_I2C_portNucleo_sendCommand>
 8000ae8:	4603      	mov	r3, r0
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d101      	bne.n	8000af2 <pn532Driver_I2C_getFirmware+0x42>
		return PN532_CMD_ERROR;
 8000aee:	2301      	movs	r3, #1
 8000af0:	e04b      	b.n	8000b8a <pn532Driver_I2C_getFirmware+0xda>
	}

	portNucleo_Delay(1);
 8000af2:	2001      	movs	r0, #1
 8000af4:	f000 fc3c 	bl	8001370 <portNucleo_Delay>

	if(!receive_ACK()){
 8000af8:	f7ff ffaa 	bl	8000a50 <receive_ACK>
 8000afc:	4603      	mov	r3, r0
 8000afe:	f083 0301 	eor.w	r3, r3, #1
 8000b02:	b2db      	uxtb	r3, r3
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d001      	beq.n	8000b0c <pn532Driver_I2C_getFirmware+0x5c>
		return PN532_ACK_NOT_RECEIVED;
 8000b08:	2302      	movs	r3, #2
 8000b0a:	e03e      	b.n	8000b8a <pn532Driver_I2C_getFirmware+0xda>
	}

	portNucleo_Delay(1);
 8000b0c:	2001      	movs	r0, #1
 8000b0e:	f000 fc2f 	bl	8001370 <portNucleo_Delay>

	if(!pn532Driver_I2C_portNucleo_receiveToBuffer(responseBuffer, sizeof(responseBuffer), pn532_address)){
 8000b12:	4b20      	ldr	r3, [pc, #128]	; (8000b94 <pn532Driver_I2C_getFirmware+0xe4>)
 8000b14:	781b      	ldrb	r3, [r3, #0]
 8000b16:	461a      	mov	r2, r3
 8000b18:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000b1c:	210d      	movs	r1, #13
 8000b1e:	4618      	mov	r0, r3
 8000b20:	f000 fc50 	bl	80013c4 <pn532Driver_I2C_portNucleo_receiveToBuffer>
 8000b24:	4603      	mov	r3, r0
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d101      	bne.n	8000b2e <pn532Driver_I2C_getFirmware+0x7e>
		return PN532_RESPONSE_ERROR;
 8000b2a:	2304      	movs	r3, #4
 8000b2c:	e02d      	b.n	8000b8a <pn532Driver_I2C_getFirmware+0xda>
	}
	if(!arrays_equal(preamble, responseBuffer, LENGTH_OF_PREAMBLE)
 8000b2e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000b32:	2204      	movs	r2, #4
 8000b34:	4619      	mov	r1, r3
 8000b36:	4819      	ldr	r0, [pc, #100]	; (8000b9c <pn532Driver_I2C_getFirmware+0xec>)
 8000b38:	f7ff ff3c 	bl	80009b4 <arrays_equal>
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	f083 0301 	eor.w	r3, r3, #1
 8000b42:	b2db      	uxtb	r3, r3
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d10d      	bne.n	8000b64 <pn532Driver_I2C_getFirmware+0xb4>
			|| !arrays_equal(firmware_response_code, responseBuffer+(LENGTH_LEN_LCS+LENGTH_OF_PREAMBLE)*sizeof(uint8_t), LENGTH_OF_FIRMWARE_RESPONSE_CODE)) {
 8000b48:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000b4c:	3306      	adds	r3, #6
 8000b4e:	2202      	movs	r2, #2
 8000b50:	4619      	mov	r1, r3
 8000b52:	4813      	ldr	r0, [pc, #76]	; (8000ba0 <pn532Driver_I2C_getFirmware+0xf0>)
 8000b54:	f7ff ff2e 	bl	80009b4 <arrays_equal>
 8000b58:	4603      	mov	r3, r0
 8000b5a:	f083 0301 	eor.w	r3, r3, #1
 8000b5e:	b2db      	uxtb	r3, r3
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d001      	beq.n	8000b68 <pn532Driver_I2C_getFirmware+0xb8>
		return PN532_RESPONSE_ERROR;
 8000b64:	2304      	movs	r3, #4
 8000b66:	e010      	b.n	8000b8a <pn532Driver_I2C_getFirmware+0xda>
	}

	firmware->IC=responseBuffer[LENGTH_OF_PREAMBLE+LENGTH_LEN_LCS+LENGTH_OF_FIRMWARE_RESPONSE_CODE];
 8000b68:	f897 2058 	ldrb.w	r2, [r7, #88]	; 0x58
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	701a      	strb	r2, [r3, #0]
	firmware->version=responseBuffer[LENGTH_OF_PREAMBLE+LENGTH_LEN_LCS+LENGTH_OF_FIRMWARE_RESPONSE_CODE+1];
 8000b70:	f897 2059 	ldrb.w	r2, [r7, #89]	; 0x59
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	705a      	strb	r2, [r3, #1]
	firmware->revision=responseBuffer[LENGTH_OF_PREAMBLE+LENGTH_LEN_LCS+LENGTH_OF_FIRMWARE_RESPONSE_CODE+2];
 8000b78:	f897 205a 	ldrb.w	r2, [r7, #90]	; 0x5a
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	709a      	strb	r2, [r3, #2]
	firmware->support=responseBuffer[LENGTH_OF_PREAMBLE+LENGTH_LEN_LCS+LENGTH_OF_FIRMWARE_RESPONSE_CODE+3];
 8000b80:	f897 205b 	ldrb.w	r2, [r7, #91]	; 0x5b
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	70da      	strb	r2, [r3, #3]

	return PN532_OK;
 8000b88:	2300      	movs	r3, #0
}
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	3760      	adds	r7, #96	; 0x60
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bd80      	pop	{r7, pc}
 8000b92:	bf00      	nop
 8000b94:	20000010 	.word	0x20000010
 8000b98:	08005d00 	.word	0x08005d00
 8000b9c:	20000060 	.word	0x20000060
 8000ba0:	20000064 	.word	0x20000064

08000ba4 <pn532Driver_I2C_configureSAM>:

PN532_response_t pn532Driver_I2C_configureSAM(){
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b096      	sub	sp, #88	; 0x58
 8000ba8:	af00      	add	r7, sp, #0

	uint8_t responseBuffer[9];

	uint8_t command1[5] = {0xD4, //TFI
 8000baa:	4a2d      	ldr	r2, [pc, #180]	; (8000c60 <pn532Driver_I2C_configureSAM+0xbc>)
 8000bac:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000bb0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000bb4:	6018      	str	r0, [r3, #0]
 8000bb6:	3304      	adds	r3, #4
 8000bb8:	7019      	strb	r1, [r3, #0]
			0x14, //CMD
			0x01, //
			0x03, //
			0x00,};
	command_t test_command_configure = pn532Driver_I2C_createCommand(command1, 5);
 8000bba:	1d3b      	adds	r3, r7, #4
 8000bbc:	f107 0144 	add.w	r1, r7, #68	; 0x44
 8000bc0:	2205      	movs	r2, #5
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	f000 faf4 	bl	80011b0 <pn532Driver_I2C_createCommand>

	if(!pn532Driver_I2C_portNucleo_sendCommand(command_configure_SAM, command_configure_SAM, pn532_address)){
 8000bc8:	4b26      	ldr	r3, [pc, #152]	; (8000c64 <pn532Driver_I2C_configureSAM+0xc0>)
 8000bca:	781b      	ldrb	r3, [r3, #0]
 8000bcc:	461a      	mov	r2, r3
 8000bce:	4926      	ldr	r1, [pc, #152]	; (8000c68 <pn532Driver_I2C_configureSAM+0xc4>)
 8000bd0:	4825      	ldr	r0, [pc, #148]	; (8000c68 <pn532Driver_I2C_configureSAM+0xc4>)
 8000bd2:	f000 fbd9 	bl	8001388 <pn532Driver_I2C_portNucleo_sendCommand>
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d101      	bne.n	8000be0 <pn532Driver_I2C_configureSAM+0x3c>
		return PN532_CMD_ERROR;
 8000bdc:	2301      	movs	r3, #1
 8000bde:	e03b      	b.n	8000c58 <pn532Driver_I2C_configureSAM+0xb4>
	}
	portNucleo_Delay(1);
 8000be0:	2001      	movs	r0, #1
 8000be2:	f000 fbc5 	bl	8001370 <portNucleo_Delay>

	if(!receive_ACK()){
 8000be6:	f7ff ff33 	bl	8000a50 <receive_ACK>
 8000bea:	4603      	mov	r3, r0
 8000bec:	f083 0301 	eor.w	r3, r3, #1
 8000bf0:	b2db      	uxtb	r3, r3
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d001      	beq.n	8000bfa <pn532Driver_I2C_configureSAM+0x56>
		return PN532_ACK_NOT_RECEIVED;
 8000bf6:	2302      	movs	r3, #2
 8000bf8:	e02e      	b.n	8000c58 <pn532Driver_I2C_configureSAM+0xb4>
	}

	portNucleo_Delay(1);
 8000bfa:	2001      	movs	r0, #1
 8000bfc:	f000 fbb8 	bl	8001370 <portNucleo_Delay>

	if(!pn532Driver_I2C_portNucleo_receiveToBuffer(responseBuffer, sizeof(responseBuffer), pn532_address)){
 8000c00:	4b18      	ldr	r3, [pc, #96]	; (8000c64 <pn532Driver_I2C_configureSAM+0xc0>)
 8000c02:	781b      	ldrb	r3, [r3, #0]
 8000c04:	461a      	mov	r2, r3
 8000c06:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000c0a:	2109      	movs	r1, #9
 8000c0c:	4618      	mov	r0, r3
 8000c0e:	f000 fbd9 	bl	80013c4 <pn532Driver_I2C_portNucleo_receiveToBuffer>
 8000c12:	4603      	mov	r3, r0
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d101      	bne.n	8000c1c <pn532Driver_I2C_configureSAM+0x78>
		return PN532_RESPONSE_ERROR;
 8000c18:	2304      	movs	r3, #4
 8000c1a:	e01d      	b.n	8000c58 <pn532Driver_I2C_configureSAM+0xb4>
	}
	if(!arrays_equal(preamble, responseBuffer, LENGTH_OF_PREAMBLE)
 8000c1c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000c20:	2204      	movs	r2, #4
 8000c22:	4619      	mov	r1, r3
 8000c24:	4811      	ldr	r0, [pc, #68]	; (8000c6c <pn532Driver_I2C_configureSAM+0xc8>)
 8000c26:	f7ff fec5 	bl	80009b4 <arrays_equal>
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	f083 0301 	eor.w	r3, r3, #1
 8000c30:	b2db      	uxtb	r3, r3
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d10d      	bne.n	8000c52 <pn532Driver_I2C_configureSAM+0xae>
			|| !arrays_equal(SAM_configure_response_code, responseBuffer+(LENGTH_LEN_LCS+LENGTH_OF_PREAMBLE)*sizeof(uint8_t), LENGTH_OF_SAM_CONFIGURE_RESPONSE_CODE)) {
 8000c36:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000c3a:	3306      	adds	r3, #6
 8000c3c:	2202      	movs	r2, #2
 8000c3e:	4619      	mov	r1, r3
 8000c40:	480b      	ldr	r0, [pc, #44]	; (8000c70 <pn532Driver_I2C_configureSAM+0xcc>)
 8000c42:	f7ff feb7 	bl	80009b4 <arrays_equal>
 8000c46:	4603      	mov	r3, r0
 8000c48:	f083 0301 	eor.w	r3, r3, #1
 8000c4c:	b2db      	uxtb	r3, r3
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d001      	beq.n	8000c56 <pn532Driver_I2C_configureSAM+0xb2>
		return PN532_RESPONSE_ERROR;
 8000c52:	2304      	movs	r3, #4
 8000c54:	e000      	b.n	8000c58 <pn532Driver_I2C_configureSAM+0xb4>
	}
	return PN532_OK;
 8000c56:	2300      	movs	r3, #0
}
 8000c58:	4618      	mov	r0, r3
 8000c5a:	3758      	adds	r7, #88	; 0x58
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	bd80      	pop	{r7, pc}
 8000c60:	08005958 	.word	0x08005958
 8000c64:	20000010 	.word	0x20000010
 8000c68:	20000014 	.word	0x20000014
 8000c6c:	20000060 	.word	0x20000060
 8000c70:	20000068 	.word	0x20000068

08000c74 <pn532Driver_I2C_listPassiveTarget>:

PN532_response_t pn532Driver_I2C_listPassiveTarget(PN532_target_t * target){
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b098      	sub	sp, #96	; 0x60
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]
	if(target==NULL) return PN532_PARAM_ERROR;
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d101      	bne.n	8000c86 <pn532Driver_I2C_listPassiveTarget+0x12>
 8000c82:	2305      	movs	r3, #5
 8000c84:	e092      	b.n	8000dac <pn532Driver_I2C_listPassiveTarget+0x138>

	uint8_t responseBuffer[20];

	uint8_t command1[4] = {0xD4, //TFI
 8000c86:	4b4b      	ldr	r3, [pc, #300]	; (8000db4 <pn532Driver_I2C_listPassiveTarget+0x140>)
 8000c88:	64bb      	str	r3, [r7, #72]	; 0x48
			0x4A, //CMD
			0x01, //
			0x00,};
	command_t test_command_list = pn532Driver_I2C_createCommand(command1, 4);
 8000c8a:	f107 0308 	add.w	r3, r7, #8
 8000c8e:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8000c92:	2204      	movs	r2, #4
 8000c94:	4618      	mov	r0, r3
 8000c96:	f000 fa8b 	bl	80011b0 <pn532Driver_I2C_createCommand>

	if(!searchingTarget){
 8000c9a:	4b47      	ldr	r3, [pc, #284]	; (8000db8 <pn532Driver_I2C_listPassiveTarget+0x144>)
 8000c9c:	781b      	ldrb	r3, [r3, #0]
 8000c9e:	f083 0301 	eor.w	r3, r3, #1
 8000ca2:	b2db      	uxtb	r3, r3
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d01b      	beq.n	8000ce0 <pn532Driver_I2C_listPassiveTarget+0x6c>
		if(!pn532Driver_I2C_portNucleo_sendCommand(command_inListPassiveTarget, sizeof(command_inListPassiveTarget), pn532_address)){
 8000ca8:	4b44      	ldr	r3, [pc, #272]	; (8000dbc <pn532Driver_I2C_listPassiveTarget+0x148>)
 8000caa:	781b      	ldrb	r3, [r3, #0]
 8000cac:	461a      	mov	r2, r3
 8000cae:	210b      	movs	r1, #11
 8000cb0:	4843      	ldr	r0, [pc, #268]	; (8000dc0 <pn532Driver_I2C_listPassiveTarget+0x14c>)
 8000cb2:	f000 fb69 	bl	8001388 <pn532Driver_I2C_portNucleo_sendCommand>
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d101      	bne.n	8000cc0 <pn532Driver_I2C_listPassiveTarget+0x4c>
			return PN532_CMD_ERROR;
 8000cbc:	2301      	movs	r3, #1
 8000cbe:	e075      	b.n	8000dac <pn532Driver_I2C_listPassiveTarget+0x138>
		}

		portNucleo_Delay(1);
 8000cc0:	2001      	movs	r0, #1
 8000cc2:	f000 fb55 	bl	8001370 <portNucleo_Delay>

		if(!receive_ACK()){
 8000cc6:	f7ff fec3 	bl	8000a50 <receive_ACK>
 8000cca:	4603      	mov	r3, r0
 8000ccc:	f083 0301 	eor.w	r3, r3, #1
 8000cd0:	b2db      	uxtb	r3, r3
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d001      	beq.n	8000cda <pn532Driver_I2C_listPassiveTarget+0x66>
			return PN532_ACK_NOT_RECEIVED;
 8000cd6:	2302      	movs	r3, #2
 8000cd8:	e068      	b.n	8000dac <pn532Driver_I2C_listPassiveTarget+0x138>
		}
		searchingTarget=true;
 8000cda:	4b37      	ldr	r3, [pc, #220]	; (8000db8 <pn532Driver_I2C_listPassiveTarget+0x144>)
 8000cdc:	2201      	movs	r2, #1
 8000cde:	701a      	strb	r2, [r3, #0]
	}


	portNucleo_Delay(1);
 8000ce0:	2001      	movs	r0, #1
 8000ce2:	f000 fb45 	bl	8001370 <portNucleo_Delay>
	if(!pn532Driver_I2C_portNucleo_receiveToBuffer(responseBuffer, sizeof(responseBuffer), pn532_address)){
 8000ce6:	4b35      	ldr	r3, [pc, #212]	; (8000dbc <pn532Driver_I2C_listPassiveTarget+0x148>)
 8000ce8:	781b      	ldrb	r3, [r3, #0]
 8000cea:	461a      	mov	r2, r3
 8000cec:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000cf0:	2114      	movs	r1, #20
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	f000 fb66 	bl	80013c4 <pn532Driver_I2C_portNucleo_receiveToBuffer>
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d101      	bne.n	8000d02 <pn532Driver_I2C_listPassiveTarget+0x8e>
		return PN532_RESPONSE_ERROR;
 8000cfe:	2304      	movs	r3, #4
 8000d00:	e054      	b.n	8000dac <pn532Driver_I2C_listPassiveTarget+0x138>
	}
	if(responseBuffer[0]==0x00){
 8000d02:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d101      	bne.n	8000d0e <pn532Driver_I2C_listPassiveTarget+0x9a>
		return PN532_EMPTY;
 8000d0a:	2306      	movs	r3, #6
 8000d0c:	e04e      	b.n	8000dac <pn532Driver_I2C_listPassiveTarget+0x138>
	}

	found_target.logical_number = responseBuffer[1+LENGTH_OF_PREAMBLE+LENGTH_LEN_LCS+LENGTH_OF_FIRMWARE_RESPONSE_CODE];
 8000d0e:	f897 2055 	ldrb.w	r2, [r7, #85]	; 0x55
 8000d12:	4b2c      	ldr	r3, [pc, #176]	; (8000dc4 <pn532Driver_I2C_listPassiveTarget+0x150>)
 8000d14:	701a      	strb	r2, [r3, #0]
	found_target.SENS_RES[0] = responseBuffer[2+LENGTH_OF_PREAMBLE+LENGTH_LEN_LCS+LENGTH_OF_FIRMWARE_RESPONSE_CODE];
 8000d16:	f897 2056 	ldrb.w	r2, [r7, #86]	; 0x56
 8000d1a:	4b2a      	ldr	r3, [pc, #168]	; (8000dc4 <pn532Driver_I2C_listPassiveTarget+0x150>)
 8000d1c:	705a      	strb	r2, [r3, #1]
	found_target.SENS_RES[1] = responseBuffer[3+LENGTH_OF_PREAMBLE+LENGTH_LEN_LCS+LENGTH_OF_FIRMWARE_RESPONSE_CODE];
 8000d1e:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8000d22:	4b28      	ldr	r3, [pc, #160]	; (8000dc4 <pn532Driver_I2C_listPassiveTarget+0x150>)
 8000d24:	709a      	strb	r2, [r3, #2]
	found_target.SEL_RES = responseBuffer[4+LENGTH_OF_PREAMBLE+LENGTH_LEN_LCS+LENGTH_OF_FIRMWARE_RESPONSE_CODE];
 8000d26:	f897 2058 	ldrb.w	r2, [r7, #88]	; 0x58
 8000d2a:	4b26      	ldr	r3, [pc, #152]	; (8000dc4 <pn532Driver_I2C_listPassiveTarget+0x150>)
 8000d2c:	70da      	strb	r2, [r3, #3]
	found_target.NFCID_length = responseBuffer[5+LENGTH_OF_PREAMBLE+LENGTH_LEN_LCS+LENGTH_OF_FIRMWARE_RESPONSE_CODE];
 8000d2e:	f897 2059 	ldrb.w	r2, [r7, #89]	; 0x59
 8000d32:	4b24      	ldr	r3, [pc, #144]	; (8000dc4 <pn532Driver_I2C_listPassiveTarget+0x150>)
 8000d34:	711a      	strb	r2, [r3, #4]
	found_target.NFCID[0] = responseBuffer[6+LENGTH_OF_PREAMBLE+LENGTH_LEN_LCS+LENGTH_OF_FIRMWARE_RESPONSE_CODE];
 8000d36:	f897 205a 	ldrb.w	r2, [r7, #90]	; 0x5a
 8000d3a:	4b22      	ldr	r3, [pc, #136]	; (8000dc4 <pn532Driver_I2C_listPassiveTarget+0x150>)
 8000d3c:	715a      	strb	r2, [r3, #5]
	found_target.NFCID[1] = responseBuffer[7+LENGTH_OF_PREAMBLE+LENGTH_LEN_LCS+LENGTH_OF_FIRMWARE_RESPONSE_CODE];
 8000d3e:	f897 205b 	ldrb.w	r2, [r7, #91]	; 0x5b
 8000d42:	4b20      	ldr	r3, [pc, #128]	; (8000dc4 <pn532Driver_I2C_listPassiveTarget+0x150>)
 8000d44:	719a      	strb	r2, [r3, #6]
	found_target.NFCID[2] = responseBuffer[8+LENGTH_OF_PREAMBLE+LENGTH_LEN_LCS+LENGTH_OF_FIRMWARE_RESPONSE_CODE];
 8000d46:	f897 205c 	ldrb.w	r2, [r7, #92]	; 0x5c
 8000d4a:	4b1e      	ldr	r3, [pc, #120]	; (8000dc4 <pn532Driver_I2C_listPassiveTarget+0x150>)
 8000d4c:	71da      	strb	r2, [r3, #7]
	found_target.NFCID[3] = responseBuffer[9+LENGTH_OF_PREAMBLE+LENGTH_LEN_LCS+LENGTH_OF_FIRMWARE_RESPONSE_CODE];
 8000d4e:	f897 205d 	ldrb.w	r2, [r7, #93]	; 0x5d
 8000d52:	4b1c      	ldr	r3, [pc, #112]	; (8000dc4 <pn532Driver_I2C_listPassiveTarget+0x150>)
 8000d54:	721a      	strb	r2, [r3, #8]
	target->logical_number = found_target.logical_number;
 8000d56:	4b1b      	ldr	r3, [pc, #108]	; (8000dc4 <pn532Driver_I2C_listPassiveTarget+0x150>)
 8000d58:	781a      	ldrb	r2, [r3, #0]
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	701a      	strb	r2, [r3, #0]
	target->SENS_RES[0] = found_target.SENS_RES[0];
 8000d5e:	4b19      	ldr	r3, [pc, #100]	; (8000dc4 <pn532Driver_I2C_listPassiveTarget+0x150>)
 8000d60:	785a      	ldrb	r2, [r3, #1]
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	705a      	strb	r2, [r3, #1]
	target->SENS_RES[1] = found_target.SENS_RES[1];
 8000d66:	4b17      	ldr	r3, [pc, #92]	; (8000dc4 <pn532Driver_I2C_listPassiveTarget+0x150>)
 8000d68:	789a      	ldrb	r2, [r3, #2]
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	709a      	strb	r2, [r3, #2]
	target->SEL_RES = found_target.SEL_RES;
 8000d6e:	4b15      	ldr	r3, [pc, #84]	; (8000dc4 <pn532Driver_I2C_listPassiveTarget+0x150>)
 8000d70:	78da      	ldrb	r2, [r3, #3]
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	70da      	strb	r2, [r3, #3]
	target->NFCID_length = found_target.NFCID_length;
 8000d76:	4b13      	ldr	r3, [pc, #76]	; (8000dc4 <pn532Driver_I2C_listPassiveTarget+0x150>)
 8000d78:	791a      	ldrb	r2, [r3, #4]
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	711a      	strb	r2, [r3, #4]
	target->NFCID[0] = found_target.NFCID[0];
 8000d7e:	4b11      	ldr	r3, [pc, #68]	; (8000dc4 <pn532Driver_I2C_listPassiveTarget+0x150>)
 8000d80:	795a      	ldrb	r2, [r3, #5]
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	715a      	strb	r2, [r3, #5]
	target->NFCID[1] = found_target.NFCID[1];
 8000d86:	4b0f      	ldr	r3, [pc, #60]	; (8000dc4 <pn532Driver_I2C_listPassiveTarget+0x150>)
 8000d88:	799a      	ldrb	r2, [r3, #6]
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	719a      	strb	r2, [r3, #6]
	target->NFCID[2] = found_target.NFCID[2];
 8000d8e:	4b0d      	ldr	r3, [pc, #52]	; (8000dc4 <pn532Driver_I2C_listPassiveTarget+0x150>)
 8000d90:	79da      	ldrb	r2, [r3, #7]
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	71da      	strb	r2, [r3, #7]
	target->NFCID[3] = found_target.NFCID[3];
 8000d96:	4b0b      	ldr	r3, [pc, #44]	; (8000dc4 <pn532Driver_I2C_listPassiveTarget+0x150>)
 8000d98:	7a1a      	ldrb	r2, [r3, #8]
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	721a      	strb	r2, [r3, #8]
	card_found=true;
 8000d9e:	4b0a      	ldr	r3, [pc, #40]	; (8000dc8 <pn532Driver_I2C_listPassiveTarget+0x154>)
 8000da0:	2201      	movs	r2, #1
 8000da2:	701a      	strb	r2, [r3, #0]
	searchingTarget=false;
 8000da4:	4b04      	ldr	r3, [pc, #16]	; (8000db8 <pn532Driver_I2C_listPassiveTarget+0x144>)
 8000da6:	2200      	movs	r2, #0
 8000da8:	701a      	strb	r2, [r3, #0]
	return PN532_OK;
 8000daa:	2300      	movs	r3, #0
}
 8000dac:	4618      	mov	r0, r3
 8000dae:	3760      	adds	r7, #96	; 0x60
 8000db0:	46bd      	mov	sp, r7
 8000db2:	bd80      	pop	{r7, pc}
 8000db4:	00014ad4 	.word	0x00014ad4
 8000db8:	20000149 	.word	0x20000149
 8000dbc:	20000010 	.word	0x20000010
 8000dc0:	20000020 	.word	0x20000020
 8000dc4:	2000014c 	.word	0x2000014c
 8000dc8:	2000014a 	.word	0x2000014a

08000dcc <pn532Driver_I2C_readMifareData_sans_target>:
PN532_response_t pn532Driver_I2C_readMifareData_sans_target(uint8_t* buffer, uint8_t len){	card_found=false;
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b084      	sub	sp, #16
 8000dd0:	af02      	add	r7, sp, #8
 8000dd2:	6078      	str	r0, [r7, #4]
 8000dd4:	460b      	mov	r3, r1
 8000dd6:	70fb      	strb	r3, [r7, #3]
 8000dd8:	4b09      	ldr	r3, [pc, #36]	; (8000e00 <pn532Driver_I2C_readMifareData_sans_target+0x34>)
 8000dda:	2200      	movs	r2, #0
 8000ddc:	701a      	strb	r2, [r3, #0]
	card_found=false;
 8000dde:	4b08      	ldr	r3, [pc, #32]	; (8000e00 <pn532Driver_I2C_readMifareData_sans_target+0x34>)
 8000de0:	2200      	movs	r2, #0
 8000de2:	701a      	strb	r2, [r3, #0]
	return pn532Driver_I2C_readMifareData(buffer, len, found_target);
 8000de4:	4b07      	ldr	r3, [pc, #28]	; (8000e04 <pn532Driver_I2C_readMifareData_sans_target+0x38>)
 8000de6:	78f9      	ldrb	r1, [r7, #3]
 8000de8:	7a1a      	ldrb	r2, [r3, #8]
 8000dea:	f88d 2000 	strb.w	r2, [sp]
 8000dee:	cb0c      	ldmia	r3, {r2, r3}
 8000df0:	6878      	ldr	r0, [r7, #4]
 8000df2:	f000 f809 	bl	8000e08 <pn532Driver_I2C_readMifareData>
 8000df6:	4603      	mov	r3, r0
}
 8000df8:	4618      	mov	r0, r3
 8000dfa:	3708      	adds	r7, #8
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	bd80      	pop	{r7, pc}
 8000e00:	2000014a 	.word	0x2000014a
 8000e04:	2000014c 	.word	0x2000014c

08000e08 <pn532Driver_I2C_readMifareData>:

PN532_response_t pn532Driver_I2C_readMifareData(uint8_t* buffer, uint8_t len, PN532_target_t target){
 8000e08:	b082      	sub	sp, #8
 8000e0a:	b580      	push	{r7, lr}
 8000e0c:	b09c      	sub	sp, #112	; 0x70
 8000e0e:	af00      	add	r7, sp, #0
 8000e10:	6078      	str	r0, [r7, #4]
 8000e12:	f107 0078 	add.w	r0, r7, #120	; 0x78
 8000e16:	e880 000c 	stmia.w	r0, {r2, r3}
 8000e1a:	460b      	mov	r3, r1
 8000e1c:	70fb      	strb	r3, [r7, #3]

	uint8_t responseBuffer[100]={0x00};
 8000e1e:	2300      	movs	r3, #0
 8000e20:	60bb      	str	r3, [r7, #8]
 8000e22:	f107 030c 	add.w	r3, r7, #12
 8000e26:	2260      	movs	r2, #96	; 0x60
 8000e28:	2100      	movs	r1, #0
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	f003 fba4 	bl	8004578 <memset>

	if(!pn532Driver_I2C_portNucleo_sendCommand(command_auth1, sizeof(command_auth1), pn532_address)){
 8000e30:	4b46      	ldr	r3, [pc, #280]	; (8000f4c <pn532Driver_I2C_readMifareData+0x144>)
 8000e32:	781b      	ldrb	r3, [r3, #0]
 8000e34:	461a      	mov	r2, r3
 8000e36:	2116      	movs	r1, #22
 8000e38:	4845      	ldr	r0, [pc, #276]	; (8000f50 <pn532Driver_I2C_readMifareData+0x148>)
 8000e3a:	f000 faa5 	bl	8001388 <pn532Driver_I2C_portNucleo_sendCommand>
 8000e3e:	4603      	mov	r3, r0
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d101      	bne.n	8000e48 <pn532Driver_I2C_readMifareData+0x40>
		return PN532_CMD_ERROR;
 8000e44:	2301      	movs	r3, #1
 8000e46:	e07a      	b.n	8000f3e <pn532Driver_I2C_readMifareData+0x136>
	}

	portNucleo_Delay(1);
 8000e48:	2001      	movs	r0, #1
 8000e4a:	f000 fa91 	bl	8001370 <portNucleo_Delay>

	if(!receive_ACK()){
 8000e4e:	f7ff fdff 	bl	8000a50 <receive_ACK>
 8000e52:	4603      	mov	r3, r0
 8000e54:	f083 0301 	eor.w	r3, r3, #1
 8000e58:	b2db      	uxtb	r3, r3
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d001      	beq.n	8000e62 <pn532Driver_I2C_readMifareData+0x5a>
		return PN532_ACK_NOT_RECEIVED;
 8000e5e:	2302      	movs	r3, #2
 8000e60:	e06d      	b.n	8000f3e <pn532Driver_I2C_readMifareData+0x136>
	}

	portNucleo_Delay(10);
 8000e62:	200a      	movs	r0, #10
 8000e64:	f000 fa84 	bl	8001370 <portNucleo_Delay>

	if(!pn532Driver_I2C_portNucleo_receiveToBuffer(responseBuffer, sizeof(responseBuffer), pn532_address)){
 8000e68:	4b38      	ldr	r3, [pc, #224]	; (8000f4c <pn532Driver_I2C_readMifareData+0x144>)
 8000e6a:	781b      	ldrb	r3, [r3, #0]
 8000e6c:	461a      	mov	r2, r3
 8000e6e:	f107 0308 	add.w	r3, r7, #8
 8000e72:	2164      	movs	r1, #100	; 0x64
 8000e74:	4618      	mov	r0, r3
 8000e76:	f000 faa5 	bl	80013c4 <pn532Driver_I2C_portNucleo_receiveToBuffer>
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d101      	bne.n	8000e84 <pn532Driver_I2C_readMifareData+0x7c>
		return PN532_RESPONSE_ERROR;
 8000e80:	2304      	movs	r3, #4
 8000e82:	e05c      	b.n	8000f3e <pn532Driver_I2C_readMifareData+0x136>
	}

	if(!pn532Driver_I2C_portNucleo_sendCommand(command_inDataExchange, sizeof(command_inDataExchange), pn532_address)){
 8000e84:	4b31      	ldr	r3, [pc, #196]	; (8000f4c <pn532Driver_I2C_readMifareData+0x144>)
 8000e86:	781b      	ldrb	r3, [r3, #0]
 8000e88:	461a      	mov	r2, r3
 8000e8a:	210c      	movs	r1, #12
 8000e8c:	4831      	ldr	r0, [pc, #196]	; (8000f54 <pn532Driver_I2C_readMifareData+0x14c>)
 8000e8e:	f000 fa7b 	bl	8001388 <pn532Driver_I2C_portNucleo_sendCommand>
 8000e92:	4603      	mov	r3, r0
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d101      	bne.n	8000e9c <pn532Driver_I2C_readMifareData+0x94>
		return PN532_CMD_ERROR;
 8000e98:	2301      	movs	r3, #1
 8000e9a:	e050      	b.n	8000f3e <pn532Driver_I2C_readMifareData+0x136>
	}

	portNucleo_Delay(1);
 8000e9c:	2001      	movs	r0, #1
 8000e9e:	f000 fa67 	bl	8001370 <portNucleo_Delay>

	if(!receive_ACK()){
 8000ea2:	f7ff fdd5 	bl	8000a50 <receive_ACK>
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	f083 0301 	eor.w	r3, r3, #1
 8000eac:	b2db      	uxtb	r3, r3
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d001      	beq.n	8000eb6 <pn532Driver_I2C_readMifareData+0xae>
		return PN532_ACK_NOT_RECEIVED;
 8000eb2:	2302      	movs	r3, #2
 8000eb4:	e043      	b.n	8000f3e <pn532Driver_I2C_readMifareData+0x136>
	}

	portNucleo_Delay(10);
 8000eb6:	200a      	movs	r0, #10
 8000eb8:	f000 fa5a 	bl	8001370 <portNucleo_Delay>

	if(!pn532Driver_I2C_portNucleo_receiveToBuffer(responseBuffer, sizeof(responseBuffer), pn532_address)){
 8000ebc:	4b23      	ldr	r3, [pc, #140]	; (8000f4c <pn532Driver_I2C_readMifareData+0x144>)
 8000ebe:	781b      	ldrb	r3, [r3, #0]
 8000ec0:	461a      	mov	r2, r3
 8000ec2:	f107 0308 	add.w	r3, r7, #8
 8000ec6:	2164      	movs	r1, #100	; 0x64
 8000ec8:	4618      	mov	r0, r3
 8000eca:	f000 fa7b 	bl	80013c4 <pn532Driver_I2C_portNucleo_receiveToBuffer>
 8000ece:	4603      	mov	r3, r0
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d101      	bne.n	8000ed8 <pn532Driver_I2C_readMifareData+0xd0>
		return PN532_RESPONSE_ERROR;
 8000ed4:	2304      	movs	r3, #4
 8000ed6:	e032      	b.n	8000f3e <pn532Driver_I2C_readMifareData+0x136>
	}
	if(!arrays_equal(preamble, responseBuffer, LENGTH_OF_PREAMBLE)
 8000ed8:	f107 0308 	add.w	r3, r7, #8
 8000edc:	2204      	movs	r2, #4
 8000ede:	4619      	mov	r1, r3
 8000ee0:	481d      	ldr	r0, [pc, #116]	; (8000f58 <pn532Driver_I2C_readMifareData+0x150>)
 8000ee2:	f7ff fd67 	bl	80009b4 <arrays_equal>
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	f083 0301 	eor.w	r3, r3, #1
 8000eec:	b2db      	uxtb	r3, r3
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d10d      	bne.n	8000f0e <pn532Driver_I2C_readMifareData+0x106>
			|| !arrays_equal(inDataExchange_response_code, responseBuffer+(LENGTH_LEN_LCS+LENGTH_OF_PREAMBLE)*sizeof(uint8_t), LENGTH_OF_FIRMWARE_RESPONSE_CODE)) {
 8000ef2:	f107 0308 	add.w	r3, r7, #8
 8000ef6:	3306      	adds	r3, #6
 8000ef8:	2202      	movs	r2, #2
 8000efa:	4619      	mov	r1, r3
 8000efc:	4817      	ldr	r0, [pc, #92]	; (8000f5c <pn532Driver_I2C_readMifareData+0x154>)
 8000efe:	f7ff fd59 	bl	80009b4 <arrays_equal>
 8000f02:	4603      	mov	r3, r0
 8000f04:	f083 0301 	eor.w	r3, r3, #1
 8000f08:	b2db      	uxtb	r3, r3
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d001      	beq.n	8000f12 <pn532Driver_I2C_readMifareData+0x10a>
		return PN532_RESPONSE_ERROR;
 8000f0e:	2304      	movs	r3, #4
 8000f10:	e015      	b.n	8000f3e <pn532Driver_I2C_readMifareData+0x136>
	}

	for(int i = 0; i<len; i++){
 8000f12:	2300      	movs	r3, #0
 8000f14:	66fb      	str	r3, [r7, #108]	; 0x6c
 8000f16:	e00d      	b.n	8000f34 <pn532Driver_I2C_readMifareData+0x12c>
		buffer[i] = responseBuffer[LENGTH_OF_PREAMBLE+LENGTH_LEN_LCS+LENGTH_OF_DATA_RESPONSE_CODE+i];
 8000f18:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000f1a:	f103 0209 	add.w	r2, r3, #9
 8000f1e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000f20:	6879      	ldr	r1, [r7, #4]
 8000f22:	440b      	add	r3, r1
 8000f24:	3270      	adds	r2, #112	; 0x70
 8000f26:	443a      	add	r2, r7
 8000f28:	f812 2c68 	ldrb.w	r2, [r2, #-104]
 8000f2c:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i<len; i++){
 8000f2e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000f30:	3301      	adds	r3, #1
 8000f32:	66fb      	str	r3, [r7, #108]	; 0x6c
 8000f34:	78fb      	ldrb	r3, [r7, #3]
 8000f36:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8000f38:	429a      	cmp	r2, r3
 8000f3a:	dbed      	blt.n	8000f18 <pn532Driver_I2C_readMifareData+0x110>
	}

	return PN532_OK;
 8000f3c:	2300      	movs	r3, #0

}
 8000f3e:	4618      	mov	r0, r3
 8000f40:	3770      	adds	r7, #112	; 0x70
 8000f42:	46bd      	mov	sp, r7
 8000f44:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000f48:	b002      	add	sp, #8
 8000f4a:	4770      	bx	lr
 8000f4c:	20000010 	.word	0x20000010
 8000f50:	20000038 	.word	0x20000038
 8000f54:	2000002c 	.word	0x2000002c
 8000f58:	20000060 	.word	0x20000060
 8000f5c:	2000006c 	.word	0x2000006c

08000f60 <pn532Driver_I2C_readMifareData_full>:

PN532_response_t pn532Driver_I2C_readMifareData_full(uint8_t* buffer, uint8_t len){
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b09e      	sub	sp, #120	; 0x78
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
 8000f68:	460b      	mov	r3, r1
 8000f6a:	70fb      	strb	r3, [r7, #3]

	uint8_t responseBuffer[100]={0x00};
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	60fb      	str	r3, [r7, #12]
 8000f70:	f107 0310 	add.w	r3, r7, #16
 8000f74:	2260      	movs	r2, #96	; 0x60
 8000f76:	2100      	movs	r1, #0
 8000f78:	4618      	mov	r0, r3
 8000f7a:	f003 fafd 	bl	8004578 <memset>

	for(int i =0x00; i<0xBB; i++){
 8000f7e:	2300      	movs	r3, #0
 8000f80:	677b      	str	r3, [r7, #116]	; 0x74
 8000f82:	e0a3      	b.n	80010cc <pn532Driver_I2C_readMifareData_full+0x16c>
		command_auth1[0x09]=i;
 8000f84:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000f86:	b2da      	uxtb	r2, r3
 8000f88:	4b55      	ldr	r3, [pc, #340]	; (80010e0 <pn532Driver_I2C_readMifareData_full+0x180>)
 8000f8a:	725a      	strb	r2, [r3, #9]
		command_auth1[0x14]=0xF3-i;
 8000f8c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000f8e:	b2da      	uxtb	r2, r3
 8000f90:	f06f 030c 	mvn.w	r3, #12
 8000f94:	1a9b      	subs	r3, r3, r2
 8000f96:	b2da      	uxtb	r2, r3
 8000f98:	4b51      	ldr	r3, [pc, #324]	; (80010e0 <pn532Driver_I2C_readMifareData_full+0x180>)
 8000f9a:	751a      	strb	r2, [r3, #20]

		if(!pn532Driver_I2C_portNucleo_sendCommand(command_auth1, sizeof(command_auth1), pn532_address)){
 8000f9c:	4b51      	ldr	r3, [pc, #324]	; (80010e4 <pn532Driver_I2C_readMifareData_full+0x184>)
 8000f9e:	781b      	ldrb	r3, [r3, #0]
 8000fa0:	461a      	mov	r2, r3
 8000fa2:	2116      	movs	r1, #22
 8000fa4:	484e      	ldr	r0, [pc, #312]	; (80010e0 <pn532Driver_I2C_readMifareData_full+0x180>)
 8000fa6:	f000 f9ef 	bl	8001388 <pn532Driver_I2C_portNucleo_sendCommand>
 8000faa:	4603      	mov	r3, r0
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d101      	bne.n	8000fb4 <pn532Driver_I2C_readMifareData_full+0x54>
				return PN532_OK;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	e090      	b.n	80010d6 <pn532Driver_I2C_readMifareData_full+0x176>
			}

			portNucleo_Delay(10);
 8000fb4:	200a      	movs	r0, #10
 8000fb6:	f000 f9db 	bl	8001370 <portNucleo_Delay>

			if(!receive_ACK()){
 8000fba:	f7ff fd49 	bl	8000a50 <receive_ACK>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	f083 0301 	eor.w	r3, r3, #1
 8000fc4:	b2db      	uxtb	r3, r3
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d001      	beq.n	8000fce <pn532Driver_I2C_readMifareData_full+0x6e>
				return PN532_OK;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	e083      	b.n	80010d6 <pn532Driver_I2C_readMifareData_full+0x176>
			}

			portNucleo_Delay(10);
 8000fce:	200a      	movs	r0, #10
 8000fd0:	f000 f9ce 	bl	8001370 <portNucleo_Delay>

			if(!pn532Driver_I2C_portNucleo_receiveToBuffer(responseBuffer, sizeof(responseBuffer), pn532_address)){
 8000fd4:	4b43      	ldr	r3, [pc, #268]	; (80010e4 <pn532Driver_I2C_readMifareData_full+0x184>)
 8000fd6:	781b      	ldrb	r3, [r3, #0]
 8000fd8:	461a      	mov	r2, r3
 8000fda:	f107 030c 	add.w	r3, r7, #12
 8000fde:	2164      	movs	r1, #100	; 0x64
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	f000 f9ef 	bl	80013c4 <pn532Driver_I2C_portNucleo_receiveToBuffer>
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d101      	bne.n	8000ff0 <pn532Driver_I2C_readMifareData_full+0x90>
				return PN532_OK;
 8000fec:	2300      	movs	r3, #0
 8000fee:	e072      	b.n	80010d6 <pn532Driver_I2C_readMifareData_full+0x176>
			}

			command_inDataExchange[9]=i;
 8000ff0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000ff2:	b2da      	uxtb	r2, r3
 8000ff4:	4b3c      	ldr	r3, [pc, #240]	; (80010e8 <pn532Driver_I2C_readMifareData_full+0x188>)
 8000ff6:	725a      	strb	r2, [r3, #9]
			command_inDataExchange[10]=0xBB-i;
 8000ff8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000ffa:	b2da      	uxtb	r2, r3
 8000ffc:	f06f 0344 	mvn.w	r3, #68	; 0x44
 8001000:	1a9b      	subs	r3, r3, r2
 8001002:	b2da      	uxtb	r2, r3
 8001004:	4b38      	ldr	r3, [pc, #224]	; (80010e8 <pn532Driver_I2C_readMifareData_full+0x188>)
 8001006:	729a      	strb	r2, [r3, #10]
			if(!pn532Driver_I2C_portNucleo_sendCommand(command_inDataExchange, sizeof(command_inDataExchange), pn532_address)){
 8001008:	4b36      	ldr	r3, [pc, #216]	; (80010e4 <pn532Driver_I2C_readMifareData_full+0x184>)
 800100a:	781b      	ldrb	r3, [r3, #0]
 800100c:	461a      	mov	r2, r3
 800100e:	210c      	movs	r1, #12
 8001010:	4835      	ldr	r0, [pc, #212]	; (80010e8 <pn532Driver_I2C_readMifareData_full+0x188>)
 8001012:	f000 f9b9 	bl	8001388 <pn532Driver_I2C_portNucleo_sendCommand>
 8001016:	4603      	mov	r3, r0
 8001018:	2b00      	cmp	r3, #0
 800101a:	d101      	bne.n	8001020 <pn532Driver_I2C_readMifareData_full+0xc0>
				return PN532_OK;
 800101c:	2300      	movs	r3, #0
 800101e:	e05a      	b.n	80010d6 <pn532Driver_I2C_readMifareData_full+0x176>
			}

			portNucleo_Delay(10);
 8001020:	200a      	movs	r0, #10
 8001022:	f000 f9a5 	bl	8001370 <portNucleo_Delay>

			if(!receive_ACK()){
 8001026:	f7ff fd13 	bl	8000a50 <receive_ACK>
 800102a:	4603      	mov	r3, r0
 800102c:	f083 0301 	eor.w	r3, r3, #1
 8001030:	b2db      	uxtb	r3, r3
 8001032:	2b00      	cmp	r3, #0
 8001034:	d001      	beq.n	800103a <pn532Driver_I2C_readMifareData_full+0xda>
				return PN532_OK;
 8001036:	2300      	movs	r3, #0
 8001038:	e04d      	b.n	80010d6 <pn532Driver_I2C_readMifareData_full+0x176>
			}

			portNucleo_Delay(10);
 800103a:	200a      	movs	r0, #10
 800103c:	f000 f998 	bl	8001370 <portNucleo_Delay>

			if(!pn532Driver_I2C_portNucleo_receiveToBuffer(responseBuffer, sizeof(responseBuffer), pn532_address)){
 8001040:	4b28      	ldr	r3, [pc, #160]	; (80010e4 <pn532Driver_I2C_readMifareData_full+0x184>)
 8001042:	781b      	ldrb	r3, [r3, #0]
 8001044:	461a      	mov	r2, r3
 8001046:	f107 030c 	add.w	r3, r7, #12
 800104a:	2164      	movs	r1, #100	; 0x64
 800104c:	4618      	mov	r0, r3
 800104e:	f000 f9b9 	bl	80013c4 <pn532Driver_I2C_portNucleo_receiveToBuffer>
 8001052:	4603      	mov	r3, r0
 8001054:	2b00      	cmp	r3, #0
 8001056:	d101      	bne.n	800105c <pn532Driver_I2C_readMifareData_full+0xfc>
				return PN532_OK;
 8001058:	2300      	movs	r3, #0
 800105a:	e03c      	b.n	80010d6 <pn532Driver_I2C_readMifareData_full+0x176>
			}
			if(!arrays_equal(preamble, responseBuffer, LENGTH_OF_PREAMBLE)
 800105c:	f107 030c 	add.w	r3, r7, #12
 8001060:	2204      	movs	r2, #4
 8001062:	4619      	mov	r1, r3
 8001064:	4821      	ldr	r0, [pc, #132]	; (80010ec <pn532Driver_I2C_readMifareData_full+0x18c>)
 8001066:	f7ff fca5 	bl	80009b4 <arrays_equal>
 800106a:	4603      	mov	r3, r0
 800106c:	f083 0301 	eor.w	r3, r3, #1
 8001070:	b2db      	uxtb	r3, r3
 8001072:	2b00      	cmp	r3, #0
 8001074:	d10d      	bne.n	8001092 <pn532Driver_I2C_readMifareData_full+0x132>
					|| !arrays_equal(inDataExchange_response_code, responseBuffer+(LENGTH_LEN_LCS+LENGTH_OF_PREAMBLE)*sizeof(uint8_t), LENGTH_OF_FIRMWARE_RESPONSE_CODE)) {
 8001076:	f107 030c 	add.w	r3, r7, #12
 800107a:	3306      	adds	r3, #6
 800107c:	2202      	movs	r2, #2
 800107e:	4619      	mov	r1, r3
 8001080:	481b      	ldr	r0, [pc, #108]	; (80010f0 <pn532Driver_I2C_readMifareData_full+0x190>)
 8001082:	f7ff fc97 	bl	80009b4 <arrays_equal>
 8001086:	4603      	mov	r3, r0
 8001088:	f083 0301 	eor.w	r3, r3, #1
 800108c:	b2db      	uxtb	r3, r3
 800108e:	2b00      	cmp	r3, #0
 8001090:	d001      	beq.n	8001096 <pn532Driver_I2C_readMifareData_full+0x136>
				return PN532_OK;
 8001092:	2300      	movs	r3, #0
 8001094:	e01f      	b.n	80010d6 <pn532Driver_I2C_readMifareData_full+0x176>
			}

			for(int j = 0; j<16; j++){
 8001096:	2300      	movs	r3, #0
 8001098:	673b      	str	r3, [r7, #112]	; 0x70
 800109a:	e011      	b.n	80010c0 <pn532Driver_I2C_readMifareData_full+0x160>
				buffer[i*16+j] = responseBuffer[LENGTH_OF_PREAMBLE+LENGTH_LEN_LCS+LENGTH_OF_DATA_RESPONSE_CODE+j];
 800109c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800109e:	f103 0209 	add.w	r2, r3, #9
 80010a2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80010a4:	0119      	lsls	r1, r3, #4
 80010a6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80010a8:	440b      	add	r3, r1
 80010aa:	4619      	mov	r1, r3
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	440b      	add	r3, r1
 80010b0:	3278      	adds	r2, #120	; 0x78
 80010b2:	443a      	add	r2, r7
 80010b4:	f812 2c6c 	ldrb.w	r2, [r2, #-108]
 80010b8:	701a      	strb	r2, [r3, #0]
			for(int j = 0; j<16; j++){
 80010ba:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80010bc:	3301      	adds	r3, #1
 80010be:	673b      	str	r3, [r7, #112]	; 0x70
 80010c0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80010c2:	2b0f      	cmp	r3, #15
 80010c4:	ddea      	ble.n	800109c <pn532Driver_I2C_readMifareData_full+0x13c>
	for(int i =0x00; i<0xBB; i++){
 80010c6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80010c8:	3301      	adds	r3, #1
 80010ca:	677b      	str	r3, [r7, #116]	; 0x74
 80010cc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80010ce:	2bba      	cmp	r3, #186	; 0xba
 80010d0:	f77f af58 	ble.w	8000f84 <pn532Driver_I2C_readMifareData_full+0x24>
			}
	}
	return PN532_OK;
 80010d4:	2300      	movs	r3, #0

}
 80010d6:	4618      	mov	r0, r3
 80010d8:	3778      	adds	r7, #120	; 0x78
 80010da:	46bd      	mov	sp, r7
 80010dc:	bd80      	pop	{r7, pc}
 80010de:	bf00      	nop
 80010e0:	20000038 	.word	0x20000038
 80010e4:	20000010 	.word	0x20000010
 80010e8:	2000002c 	.word	0x2000002c
 80010ec:	20000060 	.word	0x20000060
 80010f0:	2000006c 	.word	0x2000006c

080010f4 <pn532Driver_I2C_configureTiming>:

PN532_response_t pn532Driver_I2C_configureTiming(){
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b09a      	sub	sp, #104	; 0x68
 80010f8:	af00      	add	r7, sp, #0

	uint8_t responseBuffer[100]={0x00};
 80010fa:	2300      	movs	r3, #0
 80010fc:	607b      	str	r3, [r7, #4]
 80010fe:	f107 0308 	add.w	r3, r7, #8
 8001102:	2260      	movs	r2, #96	; 0x60
 8001104:	2100      	movs	r1, #0
 8001106:	4618      	mov	r0, r3
 8001108:	f003 fa36 	bl	8004578 <memset>

	if(!pn532Driver_I2C_portNucleo_sendCommand(command_configureTiming, sizeof(command_configureTiming), pn532_address)){
 800110c:	4b24      	ldr	r3, [pc, #144]	; (80011a0 <pn532Driver_I2C_configureTiming+0xac>)
 800110e:	781b      	ldrb	r3, [r3, #0]
 8001110:	461a      	mov	r2, r3
 8001112:	210d      	movs	r1, #13
 8001114:	4823      	ldr	r0, [pc, #140]	; (80011a4 <pn532Driver_I2C_configureTiming+0xb0>)
 8001116:	f000 f937 	bl	8001388 <pn532Driver_I2C_portNucleo_sendCommand>
 800111a:	4603      	mov	r3, r0
 800111c:	2b00      	cmp	r3, #0
 800111e:	d101      	bne.n	8001124 <pn532Driver_I2C_configureTiming+0x30>
		return PN532_CMD_ERROR;
 8001120:	2301      	movs	r3, #1
 8001122:	e038      	b.n	8001196 <pn532Driver_I2C_configureTiming+0xa2>
	}

	portNucleo_Delay(1);
 8001124:	2001      	movs	r0, #1
 8001126:	f000 f923 	bl	8001370 <portNucleo_Delay>

	if(!receive_ACK()){
 800112a:	f7ff fc91 	bl	8000a50 <receive_ACK>
 800112e:	4603      	mov	r3, r0
 8001130:	f083 0301 	eor.w	r3, r3, #1
 8001134:	b2db      	uxtb	r3, r3
 8001136:	2b00      	cmp	r3, #0
 8001138:	d001      	beq.n	800113e <pn532Driver_I2C_configureTiming+0x4a>
		return PN532_ACK_NOT_RECEIVED;
 800113a:	2302      	movs	r3, #2
 800113c:	e02b      	b.n	8001196 <pn532Driver_I2C_configureTiming+0xa2>
	}

	portNucleo_Delay(1);
 800113e:	2001      	movs	r0, #1
 8001140:	f000 f916 	bl	8001370 <portNucleo_Delay>

	if(!pn532Driver_I2C_portNucleo_receiveToBuffer(responseBuffer, sizeof(responseBuffer), pn532_address)){
 8001144:	4b16      	ldr	r3, [pc, #88]	; (80011a0 <pn532Driver_I2C_configureTiming+0xac>)
 8001146:	781b      	ldrb	r3, [r3, #0]
 8001148:	461a      	mov	r2, r3
 800114a:	1d3b      	adds	r3, r7, #4
 800114c:	2164      	movs	r1, #100	; 0x64
 800114e:	4618      	mov	r0, r3
 8001150:	f000 f938 	bl	80013c4 <pn532Driver_I2C_portNucleo_receiveToBuffer>
 8001154:	4603      	mov	r3, r0
 8001156:	2b00      	cmp	r3, #0
 8001158:	d101      	bne.n	800115e <pn532Driver_I2C_configureTiming+0x6a>
		return PN532_RESPONSE_ERROR;
 800115a:	2304      	movs	r3, #4
 800115c:	e01b      	b.n	8001196 <pn532Driver_I2C_configureTiming+0xa2>
	}
	if(!arrays_equal(preamble, responseBuffer, LENGTH_OF_PREAMBLE)
 800115e:	1d3b      	adds	r3, r7, #4
 8001160:	2204      	movs	r2, #4
 8001162:	4619      	mov	r1, r3
 8001164:	4810      	ldr	r0, [pc, #64]	; (80011a8 <pn532Driver_I2C_configureTiming+0xb4>)
 8001166:	f7ff fc25 	bl	80009b4 <arrays_equal>
 800116a:	4603      	mov	r3, r0
 800116c:	f083 0301 	eor.w	r3, r3, #1
 8001170:	b2db      	uxtb	r3, r3
 8001172:	2b00      	cmp	r3, #0
 8001174:	d10c      	bne.n	8001190 <pn532Driver_I2C_configureTiming+0x9c>
			|| !arrays_equal(configTiming_response_code, responseBuffer+(LENGTH_LEN_LCS+LENGTH_OF_PREAMBLE)*sizeof(uint8_t), LENGTH_OF_FIRMWARE_RESPONSE_CODE)) {
 8001176:	1d3b      	adds	r3, r7, #4
 8001178:	3306      	adds	r3, #6
 800117a:	2202      	movs	r2, #2
 800117c:	4619      	mov	r1, r3
 800117e:	480b      	ldr	r0, [pc, #44]	; (80011ac <pn532Driver_I2C_configureTiming+0xb8>)
 8001180:	f7ff fc18 	bl	80009b4 <arrays_equal>
 8001184:	4603      	mov	r3, r0
 8001186:	f083 0301 	eor.w	r3, r3, #1
 800118a:	b2db      	uxtb	r3, r3
 800118c:	2b00      	cmp	r3, #0
 800118e:	d001      	beq.n	8001194 <pn532Driver_I2C_configureTiming+0xa0>
		return PN532_RESPONSE_ERROR;
 8001190:	2304      	movs	r3, #4
 8001192:	e000      	b.n	8001196 <pn532Driver_I2C_configureTiming+0xa2>
	}


	return PN532_OK;
 8001194:	2300      	movs	r3, #0

}
 8001196:	4618      	mov	r0, r3
 8001198:	3768      	adds	r7, #104	; 0x68
 800119a:	46bd      	mov	sp, r7
 800119c:	bd80      	pop	{r7, pc}
 800119e:	bf00      	nop
 80011a0:	20000010 	.word	0x20000010
 80011a4:	20000050 	.word	0x20000050
 80011a8:	20000060 	.word	0x20000060
 80011ac:	20000070 	.word	0x20000070

080011b0 <pn532Driver_I2C_createCommand>:

static command_t pn532Driver_I2C_createCommand(uint8_t * input_command, uint8_t len){
 80011b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80011b2:	b097      	sub	sp, #92	; 0x5c
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	60f8      	str	r0, [r7, #12]
 80011b8:	60b9      	str	r1, [r7, #8]
 80011ba:	4613      	mov	r3, r2
 80011bc:	71fb      	strb	r3, [r7, #7]
	command_t output_command;
	output_command.command[0] = 0x00;
 80011be:	2300      	movs	r3, #0
 80011c0:	753b      	strb	r3, [r7, #20]
	output_command.command[1] = 0x00;
 80011c2:	2300      	movs	r3, #0
 80011c4:	757b      	strb	r3, [r7, #21]
	output_command.command[2] = 0xFF;
 80011c6:	23ff      	movs	r3, #255	; 0xff
 80011c8:	75bb      	strb	r3, [r7, #22]
	output_command.command[3] = len;
 80011ca:	79fb      	ldrb	r3, [r7, #7]
 80011cc:	75fb      	strb	r3, [r7, #23]
	output_command.command[4] = calculate_lcs(len);
 80011ce:	79fb      	ldrb	r3, [r7, #7]
 80011d0:	4618      	mov	r0, r3
 80011d2:	f000 f84e 	bl	8001272 <calculate_lcs>
 80011d6:	4603      	mov	r3, r0
 80011d8:	763b      	strb	r3, [r7, #24]
	for(int i = 0; i<len;i++){
 80011da:	2300      	movs	r3, #0
 80011dc:	657b      	str	r3, [r7, #84]	; 0x54
 80011de:	e00c      	b.n	80011fa <pn532Driver_I2C_createCommand+0x4a>
		output_command.command[5+i] = input_command[i];
 80011e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80011e2:	68ba      	ldr	r2, [r7, #8]
 80011e4:	441a      	add	r2, r3
 80011e6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80011e8:	3305      	adds	r3, #5
 80011ea:	7812      	ldrb	r2, [r2, #0]
 80011ec:	3358      	adds	r3, #88	; 0x58
 80011ee:	443b      	add	r3, r7
 80011f0:	f803 2c44 	strb.w	r2, [r3, #-68]
	for(int i = 0; i<len;i++){
 80011f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80011f6:	3301      	adds	r3, #1
 80011f8:	657b      	str	r3, [r7, #84]	; 0x54
 80011fa:	79fb      	ldrb	r3, [r7, #7]
 80011fc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80011fe:	429a      	cmp	r2, r3
 8001200:	dbee      	blt.n	80011e0 <pn532Driver_I2C_createCommand+0x30>
	}
	output_command.command[5+len] = calculate_DCS(input_command, len);
 8001202:	79fb      	ldrb	r3, [r7, #7]
 8001204:	1d5c      	adds	r4, r3, #5
 8001206:	79fb      	ldrb	r3, [r7, #7]
 8001208:	4619      	mov	r1, r3
 800120a:	68b8      	ldr	r0, [r7, #8]
 800120c:	f000 f83f 	bl	800128e <calculate_DCS>
 8001210:	4603      	mov	r3, r0
 8001212:	461a      	mov	r2, r3
 8001214:	f104 0358 	add.w	r3, r4, #88	; 0x58
 8001218:	443b      	add	r3, r7
 800121a:	f803 2c44 	strb.w	r2, [r3, #-68]
	output_command.command[6+len] = 0x00;
 800121e:	79fb      	ldrb	r3, [r7, #7]
 8001220:	3306      	adds	r3, #6
 8001222:	3358      	adds	r3, #88	; 0x58
 8001224:	443b      	add	r3, r7
 8001226:	2200      	movs	r2, #0
 8001228:	f803 2c44 	strb.w	r2, [r3, #-68]

	output_command.len = len+7;
 800122c:	79fb      	ldrb	r3, [r7, #7]
 800122e:	3307      	adds	r3, #7
 8001230:	b2db      	uxtb	r3, r3
 8001232:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50

	return output_command;
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	f107 0414 	add.w	r4, r7, #20
 800123c:	469c      	mov	ip, r3
 800123e:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8001242:	4665      	mov	r5, ip
 8001244:	4626      	mov	r6, r4
 8001246:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001248:	6028      	str	r0, [r5, #0]
 800124a:	6069      	str	r1, [r5, #4]
 800124c:	60aa      	str	r2, [r5, #8]
 800124e:	60eb      	str	r3, [r5, #12]
 8001250:	3410      	adds	r4, #16
 8001252:	f10c 0c10 	add.w	ip, ip, #16
 8001256:	4574      	cmp	r4, lr
 8001258:	d1f3      	bne.n	8001242 <pn532Driver_I2C_createCommand+0x92>
 800125a:	4665      	mov	r5, ip
 800125c:	4623      	mov	r3, r4
 800125e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8001260:	6028      	str	r0, [r5, #0]
 8001262:	6069      	str	r1, [r5, #4]
 8001264:	60aa      	str	r2, [r5, #8]
 8001266:	781b      	ldrb	r3, [r3, #0]
 8001268:	732b      	strb	r3, [r5, #12]
}
 800126a:	68f8      	ldr	r0, [r7, #12]
 800126c:	375c      	adds	r7, #92	; 0x5c
 800126e:	46bd      	mov	sp, r7
 8001270:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001272 <calculate_lcs>:

static uint8_t calculate_lcs(uint8_t length) {
 8001272:	b480      	push	{r7}
 8001274:	b083      	sub	sp, #12
 8001276:	af00      	add	r7, sp, #0
 8001278:	4603      	mov	r3, r0
 800127a:	71fb      	strb	r3, [r7, #7]
    return ~(length-1) & 0xFF;
 800127c:	79fb      	ldrb	r3, [r7, #7]
 800127e:	425b      	negs	r3, r3
 8001280:	b2db      	uxtb	r3, r3
}
 8001282:	4618      	mov	r0, r3
 8001284:	370c      	adds	r7, #12
 8001286:	46bd      	mov	sp, r7
 8001288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128c:	4770      	bx	lr

0800128e <calculate_DCS>:

static uint8_t calculate_DCS(uint8_t *data, uint8_t len) {
 800128e:	b480      	push	{r7}
 8001290:	b087      	sub	sp, #28
 8001292:	af00      	add	r7, sp, #0
 8001294:	6078      	str	r0, [r7, #4]
 8001296:	460b      	mov	r3, r1
 8001298:	70fb      	strb	r3, [r7, #3]
    uint8_t dcs = 0xFF;
 800129a:	23ff      	movs	r3, #255	; 0xff
 800129c:	75fb      	strb	r3, [r7, #23]
    for (int i = 0; i < len; i++) {
 800129e:	2300      	movs	r3, #0
 80012a0:	613b      	str	r3, [r7, #16]
 80012a2:	e016      	b.n	80012d2 <calculate_DCS+0x44>
        uint16_t sum = dcs + data[i];
 80012a4:	7dfb      	ldrb	r3, [r7, #23]
 80012a6:	b29a      	uxth	r2, r3
 80012a8:	693b      	ldr	r3, [r7, #16]
 80012aa:	6879      	ldr	r1, [r7, #4]
 80012ac:	440b      	add	r3, r1
 80012ae:	781b      	ldrb	r3, [r3, #0]
 80012b0:	b29b      	uxth	r3, r3
 80012b2:	4413      	add	r3, r2
 80012b4:	81fb      	strh	r3, [r7, #14]
        if (sum > 0xFF) {
 80012b6:	89fb      	ldrh	r3, [r7, #14]
 80012b8:	2bff      	cmp	r3, #255	; 0xff
 80012ba:	d905      	bls.n	80012c8 <calculate_DCS+0x3a>
            sum -= 0xFF;
 80012bc:	89fb      	ldrh	r3, [r7, #14]
 80012be:	3bff      	subs	r3, #255	; 0xff
 80012c0:	81fb      	strh	r3, [r7, #14]
            sum--;
 80012c2:	89fb      	ldrh	r3, [r7, #14]
 80012c4:	3b01      	subs	r3, #1
 80012c6:	81fb      	strh	r3, [r7, #14]
        }
        dcs = sum;
 80012c8:	89fb      	ldrh	r3, [r7, #14]
 80012ca:	75fb      	strb	r3, [r7, #23]
    for (int i = 0; i < len; i++) {
 80012cc:	693b      	ldr	r3, [r7, #16]
 80012ce:	3301      	adds	r3, #1
 80012d0:	613b      	str	r3, [r7, #16]
 80012d2:	78fb      	ldrb	r3, [r7, #3]
 80012d4:	693a      	ldr	r2, [r7, #16]
 80012d6:	429a      	cmp	r2, r3
 80012d8:	dbe4      	blt.n	80012a4 <calculate_DCS+0x16>
    }
    return ~(dcs-1);
 80012da:	7dfb      	ldrb	r3, [r7, #23]
 80012dc:	425b      	negs	r3, r3
 80012de:	b2db      	uxtb	r3, r3
}
 80012e0:	4618      	mov	r0, r3
 80012e2:	371c      	adds	r7, #28
 80012e4:	46bd      	mov	sp, r7
 80012e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ea:	4770      	bx	lr

080012ec <pn532Driver_I2C_portNucleo_init>:
static I2C_HandleTypeDef hi2c1;



bool pn532Driver_I2C_portNucleo_init(void)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	af00      	add	r7, sp, #0
  hi2c1.Instance = I2C1;
 80012f0:	4b1c      	ldr	r3, [pc, #112]	; (8001364 <pn532Driver_I2C_portNucleo_init+0x78>)
 80012f2:	4a1d      	ldr	r2, [pc, #116]	; (8001368 <pn532Driver_I2C_portNucleo_init+0x7c>)
 80012f4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80012f6:	4b1b      	ldr	r3, [pc, #108]	; (8001364 <pn532Driver_I2C_portNucleo_init+0x78>)
 80012f8:	4a1c      	ldr	r2, [pc, #112]	; (800136c <pn532Driver_I2C_portNucleo_init+0x80>)
 80012fa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80012fc:	4b19      	ldr	r3, [pc, #100]	; (8001364 <pn532Driver_I2C_portNucleo_init+0x78>)
 80012fe:	2200      	movs	r2, #0
 8001300:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001302:	4b18      	ldr	r3, [pc, #96]	; (8001364 <pn532Driver_I2C_portNucleo_init+0x78>)
 8001304:	2200      	movs	r2, #0
 8001306:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001308:	4b16      	ldr	r3, [pc, #88]	; (8001364 <pn532Driver_I2C_portNucleo_init+0x78>)
 800130a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800130e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001310:	4b14      	ldr	r3, [pc, #80]	; (8001364 <pn532Driver_I2C_portNucleo_init+0x78>)
 8001312:	2200      	movs	r2, #0
 8001314:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001316:	4b13      	ldr	r3, [pc, #76]	; (8001364 <pn532Driver_I2C_portNucleo_init+0x78>)
 8001318:	2200      	movs	r2, #0
 800131a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800131c:	4b11      	ldr	r3, [pc, #68]	; (8001364 <pn532Driver_I2C_portNucleo_init+0x78>)
 800131e:	2200      	movs	r2, #0
 8001320:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001322:	4b10      	ldr	r3, [pc, #64]	; (8001364 <pn532Driver_I2C_portNucleo_init+0x78>)
 8001324:	2200      	movs	r2, #0
 8001326:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001328:	480e      	ldr	r0, [pc, #56]	; (8001364 <pn532Driver_I2C_portNucleo_init+0x78>)
 800132a:	f000 fc21 	bl	8001b70 <HAL_I2C_Init>
 800132e:	4603      	mov	r3, r0
 8001330:	2b00      	cmp	r3, #0
 8001332:	d001      	beq.n	8001338 <pn532Driver_I2C_portNucleo_init+0x4c>
  {
    return false;
 8001334:	2300      	movs	r3, #0
 8001336:	e012      	b.n	800135e <pn532Driver_I2C_portNucleo_init+0x72>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001338:	2100      	movs	r1, #0
 800133a:	480a      	ldr	r0, [pc, #40]	; (8001364 <pn532Driver_I2C_portNucleo_init+0x78>)
 800133c:	f001 fbad 	bl	8002a9a <HAL_I2CEx_ConfigAnalogFilter>
 8001340:	4603      	mov	r3, r0
 8001342:	2b00      	cmp	r3, #0
 8001344:	d001      	beq.n	800134a <pn532Driver_I2C_portNucleo_init+0x5e>
  {
    return false;
 8001346:	2300      	movs	r3, #0
 8001348:	e009      	b.n	800135e <pn532Driver_I2C_portNucleo_init+0x72>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800134a:	2100      	movs	r1, #0
 800134c:	4805      	ldr	r0, [pc, #20]	; (8001364 <pn532Driver_I2C_portNucleo_init+0x78>)
 800134e:	f001 fbe0 	bl	8002b12 <HAL_I2CEx_ConfigDigitalFilter>
 8001352:	4603      	mov	r3, r0
 8001354:	2b00      	cmp	r3, #0
 8001356:	d001      	beq.n	800135c <pn532Driver_I2C_portNucleo_init+0x70>
  {
    return false;
 8001358:	2300      	movs	r3, #0
 800135a:	e000      	b.n	800135e <pn532Driver_I2C_portNucleo_init+0x72>
  }
  return true;
 800135c:	2301      	movs	r3, #1

}
 800135e:	4618      	mov	r0, r3
 8001360:	bd80      	pop	{r7, pc}
 8001362:	bf00      	nop
 8001364:	20000158 	.word	0x20000158
 8001368:	40005400 	.word	0x40005400
 800136c:	000186a0 	.word	0x000186a0

08001370 <portNucleo_Delay>:
bool pn532Driver_I2C_portNucleo_deinit(void)
{
	HAL_I2C_DeInit(&hi2c1);
}

void portNucleo_Delay(uint32_t delay){
 8001370:	b580      	push	{r7, lr}
 8001372:	b082      	sub	sp, #8
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
	HAL_Delay(delay);
 8001378:	6878      	ldr	r0, [r7, #4]
 800137a:	f000 f929 	bl	80015d0 <HAL_Delay>
}
 800137e:	bf00      	nop
 8001380:	3708      	adds	r7, #8
 8001382:	46bd      	mov	sp, r7
 8001384:	bd80      	pop	{r7, pc}
	...

08001388 <pn532Driver_I2C_portNucleo_sendCommand>:

bool pn532Driver_I2C_portNucleo_sendCommand(uint8_t* command, uint16_t size, uint8_t address){
 8001388:	b580      	push	{r7, lr}
 800138a:	b084      	sub	sp, #16
 800138c:	af02      	add	r7, sp, #8
 800138e:	6078      	str	r0, [r7, #4]
 8001390:	460b      	mov	r3, r1
 8001392:	807b      	strh	r3, [r7, #2]
 8001394:	4613      	mov	r3, r2
 8001396:	707b      	strb	r3, [r7, #1]
	return HAL_OK == HAL_I2C_Master_Transmit(&hi2c1, address, command, size, HAL_MAX_DELAY);
 8001398:	787b      	ldrb	r3, [r7, #1]
 800139a:	b299      	uxth	r1, r3
 800139c:	887b      	ldrh	r3, [r7, #2]
 800139e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80013a2:	9200      	str	r2, [sp, #0]
 80013a4:	687a      	ldr	r2, [r7, #4]
 80013a6:	4806      	ldr	r0, [pc, #24]	; (80013c0 <pn532Driver_I2C_portNucleo_sendCommand+0x38>)
 80013a8:	f000 fd26 	bl	8001df8 <HAL_I2C_Master_Transmit>
 80013ac:	4603      	mov	r3, r0
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	bf0c      	ite	eq
 80013b2:	2301      	moveq	r3, #1
 80013b4:	2300      	movne	r3, #0
 80013b6:	b2db      	uxtb	r3, r3
}
 80013b8:	4618      	mov	r0, r3
 80013ba:	3708      	adds	r7, #8
 80013bc:	46bd      	mov	sp, r7
 80013be:	bd80      	pop	{r7, pc}
 80013c0:	20000158 	.word	0x20000158

080013c4 <pn532Driver_I2C_portNucleo_receiveToBuffer>:



bool pn532Driver_I2C_portNucleo_receiveToBuffer(uint8_t * buffer, uint16_t size, uint8_t address){
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b084      	sub	sp, #16
 80013c8:	af02      	add	r7, sp, #8
 80013ca:	6078      	str	r0, [r7, #4]
 80013cc:	460b      	mov	r3, r1
 80013ce:	807b      	strh	r3, [r7, #2]
 80013d0:	4613      	mov	r3, r2
 80013d2:	707b      	strb	r3, [r7, #1]
	return HAL_OK == HAL_I2C_Master_Receive(&hi2c1, address, buffer, size, HAL_MAX_DELAY);
 80013d4:	787b      	ldrb	r3, [r7, #1]
 80013d6:	b299      	uxth	r1, r3
 80013d8:	887b      	ldrh	r3, [r7, #2]
 80013da:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80013de:	9200      	str	r2, [sp, #0]
 80013e0:	687a      	ldr	r2, [r7, #4]
 80013e2:	4806      	ldr	r0, [pc, #24]	; (80013fc <pn532Driver_I2C_portNucleo_receiveToBuffer+0x38>)
 80013e4:	f000 fe06 	bl	8001ff4 <HAL_I2C_Master_Receive>
 80013e8:	4603      	mov	r3, r0
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	bf0c      	ite	eq
 80013ee:	2301      	moveq	r3, #1
 80013f0:	2300      	movne	r3, #0
 80013f2:	b2db      	uxtb	r3, r3
}
 80013f4:	4618      	mov	r0, r3
 80013f6:	3708      	adds	r7, #8
 80013f8:	46bd      	mov	sp, r7
 80013fa:	bd80      	pop	{r7, pc}
 80013fc:	20000158 	.word	0x20000158

08001400 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b08a      	sub	sp, #40	; 0x28
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001408:	f107 0314 	add.w	r3, r7, #20
 800140c:	2200      	movs	r2, #0
 800140e:	601a      	str	r2, [r3, #0]
 8001410:	605a      	str	r2, [r3, #4]
 8001412:	609a      	str	r2, [r3, #8]
 8001414:	60da      	str	r2, [r3, #12]
 8001416:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	4a1f      	ldr	r2, [pc, #124]	; (800149c <HAL_I2C_MspInit+0x9c>)
 800141e:	4293      	cmp	r3, r2
 8001420:	d138      	bne.n	8001494 <HAL_I2C_MspInit+0x94>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001422:	2300      	movs	r3, #0
 8001424:	613b      	str	r3, [r7, #16]
 8001426:	4b1e      	ldr	r3, [pc, #120]	; (80014a0 <HAL_I2C_MspInit+0xa0>)
 8001428:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800142a:	4a1d      	ldr	r2, [pc, #116]	; (80014a0 <HAL_I2C_MspInit+0xa0>)
 800142c:	f043 0302 	orr.w	r3, r3, #2
 8001430:	6313      	str	r3, [r2, #48]	; 0x30
 8001432:	4b1b      	ldr	r3, [pc, #108]	; (80014a0 <HAL_I2C_MspInit+0xa0>)
 8001434:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001436:	f003 0302 	and.w	r3, r3, #2
 800143a:	613b      	str	r3, [r7, #16]
 800143c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800143e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001442:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001444:	2312      	movs	r3, #18
 8001446:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001448:	2300      	movs	r3, #0
 800144a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800144c:	2303      	movs	r3, #3
 800144e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001450:	2304      	movs	r3, #4
 8001452:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001454:	f107 0314 	add.w	r3, r7, #20
 8001458:	4619      	mov	r1, r3
 800145a:	4812      	ldr	r0, [pc, #72]	; (80014a4 <HAL_I2C_MspInit+0xa4>)
 800145c:	f000 f9c2 	bl	80017e4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001460:	2300      	movs	r3, #0
 8001462:	60fb      	str	r3, [r7, #12]
 8001464:	4b0e      	ldr	r3, [pc, #56]	; (80014a0 <HAL_I2C_MspInit+0xa0>)
 8001466:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001468:	4a0d      	ldr	r2, [pc, #52]	; (80014a0 <HAL_I2C_MspInit+0xa0>)
 800146a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800146e:	6413      	str	r3, [r2, #64]	; 0x40
 8001470:	4b0b      	ldr	r3, [pc, #44]	; (80014a0 <HAL_I2C_MspInit+0xa0>)
 8001472:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001474:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001478:	60fb      	str	r3, [r7, #12]
 800147a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_I2C1_FORCE_RESET();
 800147c:	4b08      	ldr	r3, [pc, #32]	; (80014a0 <HAL_I2C_MspInit+0xa0>)
 800147e:	6a1b      	ldr	r3, [r3, #32]
 8001480:	4a07      	ldr	r2, [pc, #28]	; (80014a0 <HAL_I2C_MspInit+0xa0>)
 8001482:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001486:	6213      	str	r3, [r2, #32]
    __HAL_RCC_I2C1_RELEASE_RESET();
 8001488:	4b05      	ldr	r3, [pc, #20]	; (80014a0 <HAL_I2C_MspInit+0xa0>)
 800148a:	6a1b      	ldr	r3, [r3, #32]
 800148c:	4a04      	ldr	r2, [pc, #16]	; (80014a0 <HAL_I2C_MspInit+0xa0>)
 800148e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001492:	6213      	str	r3, [r2, #32]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001494:	bf00      	nop
 8001496:	3728      	adds	r7, #40	; 0x28
 8001498:	46bd      	mov	sp, r7
 800149a:	bd80      	pop	{r7, pc}
 800149c:	40005400 	.word	0x40005400
 80014a0:	40023800 	.word	0x40023800
 80014a4:	40020400 	.word	0x40020400

080014a8 <HAL_MspInit>:

/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014a8:	b480      	push	{r7}
 80014aa:	b083      	sub	sp, #12
 80014ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014ae:	2300      	movs	r3, #0
 80014b0:	607b      	str	r3, [r7, #4]
 80014b2:	4b10      	ldr	r3, [pc, #64]	; (80014f4 <HAL_MspInit+0x4c>)
 80014b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014b6:	4a0f      	ldr	r2, [pc, #60]	; (80014f4 <HAL_MspInit+0x4c>)
 80014b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014bc:	6453      	str	r3, [r2, #68]	; 0x44
 80014be:	4b0d      	ldr	r3, [pc, #52]	; (80014f4 <HAL_MspInit+0x4c>)
 80014c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014c6:	607b      	str	r3, [r7, #4]
 80014c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80014ca:	2300      	movs	r3, #0
 80014cc:	603b      	str	r3, [r7, #0]
 80014ce:	4b09      	ldr	r3, [pc, #36]	; (80014f4 <HAL_MspInit+0x4c>)
 80014d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014d2:	4a08      	ldr	r2, [pc, #32]	; (80014f4 <HAL_MspInit+0x4c>)
 80014d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014d8:	6413      	str	r3, [r2, #64]	; 0x40
 80014da:	4b06      	ldr	r3, [pc, #24]	; (80014f4 <HAL_MspInit+0x4c>)
 80014dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014e2:	603b      	str	r3, [r7, #0]
 80014e4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014e6:	bf00      	nop
 80014e8:	370c      	adds	r7, #12
 80014ea:	46bd      	mov	sp, r7
 80014ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f0:	4770      	bx	lr
 80014f2:	bf00      	nop
 80014f4:	40023800 	.word	0x40023800

080014f8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80014fc:	4b0b      	ldr	r3, [pc, #44]	; (800152c <HAL_Init+0x34>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	4a0a      	ldr	r2, [pc, #40]	; (800152c <HAL_Init+0x34>)
 8001502:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001506:	6013      	str	r3, [r2, #0]
#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001508:	4b08      	ldr	r3, [pc, #32]	; (800152c <HAL_Init+0x34>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	4a07      	ldr	r2, [pc, #28]	; (800152c <HAL_Init+0x34>)
 800150e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001512:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001514:	2003      	movs	r0, #3
 8001516:	f000 f931 	bl	800177c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800151a:	200f      	movs	r0, #15
 800151c:	f000 f808 	bl	8001530 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001520:	f7ff ffc2 	bl	80014a8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001524:	2300      	movs	r3, #0
}
 8001526:	4618      	mov	r0, r3
 8001528:	bd80      	pop	{r7, pc}
 800152a:	bf00      	nop
 800152c:	40023c00 	.word	0x40023c00

08001530 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b082      	sub	sp, #8
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001538:	4b12      	ldr	r3, [pc, #72]	; (8001584 <HAL_InitTick+0x54>)
 800153a:	681a      	ldr	r2, [r3, #0]
 800153c:	4b12      	ldr	r3, [pc, #72]	; (8001588 <HAL_InitTick+0x58>)
 800153e:	781b      	ldrb	r3, [r3, #0]
 8001540:	4619      	mov	r1, r3
 8001542:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001546:	fbb3 f3f1 	udiv	r3, r3, r1
 800154a:	fbb2 f3f3 	udiv	r3, r2, r3
 800154e:	4618      	mov	r0, r3
 8001550:	f000 f93b 	bl	80017ca <HAL_SYSTICK_Config>
 8001554:	4603      	mov	r3, r0
 8001556:	2b00      	cmp	r3, #0
 8001558:	d001      	beq.n	800155e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800155a:	2301      	movs	r3, #1
 800155c:	e00e      	b.n	800157c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	2b0f      	cmp	r3, #15
 8001562:	d80a      	bhi.n	800157a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001564:	2200      	movs	r2, #0
 8001566:	6879      	ldr	r1, [r7, #4]
 8001568:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800156c:	f000 f911 	bl	8001792 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001570:	4a06      	ldr	r2, [pc, #24]	; (800158c <HAL_InitTick+0x5c>)
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001576:	2300      	movs	r3, #0
 8001578:	e000      	b.n	800157c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800157a:	2301      	movs	r3, #1
}
 800157c:	4618      	mov	r0, r3
 800157e:	3708      	adds	r7, #8
 8001580:	46bd      	mov	sp, r7
 8001582:	bd80      	pop	{r7, pc}
 8001584:	2000000c 	.word	0x2000000c
 8001588:	20000078 	.word	0x20000078
 800158c:	20000074 	.word	0x20000074

08001590 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001590:	b480      	push	{r7}
 8001592:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001594:	4b06      	ldr	r3, [pc, #24]	; (80015b0 <HAL_IncTick+0x20>)
 8001596:	781b      	ldrb	r3, [r3, #0]
 8001598:	461a      	mov	r2, r3
 800159a:	4b06      	ldr	r3, [pc, #24]	; (80015b4 <HAL_IncTick+0x24>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	4413      	add	r3, r2
 80015a0:	4a04      	ldr	r2, [pc, #16]	; (80015b4 <HAL_IncTick+0x24>)
 80015a2:	6013      	str	r3, [r2, #0]
}
 80015a4:	bf00      	nop
 80015a6:	46bd      	mov	sp, r7
 80015a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ac:	4770      	bx	lr
 80015ae:	bf00      	nop
 80015b0:	20000078 	.word	0x20000078
 80015b4:	200001ac 	.word	0x200001ac

080015b8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015b8:	b480      	push	{r7}
 80015ba:	af00      	add	r7, sp, #0
  return uwTick;
 80015bc:	4b03      	ldr	r3, [pc, #12]	; (80015cc <HAL_GetTick+0x14>)
 80015be:	681b      	ldr	r3, [r3, #0]
}
 80015c0:	4618      	mov	r0, r3
 80015c2:	46bd      	mov	sp, r7
 80015c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c8:	4770      	bx	lr
 80015ca:	bf00      	nop
 80015cc:	200001ac 	.word	0x200001ac

080015d0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b084      	sub	sp, #16
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80015d8:	f7ff ffee 	bl	80015b8 <HAL_GetTick>
 80015dc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80015e8:	d005      	beq.n	80015f6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80015ea:	4b0a      	ldr	r3, [pc, #40]	; (8001614 <HAL_Delay+0x44>)
 80015ec:	781b      	ldrb	r3, [r3, #0]
 80015ee:	461a      	mov	r2, r3
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	4413      	add	r3, r2
 80015f4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80015f6:	bf00      	nop
 80015f8:	f7ff ffde 	bl	80015b8 <HAL_GetTick>
 80015fc:	4602      	mov	r2, r0
 80015fe:	68bb      	ldr	r3, [r7, #8]
 8001600:	1ad3      	subs	r3, r2, r3
 8001602:	68fa      	ldr	r2, [r7, #12]
 8001604:	429a      	cmp	r2, r3
 8001606:	d8f7      	bhi.n	80015f8 <HAL_Delay+0x28>
  {
  }
}
 8001608:	bf00      	nop
 800160a:	bf00      	nop
 800160c:	3710      	adds	r7, #16
 800160e:	46bd      	mov	sp, r7
 8001610:	bd80      	pop	{r7, pc}
 8001612:	bf00      	nop
 8001614:	20000078 	.word	0x20000078

08001618 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001618:	b480      	push	{r7}
 800161a:	b085      	sub	sp, #20
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	f003 0307 	and.w	r3, r3, #7
 8001626:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001628:	4b0c      	ldr	r3, [pc, #48]	; (800165c <__NVIC_SetPriorityGrouping+0x44>)
 800162a:	68db      	ldr	r3, [r3, #12]
 800162c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800162e:	68ba      	ldr	r2, [r7, #8]
 8001630:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001634:	4013      	ands	r3, r2
 8001636:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800163c:	68bb      	ldr	r3, [r7, #8]
 800163e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001640:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001644:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001648:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800164a:	4a04      	ldr	r2, [pc, #16]	; (800165c <__NVIC_SetPriorityGrouping+0x44>)
 800164c:	68bb      	ldr	r3, [r7, #8]
 800164e:	60d3      	str	r3, [r2, #12]
}
 8001650:	bf00      	nop
 8001652:	3714      	adds	r7, #20
 8001654:	46bd      	mov	sp, r7
 8001656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165a:	4770      	bx	lr
 800165c:	e000ed00 	.word	0xe000ed00

08001660 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001660:	b480      	push	{r7}
 8001662:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001664:	4b04      	ldr	r3, [pc, #16]	; (8001678 <__NVIC_GetPriorityGrouping+0x18>)
 8001666:	68db      	ldr	r3, [r3, #12]
 8001668:	0a1b      	lsrs	r3, r3, #8
 800166a:	f003 0307 	and.w	r3, r3, #7
}
 800166e:	4618      	mov	r0, r3
 8001670:	46bd      	mov	sp, r7
 8001672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001676:	4770      	bx	lr
 8001678:	e000ed00 	.word	0xe000ed00

0800167c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800167c:	b480      	push	{r7}
 800167e:	b083      	sub	sp, #12
 8001680:	af00      	add	r7, sp, #0
 8001682:	4603      	mov	r3, r0
 8001684:	6039      	str	r1, [r7, #0]
 8001686:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001688:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800168c:	2b00      	cmp	r3, #0
 800168e:	db0a      	blt.n	80016a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001690:	683b      	ldr	r3, [r7, #0]
 8001692:	b2da      	uxtb	r2, r3
 8001694:	490c      	ldr	r1, [pc, #48]	; (80016c8 <__NVIC_SetPriority+0x4c>)
 8001696:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800169a:	0112      	lsls	r2, r2, #4
 800169c:	b2d2      	uxtb	r2, r2
 800169e:	440b      	add	r3, r1
 80016a0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80016a4:	e00a      	b.n	80016bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016a6:	683b      	ldr	r3, [r7, #0]
 80016a8:	b2da      	uxtb	r2, r3
 80016aa:	4908      	ldr	r1, [pc, #32]	; (80016cc <__NVIC_SetPriority+0x50>)
 80016ac:	79fb      	ldrb	r3, [r7, #7]
 80016ae:	f003 030f 	and.w	r3, r3, #15
 80016b2:	3b04      	subs	r3, #4
 80016b4:	0112      	lsls	r2, r2, #4
 80016b6:	b2d2      	uxtb	r2, r2
 80016b8:	440b      	add	r3, r1
 80016ba:	761a      	strb	r2, [r3, #24]
}
 80016bc:	bf00      	nop
 80016be:	370c      	adds	r7, #12
 80016c0:	46bd      	mov	sp, r7
 80016c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c6:	4770      	bx	lr
 80016c8:	e000e100 	.word	0xe000e100
 80016cc:	e000ed00 	.word	0xe000ed00

080016d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016d0:	b480      	push	{r7}
 80016d2:	b089      	sub	sp, #36	; 0x24
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	60f8      	str	r0, [r7, #12]
 80016d8:	60b9      	str	r1, [r7, #8]
 80016da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	f003 0307 	and.w	r3, r3, #7
 80016e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016e4:	69fb      	ldr	r3, [r7, #28]
 80016e6:	f1c3 0307 	rsb	r3, r3, #7
 80016ea:	2b04      	cmp	r3, #4
 80016ec:	bf28      	it	cs
 80016ee:	2304      	movcs	r3, #4
 80016f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016f2:	69fb      	ldr	r3, [r7, #28]
 80016f4:	3304      	adds	r3, #4
 80016f6:	2b06      	cmp	r3, #6
 80016f8:	d902      	bls.n	8001700 <NVIC_EncodePriority+0x30>
 80016fa:	69fb      	ldr	r3, [r7, #28]
 80016fc:	3b03      	subs	r3, #3
 80016fe:	e000      	b.n	8001702 <NVIC_EncodePriority+0x32>
 8001700:	2300      	movs	r3, #0
 8001702:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001704:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001708:	69bb      	ldr	r3, [r7, #24]
 800170a:	fa02 f303 	lsl.w	r3, r2, r3
 800170e:	43da      	mvns	r2, r3
 8001710:	68bb      	ldr	r3, [r7, #8]
 8001712:	401a      	ands	r2, r3
 8001714:	697b      	ldr	r3, [r7, #20]
 8001716:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001718:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800171c:	697b      	ldr	r3, [r7, #20]
 800171e:	fa01 f303 	lsl.w	r3, r1, r3
 8001722:	43d9      	mvns	r1, r3
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001728:	4313      	orrs	r3, r2
         );
}
 800172a:	4618      	mov	r0, r3
 800172c:	3724      	adds	r7, #36	; 0x24
 800172e:	46bd      	mov	sp, r7
 8001730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001734:	4770      	bx	lr
	...

08001738 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b082      	sub	sp, #8
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	3b01      	subs	r3, #1
 8001744:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001748:	d301      	bcc.n	800174e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800174a:	2301      	movs	r3, #1
 800174c:	e00f      	b.n	800176e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800174e:	4a0a      	ldr	r2, [pc, #40]	; (8001778 <SysTick_Config+0x40>)
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	3b01      	subs	r3, #1
 8001754:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001756:	210f      	movs	r1, #15
 8001758:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800175c:	f7ff ff8e 	bl	800167c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001760:	4b05      	ldr	r3, [pc, #20]	; (8001778 <SysTick_Config+0x40>)
 8001762:	2200      	movs	r2, #0
 8001764:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001766:	4b04      	ldr	r3, [pc, #16]	; (8001778 <SysTick_Config+0x40>)
 8001768:	2207      	movs	r2, #7
 800176a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800176c:	2300      	movs	r3, #0
}
 800176e:	4618      	mov	r0, r3
 8001770:	3708      	adds	r7, #8
 8001772:	46bd      	mov	sp, r7
 8001774:	bd80      	pop	{r7, pc}
 8001776:	bf00      	nop
 8001778:	e000e010 	.word	0xe000e010

0800177c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b082      	sub	sp, #8
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001784:	6878      	ldr	r0, [r7, #4]
 8001786:	f7ff ff47 	bl	8001618 <__NVIC_SetPriorityGrouping>
}
 800178a:	bf00      	nop
 800178c:	3708      	adds	r7, #8
 800178e:	46bd      	mov	sp, r7
 8001790:	bd80      	pop	{r7, pc}

08001792 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001792:	b580      	push	{r7, lr}
 8001794:	b086      	sub	sp, #24
 8001796:	af00      	add	r7, sp, #0
 8001798:	4603      	mov	r3, r0
 800179a:	60b9      	str	r1, [r7, #8]
 800179c:	607a      	str	r2, [r7, #4]
 800179e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80017a0:	2300      	movs	r3, #0
 80017a2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80017a4:	f7ff ff5c 	bl	8001660 <__NVIC_GetPriorityGrouping>
 80017a8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80017aa:	687a      	ldr	r2, [r7, #4]
 80017ac:	68b9      	ldr	r1, [r7, #8]
 80017ae:	6978      	ldr	r0, [r7, #20]
 80017b0:	f7ff ff8e 	bl	80016d0 <NVIC_EncodePriority>
 80017b4:	4602      	mov	r2, r0
 80017b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017ba:	4611      	mov	r1, r2
 80017bc:	4618      	mov	r0, r3
 80017be:	f7ff ff5d 	bl	800167c <__NVIC_SetPriority>
}
 80017c2:	bf00      	nop
 80017c4:	3718      	adds	r7, #24
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bd80      	pop	{r7, pc}

080017ca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80017ca:	b580      	push	{r7, lr}
 80017cc:	b082      	sub	sp, #8
 80017ce:	af00      	add	r7, sp, #0
 80017d0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80017d2:	6878      	ldr	r0, [r7, #4]
 80017d4:	f7ff ffb0 	bl	8001738 <SysTick_Config>
 80017d8:	4603      	mov	r3, r0
}
 80017da:	4618      	mov	r0, r3
 80017dc:	3708      	adds	r7, #8
 80017de:	46bd      	mov	sp, r7
 80017e0:	bd80      	pop	{r7, pc}
	...

080017e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017e4:	b480      	push	{r7}
 80017e6:	b089      	sub	sp, #36	; 0x24
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
 80017ec:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80017ee:	2300      	movs	r3, #0
 80017f0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80017f2:	2300      	movs	r3, #0
 80017f4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80017f6:	2300      	movs	r3, #0
 80017f8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80017fa:	2300      	movs	r3, #0
 80017fc:	61fb      	str	r3, [r7, #28]
 80017fe:	e177      	b.n	8001af0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001800:	2201      	movs	r2, #1
 8001802:	69fb      	ldr	r3, [r7, #28]
 8001804:	fa02 f303 	lsl.w	r3, r2, r3
 8001808:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800180a:	683b      	ldr	r3, [r7, #0]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	697a      	ldr	r2, [r7, #20]
 8001810:	4013      	ands	r3, r2
 8001812:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001814:	693a      	ldr	r2, [r7, #16]
 8001816:	697b      	ldr	r3, [r7, #20]
 8001818:	429a      	cmp	r2, r3
 800181a:	f040 8166 	bne.w	8001aea <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800181e:	683b      	ldr	r3, [r7, #0]
 8001820:	685b      	ldr	r3, [r3, #4]
 8001822:	f003 0303 	and.w	r3, r3, #3
 8001826:	2b01      	cmp	r3, #1
 8001828:	d005      	beq.n	8001836 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800182a:	683b      	ldr	r3, [r7, #0]
 800182c:	685b      	ldr	r3, [r3, #4]
 800182e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001832:	2b02      	cmp	r3, #2
 8001834:	d130      	bne.n	8001898 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	689b      	ldr	r3, [r3, #8]
 800183a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800183c:	69fb      	ldr	r3, [r7, #28]
 800183e:	005b      	lsls	r3, r3, #1
 8001840:	2203      	movs	r2, #3
 8001842:	fa02 f303 	lsl.w	r3, r2, r3
 8001846:	43db      	mvns	r3, r3
 8001848:	69ba      	ldr	r2, [r7, #24]
 800184a:	4013      	ands	r3, r2
 800184c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800184e:	683b      	ldr	r3, [r7, #0]
 8001850:	68da      	ldr	r2, [r3, #12]
 8001852:	69fb      	ldr	r3, [r7, #28]
 8001854:	005b      	lsls	r3, r3, #1
 8001856:	fa02 f303 	lsl.w	r3, r2, r3
 800185a:	69ba      	ldr	r2, [r7, #24]
 800185c:	4313      	orrs	r3, r2
 800185e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	69ba      	ldr	r2, [r7, #24]
 8001864:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	685b      	ldr	r3, [r3, #4]
 800186a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800186c:	2201      	movs	r2, #1
 800186e:	69fb      	ldr	r3, [r7, #28]
 8001870:	fa02 f303 	lsl.w	r3, r2, r3
 8001874:	43db      	mvns	r3, r3
 8001876:	69ba      	ldr	r2, [r7, #24]
 8001878:	4013      	ands	r3, r2
 800187a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800187c:	683b      	ldr	r3, [r7, #0]
 800187e:	685b      	ldr	r3, [r3, #4]
 8001880:	091b      	lsrs	r3, r3, #4
 8001882:	f003 0201 	and.w	r2, r3, #1
 8001886:	69fb      	ldr	r3, [r7, #28]
 8001888:	fa02 f303 	lsl.w	r3, r2, r3
 800188c:	69ba      	ldr	r2, [r7, #24]
 800188e:	4313      	orrs	r3, r2
 8001890:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	69ba      	ldr	r2, [r7, #24]
 8001896:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001898:	683b      	ldr	r3, [r7, #0]
 800189a:	685b      	ldr	r3, [r3, #4]
 800189c:	f003 0303 	and.w	r3, r3, #3
 80018a0:	2b03      	cmp	r3, #3
 80018a2:	d017      	beq.n	80018d4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	68db      	ldr	r3, [r3, #12]
 80018a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80018aa:	69fb      	ldr	r3, [r7, #28]
 80018ac:	005b      	lsls	r3, r3, #1
 80018ae:	2203      	movs	r2, #3
 80018b0:	fa02 f303 	lsl.w	r3, r2, r3
 80018b4:	43db      	mvns	r3, r3
 80018b6:	69ba      	ldr	r2, [r7, #24]
 80018b8:	4013      	ands	r3, r2
 80018ba:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80018bc:	683b      	ldr	r3, [r7, #0]
 80018be:	689a      	ldr	r2, [r3, #8]
 80018c0:	69fb      	ldr	r3, [r7, #28]
 80018c2:	005b      	lsls	r3, r3, #1
 80018c4:	fa02 f303 	lsl.w	r3, r2, r3
 80018c8:	69ba      	ldr	r2, [r7, #24]
 80018ca:	4313      	orrs	r3, r2
 80018cc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	69ba      	ldr	r2, [r7, #24]
 80018d2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80018d4:	683b      	ldr	r3, [r7, #0]
 80018d6:	685b      	ldr	r3, [r3, #4]
 80018d8:	f003 0303 	and.w	r3, r3, #3
 80018dc:	2b02      	cmp	r3, #2
 80018de:	d123      	bne.n	8001928 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80018e0:	69fb      	ldr	r3, [r7, #28]
 80018e2:	08da      	lsrs	r2, r3, #3
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	3208      	adds	r2, #8
 80018e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80018ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80018ee:	69fb      	ldr	r3, [r7, #28]
 80018f0:	f003 0307 	and.w	r3, r3, #7
 80018f4:	009b      	lsls	r3, r3, #2
 80018f6:	220f      	movs	r2, #15
 80018f8:	fa02 f303 	lsl.w	r3, r2, r3
 80018fc:	43db      	mvns	r3, r3
 80018fe:	69ba      	ldr	r2, [r7, #24]
 8001900:	4013      	ands	r3, r2
 8001902:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001904:	683b      	ldr	r3, [r7, #0]
 8001906:	691a      	ldr	r2, [r3, #16]
 8001908:	69fb      	ldr	r3, [r7, #28]
 800190a:	f003 0307 	and.w	r3, r3, #7
 800190e:	009b      	lsls	r3, r3, #2
 8001910:	fa02 f303 	lsl.w	r3, r2, r3
 8001914:	69ba      	ldr	r2, [r7, #24]
 8001916:	4313      	orrs	r3, r2
 8001918:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800191a:	69fb      	ldr	r3, [r7, #28]
 800191c:	08da      	lsrs	r2, r3, #3
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	3208      	adds	r2, #8
 8001922:	69b9      	ldr	r1, [r7, #24]
 8001924:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800192e:	69fb      	ldr	r3, [r7, #28]
 8001930:	005b      	lsls	r3, r3, #1
 8001932:	2203      	movs	r2, #3
 8001934:	fa02 f303 	lsl.w	r3, r2, r3
 8001938:	43db      	mvns	r3, r3
 800193a:	69ba      	ldr	r2, [r7, #24]
 800193c:	4013      	ands	r3, r2
 800193e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001940:	683b      	ldr	r3, [r7, #0]
 8001942:	685b      	ldr	r3, [r3, #4]
 8001944:	f003 0203 	and.w	r2, r3, #3
 8001948:	69fb      	ldr	r3, [r7, #28]
 800194a:	005b      	lsls	r3, r3, #1
 800194c:	fa02 f303 	lsl.w	r3, r2, r3
 8001950:	69ba      	ldr	r2, [r7, #24]
 8001952:	4313      	orrs	r3, r2
 8001954:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	69ba      	ldr	r2, [r7, #24]
 800195a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800195c:	683b      	ldr	r3, [r7, #0]
 800195e:	685b      	ldr	r3, [r3, #4]
 8001960:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001964:	2b00      	cmp	r3, #0
 8001966:	f000 80c0 	beq.w	8001aea <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800196a:	2300      	movs	r3, #0
 800196c:	60fb      	str	r3, [r7, #12]
 800196e:	4b66      	ldr	r3, [pc, #408]	; (8001b08 <HAL_GPIO_Init+0x324>)
 8001970:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001972:	4a65      	ldr	r2, [pc, #404]	; (8001b08 <HAL_GPIO_Init+0x324>)
 8001974:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001978:	6453      	str	r3, [r2, #68]	; 0x44
 800197a:	4b63      	ldr	r3, [pc, #396]	; (8001b08 <HAL_GPIO_Init+0x324>)
 800197c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800197e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001982:	60fb      	str	r3, [r7, #12]
 8001984:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001986:	4a61      	ldr	r2, [pc, #388]	; (8001b0c <HAL_GPIO_Init+0x328>)
 8001988:	69fb      	ldr	r3, [r7, #28]
 800198a:	089b      	lsrs	r3, r3, #2
 800198c:	3302      	adds	r3, #2
 800198e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001992:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001994:	69fb      	ldr	r3, [r7, #28]
 8001996:	f003 0303 	and.w	r3, r3, #3
 800199a:	009b      	lsls	r3, r3, #2
 800199c:	220f      	movs	r2, #15
 800199e:	fa02 f303 	lsl.w	r3, r2, r3
 80019a2:	43db      	mvns	r3, r3
 80019a4:	69ba      	ldr	r2, [r7, #24]
 80019a6:	4013      	ands	r3, r2
 80019a8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	4a58      	ldr	r2, [pc, #352]	; (8001b10 <HAL_GPIO_Init+0x32c>)
 80019ae:	4293      	cmp	r3, r2
 80019b0:	d037      	beq.n	8001a22 <HAL_GPIO_Init+0x23e>
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	4a57      	ldr	r2, [pc, #348]	; (8001b14 <HAL_GPIO_Init+0x330>)
 80019b6:	4293      	cmp	r3, r2
 80019b8:	d031      	beq.n	8001a1e <HAL_GPIO_Init+0x23a>
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	4a56      	ldr	r2, [pc, #344]	; (8001b18 <HAL_GPIO_Init+0x334>)
 80019be:	4293      	cmp	r3, r2
 80019c0:	d02b      	beq.n	8001a1a <HAL_GPIO_Init+0x236>
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	4a55      	ldr	r2, [pc, #340]	; (8001b1c <HAL_GPIO_Init+0x338>)
 80019c6:	4293      	cmp	r3, r2
 80019c8:	d025      	beq.n	8001a16 <HAL_GPIO_Init+0x232>
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	4a54      	ldr	r2, [pc, #336]	; (8001b20 <HAL_GPIO_Init+0x33c>)
 80019ce:	4293      	cmp	r3, r2
 80019d0:	d01f      	beq.n	8001a12 <HAL_GPIO_Init+0x22e>
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	4a53      	ldr	r2, [pc, #332]	; (8001b24 <HAL_GPIO_Init+0x340>)
 80019d6:	4293      	cmp	r3, r2
 80019d8:	d019      	beq.n	8001a0e <HAL_GPIO_Init+0x22a>
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	4a52      	ldr	r2, [pc, #328]	; (8001b28 <HAL_GPIO_Init+0x344>)
 80019de:	4293      	cmp	r3, r2
 80019e0:	d013      	beq.n	8001a0a <HAL_GPIO_Init+0x226>
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	4a51      	ldr	r2, [pc, #324]	; (8001b2c <HAL_GPIO_Init+0x348>)
 80019e6:	4293      	cmp	r3, r2
 80019e8:	d00d      	beq.n	8001a06 <HAL_GPIO_Init+0x222>
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	4a50      	ldr	r2, [pc, #320]	; (8001b30 <HAL_GPIO_Init+0x34c>)
 80019ee:	4293      	cmp	r3, r2
 80019f0:	d007      	beq.n	8001a02 <HAL_GPIO_Init+0x21e>
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	4a4f      	ldr	r2, [pc, #316]	; (8001b34 <HAL_GPIO_Init+0x350>)
 80019f6:	4293      	cmp	r3, r2
 80019f8:	d101      	bne.n	80019fe <HAL_GPIO_Init+0x21a>
 80019fa:	2309      	movs	r3, #9
 80019fc:	e012      	b.n	8001a24 <HAL_GPIO_Init+0x240>
 80019fe:	230a      	movs	r3, #10
 8001a00:	e010      	b.n	8001a24 <HAL_GPIO_Init+0x240>
 8001a02:	2308      	movs	r3, #8
 8001a04:	e00e      	b.n	8001a24 <HAL_GPIO_Init+0x240>
 8001a06:	2307      	movs	r3, #7
 8001a08:	e00c      	b.n	8001a24 <HAL_GPIO_Init+0x240>
 8001a0a:	2306      	movs	r3, #6
 8001a0c:	e00a      	b.n	8001a24 <HAL_GPIO_Init+0x240>
 8001a0e:	2305      	movs	r3, #5
 8001a10:	e008      	b.n	8001a24 <HAL_GPIO_Init+0x240>
 8001a12:	2304      	movs	r3, #4
 8001a14:	e006      	b.n	8001a24 <HAL_GPIO_Init+0x240>
 8001a16:	2303      	movs	r3, #3
 8001a18:	e004      	b.n	8001a24 <HAL_GPIO_Init+0x240>
 8001a1a:	2302      	movs	r3, #2
 8001a1c:	e002      	b.n	8001a24 <HAL_GPIO_Init+0x240>
 8001a1e:	2301      	movs	r3, #1
 8001a20:	e000      	b.n	8001a24 <HAL_GPIO_Init+0x240>
 8001a22:	2300      	movs	r3, #0
 8001a24:	69fa      	ldr	r2, [r7, #28]
 8001a26:	f002 0203 	and.w	r2, r2, #3
 8001a2a:	0092      	lsls	r2, r2, #2
 8001a2c:	4093      	lsls	r3, r2
 8001a2e:	69ba      	ldr	r2, [r7, #24]
 8001a30:	4313      	orrs	r3, r2
 8001a32:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001a34:	4935      	ldr	r1, [pc, #212]	; (8001b0c <HAL_GPIO_Init+0x328>)
 8001a36:	69fb      	ldr	r3, [r7, #28]
 8001a38:	089b      	lsrs	r3, r3, #2
 8001a3a:	3302      	adds	r3, #2
 8001a3c:	69ba      	ldr	r2, [r7, #24]
 8001a3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001a42:	4b3d      	ldr	r3, [pc, #244]	; (8001b38 <HAL_GPIO_Init+0x354>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a48:	693b      	ldr	r3, [r7, #16]
 8001a4a:	43db      	mvns	r3, r3
 8001a4c:	69ba      	ldr	r2, [r7, #24]
 8001a4e:	4013      	ands	r3, r2
 8001a50:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001a52:	683b      	ldr	r3, [r7, #0]
 8001a54:	685b      	ldr	r3, [r3, #4]
 8001a56:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d003      	beq.n	8001a66 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001a5e:	69ba      	ldr	r2, [r7, #24]
 8001a60:	693b      	ldr	r3, [r7, #16]
 8001a62:	4313      	orrs	r3, r2
 8001a64:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001a66:	4a34      	ldr	r2, [pc, #208]	; (8001b38 <HAL_GPIO_Init+0x354>)
 8001a68:	69bb      	ldr	r3, [r7, #24]
 8001a6a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001a6c:	4b32      	ldr	r3, [pc, #200]	; (8001b38 <HAL_GPIO_Init+0x354>)
 8001a6e:	685b      	ldr	r3, [r3, #4]
 8001a70:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a72:	693b      	ldr	r3, [r7, #16]
 8001a74:	43db      	mvns	r3, r3
 8001a76:	69ba      	ldr	r2, [r7, #24]
 8001a78:	4013      	ands	r3, r2
 8001a7a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001a7c:	683b      	ldr	r3, [r7, #0]
 8001a7e:	685b      	ldr	r3, [r3, #4]
 8001a80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d003      	beq.n	8001a90 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001a88:	69ba      	ldr	r2, [r7, #24]
 8001a8a:	693b      	ldr	r3, [r7, #16]
 8001a8c:	4313      	orrs	r3, r2
 8001a8e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001a90:	4a29      	ldr	r2, [pc, #164]	; (8001b38 <HAL_GPIO_Init+0x354>)
 8001a92:	69bb      	ldr	r3, [r7, #24]
 8001a94:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001a96:	4b28      	ldr	r3, [pc, #160]	; (8001b38 <HAL_GPIO_Init+0x354>)
 8001a98:	689b      	ldr	r3, [r3, #8]
 8001a9a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a9c:	693b      	ldr	r3, [r7, #16]
 8001a9e:	43db      	mvns	r3, r3
 8001aa0:	69ba      	ldr	r2, [r7, #24]
 8001aa2:	4013      	ands	r3, r2
 8001aa4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001aa6:	683b      	ldr	r3, [r7, #0]
 8001aa8:	685b      	ldr	r3, [r3, #4]
 8001aaa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d003      	beq.n	8001aba <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001ab2:	69ba      	ldr	r2, [r7, #24]
 8001ab4:	693b      	ldr	r3, [r7, #16]
 8001ab6:	4313      	orrs	r3, r2
 8001ab8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001aba:	4a1f      	ldr	r2, [pc, #124]	; (8001b38 <HAL_GPIO_Init+0x354>)
 8001abc:	69bb      	ldr	r3, [r7, #24]
 8001abe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001ac0:	4b1d      	ldr	r3, [pc, #116]	; (8001b38 <HAL_GPIO_Init+0x354>)
 8001ac2:	68db      	ldr	r3, [r3, #12]
 8001ac4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ac6:	693b      	ldr	r3, [r7, #16]
 8001ac8:	43db      	mvns	r3, r3
 8001aca:	69ba      	ldr	r2, [r7, #24]
 8001acc:	4013      	ands	r3, r2
 8001ace:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001ad0:	683b      	ldr	r3, [r7, #0]
 8001ad2:	685b      	ldr	r3, [r3, #4]
 8001ad4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d003      	beq.n	8001ae4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001adc:	69ba      	ldr	r2, [r7, #24]
 8001ade:	693b      	ldr	r3, [r7, #16]
 8001ae0:	4313      	orrs	r3, r2
 8001ae2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001ae4:	4a14      	ldr	r2, [pc, #80]	; (8001b38 <HAL_GPIO_Init+0x354>)
 8001ae6:	69bb      	ldr	r3, [r7, #24]
 8001ae8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001aea:	69fb      	ldr	r3, [r7, #28]
 8001aec:	3301      	adds	r3, #1
 8001aee:	61fb      	str	r3, [r7, #28]
 8001af0:	69fb      	ldr	r3, [r7, #28]
 8001af2:	2b0f      	cmp	r3, #15
 8001af4:	f67f ae84 	bls.w	8001800 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001af8:	bf00      	nop
 8001afa:	bf00      	nop
 8001afc:	3724      	adds	r7, #36	; 0x24
 8001afe:	46bd      	mov	sp, r7
 8001b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b04:	4770      	bx	lr
 8001b06:	bf00      	nop
 8001b08:	40023800 	.word	0x40023800
 8001b0c:	40013800 	.word	0x40013800
 8001b10:	40020000 	.word	0x40020000
 8001b14:	40020400 	.word	0x40020400
 8001b18:	40020800 	.word	0x40020800
 8001b1c:	40020c00 	.word	0x40020c00
 8001b20:	40021000 	.word	0x40021000
 8001b24:	40021400 	.word	0x40021400
 8001b28:	40021800 	.word	0x40021800
 8001b2c:	40021c00 	.word	0x40021c00
 8001b30:	40022000 	.word	0x40022000
 8001b34:	40022400 	.word	0x40022400
 8001b38:	40013c00 	.word	0x40013c00

08001b3c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	b083      	sub	sp, #12
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
 8001b44:	460b      	mov	r3, r1
 8001b46:	807b      	strh	r3, [r7, #2]
 8001b48:	4613      	mov	r3, r2
 8001b4a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001b4c:	787b      	ldrb	r3, [r7, #1]
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d003      	beq.n	8001b5a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001b52:	887a      	ldrh	r2, [r7, #2]
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001b58:	e003      	b.n	8001b62 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001b5a:	887b      	ldrh	r3, [r7, #2]
 8001b5c:	041a      	lsls	r2, r3, #16
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	619a      	str	r2, [r3, #24]
}
 8001b62:	bf00      	nop
 8001b64:	370c      	adds	r7, #12
 8001b66:	46bd      	mov	sp, r7
 8001b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6c:	4770      	bx	lr
	...

08001b70 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b084      	sub	sp, #16
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d101      	bne.n	8001b82 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001b7e:	2301      	movs	r3, #1
 8001b80:	e12b      	b.n	8001dda <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b88:	b2db      	uxtb	r3, r3
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d106      	bne.n	8001b9c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	2200      	movs	r2, #0
 8001b92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001b96:	6878      	ldr	r0, [r7, #4]
 8001b98:	f7ff fc32 	bl	8001400 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	2224      	movs	r2, #36	; 0x24
 8001ba0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	681a      	ldr	r2, [r3, #0]
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f022 0201 	bic.w	r2, r2, #1
 8001bb2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	681a      	ldr	r2, [r3, #0]
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001bc2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	681a      	ldr	r2, [r3, #0]
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001bd2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001bd4:	f001 fcee 	bl	80035b4 <HAL_RCC_GetPCLK1Freq>
 8001bd8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	685b      	ldr	r3, [r3, #4]
 8001bde:	4a81      	ldr	r2, [pc, #516]	; (8001de4 <HAL_I2C_Init+0x274>)
 8001be0:	4293      	cmp	r3, r2
 8001be2:	d807      	bhi.n	8001bf4 <HAL_I2C_Init+0x84>
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	4a80      	ldr	r2, [pc, #512]	; (8001de8 <HAL_I2C_Init+0x278>)
 8001be8:	4293      	cmp	r3, r2
 8001bea:	bf94      	ite	ls
 8001bec:	2301      	movls	r3, #1
 8001bee:	2300      	movhi	r3, #0
 8001bf0:	b2db      	uxtb	r3, r3
 8001bf2:	e006      	b.n	8001c02 <HAL_I2C_Init+0x92>
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	4a7d      	ldr	r2, [pc, #500]	; (8001dec <HAL_I2C_Init+0x27c>)
 8001bf8:	4293      	cmp	r3, r2
 8001bfa:	bf94      	ite	ls
 8001bfc:	2301      	movls	r3, #1
 8001bfe:	2300      	movhi	r3, #0
 8001c00:	b2db      	uxtb	r3, r3
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d001      	beq.n	8001c0a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001c06:	2301      	movs	r3, #1
 8001c08:	e0e7      	b.n	8001dda <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	4a78      	ldr	r2, [pc, #480]	; (8001df0 <HAL_I2C_Init+0x280>)
 8001c0e:	fba2 2303 	umull	r2, r3, r2, r3
 8001c12:	0c9b      	lsrs	r3, r3, #18
 8001c14:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	685b      	ldr	r3, [r3, #4]
 8001c1c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	68ba      	ldr	r2, [r7, #8]
 8001c26:	430a      	orrs	r2, r1
 8001c28:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	6a1b      	ldr	r3, [r3, #32]
 8001c30:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	685b      	ldr	r3, [r3, #4]
 8001c38:	4a6a      	ldr	r2, [pc, #424]	; (8001de4 <HAL_I2C_Init+0x274>)
 8001c3a:	4293      	cmp	r3, r2
 8001c3c:	d802      	bhi.n	8001c44 <HAL_I2C_Init+0xd4>
 8001c3e:	68bb      	ldr	r3, [r7, #8]
 8001c40:	3301      	adds	r3, #1
 8001c42:	e009      	b.n	8001c58 <HAL_I2C_Init+0xe8>
 8001c44:	68bb      	ldr	r3, [r7, #8]
 8001c46:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001c4a:	fb02 f303 	mul.w	r3, r2, r3
 8001c4e:	4a69      	ldr	r2, [pc, #420]	; (8001df4 <HAL_I2C_Init+0x284>)
 8001c50:	fba2 2303 	umull	r2, r3, r2, r3
 8001c54:	099b      	lsrs	r3, r3, #6
 8001c56:	3301      	adds	r3, #1
 8001c58:	687a      	ldr	r2, [r7, #4]
 8001c5a:	6812      	ldr	r2, [r2, #0]
 8001c5c:	430b      	orrs	r3, r1
 8001c5e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	69db      	ldr	r3, [r3, #28]
 8001c66:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001c6a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	685b      	ldr	r3, [r3, #4]
 8001c72:	495c      	ldr	r1, [pc, #368]	; (8001de4 <HAL_I2C_Init+0x274>)
 8001c74:	428b      	cmp	r3, r1
 8001c76:	d819      	bhi.n	8001cac <HAL_I2C_Init+0x13c>
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	1e59      	subs	r1, r3, #1
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	685b      	ldr	r3, [r3, #4]
 8001c80:	005b      	lsls	r3, r3, #1
 8001c82:	fbb1 f3f3 	udiv	r3, r1, r3
 8001c86:	1c59      	adds	r1, r3, #1
 8001c88:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001c8c:	400b      	ands	r3, r1
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d00a      	beq.n	8001ca8 <HAL_I2C_Init+0x138>
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	1e59      	subs	r1, r3, #1
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	685b      	ldr	r3, [r3, #4]
 8001c9a:	005b      	lsls	r3, r3, #1
 8001c9c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001ca0:	3301      	adds	r3, #1
 8001ca2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ca6:	e051      	b.n	8001d4c <HAL_I2C_Init+0x1dc>
 8001ca8:	2304      	movs	r3, #4
 8001caa:	e04f      	b.n	8001d4c <HAL_I2C_Init+0x1dc>
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	689b      	ldr	r3, [r3, #8]
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d111      	bne.n	8001cd8 <HAL_I2C_Init+0x168>
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	1e58      	subs	r0, r3, #1
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	6859      	ldr	r1, [r3, #4]
 8001cbc:	460b      	mov	r3, r1
 8001cbe:	005b      	lsls	r3, r3, #1
 8001cc0:	440b      	add	r3, r1
 8001cc2:	fbb0 f3f3 	udiv	r3, r0, r3
 8001cc6:	3301      	adds	r3, #1
 8001cc8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	bf0c      	ite	eq
 8001cd0:	2301      	moveq	r3, #1
 8001cd2:	2300      	movne	r3, #0
 8001cd4:	b2db      	uxtb	r3, r3
 8001cd6:	e012      	b.n	8001cfe <HAL_I2C_Init+0x18e>
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	1e58      	subs	r0, r3, #1
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	6859      	ldr	r1, [r3, #4]
 8001ce0:	460b      	mov	r3, r1
 8001ce2:	009b      	lsls	r3, r3, #2
 8001ce4:	440b      	add	r3, r1
 8001ce6:	0099      	lsls	r1, r3, #2
 8001ce8:	440b      	add	r3, r1
 8001cea:	fbb0 f3f3 	udiv	r3, r0, r3
 8001cee:	3301      	adds	r3, #1
 8001cf0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	bf0c      	ite	eq
 8001cf8:	2301      	moveq	r3, #1
 8001cfa:	2300      	movne	r3, #0
 8001cfc:	b2db      	uxtb	r3, r3
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d001      	beq.n	8001d06 <HAL_I2C_Init+0x196>
 8001d02:	2301      	movs	r3, #1
 8001d04:	e022      	b.n	8001d4c <HAL_I2C_Init+0x1dc>
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	689b      	ldr	r3, [r3, #8]
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d10e      	bne.n	8001d2c <HAL_I2C_Init+0x1bc>
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	1e58      	subs	r0, r3, #1
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	6859      	ldr	r1, [r3, #4]
 8001d16:	460b      	mov	r3, r1
 8001d18:	005b      	lsls	r3, r3, #1
 8001d1a:	440b      	add	r3, r1
 8001d1c:	fbb0 f3f3 	udiv	r3, r0, r3
 8001d20:	3301      	adds	r3, #1
 8001d22:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d26:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001d2a:	e00f      	b.n	8001d4c <HAL_I2C_Init+0x1dc>
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	1e58      	subs	r0, r3, #1
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	6859      	ldr	r1, [r3, #4]
 8001d34:	460b      	mov	r3, r1
 8001d36:	009b      	lsls	r3, r3, #2
 8001d38:	440b      	add	r3, r1
 8001d3a:	0099      	lsls	r1, r3, #2
 8001d3c:	440b      	add	r3, r1
 8001d3e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001d42:	3301      	adds	r3, #1
 8001d44:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d48:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001d4c:	6879      	ldr	r1, [r7, #4]
 8001d4e:	6809      	ldr	r1, [r1, #0]
 8001d50:	4313      	orrs	r3, r2
 8001d52:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	69da      	ldr	r2, [r3, #28]
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	6a1b      	ldr	r3, [r3, #32]
 8001d66:	431a      	orrs	r2, r3
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	430a      	orrs	r2, r1
 8001d6e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	689b      	ldr	r3, [r3, #8]
 8001d76:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001d7a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001d7e:	687a      	ldr	r2, [r7, #4]
 8001d80:	6911      	ldr	r1, [r2, #16]
 8001d82:	687a      	ldr	r2, [r7, #4]
 8001d84:	68d2      	ldr	r2, [r2, #12]
 8001d86:	4311      	orrs	r1, r2
 8001d88:	687a      	ldr	r2, [r7, #4]
 8001d8a:	6812      	ldr	r2, [r2, #0]
 8001d8c:	430b      	orrs	r3, r1
 8001d8e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	68db      	ldr	r3, [r3, #12]
 8001d96:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	695a      	ldr	r2, [r3, #20]
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	699b      	ldr	r3, [r3, #24]
 8001da2:	431a      	orrs	r2, r3
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	430a      	orrs	r2, r1
 8001daa:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	681a      	ldr	r2, [r3, #0]
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f042 0201 	orr.w	r2, r2, #1
 8001dba:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	2220      	movs	r2, #32
 8001dc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	2200      	movs	r2, #0
 8001dce:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001dd8:	2300      	movs	r3, #0
}
 8001dda:	4618      	mov	r0, r3
 8001ddc:	3710      	adds	r7, #16
 8001dde:	46bd      	mov	sp, r7
 8001de0:	bd80      	pop	{r7, pc}
 8001de2:	bf00      	nop
 8001de4:	000186a0 	.word	0x000186a0
 8001de8:	001e847f 	.word	0x001e847f
 8001dec:	003d08ff 	.word	0x003d08ff
 8001df0:	431bde83 	.word	0x431bde83
 8001df4:	10624dd3 	.word	0x10624dd3

08001df8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b088      	sub	sp, #32
 8001dfc:	af02      	add	r7, sp, #8
 8001dfe:	60f8      	str	r0, [r7, #12]
 8001e00:	607a      	str	r2, [r7, #4]
 8001e02:	461a      	mov	r2, r3
 8001e04:	460b      	mov	r3, r1
 8001e06:	817b      	strh	r3, [r7, #10]
 8001e08:	4613      	mov	r3, r2
 8001e0a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001e0c:	f7ff fbd4 	bl	80015b8 <HAL_GetTick>
 8001e10:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e18:	b2db      	uxtb	r3, r3
 8001e1a:	2b20      	cmp	r3, #32
 8001e1c:	f040 80e0 	bne.w	8001fe0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001e20:	697b      	ldr	r3, [r7, #20]
 8001e22:	9300      	str	r3, [sp, #0]
 8001e24:	2319      	movs	r3, #25
 8001e26:	2201      	movs	r2, #1
 8001e28:	4970      	ldr	r1, [pc, #448]	; (8001fec <HAL_I2C_Master_Transmit+0x1f4>)
 8001e2a:	68f8      	ldr	r0, [r7, #12]
 8001e2c:	f000 fc58 	bl	80026e0 <I2C_WaitOnFlagUntilTimeout>
 8001e30:	4603      	mov	r3, r0
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d001      	beq.n	8001e3a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001e36:	2302      	movs	r3, #2
 8001e38:	e0d3      	b.n	8001fe2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001e40:	2b01      	cmp	r3, #1
 8001e42:	d101      	bne.n	8001e48 <HAL_I2C_Master_Transmit+0x50>
 8001e44:	2302      	movs	r3, #2
 8001e46:	e0cc      	b.n	8001fe2 <HAL_I2C_Master_Transmit+0x1ea>
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	2201      	movs	r2, #1
 8001e4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f003 0301 	and.w	r3, r3, #1
 8001e5a:	2b01      	cmp	r3, #1
 8001e5c:	d007      	beq.n	8001e6e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	681a      	ldr	r2, [r3, #0]
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f042 0201 	orr.w	r2, r2, #1
 8001e6c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	681a      	ldr	r2, [r3, #0]
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001e7c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	2221      	movs	r2, #33	; 0x21
 8001e82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	2210      	movs	r2, #16
 8001e8a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	2200      	movs	r2, #0
 8001e92:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	687a      	ldr	r2, [r7, #4]
 8001e98:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	893a      	ldrh	r2, [r7, #8]
 8001e9e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ea4:	b29a      	uxth	r2, r3
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	4a50      	ldr	r2, [pc, #320]	; (8001ff0 <HAL_I2C_Master_Transmit+0x1f8>)
 8001eae:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001eb0:	8979      	ldrh	r1, [r7, #10]
 8001eb2:	697b      	ldr	r3, [r7, #20]
 8001eb4:	6a3a      	ldr	r2, [r7, #32]
 8001eb6:	68f8      	ldr	r0, [r7, #12]
 8001eb8:	f000 fac2 	bl	8002440 <I2C_MasterRequestWrite>
 8001ebc:	4603      	mov	r3, r0
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d001      	beq.n	8001ec6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001ec2:	2301      	movs	r3, #1
 8001ec4:	e08d      	b.n	8001fe2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	613b      	str	r3, [r7, #16]
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	695b      	ldr	r3, [r3, #20]
 8001ed0:	613b      	str	r3, [r7, #16]
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	699b      	ldr	r3, [r3, #24]
 8001ed8:	613b      	str	r3, [r7, #16]
 8001eda:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001edc:	e066      	b.n	8001fac <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001ede:	697a      	ldr	r2, [r7, #20]
 8001ee0:	6a39      	ldr	r1, [r7, #32]
 8001ee2:	68f8      	ldr	r0, [r7, #12]
 8001ee4:	f000 fcd2 	bl	800288c <I2C_WaitOnTXEFlagUntilTimeout>
 8001ee8:	4603      	mov	r3, r0
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d00d      	beq.n	8001f0a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ef2:	2b04      	cmp	r3, #4
 8001ef4:	d107      	bne.n	8001f06 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	681a      	ldr	r2, [r3, #0]
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001f04:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001f06:	2301      	movs	r3, #1
 8001f08:	e06b      	b.n	8001fe2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f0e:	781a      	ldrb	r2, [r3, #0]
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f1a:	1c5a      	adds	r2, r3, #1
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f24:	b29b      	uxth	r3, r3
 8001f26:	3b01      	subs	r3, #1
 8001f28:	b29a      	uxth	r2, r3
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f32:	3b01      	subs	r3, #1
 8001f34:	b29a      	uxth	r2, r3
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	695b      	ldr	r3, [r3, #20]
 8001f40:	f003 0304 	and.w	r3, r3, #4
 8001f44:	2b04      	cmp	r3, #4
 8001f46:	d11b      	bne.n	8001f80 <HAL_I2C_Master_Transmit+0x188>
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d017      	beq.n	8001f80 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f54:	781a      	ldrb	r2, [r3, #0]
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f60:	1c5a      	adds	r2, r3, #1
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f6a:	b29b      	uxth	r3, r3
 8001f6c:	3b01      	subs	r3, #1
 8001f6e:	b29a      	uxth	r2, r3
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f78:	3b01      	subs	r3, #1
 8001f7a:	b29a      	uxth	r2, r3
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001f80:	697a      	ldr	r2, [r7, #20]
 8001f82:	6a39      	ldr	r1, [r7, #32]
 8001f84:	68f8      	ldr	r0, [r7, #12]
 8001f86:	f000 fcc2 	bl	800290e <I2C_WaitOnBTFFlagUntilTimeout>
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d00d      	beq.n	8001fac <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f94:	2b04      	cmp	r3, #4
 8001f96:	d107      	bne.n	8001fa8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	681a      	ldr	r2, [r3, #0]
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001fa6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001fa8:	2301      	movs	r3, #1
 8001faa:	e01a      	b.n	8001fe2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d194      	bne.n	8001ede <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	681a      	ldr	r2, [r3, #0]
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001fc2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	2220      	movs	r2, #32
 8001fc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	2200      	movs	r2, #0
 8001fd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001fdc:	2300      	movs	r3, #0
 8001fde:	e000      	b.n	8001fe2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001fe0:	2302      	movs	r3, #2
  }
}
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	3718      	adds	r7, #24
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	bd80      	pop	{r7, pc}
 8001fea:	bf00      	nop
 8001fec:	00100002 	.word	0x00100002
 8001ff0:	ffff0000 	.word	0xffff0000

08001ff4 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b08c      	sub	sp, #48	; 0x30
 8001ff8:	af02      	add	r7, sp, #8
 8001ffa:	60f8      	str	r0, [r7, #12]
 8001ffc:	607a      	str	r2, [r7, #4]
 8001ffe:	461a      	mov	r2, r3
 8002000:	460b      	mov	r3, r1
 8002002:	817b      	strh	r3, [r7, #10]
 8002004:	4613      	mov	r3, r2
 8002006:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002008:	f7ff fad6 	bl	80015b8 <HAL_GetTick>
 800200c:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002014:	b2db      	uxtb	r3, r3
 8002016:	2b20      	cmp	r3, #32
 8002018:	f040 820b 	bne.w	8002432 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800201c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800201e:	9300      	str	r3, [sp, #0]
 8002020:	2319      	movs	r3, #25
 8002022:	2201      	movs	r2, #1
 8002024:	497c      	ldr	r1, [pc, #496]	; (8002218 <HAL_I2C_Master_Receive+0x224>)
 8002026:	68f8      	ldr	r0, [r7, #12]
 8002028:	f000 fb5a 	bl	80026e0 <I2C_WaitOnFlagUntilTimeout>
 800202c:	4603      	mov	r3, r0
 800202e:	2b00      	cmp	r3, #0
 8002030:	d001      	beq.n	8002036 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8002032:	2302      	movs	r3, #2
 8002034:	e1fe      	b.n	8002434 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800203c:	2b01      	cmp	r3, #1
 800203e:	d101      	bne.n	8002044 <HAL_I2C_Master_Receive+0x50>
 8002040:	2302      	movs	r3, #2
 8002042:	e1f7      	b.n	8002434 <HAL_I2C_Master_Receive+0x440>
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	2201      	movs	r2, #1
 8002048:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f003 0301 	and.w	r3, r3, #1
 8002056:	2b01      	cmp	r3, #1
 8002058:	d007      	beq.n	800206a <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	681a      	ldr	r2, [r3, #0]
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f042 0201 	orr.w	r2, r2, #1
 8002068:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	681a      	ldr	r2, [r3, #0]
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002078:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	2222      	movs	r2, #34	; 0x22
 800207e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	2210      	movs	r2, #16
 8002086:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	2200      	movs	r2, #0
 800208e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	687a      	ldr	r2, [r7, #4]
 8002094:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	893a      	ldrh	r2, [r7, #8]
 800209a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020a0:	b29a      	uxth	r2, r3
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	4a5c      	ldr	r2, [pc, #368]	; (800221c <HAL_I2C_Master_Receive+0x228>)
 80020aa:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80020ac:	8979      	ldrh	r1, [r7, #10]
 80020ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80020b2:	68f8      	ldr	r0, [r7, #12]
 80020b4:	f000 fa46 	bl	8002544 <I2C_MasterRequestRead>
 80020b8:	4603      	mov	r3, r0
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d001      	beq.n	80020c2 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 80020be:	2301      	movs	r3, #1
 80020c0:	e1b8      	b.n	8002434 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d113      	bne.n	80020f2 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80020ca:	2300      	movs	r3, #0
 80020cc:	623b      	str	r3, [r7, #32]
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	695b      	ldr	r3, [r3, #20]
 80020d4:	623b      	str	r3, [r7, #32]
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	699b      	ldr	r3, [r3, #24]
 80020dc:	623b      	str	r3, [r7, #32]
 80020de:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	681a      	ldr	r2, [r3, #0]
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80020ee:	601a      	str	r2, [r3, #0]
 80020f0:	e18c      	b.n	800240c <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020f6:	2b01      	cmp	r3, #1
 80020f8:	d11b      	bne.n	8002132 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	681a      	ldr	r2, [r3, #0]
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002108:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800210a:	2300      	movs	r3, #0
 800210c:	61fb      	str	r3, [r7, #28]
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	695b      	ldr	r3, [r3, #20]
 8002114:	61fb      	str	r3, [r7, #28]
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	699b      	ldr	r3, [r3, #24]
 800211c:	61fb      	str	r3, [r7, #28]
 800211e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	681a      	ldr	r2, [r3, #0]
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800212e:	601a      	str	r2, [r3, #0]
 8002130:	e16c      	b.n	800240c <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002136:	2b02      	cmp	r3, #2
 8002138:	d11b      	bne.n	8002172 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	681a      	ldr	r2, [r3, #0]
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002148:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	681a      	ldr	r2, [r3, #0]
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002158:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800215a:	2300      	movs	r3, #0
 800215c:	61bb      	str	r3, [r7, #24]
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	695b      	ldr	r3, [r3, #20]
 8002164:	61bb      	str	r3, [r7, #24]
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	699b      	ldr	r3, [r3, #24]
 800216c:	61bb      	str	r3, [r7, #24]
 800216e:	69bb      	ldr	r3, [r7, #24]
 8002170:	e14c      	b.n	800240c <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	681a      	ldr	r2, [r3, #0]
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002180:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002182:	2300      	movs	r3, #0
 8002184:	617b      	str	r3, [r7, #20]
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	695b      	ldr	r3, [r3, #20]
 800218c:	617b      	str	r3, [r7, #20]
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	699b      	ldr	r3, [r3, #24]
 8002194:	617b      	str	r3, [r7, #20]
 8002196:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002198:	e138      	b.n	800240c <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800219e:	2b03      	cmp	r3, #3
 80021a0:	f200 80f1 	bhi.w	8002386 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021a8:	2b01      	cmp	r3, #1
 80021aa:	d123      	bne.n	80021f4 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80021ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80021ae:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80021b0:	68f8      	ldr	r0, [r7, #12]
 80021b2:	f000 fbed 	bl	8002990 <I2C_WaitOnRXNEFlagUntilTimeout>
 80021b6:	4603      	mov	r3, r0
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d001      	beq.n	80021c0 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 80021bc:	2301      	movs	r3, #1
 80021be:	e139      	b.n	8002434 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	691a      	ldr	r2, [r3, #16]
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021ca:	b2d2      	uxtb	r2, r2
 80021cc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021d2:	1c5a      	adds	r2, r3, #1
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021dc:	3b01      	subs	r3, #1
 80021de:	b29a      	uxth	r2, r3
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021e8:	b29b      	uxth	r3, r3
 80021ea:	3b01      	subs	r3, #1
 80021ec:	b29a      	uxth	r2, r3
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	855a      	strh	r2, [r3, #42]	; 0x2a
 80021f2:	e10b      	b.n	800240c <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021f8:	2b02      	cmp	r3, #2
 80021fa:	d14e      	bne.n	800229a <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80021fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021fe:	9300      	str	r3, [sp, #0]
 8002200:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002202:	2200      	movs	r2, #0
 8002204:	4906      	ldr	r1, [pc, #24]	; (8002220 <HAL_I2C_Master_Receive+0x22c>)
 8002206:	68f8      	ldr	r0, [r7, #12]
 8002208:	f000 fa6a 	bl	80026e0 <I2C_WaitOnFlagUntilTimeout>
 800220c:	4603      	mov	r3, r0
 800220e:	2b00      	cmp	r3, #0
 8002210:	d008      	beq.n	8002224 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8002212:	2301      	movs	r3, #1
 8002214:	e10e      	b.n	8002434 <HAL_I2C_Master_Receive+0x440>
 8002216:	bf00      	nop
 8002218:	00100002 	.word	0x00100002
 800221c:	ffff0000 	.word	0xffff0000
 8002220:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	681a      	ldr	r2, [r3, #0]
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002232:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	691a      	ldr	r2, [r3, #16]
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800223e:	b2d2      	uxtb	r2, r2
 8002240:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002246:	1c5a      	adds	r2, r3, #1
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002250:	3b01      	subs	r3, #1
 8002252:	b29a      	uxth	r2, r3
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800225c:	b29b      	uxth	r3, r3
 800225e:	3b01      	subs	r3, #1
 8002260:	b29a      	uxth	r2, r3
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	691a      	ldr	r2, [r3, #16]
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002270:	b2d2      	uxtb	r2, r2
 8002272:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002278:	1c5a      	adds	r2, r3, #1
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002282:	3b01      	subs	r3, #1
 8002284:	b29a      	uxth	r2, r3
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800228e:	b29b      	uxth	r3, r3
 8002290:	3b01      	subs	r3, #1
 8002292:	b29a      	uxth	r2, r3
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002298:	e0b8      	b.n	800240c <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800229a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800229c:	9300      	str	r3, [sp, #0]
 800229e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022a0:	2200      	movs	r2, #0
 80022a2:	4966      	ldr	r1, [pc, #408]	; (800243c <HAL_I2C_Master_Receive+0x448>)
 80022a4:	68f8      	ldr	r0, [r7, #12]
 80022a6:	f000 fa1b 	bl	80026e0 <I2C_WaitOnFlagUntilTimeout>
 80022aa:	4603      	mov	r3, r0
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d001      	beq.n	80022b4 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 80022b0:	2301      	movs	r3, #1
 80022b2:	e0bf      	b.n	8002434 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	681a      	ldr	r2, [r3, #0]
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80022c2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	691a      	ldr	r2, [r3, #16]
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022ce:	b2d2      	uxtb	r2, r2
 80022d0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022d6:	1c5a      	adds	r2, r3, #1
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022e0:	3b01      	subs	r3, #1
 80022e2:	b29a      	uxth	r2, r3
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022ec:	b29b      	uxth	r3, r3
 80022ee:	3b01      	subs	r3, #1
 80022f0:	b29a      	uxth	r2, r3
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80022f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022f8:	9300      	str	r3, [sp, #0]
 80022fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022fc:	2200      	movs	r2, #0
 80022fe:	494f      	ldr	r1, [pc, #316]	; (800243c <HAL_I2C_Master_Receive+0x448>)
 8002300:	68f8      	ldr	r0, [r7, #12]
 8002302:	f000 f9ed 	bl	80026e0 <I2C_WaitOnFlagUntilTimeout>
 8002306:	4603      	mov	r3, r0
 8002308:	2b00      	cmp	r3, #0
 800230a:	d001      	beq.n	8002310 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 800230c:	2301      	movs	r3, #1
 800230e:	e091      	b.n	8002434 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	681a      	ldr	r2, [r3, #0]
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800231e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	691a      	ldr	r2, [r3, #16]
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800232a:	b2d2      	uxtb	r2, r2
 800232c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002332:	1c5a      	adds	r2, r3, #1
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800233c:	3b01      	subs	r3, #1
 800233e:	b29a      	uxth	r2, r3
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002348:	b29b      	uxth	r3, r3
 800234a:	3b01      	subs	r3, #1
 800234c:	b29a      	uxth	r2, r3
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	691a      	ldr	r2, [r3, #16]
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800235c:	b2d2      	uxtb	r2, r2
 800235e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002364:	1c5a      	adds	r2, r3, #1
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800236e:	3b01      	subs	r3, #1
 8002370:	b29a      	uxth	r2, r3
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800237a:	b29b      	uxth	r3, r3
 800237c:	3b01      	subs	r3, #1
 800237e:	b29a      	uxth	r2, r3
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002384:	e042      	b.n	800240c <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002386:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002388:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800238a:	68f8      	ldr	r0, [r7, #12]
 800238c:	f000 fb00 	bl	8002990 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002390:	4603      	mov	r3, r0
 8002392:	2b00      	cmp	r3, #0
 8002394:	d001      	beq.n	800239a <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8002396:	2301      	movs	r3, #1
 8002398:	e04c      	b.n	8002434 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	691a      	ldr	r2, [r3, #16]
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023a4:	b2d2      	uxtb	r2, r2
 80023a6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023ac:	1c5a      	adds	r2, r3, #1
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023b6:	3b01      	subs	r3, #1
 80023b8:	b29a      	uxth	r2, r3
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023c2:	b29b      	uxth	r3, r3
 80023c4:	3b01      	subs	r3, #1
 80023c6:	b29a      	uxth	r2, r3
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	695b      	ldr	r3, [r3, #20]
 80023d2:	f003 0304 	and.w	r3, r3, #4
 80023d6:	2b04      	cmp	r3, #4
 80023d8:	d118      	bne.n	800240c <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	691a      	ldr	r2, [r3, #16]
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023e4:	b2d2      	uxtb	r2, r2
 80023e6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023ec:	1c5a      	adds	r2, r3, #1
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023f6:	3b01      	subs	r3, #1
 80023f8:	b29a      	uxth	r2, r3
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002402:	b29b      	uxth	r3, r3
 8002404:	3b01      	subs	r3, #1
 8002406:	b29a      	uxth	r2, r3
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002410:	2b00      	cmp	r3, #0
 8002412:	f47f aec2 	bne.w	800219a <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	2220      	movs	r2, #32
 800241a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	2200      	movs	r2, #0
 8002422:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	2200      	movs	r2, #0
 800242a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800242e:	2300      	movs	r3, #0
 8002430:	e000      	b.n	8002434 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8002432:	2302      	movs	r3, #2
  }
}
 8002434:	4618      	mov	r0, r3
 8002436:	3728      	adds	r7, #40	; 0x28
 8002438:	46bd      	mov	sp, r7
 800243a:	bd80      	pop	{r7, pc}
 800243c:	00010004 	.word	0x00010004

08002440 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b088      	sub	sp, #32
 8002444:	af02      	add	r7, sp, #8
 8002446:	60f8      	str	r0, [r7, #12]
 8002448:	607a      	str	r2, [r7, #4]
 800244a:	603b      	str	r3, [r7, #0]
 800244c:	460b      	mov	r3, r1
 800244e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002454:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002456:	697b      	ldr	r3, [r7, #20]
 8002458:	2b08      	cmp	r3, #8
 800245a:	d006      	beq.n	800246a <I2C_MasterRequestWrite+0x2a>
 800245c:	697b      	ldr	r3, [r7, #20]
 800245e:	2b01      	cmp	r3, #1
 8002460:	d003      	beq.n	800246a <I2C_MasterRequestWrite+0x2a>
 8002462:	697b      	ldr	r3, [r7, #20]
 8002464:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002468:	d108      	bne.n	800247c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	681a      	ldr	r2, [r3, #0]
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002478:	601a      	str	r2, [r3, #0]
 800247a:	e00b      	b.n	8002494 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002480:	2b12      	cmp	r3, #18
 8002482:	d107      	bne.n	8002494 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	681a      	ldr	r2, [r3, #0]
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002492:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002494:	683b      	ldr	r3, [r7, #0]
 8002496:	9300      	str	r3, [sp, #0]
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	2200      	movs	r2, #0
 800249c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80024a0:	68f8      	ldr	r0, [r7, #12]
 80024a2:	f000 f91d 	bl	80026e0 <I2C_WaitOnFlagUntilTimeout>
 80024a6:	4603      	mov	r3, r0
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d00d      	beq.n	80024c8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80024ba:	d103      	bne.n	80024c4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	f44f 7200 	mov.w	r2, #512	; 0x200
 80024c2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80024c4:	2303      	movs	r3, #3
 80024c6:	e035      	b.n	8002534 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	691b      	ldr	r3, [r3, #16]
 80024cc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80024d0:	d108      	bne.n	80024e4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80024d2:	897b      	ldrh	r3, [r7, #10]
 80024d4:	b2db      	uxtb	r3, r3
 80024d6:	461a      	mov	r2, r3
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80024e0:	611a      	str	r2, [r3, #16]
 80024e2:	e01b      	b.n	800251c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80024e4:	897b      	ldrh	r3, [r7, #10]
 80024e6:	11db      	asrs	r3, r3, #7
 80024e8:	b2db      	uxtb	r3, r3
 80024ea:	f003 0306 	and.w	r3, r3, #6
 80024ee:	b2db      	uxtb	r3, r3
 80024f0:	f063 030f 	orn	r3, r3, #15
 80024f4:	b2da      	uxtb	r2, r3
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	687a      	ldr	r2, [r7, #4]
 8002500:	490e      	ldr	r1, [pc, #56]	; (800253c <I2C_MasterRequestWrite+0xfc>)
 8002502:	68f8      	ldr	r0, [r7, #12]
 8002504:	f000 f943 	bl	800278e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002508:	4603      	mov	r3, r0
 800250a:	2b00      	cmp	r3, #0
 800250c:	d001      	beq.n	8002512 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800250e:	2301      	movs	r3, #1
 8002510:	e010      	b.n	8002534 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002512:	897b      	ldrh	r3, [r7, #10]
 8002514:	b2da      	uxtb	r2, r3
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	687a      	ldr	r2, [r7, #4]
 8002520:	4907      	ldr	r1, [pc, #28]	; (8002540 <I2C_MasterRequestWrite+0x100>)
 8002522:	68f8      	ldr	r0, [r7, #12]
 8002524:	f000 f933 	bl	800278e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002528:	4603      	mov	r3, r0
 800252a:	2b00      	cmp	r3, #0
 800252c:	d001      	beq.n	8002532 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800252e:	2301      	movs	r3, #1
 8002530:	e000      	b.n	8002534 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002532:	2300      	movs	r3, #0
}
 8002534:	4618      	mov	r0, r3
 8002536:	3718      	adds	r7, #24
 8002538:	46bd      	mov	sp, r7
 800253a:	bd80      	pop	{r7, pc}
 800253c:	00010008 	.word	0x00010008
 8002540:	00010002 	.word	0x00010002

08002544 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	b088      	sub	sp, #32
 8002548:	af02      	add	r7, sp, #8
 800254a:	60f8      	str	r0, [r7, #12]
 800254c:	607a      	str	r2, [r7, #4]
 800254e:	603b      	str	r3, [r7, #0]
 8002550:	460b      	mov	r3, r1
 8002552:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002558:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	681a      	ldr	r2, [r3, #0]
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002568:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800256a:	697b      	ldr	r3, [r7, #20]
 800256c:	2b08      	cmp	r3, #8
 800256e:	d006      	beq.n	800257e <I2C_MasterRequestRead+0x3a>
 8002570:	697b      	ldr	r3, [r7, #20]
 8002572:	2b01      	cmp	r3, #1
 8002574:	d003      	beq.n	800257e <I2C_MasterRequestRead+0x3a>
 8002576:	697b      	ldr	r3, [r7, #20]
 8002578:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800257c:	d108      	bne.n	8002590 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	681a      	ldr	r2, [r3, #0]
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800258c:	601a      	str	r2, [r3, #0]
 800258e:	e00b      	b.n	80025a8 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002594:	2b11      	cmp	r3, #17
 8002596:	d107      	bne.n	80025a8 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	681a      	ldr	r2, [r3, #0]
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80025a6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80025a8:	683b      	ldr	r3, [r7, #0]
 80025aa:	9300      	str	r3, [sp, #0]
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	2200      	movs	r2, #0
 80025b0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80025b4:	68f8      	ldr	r0, [r7, #12]
 80025b6:	f000 f893 	bl	80026e0 <I2C_WaitOnFlagUntilTimeout>
 80025ba:	4603      	mov	r3, r0
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d00d      	beq.n	80025dc <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80025ce:	d103      	bne.n	80025d8 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80025d6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80025d8:	2303      	movs	r3, #3
 80025da:	e079      	b.n	80026d0 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	691b      	ldr	r3, [r3, #16]
 80025e0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80025e4:	d108      	bne.n	80025f8 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80025e6:	897b      	ldrh	r3, [r7, #10]
 80025e8:	b2db      	uxtb	r3, r3
 80025ea:	f043 0301 	orr.w	r3, r3, #1
 80025ee:	b2da      	uxtb	r2, r3
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	611a      	str	r2, [r3, #16]
 80025f6:	e05f      	b.n	80026b8 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80025f8:	897b      	ldrh	r3, [r7, #10]
 80025fa:	11db      	asrs	r3, r3, #7
 80025fc:	b2db      	uxtb	r3, r3
 80025fe:	f003 0306 	and.w	r3, r3, #6
 8002602:	b2db      	uxtb	r3, r3
 8002604:	f063 030f 	orn	r3, r3, #15
 8002608:	b2da      	uxtb	r2, r3
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	687a      	ldr	r2, [r7, #4]
 8002614:	4930      	ldr	r1, [pc, #192]	; (80026d8 <I2C_MasterRequestRead+0x194>)
 8002616:	68f8      	ldr	r0, [r7, #12]
 8002618:	f000 f8b9 	bl	800278e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800261c:	4603      	mov	r3, r0
 800261e:	2b00      	cmp	r3, #0
 8002620:	d001      	beq.n	8002626 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8002622:	2301      	movs	r3, #1
 8002624:	e054      	b.n	80026d0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002626:	897b      	ldrh	r3, [r7, #10]
 8002628:	b2da      	uxtb	r2, r3
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002630:	683b      	ldr	r3, [r7, #0]
 8002632:	687a      	ldr	r2, [r7, #4]
 8002634:	4929      	ldr	r1, [pc, #164]	; (80026dc <I2C_MasterRequestRead+0x198>)
 8002636:	68f8      	ldr	r0, [r7, #12]
 8002638:	f000 f8a9 	bl	800278e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800263c:	4603      	mov	r3, r0
 800263e:	2b00      	cmp	r3, #0
 8002640:	d001      	beq.n	8002646 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8002642:	2301      	movs	r3, #1
 8002644:	e044      	b.n	80026d0 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002646:	2300      	movs	r3, #0
 8002648:	613b      	str	r3, [r7, #16]
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	695b      	ldr	r3, [r3, #20]
 8002650:	613b      	str	r3, [r7, #16]
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	699b      	ldr	r3, [r3, #24]
 8002658:	613b      	str	r3, [r7, #16]
 800265a:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	681a      	ldr	r2, [r3, #0]
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800266a:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800266c:	683b      	ldr	r3, [r7, #0]
 800266e:	9300      	str	r3, [sp, #0]
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	2200      	movs	r2, #0
 8002674:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002678:	68f8      	ldr	r0, [r7, #12]
 800267a:	f000 f831 	bl	80026e0 <I2C_WaitOnFlagUntilTimeout>
 800267e:	4603      	mov	r3, r0
 8002680:	2b00      	cmp	r3, #0
 8002682:	d00d      	beq.n	80026a0 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800268e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002692:	d103      	bne.n	800269c <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	f44f 7200 	mov.w	r2, #512	; 0x200
 800269a:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 800269c:	2303      	movs	r3, #3
 800269e:	e017      	b.n	80026d0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80026a0:	897b      	ldrh	r3, [r7, #10]
 80026a2:	11db      	asrs	r3, r3, #7
 80026a4:	b2db      	uxtb	r3, r3
 80026a6:	f003 0306 	and.w	r3, r3, #6
 80026aa:	b2db      	uxtb	r3, r3
 80026ac:	f063 030e 	orn	r3, r3, #14
 80026b0:	b2da      	uxtb	r2, r3
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	687a      	ldr	r2, [r7, #4]
 80026bc:	4907      	ldr	r1, [pc, #28]	; (80026dc <I2C_MasterRequestRead+0x198>)
 80026be:	68f8      	ldr	r0, [r7, #12]
 80026c0:	f000 f865 	bl	800278e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80026c4:	4603      	mov	r3, r0
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d001      	beq.n	80026ce <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80026ca:	2301      	movs	r3, #1
 80026cc:	e000      	b.n	80026d0 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80026ce:	2300      	movs	r3, #0
}
 80026d0:	4618      	mov	r0, r3
 80026d2:	3718      	adds	r7, #24
 80026d4:	46bd      	mov	sp, r7
 80026d6:	bd80      	pop	{r7, pc}
 80026d8:	00010008 	.word	0x00010008
 80026dc:	00010002 	.word	0x00010002

080026e0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b084      	sub	sp, #16
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	60f8      	str	r0, [r7, #12]
 80026e8:	60b9      	str	r1, [r7, #8]
 80026ea:	603b      	str	r3, [r7, #0]
 80026ec:	4613      	mov	r3, r2
 80026ee:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80026f0:	e025      	b.n	800273e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80026f2:	683b      	ldr	r3, [r7, #0]
 80026f4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80026f8:	d021      	beq.n	800273e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80026fa:	f7fe ff5d 	bl	80015b8 <HAL_GetTick>
 80026fe:	4602      	mov	r2, r0
 8002700:	69bb      	ldr	r3, [r7, #24]
 8002702:	1ad3      	subs	r3, r2, r3
 8002704:	683a      	ldr	r2, [r7, #0]
 8002706:	429a      	cmp	r2, r3
 8002708:	d302      	bcc.n	8002710 <I2C_WaitOnFlagUntilTimeout+0x30>
 800270a:	683b      	ldr	r3, [r7, #0]
 800270c:	2b00      	cmp	r3, #0
 800270e:	d116      	bne.n	800273e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	2200      	movs	r2, #0
 8002714:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	2220      	movs	r2, #32
 800271a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	2200      	movs	r2, #0
 8002722:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800272a:	f043 0220 	orr.w	r2, r3, #32
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	2200      	movs	r2, #0
 8002736:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800273a:	2301      	movs	r3, #1
 800273c:	e023      	b.n	8002786 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800273e:	68bb      	ldr	r3, [r7, #8]
 8002740:	0c1b      	lsrs	r3, r3, #16
 8002742:	b2db      	uxtb	r3, r3
 8002744:	2b01      	cmp	r3, #1
 8002746:	d10d      	bne.n	8002764 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	695b      	ldr	r3, [r3, #20]
 800274e:	43da      	mvns	r2, r3
 8002750:	68bb      	ldr	r3, [r7, #8]
 8002752:	4013      	ands	r3, r2
 8002754:	b29b      	uxth	r3, r3
 8002756:	2b00      	cmp	r3, #0
 8002758:	bf0c      	ite	eq
 800275a:	2301      	moveq	r3, #1
 800275c:	2300      	movne	r3, #0
 800275e:	b2db      	uxtb	r3, r3
 8002760:	461a      	mov	r2, r3
 8002762:	e00c      	b.n	800277e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	699b      	ldr	r3, [r3, #24]
 800276a:	43da      	mvns	r2, r3
 800276c:	68bb      	ldr	r3, [r7, #8]
 800276e:	4013      	ands	r3, r2
 8002770:	b29b      	uxth	r3, r3
 8002772:	2b00      	cmp	r3, #0
 8002774:	bf0c      	ite	eq
 8002776:	2301      	moveq	r3, #1
 8002778:	2300      	movne	r3, #0
 800277a:	b2db      	uxtb	r3, r3
 800277c:	461a      	mov	r2, r3
 800277e:	79fb      	ldrb	r3, [r7, #7]
 8002780:	429a      	cmp	r2, r3
 8002782:	d0b6      	beq.n	80026f2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002784:	2300      	movs	r3, #0
}
 8002786:	4618      	mov	r0, r3
 8002788:	3710      	adds	r7, #16
 800278a:	46bd      	mov	sp, r7
 800278c:	bd80      	pop	{r7, pc}

0800278e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800278e:	b580      	push	{r7, lr}
 8002790:	b084      	sub	sp, #16
 8002792:	af00      	add	r7, sp, #0
 8002794:	60f8      	str	r0, [r7, #12]
 8002796:	60b9      	str	r1, [r7, #8]
 8002798:	607a      	str	r2, [r7, #4]
 800279a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800279c:	e051      	b.n	8002842 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	695b      	ldr	r3, [r3, #20]
 80027a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80027ac:	d123      	bne.n	80027f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	681a      	ldr	r2, [r3, #0]
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80027bc:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80027c6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	2200      	movs	r2, #0
 80027cc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	2220      	movs	r2, #32
 80027d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	2200      	movs	r2, #0
 80027da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027e2:	f043 0204 	orr.w	r2, r3, #4
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	2200      	movs	r2, #0
 80027ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80027f2:	2301      	movs	r3, #1
 80027f4:	e046      	b.n	8002884 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80027fc:	d021      	beq.n	8002842 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80027fe:	f7fe fedb 	bl	80015b8 <HAL_GetTick>
 8002802:	4602      	mov	r2, r0
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	1ad3      	subs	r3, r2, r3
 8002808:	687a      	ldr	r2, [r7, #4]
 800280a:	429a      	cmp	r2, r3
 800280c:	d302      	bcc.n	8002814 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	2b00      	cmp	r3, #0
 8002812:	d116      	bne.n	8002842 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	2200      	movs	r2, #0
 8002818:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	2220      	movs	r2, #32
 800281e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	2200      	movs	r2, #0
 8002826:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800282e:	f043 0220 	orr.w	r2, r3, #32
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	2200      	movs	r2, #0
 800283a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800283e:	2301      	movs	r3, #1
 8002840:	e020      	b.n	8002884 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002842:	68bb      	ldr	r3, [r7, #8]
 8002844:	0c1b      	lsrs	r3, r3, #16
 8002846:	b2db      	uxtb	r3, r3
 8002848:	2b01      	cmp	r3, #1
 800284a:	d10c      	bne.n	8002866 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	695b      	ldr	r3, [r3, #20]
 8002852:	43da      	mvns	r2, r3
 8002854:	68bb      	ldr	r3, [r7, #8]
 8002856:	4013      	ands	r3, r2
 8002858:	b29b      	uxth	r3, r3
 800285a:	2b00      	cmp	r3, #0
 800285c:	bf14      	ite	ne
 800285e:	2301      	movne	r3, #1
 8002860:	2300      	moveq	r3, #0
 8002862:	b2db      	uxtb	r3, r3
 8002864:	e00b      	b.n	800287e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	699b      	ldr	r3, [r3, #24]
 800286c:	43da      	mvns	r2, r3
 800286e:	68bb      	ldr	r3, [r7, #8]
 8002870:	4013      	ands	r3, r2
 8002872:	b29b      	uxth	r3, r3
 8002874:	2b00      	cmp	r3, #0
 8002876:	bf14      	ite	ne
 8002878:	2301      	movne	r3, #1
 800287a:	2300      	moveq	r3, #0
 800287c:	b2db      	uxtb	r3, r3
 800287e:	2b00      	cmp	r3, #0
 8002880:	d18d      	bne.n	800279e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002882:	2300      	movs	r3, #0
}
 8002884:	4618      	mov	r0, r3
 8002886:	3710      	adds	r7, #16
 8002888:	46bd      	mov	sp, r7
 800288a:	bd80      	pop	{r7, pc}

0800288c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	b084      	sub	sp, #16
 8002890:	af00      	add	r7, sp, #0
 8002892:	60f8      	str	r0, [r7, #12]
 8002894:	60b9      	str	r1, [r7, #8]
 8002896:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002898:	e02d      	b.n	80028f6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800289a:	68f8      	ldr	r0, [r7, #12]
 800289c:	f000 f8ce 	bl	8002a3c <I2C_IsAcknowledgeFailed>
 80028a0:	4603      	mov	r3, r0
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d001      	beq.n	80028aa <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80028a6:	2301      	movs	r3, #1
 80028a8:	e02d      	b.n	8002906 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80028aa:	68bb      	ldr	r3, [r7, #8]
 80028ac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80028b0:	d021      	beq.n	80028f6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80028b2:	f7fe fe81 	bl	80015b8 <HAL_GetTick>
 80028b6:	4602      	mov	r2, r0
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	1ad3      	subs	r3, r2, r3
 80028bc:	68ba      	ldr	r2, [r7, #8]
 80028be:	429a      	cmp	r2, r3
 80028c0:	d302      	bcc.n	80028c8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80028c2:	68bb      	ldr	r3, [r7, #8]
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d116      	bne.n	80028f6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	2200      	movs	r2, #0
 80028cc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	2220      	movs	r2, #32
 80028d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	2200      	movs	r2, #0
 80028da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028e2:	f043 0220 	orr.w	r2, r3, #32
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	2200      	movs	r2, #0
 80028ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80028f2:	2301      	movs	r3, #1
 80028f4:	e007      	b.n	8002906 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	695b      	ldr	r3, [r3, #20]
 80028fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002900:	2b80      	cmp	r3, #128	; 0x80
 8002902:	d1ca      	bne.n	800289a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002904:	2300      	movs	r3, #0
}
 8002906:	4618      	mov	r0, r3
 8002908:	3710      	adds	r7, #16
 800290a:	46bd      	mov	sp, r7
 800290c:	bd80      	pop	{r7, pc}

0800290e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800290e:	b580      	push	{r7, lr}
 8002910:	b084      	sub	sp, #16
 8002912:	af00      	add	r7, sp, #0
 8002914:	60f8      	str	r0, [r7, #12]
 8002916:	60b9      	str	r1, [r7, #8]
 8002918:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800291a:	e02d      	b.n	8002978 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800291c:	68f8      	ldr	r0, [r7, #12]
 800291e:	f000 f88d 	bl	8002a3c <I2C_IsAcknowledgeFailed>
 8002922:	4603      	mov	r3, r0
 8002924:	2b00      	cmp	r3, #0
 8002926:	d001      	beq.n	800292c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002928:	2301      	movs	r3, #1
 800292a:	e02d      	b.n	8002988 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800292c:	68bb      	ldr	r3, [r7, #8]
 800292e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002932:	d021      	beq.n	8002978 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002934:	f7fe fe40 	bl	80015b8 <HAL_GetTick>
 8002938:	4602      	mov	r2, r0
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	1ad3      	subs	r3, r2, r3
 800293e:	68ba      	ldr	r2, [r7, #8]
 8002940:	429a      	cmp	r2, r3
 8002942:	d302      	bcc.n	800294a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002944:	68bb      	ldr	r3, [r7, #8]
 8002946:	2b00      	cmp	r3, #0
 8002948:	d116      	bne.n	8002978 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	2200      	movs	r2, #0
 800294e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	2220      	movs	r2, #32
 8002954:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	2200      	movs	r2, #0
 800295c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002964:	f043 0220 	orr.w	r2, r3, #32
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	2200      	movs	r2, #0
 8002970:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002974:	2301      	movs	r3, #1
 8002976:	e007      	b.n	8002988 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	695b      	ldr	r3, [r3, #20]
 800297e:	f003 0304 	and.w	r3, r3, #4
 8002982:	2b04      	cmp	r3, #4
 8002984:	d1ca      	bne.n	800291c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002986:	2300      	movs	r3, #0
}
 8002988:	4618      	mov	r0, r3
 800298a:	3710      	adds	r7, #16
 800298c:	46bd      	mov	sp, r7
 800298e:	bd80      	pop	{r7, pc}

08002990 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	b084      	sub	sp, #16
 8002994:	af00      	add	r7, sp, #0
 8002996:	60f8      	str	r0, [r7, #12]
 8002998:	60b9      	str	r1, [r7, #8]
 800299a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800299c:	e042      	b.n	8002a24 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	695b      	ldr	r3, [r3, #20]
 80029a4:	f003 0310 	and.w	r3, r3, #16
 80029a8:	2b10      	cmp	r3, #16
 80029aa:	d119      	bne.n	80029e0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f06f 0210 	mvn.w	r2, #16
 80029b4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	2200      	movs	r2, #0
 80029ba:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	2220      	movs	r2, #32
 80029c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	2200      	movs	r2, #0
 80029c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	2200      	movs	r2, #0
 80029d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80029dc:	2301      	movs	r3, #1
 80029de:	e029      	b.n	8002a34 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80029e0:	f7fe fdea 	bl	80015b8 <HAL_GetTick>
 80029e4:	4602      	mov	r2, r0
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	1ad3      	subs	r3, r2, r3
 80029ea:	68ba      	ldr	r2, [r7, #8]
 80029ec:	429a      	cmp	r2, r3
 80029ee:	d302      	bcc.n	80029f6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80029f0:	68bb      	ldr	r3, [r7, #8]
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d116      	bne.n	8002a24 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	2200      	movs	r2, #0
 80029fa:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	2220      	movs	r2, #32
 8002a00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	2200      	movs	r2, #0
 8002a08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a10:	f043 0220 	orr.w	r2, r3, #32
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002a20:	2301      	movs	r3, #1
 8002a22:	e007      	b.n	8002a34 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	695b      	ldr	r3, [r3, #20]
 8002a2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a2e:	2b40      	cmp	r3, #64	; 0x40
 8002a30:	d1b5      	bne.n	800299e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002a32:	2300      	movs	r3, #0
}
 8002a34:	4618      	mov	r0, r3
 8002a36:	3710      	adds	r7, #16
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	bd80      	pop	{r7, pc}

08002a3c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002a3c:	b480      	push	{r7}
 8002a3e:	b083      	sub	sp, #12
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	695b      	ldr	r3, [r3, #20]
 8002a4a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a4e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a52:	d11b      	bne.n	8002a8c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002a5c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	2200      	movs	r2, #0
 8002a62:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	2220      	movs	r2, #32
 8002a68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	2200      	movs	r2, #0
 8002a70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a78:	f043 0204 	orr.w	r2, r3, #4
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	2200      	movs	r2, #0
 8002a84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002a88:	2301      	movs	r3, #1
 8002a8a:	e000      	b.n	8002a8e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002a8c:	2300      	movs	r3, #0
}
 8002a8e:	4618      	mov	r0, r3
 8002a90:	370c      	adds	r7, #12
 8002a92:	46bd      	mov	sp, r7
 8002a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a98:	4770      	bx	lr

08002a9a <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002a9a:	b480      	push	{r7}
 8002a9c:	b083      	sub	sp, #12
 8002a9e:	af00      	add	r7, sp, #0
 8002aa0:	6078      	str	r0, [r7, #4]
 8002aa2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002aaa:	b2db      	uxtb	r3, r3
 8002aac:	2b20      	cmp	r3, #32
 8002aae:	d129      	bne.n	8002b04 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	2224      	movs	r2, #36	; 0x24
 8002ab4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	681a      	ldr	r2, [r3, #0]
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f022 0201 	bic.w	r2, r2, #1
 8002ac6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f022 0210 	bic.w	r2, r2, #16
 8002ad6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	683a      	ldr	r2, [r7, #0]
 8002ae4:	430a      	orrs	r2, r1
 8002ae6:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	681a      	ldr	r2, [r3, #0]
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f042 0201 	orr.w	r2, r2, #1
 8002af6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	2220      	movs	r2, #32
 8002afc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002b00:	2300      	movs	r3, #0
 8002b02:	e000      	b.n	8002b06 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8002b04:	2302      	movs	r3, #2
  }
}
 8002b06:	4618      	mov	r0, r3
 8002b08:	370c      	adds	r7, #12
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b10:	4770      	bx	lr

08002b12 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002b12:	b480      	push	{r7}
 8002b14:	b085      	sub	sp, #20
 8002b16:	af00      	add	r7, sp, #0
 8002b18:	6078      	str	r0, [r7, #4]
 8002b1a:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8002b1c:	2300      	movs	r3, #0
 8002b1e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b26:	b2db      	uxtb	r3, r3
 8002b28:	2b20      	cmp	r3, #32
 8002b2a:	d12a      	bne.n	8002b82 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	2224      	movs	r2, #36	; 0x24
 8002b30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	681a      	ldr	r2, [r3, #0]
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f022 0201 	bic.w	r2, r2, #1
 8002b42:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b4a:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8002b4c:	89fb      	ldrh	r3, [r7, #14]
 8002b4e:	f023 030f 	bic.w	r3, r3, #15
 8002b52:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8002b54:	683b      	ldr	r3, [r7, #0]
 8002b56:	b29a      	uxth	r2, r3
 8002b58:	89fb      	ldrh	r3, [r7, #14]
 8002b5a:	4313      	orrs	r3, r2
 8002b5c:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	89fa      	ldrh	r2, [r7, #14]
 8002b64:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	681a      	ldr	r2, [r3, #0]
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f042 0201 	orr.w	r2, r2, #1
 8002b74:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	2220      	movs	r2, #32
 8002b7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002b7e:	2300      	movs	r3, #0
 8002b80:	e000      	b.n	8002b84 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8002b82:	2302      	movs	r3, #2
  }
}
 8002b84:	4618      	mov	r0, r3
 8002b86:	3714      	adds	r7, #20
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8e:	4770      	bx	lr

08002b90 <HAL_UART_MspInit>:
  *           - Peripheral's GPIO Configuration
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b08a      	sub	sp, #40	; 0x28
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  GPIO_InitStruct;


  /*##-1- Enable peripherals and GPIO Clocks #################################*/
  /* Enable GPIO TX/RX clock */
  USARTx_TX_GPIO_CLK_ENABLE();
 8002b98:	2300      	movs	r3, #0
 8002b9a:	613b      	str	r3, [r7, #16]
 8002b9c:	4b23      	ldr	r3, [pc, #140]	; (8002c2c <HAL_UART_MspInit+0x9c>)
 8002b9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ba0:	4a22      	ldr	r2, [pc, #136]	; (8002c2c <HAL_UART_MspInit+0x9c>)
 8002ba2:	f043 0308 	orr.w	r3, r3, #8
 8002ba6:	6313      	str	r3, [r2, #48]	; 0x30
 8002ba8:	4b20      	ldr	r3, [pc, #128]	; (8002c2c <HAL_UART_MspInit+0x9c>)
 8002baa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bac:	f003 0308 	and.w	r3, r3, #8
 8002bb0:	613b      	str	r3, [r7, #16]
 8002bb2:	693b      	ldr	r3, [r7, #16]
  USARTx_RX_GPIO_CLK_ENABLE();
 8002bb4:	2300      	movs	r3, #0
 8002bb6:	60fb      	str	r3, [r7, #12]
 8002bb8:	4b1c      	ldr	r3, [pc, #112]	; (8002c2c <HAL_UART_MspInit+0x9c>)
 8002bba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bbc:	4a1b      	ldr	r2, [pc, #108]	; (8002c2c <HAL_UART_MspInit+0x9c>)
 8002bbe:	f043 0308 	orr.w	r3, r3, #8
 8002bc2:	6313      	str	r3, [r2, #48]	; 0x30
 8002bc4:	4b19      	ldr	r3, [pc, #100]	; (8002c2c <HAL_UART_MspInit+0x9c>)
 8002bc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bc8:	f003 0308 	and.w	r3, r3, #8
 8002bcc:	60fb      	str	r3, [r7, #12]
 8002bce:	68fb      	ldr	r3, [r7, #12]


  /* Enable USARTx clock */
  USARTx_CLK_ENABLE();
 8002bd0:	2300      	movs	r3, #0
 8002bd2:	60bb      	str	r3, [r7, #8]
 8002bd4:	4b15      	ldr	r3, [pc, #84]	; (8002c2c <HAL_UART_MspInit+0x9c>)
 8002bd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bd8:	4a14      	ldr	r2, [pc, #80]	; (8002c2c <HAL_UART_MspInit+0x9c>)
 8002bda:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002bde:	6413      	str	r3, [r2, #64]	; 0x40
 8002be0:	4b12      	ldr	r3, [pc, #72]	; (8002c2c <HAL_UART_MspInit+0x9c>)
 8002be2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002be4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002be8:	60bb      	str	r3, [r7, #8]
 8002bea:	68bb      	ldr	r3, [r7, #8]

  /*##-2- Configure peripheral GPIO ##########################################*/
  /* UART TX GPIO pin configuration  */
  GPIO_InitStruct.Pin       = USARTx_TX_PIN;
 8002bec:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002bf0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 8002bf2:	2302      	movs	r3, #2
 8002bf4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull      = GPIO_PULLUP;
 8002bf6:	2301      	movs	r3, #1
 8002bf8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 8002bfa:	2303      	movs	r3, #3
 8002bfc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = USARTx_TX_AF;
 8002bfe:	2307      	movs	r3, #7
 8002c00:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_GPIO_Init(USARTx_TX_GPIO_PORT, &GPIO_InitStruct);
 8002c02:	f107 0314 	add.w	r3, r7, #20
 8002c06:	4619      	mov	r1, r3
 8002c08:	4809      	ldr	r0, [pc, #36]	; (8002c30 <HAL_UART_MspInit+0xa0>)
 8002c0a:	f7fe fdeb 	bl	80017e4 <HAL_GPIO_Init>

  /* UART RX GPIO pin configuration  */
  GPIO_InitStruct.Pin = USARTx_RX_PIN;
 8002c0e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002c12:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = USARTx_RX_AF;
 8002c14:	2307      	movs	r3, #7
 8002c16:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_GPIO_Init(USARTx_RX_GPIO_PORT, &GPIO_InitStruct);
 8002c18:	f107 0314 	add.w	r3, r7, #20
 8002c1c:	4619      	mov	r1, r3
 8002c1e:	4804      	ldr	r0, [pc, #16]	; (8002c30 <HAL_UART_MspInit+0xa0>)
 8002c20:	f7fe fde0 	bl	80017e4 <HAL_GPIO_Init>
}
 8002c24:	bf00      	nop
 8002c26:	3728      	adds	r7, #40	; 0x28
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	bd80      	pop	{r7, pc}
 8002c2c:	40023800 	.word	0x40023800
 8002c30:	40020c00 	.word	0x40020c00

08002c34 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b082      	sub	sp, #8
 8002c38:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002c3e:	2300      	movs	r3, #0
 8002c40:	603b      	str	r3, [r7, #0]
 8002c42:	4b20      	ldr	r3, [pc, #128]	; (8002cc4 <HAL_PWREx_EnableOverDrive+0x90>)
 8002c44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c46:	4a1f      	ldr	r2, [pc, #124]	; (8002cc4 <HAL_PWREx_EnableOverDrive+0x90>)
 8002c48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c4c:	6413      	str	r3, [r2, #64]	; 0x40
 8002c4e:	4b1d      	ldr	r3, [pc, #116]	; (8002cc4 <HAL_PWREx_EnableOverDrive+0x90>)
 8002c50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c56:	603b      	str	r3, [r7, #0]
 8002c58:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002c5a:	4b1b      	ldr	r3, [pc, #108]	; (8002cc8 <HAL_PWREx_EnableOverDrive+0x94>)
 8002c5c:	2201      	movs	r2, #1
 8002c5e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002c60:	f7fe fcaa 	bl	80015b8 <HAL_GetTick>
 8002c64:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002c66:	e009      	b.n	8002c7c <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002c68:	f7fe fca6 	bl	80015b8 <HAL_GetTick>
 8002c6c:	4602      	mov	r2, r0
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	1ad3      	subs	r3, r2, r3
 8002c72:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002c76:	d901      	bls.n	8002c7c <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8002c78:	2303      	movs	r3, #3
 8002c7a:	e01f      	b.n	8002cbc <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002c7c:	4b13      	ldr	r3, [pc, #76]	; (8002ccc <HAL_PWREx_EnableOverDrive+0x98>)
 8002c7e:	685b      	ldr	r3, [r3, #4]
 8002c80:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c88:	d1ee      	bne.n	8002c68 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002c8a:	4b11      	ldr	r3, [pc, #68]	; (8002cd0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002c8c:	2201      	movs	r2, #1
 8002c8e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002c90:	f7fe fc92 	bl	80015b8 <HAL_GetTick>
 8002c94:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002c96:	e009      	b.n	8002cac <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002c98:	f7fe fc8e 	bl	80015b8 <HAL_GetTick>
 8002c9c:	4602      	mov	r2, r0
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	1ad3      	subs	r3, r2, r3
 8002ca2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002ca6:	d901      	bls.n	8002cac <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8002ca8:	2303      	movs	r3, #3
 8002caa:	e007      	b.n	8002cbc <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002cac:	4b07      	ldr	r3, [pc, #28]	; (8002ccc <HAL_PWREx_EnableOverDrive+0x98>)
 8002cae:	685b      	ldr	r3, [r3, #4]
 8002cb0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cb4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002cb8:	d1ee      	bne.n	8002c98 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8002cba:	2300      	movs	r3, #0
}
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	3708      	adds	r7, #8
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	bd80      	pop	{r7, pc}
 8002cc4:	40023800 	.word	0x40023800
 8002cc8:	420e0040 	.word	0x420e0040
 8002ccc:	40007000 	.word	0x40007000
 8002cd0:	420e0044 	.word	0x420e0044

08002cd4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	b086      	sub	sp, #24
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d101      	bne.n	8002ce6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002ce2:	2301      	movs	r3, #1
 8002ce4:	e267      	b.n	80031b6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f003 0301 	and.w	r3, r3, #1
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d075      	beq.n	8002dde <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002cf2:	4b88      	ldr	r3, [pc, #544]	; (8002f14 <HAL_RCC_OscConfig+0x240>)
 8002cf4:	689b      	ldr	r3, [r3, #8]
 8002cf6:	f003 030c 	and.w	r3, r3, #12
 8002cfa:	2b04      	cmp	r3, #4
 8002cfc:	d00c      	beq.n	8002d18 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002cfe:	4b85      	ldr	r3, [pc, #532]	; (8002f14 <HAL_RCC_OscConfig+0x240>)
 8002d00:	689b      	ldr	r3, [r3, #8]
 8002d02:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002d06:	2b08      	cmp	r3, #8
 8002d08:	d112      	bne.n	8002d30 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002d0a:	4b82      	ldr	r3, [pc, #520]	; (8002f14 <HAL_RCC_OscConfig+0x240>)
 8002d0c:	685b      	ldr	r3, [r3, #4]
 8002d0e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d12:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002d16:	d10b      	bne.n	8002d30 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d18:	4b7e      	ldr	r3, [pc, #504]	; (8002f14 <HAL_RCC_OscConfig+0x240>)
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d05b      	beq.n	8002ddc <HAL_RCC_OscConfig+0x108>
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	685b      	ldr	r3, [r3, #4]
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d157      	bne.n	8002ddc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002d2c:	2301      	movs	r3, #1
 8002d2e:	e242      	b.n	80031b6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	685b      	ldr	r3, [r3, #4]
 8002d34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d38:	d106      	bne.n	8002d48 <HAL_RCC_OscConfig+0x74>
 8002d3a:	4b76      	ldr	r3, [pc, #472]	; (8002f14 <HAL_RCC_OscConfig+0x240>)
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	4a75      	ldr	r2, [pc, #468]	; (8002f14 <HAL_RCC_OscConfig+0x240>)
 8002d40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d44:	6013      	str	r3, [r2, #0]
 8002d46:	e01d      	b.n	8002d84 <HAL_RCC_OscConfig+0xb0>
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	685b      	ldr	r3, [r3, #4]
 8002d4c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002d50:	d10c      	bne.n	8002d6c <HAL_RCC_OscConfig+0x98>
 8002d52:	4b70      	ldr	r3, [pc, #448]	; (8002f14 <HAL_RCC_OscConfig+0x240>)
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	4a6f      	ldr	r2, [pc, #444]	; (8002f14 <HAL_RCC_OscConfig+0x240>)
 8002d58:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002d5c:	6013      	str	r3, [r2, #0]
 8002d5e:	4b6d      	ldr	r3, [pc, #436]	; (8002f14 <HAL_RCC_OscConfig+0x240>)
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	4a6c      	ldr	r2, [pc, #432]	; (8002f14 <HAL_RCC_OscConfig+0x240>)
 8002d64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d68:	6013      	str	r3, [r2, #0]
 8002d6a:	e00b      	b.n	8002d84 <HAL_RCC_OscConfig+0xb0>
 8002d6c:	4b69      	ldr	r3, [pc, #420]	; (8002f14 <HAL_RCC_OscConfig+0x240>)
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	4a68      	ldr	r2, [pc, #416]	; (8002f14 <HAL_RCC_OscConfig+0x240>)
 8002d72:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d76:	6013      	str	r3, [r2, #0]
 8002d78:	4b66      	ldr	r3, [pc, #408]	; (8002f14 <HAL_RCC_OscConfig+0x240>)
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	4a65      	ldr	r2, [pc, #404]	; (8002f14 <HAL_RCC_OscConfig+0x240>)
 8002d7e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d82:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	685b      	ldr	r3, [r3, #4]
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d013      	beq.n	8002db4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d8c:	f7fe fc14 	bl	80015b8 <HAL_GetTick>
 8002d90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d92:	e008      	b.n	8002da6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d94:	f7fe fc10 	bl	80015b8 <HAL_GetTick>
 8002d98:	4602      	mov	r2, r0
 8002d9a:	693b      	ldr	r3, [r7, #16]
 8002d9c:	1ad3      	subs	r3, r2, r3
 8002d9e:	2b64      	cmp	r3, #100	; 0x64
 8002da0:	d901      	bls.n	8002da6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002da2:	2303      	movs	r3, #3
 8002da4:	e207      	b.n	80031b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002da6:	4b5b      	ldr	r3, [pc, #364]	; (8002f14 <HAL_RCC_OscConfig+0x240>)
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d0f0      	beq.n	8002d94 <HAL_RCC_OscConfig+0xc0>
 8002db2:	e014      	b.n	8002dde <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002db4:	f7fe fc00 	bl	80015b8 <HAL_GetTick>
 8002db8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002dba:	e008      	b.n	8002dce <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002dbc:	f7fe fbfc 	bl	80015b8 <HAL_GetTick>
 8002dc0:	4602      	mov	r2, r0
 8002dc2:	693b      	ldr	r3, [r7, #16]
 8002dc4:	1ad3      	subs	r3, r2, r3
 8002dc6:	2b64      	cmp	r3, #100	; 0x64
 8002dc8:	d901      	bls.n	8002dce <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002dca:	2303      	movs	r3, #3
 8002dcc:	e1f3      	b.n	80031b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002dce:	4b51      	ldr	r3, [pc, #324]	; (8002f14 <HAL_RCC_OscConfig+0x240>)
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d1f0      	bne.n	8002dbc <HAL_RCC_OscConfig+0xe8>
 8002dda:	e000      	b.n	8002dde <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ddc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f003 0302 	and.w	r3, r3, #2
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d063      	beq.n	8002eb2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002dea:	4b4a      	ldr	r3, [pc, #296]	; (8002f14 <HAL_RCC_OscConfig+0x240>)
 8002dec:	689b      	ldr	r3, [r3, #8]
 8002dee:	f003 030c 	and.w	r3, r3, #12
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d00b      	beq.n	8002e0e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002df6:	4b47      	ldr	r3, [pc, #284]	; (8002f14 <HAL_RCC_OscConfig+0x240>)
 8002df8:	689b      	ldr	r3, [r3, #8]
 8002dfa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002dfe:	2b08      	cmp	r3, #8
 8002e00:	d11c      	bne.n	8002e3c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002e02:	4b44      	ldr	r3, [pc, #272]	; (8002f14 <HAL_RCC_OscConfig+0x240>)
 8002e04:	685b      	ldr	r3, [r3, #4]
 8002e06:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d116      	bne.n	8002e3c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e0e:	4b41      	ldr	r3, [pc, #260]	; (8002f14 <HAL_RCC_OscConfig+0x240>)
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f003 0302 	and.w	r3, r3, #2
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d005      	beq.n	8002e26 <HAL_RCC_OscConfig+0x152>
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	68db      	ldr	r3, [r3, #12]
 8002e1e:	2b01      	cmp	r3, #1
 8002e20:	d001      	beq.n	8002e26 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002e22:	2301      	movs	r3, #1
 8002e24:	e1c7      	b.n	80031b6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e26:	4b3b      	ldr	r3, [pc, #236]	; (8002f14 <HAL_RCC_OscConfig+0x240>)
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	691b      	ldr	r3, [r3, #16]
 8002e32:	00db      	lsls	r3, r3, #3
 8002e34:	4937      	ldr	r1, [pc, #220]	; (8002f14 <HAL_RCC_OscConfig+0x240>)
 8002e36:	4313      	orrs	r3, r2
 8002e38:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e3a:	e03a      	b.n	8002eb2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	68db      	ldr	r3, [r3, #12]
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d020      	beq.n	8002e86 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e44:	4b34      	ldr	r3, [pc, #208]	; (8002f18 <HAL_RCC_OscConfig+0x244>)
 8002e46:	2201      	movs	r2, #1
 8002e48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e4a:	f7fe fbb5 	bl	80015b8 <HAL_GetTick>
 8002e4e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e50:	e008      	b.n	8002e64 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e52:	f7fe fbb1 	bl	80015b8 <HAL_GetTick>
 8002e56:	4602      	mov	r2, r0
 8002e58:	693b      	ldr	r3, [r7, #16]
 8002e5a:	1ad3      	subs	r3, r2, r3
 8002e5c:	2b02      	cmp	r3, #2
 8002e5e:	d901      	bls.n	8002e64 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002e60:	2303      	movs	r3, #3
 8002e62:	e1a8      	b.n	80031b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e64:	4b2b      	ldr	r3, [pc, #172]	; (8002f14 <HAL_RCC_OscConfig+0x240>)
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f003 0302 	and.w	r3, r3, #2
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d0f0      	beq.n	8002e52 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e70:	4b28      	ldr	r3, [pc, #160]	; (8002f14 <HAL_RCC_OscConfig+0x240>)
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	691b      	ldr	r3, [r3, #16]
 8002e7c:	00db      	lsls	r3, r3, #3
 8002e7e:	4925      	ldr	r1, [pc, #148]	; (8002f14 <HAL_RCC_OscConfig+0x240>)
 8002e80:	4313      	orrs	r3, r2
 8002e82:	600b      	str	r3, [r1, #0]
 8002e84:	e015      	b.n	8002eb2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e86:	4b24      	ldr	r3, [pc, #144]	; (8002f18 <HAL_RCC_OscConfig+0x244>)
 8002e88:	2200      	movs	r2, #0
 8002e8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e8c:	f7fe fb94 	bl	80015b8 <HAL_GetTick>
 8002e90:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e92:	e008      	b.n	8002ea6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e94:	f7fe fb90 	bl	80015b8 <HAL_GetTick>
 8002e98:	4602      	mov	r2, r0
 8002e9a:	693b      	ldr	r3, [r7, #16]
 8002e9c:	1ad3      	subs	r3, r2, r3
 8002e9e:	2b02      	cmp	r3, #2
 8002ea0:	d901      	bls.n	8002ea6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002ea2:	2303      	movs	r3, #3
 8002ea4:	e187      	b.n	80031b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ea6:	4b1b      	ldr	r3, [pc, #108]	; (8002f14 <HAL_RCC_OscConfig+0x240>)
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f003 0302 	and.w	r3, r3, #2
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d1f0      	bne.n	8002e94 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f003 0308 	and.w	r3, r3, #8
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d036      	beq.n	8002f2c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	695b      	ldr	r3, [r3, #20]
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d016      	beq.n	8002ef4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002ec6:	4b15      	ldr	r3, [pc, #84]	; (8002f1c <HAL_RCC_OscConfig+0x248>)
 8002ec8:	2201      	movs	r2, #1
 8002eca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ecc:	f7fe fb74 	bl	80015b8 <HAL_GetTick>
 8002ed0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ed2:	e008      	b.n	8002ee6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002ed4:	f7fe fb70 	bl	80015b8 <HAL_GetTick>
 8002ed8:	4602      	mov	r2, r0
 8002eda:	693b      	ldr	r3, [r7, #16]
 8002edc:	1ad3      	subs	r3, r2, r3
 8002ede:	2b02      	cmp	r3, #2
 8002ee0:	d901      	bls.n	8002ee6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002ee2:	2303      	movs	r3, #3
 8002ee4:	e167      	b.n	80031b6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ee6:	4b0b      	ldr	r3, [pc, #44]	; (8002f14 <HAL_RCC_OscConfig+0x240>)
 8002ee8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002eea:	f003 0302 	and.w	r3, r3, #2
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d0f0      	beq.n	8002ed4 <HAL_RCC_OscConfig+0x200>
 8002ef2:	e01b      	b.n	8002f2c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ef4:	4b09      	ldr	r3, [pc, #36]	; (8002f1c <HAL_RCC_OscConfig+0x248>)
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002efa:	f7fe fb5d 	bl	80015b8 <HAL_GetTick>
 8002efe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f00:	e00e      	b.n	8002f20 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f02:	f7fe fb59 	bl	80015b8 <HAL_GetTick>
 8002f06:	4602      	mov	r2, r0
 8002f08:	693b      	ldr	r3, [r7, #16]
 8002f0a:	1ad3      	subs	r3, r2, r3
 8002f0c:	2b02      	cmp	r3, #2
 8002f0e:	d907      	bls.n	8002f20 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002f10:	2303      	movs	r3, #3
 8002f12:	e150      	b.n	80031b6 <HAL_RCC_OscConfig+0x4e2>
 8002f14:	40023800 	.word	0x40023800
 8002f18:	42470000 	.word	0x42470000
 8002f1c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f20:	4b88      	ldr	r3, [pc, #544]	; (8003144 <HAL_RCC_OscConfig+0x470>)
 8002f22:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f24:	f003 0302 	and.w	r3, r3, #2
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d1ea      	bne.n	8002f02 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f003 0304 	and.w	r3, r3, #4
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	f000 8097 	beq.w	8003068 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f3a:	2300      	movs	r3, #0
 8002f3c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f3e:	4b81      	ldr	r3, [pc, #516]	; (8003144 <HAL_RCC_OscConfig+0x470>)
 8002f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d10f      	bne.n	8002f6a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f4a:	2300      	movs	r3, #0
 8002f4c:	60bb      	str	r3, [r7, #8]
 8002f4e:	4b7d      	ldr	r3, [pc, #500]	; (8003144 <HAL_RCC_OscConfig+0x470>)
 8002f50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f52:	4a7c      	ldr	r2, [pc, #496]	; (8003144 <HAL_RCC_OscConfig+0x470>)
 8002f54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f58:	6413      	str	r3, [r2, #64]	; 0x40
 8002f5a:	4b7a      	ldr	r3, [pc, #488]	; (8003144 <HAL_RCC_OscConfig+0x470>)
 8002f5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f62:	60bb      	str	r3, [r7, #8]
 8002f64:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f66:	2301      	movs	r3, #1
 8002f68:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f6a:	4b77      	ldr	r3, [pc, #476]	; (8003148 <HAL_RCC_OscConfig+0x474>)
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d118      	bne.n	8002fa8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002f76:	4b74      	ldr	r3, [pc, #464]	; (8003148 <HAL_RCC_OscConfig+0x474>)
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	4a73      	ldr	r2, [pc, #460]	; (8003148 <HAL_RCC_OscConfig+0x474>)
 8002f7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f80:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f82:	f7fe fb19 	bl	80015b8 <HAL_GetTick>
 8002f86:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f88:	e008      	b.n	8002f9c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f8a:	f7fe fb15 	bl	80015b8 <HAL_GetTick>
 8002f8e:	4602      	mov	r2, r0
 8002f90:	693b      	ldr	r3, [r7, #16]
 8002f92:	1ad3      	subs	r3, r2, r3
 8002f94:	2b02      	cmp	r3, #2
 8002f96:	d901      	bls.n	8002f9c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002f98:	2303      	movs	r3, #3
 8002f9a:	e10c      	b.n	80031b6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f9c:	4b6a      	ldr	r3, [pc, #424]	; (8003148 <HAL_RCC_OscConfig+0x474>)
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d0f0      	beq.n	8002f8a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	689b      	ldr	r3, [r3, #8]
 8002fac:	2b01      	cmp	r3, #1
 8002fae:	d106      	bne.n	8002fbe <HAL_RCC_OscConfig+0x2ea>
 8002fb0:	4b64      	ldr	r3, [pc, #400]	; (8003144 <HAL_RCC_OscConfig+0x470>)
 8002fb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fb4:	4a63      	ldr	r2, [pc, #396]	; (8003144 <HAL_RCC_OscConfig+0x470>)
 8002fb6:	f043 0301 	orr.w	r3, r3, #1
 8002fba:	6713      	str	r3, [r2, #112]	; 0x70
 8002fbc:	e01c      	b.n	8002ff8 <HAL_RCC_OscConfig+0x324>
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	689b      	ldr	r3, [r3, #8]
 8002fc2:	2b05      	cmp	r3, #5
 8002fc4:	d10c      	bne.n	8002fe0 <HAL_RCC_OscConfig+0x30c>
 8002fc6:	4b5f      	ldr	r3, [pc, #380]	; (8003144 <HAL_RCC_OscConfig+0x470>)
 8002fc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fca:	4a5e      	ldr	r2, [pc, #376]	; (8003144 <HAL_RCC_OscConfig+0x470>)
 8002fcc:	f043 0304 	orr.w	r3, r3, #4
 8002fd0:	6713      	str	r3, [r2, #112]	; 0x70
 8002fd2:	4b5c      	ldr	r3, [pc, #368]	; (8003144 <HAL_RCC_OscConfig+0x470>)
 8002fd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fd6:	4a5b      	ldr	r2, [pc, #364]	; (8003144 <HAL_RCC_OscConfig+0x470>)
 8002fd8:	f043 0301 	orr.w	r3, r3, #1
 8002fdc:	6713      	str	r3, [r2, #112]	; 0x70
 8002fde:	e00b      	b.n	8002ff8 <HAL_RCC_OscConfig+0x324>
 8002fe0:	4b58      	ldr	r3, [pc, #352]	; (8003144 <HAL_RCC_OscConfig+0x470>)
 8002fe2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fe4:	4a57      	ldr	r2, [pc, #348]	; (8003144 <HAL_RCC_OscConfig+0x470>)
 8002fe6:	f023 0301 	bic.w	r3, r3, #1
 8002fea:	6713      	str	r3, [r2, #112]	; 0x70
 8002fec:	4b55      	ldr	r3, [pc, #340]	; (8003144 <HAL_RCC_OscConfig+0x470>)
 8002fee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ff0:	4a54      	ldr	r2, [pc, #336]	; (8003144 <HAL_RCC_OscConfig+0x470>)
 8002ff2:	f023 0304 	bic.w	r3, r3, #4
 8002ff6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	689b      	ldr	r3, [r3, #8]
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d015      	beq.n	800302c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003000:	f7fe fada 	bl	80015b8 <HAL_GetTick>
 8003004:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003006:	e00a      	b.n	800301e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003008:	f7fe fad6 	bl	80015b8 <HAL_GetTick>
 800300c:	4602      	mov	r2, r0
 800300e:	693b      	ldr	r3, [r7, #16]
 8003010:	1ad3      	subs	r3, r2, r3
 8003012:	f241 3288 	movw	r2, #5000	; 0x1388
 8003016:	4293      	cmp	r3, r2
 8003018:	d901      	bls.n	800301e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800301a:	2303      	movs	r3, #3
 800301c:	e0cb      	b.n	80031b6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800301e:	4b49      	ldr	r3, [pc, #292]	; (8003144 <HAL_RCC_OscConfig+0x470>)
 8003020:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003022:	f003 0302 	and.w	r3, r3, #2
 8003026:	2b00      	cmp	r3, #0
 8003028:	d0ee      	beq.n	8003008 <HAL_RCC_OscConfig+0x334>
 800302a:	e014      	b.n	8003056 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800302c:	f7fe fac4 	bl	80015b8 <HAL_GetTick>
 8003030:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003032:	e00a      	b.n	800304a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003034:	f7fe fac0 	bl	80015b8 <HAL_GetTick>
 8003038:	4602      	mov	r2, r0
 800303a:	693b      	ldr	r3, [r7, #16]
 800303c:	1ad3      	subs	r3, r2, r3
 800303e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003042:	4293      	cmp	r3, r2
 8003044:	d901      	bls.n	800304a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003046:	2303      	movs	r3, #3
 8003048:	e0b5      	b.n	80031b6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800304a:	4b3e      	ldr	r3, [pc, #248]	; (8003144 <HAL_RCC_OscConfig+0x470>)
 800304c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800304e:	f003 0302 	and.w	r3, r3, #2
 8003052:	2b00      	cmp	r3, #0
 8003054:	d1ee      	bne.n	8003034 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003056:	7dfb      	ldrb	r3, [r7, #23]
 8003058:	2b01      	cmp	r3, #1
 800305a:	d105      	bne.n	8003068 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800305c:	4b39      	ldr	r3, [pc, #228]	; (8003144 <HAL_RCC_OscConfig+0x470>)
 800305e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003060:	4a38      	ldr	r2, [pc, #224]	; (8003144 <HAL_RCC_OscConfig+0x470>)
 8003062:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003066:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	699b      	ldr	r3, [r3, #24]
 800306c:	2b00      	cmp	r3, #0
 800306e:	f000 80a1 	beq.w	80031b4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003072:	4b34      	ldr	r3, [pc, #208]	; (8003144 <HAL_RCC_OscConfig+0x470>)
 8003074:	689b      	ldr	r3, [r3, #8]
 8003076:	f003 030c 	and.w	r3, r3, #12
 800307a:	2b08      	cmp	r3, #8
 800307c:	d05c      	beq.n	8003138 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	699b      	ldr	r3, [r3, #24]
 8003082:	2b02      	cmp	r3, #2
 8003084:	d141      	bne.n	800310a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003086:	4b31      	ldr	r3, [pc, #196]	; (800314c <HAL_RCC_OscConfig+0x478>)
 8003088:	2200      	movs	r2, #0
 800308a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800308c:	f7fe fa94 	bl	80015b8 <HAL_GetTick>
 8003090:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003092:	e008      	b.n	80030a6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003094:	f7fe fa90 	bl	80015b8 <HAL_GetTick>
 8003098:	4602      	mov	r2, r0
 800309a:	693b      	ldr	r3, [r7, #16]
 800309c:	1ad3      	subs	r3, r2, r3
 800309e:	2b02      	cmp	r3, #2
 80030a0:	d901      	bls.n	80030a6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80030a2:	2303      	movs	r3, #3
 80030a4:	e087      	b.n	80031b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030a6:	4b27      	ldr	r3, [pc, #156]	; (8003144 <HAL_RCC_OscConfig+0x470>)
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d1f0      	bne.n	8003094 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	69da      	ldr	r2, [r3, #28]
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6a1b      	ldr	r3, [r3, #32]
 80030ba:	431a      	orrs	r2, r3
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030c0:	019b      	lsls	r3, r3, #6
 80030c2:	431a      	orrs	r2, r3
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030c8:	085b      	lsrs	r3, r3, #1
 80030ca:	3b01      	subs	r3, #1
 80030cc:	041b      	lsls	r3, r3, #16
 80030ce:	431a      	orrs	r2, r3
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030d4:	061b      	lsls	r3, r3, #24
 80030d6:	491b      	ldr	r1, [pc, #108]	; (8003144 <HAL_RCC_OscConfig+0x470>)
 80030d8:	4313      	orrs	r3, r2
 80030da:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80030dc:	4b1b      	ldr	r3, [pc, #108]	; (800314c <HAL_RCC_OscConfig+0x478>)
 80030de:	2201      	movs	r2, #1
 80030e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030e2:	f7fe fa69 	bl	80015b8 <HAL_GetTick>
 80030e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030e8:	e008      	b.n	80030fc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80030ea:	f7fe fa65 	bl	80015b8 <HAL_GetTick>
 80030ee:	4602      	mov	r2, r0
 80030f0:	693b      	ldr	r3, [r7, #16]
 80030f2:	1ad3      	subs	r3, r2, r3
 80030f4:	2b02      	cmp	r3, #2
 80030f6:	d901      	bls.n	80030fc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80030f8:	2303      	movs	r3, #3
 80030fa:	e05c      	b.n	80031b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030fc:	4b11      	ldr	r3, [pc, #68]	; (8003144 <HAL_RCC_OscConfig+0x470>)
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003104:	2b00      	cmp	r3, #0
 8003106:	d0f0      	beq.n	80030ea <HAL_RCC_OscConfig+0x416>
 8003108:	e054      	b.n	80031b4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800310a:	4b10      	ldr	r3, [pc, #64]	; (800314c <HAL_RCC_OscConfig+0x478>)
 800310c:	2200      	movs	r2, #0
 800310e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003110:	f7fe fa52 	bl	80015b8 <HAL_GetTick>
 8003114:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003116:	e008      	b.n	800312a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003118:	f7fe fa4e 	bl	80015b8 <HAL_GetTick>
 800311c:	4602      	mov	r2, r0
 800311e:	693b      	ldr	r3, [r7, #16]
 8003120:	1ad3      	subs	r3, r2, r3
 8003122:	2b02      	cmp	r3, #2
 8003124:	d901      	bls.n	800312a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003126:	2303      	movs	r3, #3
 8003128:	e045      	b.n	80031b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800312a:	4b06      	ldr	r3, [pc, #24]	; (8003144 <HAL_RCC_OscConfig+0x470>)
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003132:	2b00      	cmp	r3, #0
 8003134:	d1f0      	bne.n	8003118 <HAL_RCC_OscConfig+0x444>
 8003136:	e03d      	b.n	80031b4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	699b      	ldr	r3, [r3, #24]
 800313c:	2b01      	cmp	r3, #1
 800313e:	d107      	bne.n	8003150 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003140:	2301      	movs	r3, #1
 8003142:	e038      	b.n	80031b6 <HAL_RCC_OscConfig+0x4e2>
 8003144:	40023800 	.word	0x40023800
 8003148:	40007000 	.word	0x40007000
 800314c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003150:	4b1b      	ldr	r3, [pc, #108]	; (80031c0 <HAL_RCC_OscConfig+0x4ec>)
 8003152:	685b      	ldr	r3, [r3, #4]
 8003154:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	699b      	ldr	r3, [r3, #24]
 800315a:	2b01      	cmp	r3, #1
 800315c:	d028      	beq.n	80031b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003168:	429a      	cmp	r2, r3
 800316a:	d121      	bne.n	80031b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003176:	429a      	cmp	r2, r3
 8003178:	d11a      	bne.n	80031b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800317a:	68fa      	ldr	r2, [r7, #12]
 800317c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003180:	4013      	ands	r3, r2
 8003182:	687a      	ldr	r2, [r7, #4]
 8003184:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003186:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003188:	4293      	cmp	r3, r2
 800318a:	d111      	bne.n	80031b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003196:	085b      	lsrs	r3, r3, #1
 8003198:	3b01      	subs	r3, #1
 800319a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800319c:	429a      	cmp	r2, r3
 800319e:	d107      	bne.n	80031b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031aa:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80031ac:	429a      	cmp	r2, r3
 80031ae:	d001      	beq.n	80031b4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80031b0:	2301      	movs	r3, #1
 80031b2:	e000      	b.n	80031b6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80031b4:	2300      	movs	r3, #0
}
 80031b6:	4618      	mov	r0, r3
 80031b8:	3718      	adds	r7, #24
 80031ba:	46bd      	mov	sp, r7
 80031bc:	bd80      	pop	{r7, pc}
 80031be:	bf00      	nop
 80031c0:	40023800 	.word	0x40023800

080031c4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80031c4:	b580      	push	{r7, lr}
 80031c6:	b084      	sub	sp, #16
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	6078      	str	r0, [r7, #4]
 80031cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d101      	bne.n	80031d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80031d4:	2301      	movs	r3, #1
 80031d6:	e0cc      	b.n	8003372 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80031d8:	4b68      	ldr	r3, [pc, #416]	; (800337c <HAL_RCC_ClockConfig+0x1b8>)
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f003 030f 	and.w	r3, r3, #15
 80031e0:	683a      	ldr	r2, [r7, #0]
 80031e2:	429a      	cmp	r2, r3
 80031e4:	d90c      	bls.n	8003200 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031e6:	4b65      	ldr	r3, [pc, #404]	; (800337c <HAL_RCC_ClockConfig+0x1b8>)
 80031e8:	683a      	ldr	r2, [r7, #0]
 80031ea:	b2d2      	uxtb	r2, r2
 80031ec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80031ee:	4b63      	ldr	r3, [pc, #396]	; (800337c <HAL_RCC_ClockConfig+0x1b8>)
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f003 030f 	and.w	r3, r3, #15
 80031f6:	683a      	ldr	r2, [r7, #0]
 80031f8:	429a      	cmp	r2, r3
 80031fa:	d001      	beq.n	8003200 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80031fc:	2301      	movs	r3, #1
 80031fe:	e0b8      	b.n	8003372 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f003 0302 	and.w	r3, r3, #2
 8003208:	2b00      	cmp	r3, #0
 800320a:	d020      	beq.n	800324e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f003 0304 	and.w	r3, r3, #4
 8003214:	2b00      	cmp	r3, #0
 8003216:	d005      	beq.n	8003224 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003218:	4b59      	ldr	r3, [pc, #356]	; (8003380 <HAL_RCC_ClockConfig+0x1bc>)
 800321a:	689b      	ldr	r3, [r3, #8]
 800321c:	4a58      	ldr	r2, [pc, #352]	; (8003380 <HAL_RCC_ClockConfig+0x1bc>)
 800321e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003222:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f003 0308 	and.w	r3, r3, #8
 800322c:	2b00      	cmp	r3, #0
 800322e:	d005      	beq.n	800323c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003230:	4b53      	ldr	r3, [pc, #332]	; (8003380 <HAL_RCC_ClockConfig+0x1bc>)
 8003232:	689b      	ldr	r3, [r3, #8]
 8003234:	4a52      	ldr	r2, [pc, #328]	; (8003380 <HAL_RCC_ClockConfig+0x1bc>)
 8003236:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800323a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800323c:	4b50      	ldr	r3, [pc, #320]	; (8003380 <HAL_RCC_ClockConfig+0x1bc>)
 800323e:	689b      	ldr	r3, [r3, #8]
 8003240:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	689b      	ldr	r3, [r3, #8]
 8003248:	494d      	ldr	r1, [pc, #308]	; (8003380 <HAL_RCC_ClockConfig+0x1bc>)
 800324a:	4313      	orrs	r3, r2
 800324c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f003 0301 	and.w	r3, r3, #1
 8003256:	2b00      	cmp	r3, #0
 8003258:	d044      	beq.n	80032e4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	685b      	ldr	r3, [r3, #4]
 800325e:	2b01      	cmp	r3, #1
 8003260:	d107      	bne.n	8003272 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003262:	4b47      	ldr	r3, [pc, #284]	; (8003380 <HAL_RCC_ClockConfig+0x1bc>)
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800326a:	2b00      	cmp	r3, #0
 800326c:	d119      	bne.n	80032a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800326e:	2301      	movs	r3, #1
 8003270:	e07f      	b.n	8003372 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	685b      	ldr	r3, [r3, #4]
 8003276:	2b02      	cmp	r3, #2
 8003278:	d003      	beq.n	8003282 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800327e:	2b03      	cmp	r3, #3
 8003280:	d107      	bne.n	8003292 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003282:	4b3f      	ldr	r3, [pc, #252]	; (8003380 <HAL_RCC_ClockConfig+0x1bc>)
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800328a:	2b00      	cmp	r3, #0
 800328c:	d109      	bne.n	80032a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800328e:	2301      	movs	r3, #1
 8003290:	e06f      	b.n	8003372 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003292:	4b3b      	ldr	r3, [pc, #236]	; (8003380 <HAL_RCC_ClockConfig+0x1bc>)
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f003 0302 	and.w	r3, r3, #2
 800329a:	2b00      	cmp	r3, #0
 800329c:	d101      	bne.n	80032a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800329e:	2301      	movs	r3, #1
 80032a0:	e067      	b.n	8003372 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80032a2:	4b37      	ldr	r3, [pc, #220]	; (8003380 <HAL_RCC_ClockConfig+0x1bc>)
 80032a4:	689b      	ldr	r3, [r3, #8]
 80032a6:	f023 0203 	bic.w	r2, r3, #3
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	685b      	ldr	r3, [r3, #4]
 80032ae:	4934      	ldr	r1, [pc, #208]	; (8003380 <HAL_RCC_ClockConfig+0x1bc>)
 80032b0:	4313      	orrs	r3, r2
 80032b2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80032b4:	f7fe f980 	bl	80015b8 <HAL_GetTick>
 80032b8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032ba:	e00a      	b.n	80032d2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80032bc:	f7fe f97c 	bl	80015b8 <HAL_GetTick>
 80032c0:	4602      	mov	r2, r0
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	1ad3      	subs	r3, r2, r3
 80032c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80032ca:	4293      	cmp	r3, r2
 80032cc:	d901      	bls.n	80032d2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80032ce:	2303      	movs	r3, #3
 80032d0:	e04f      	b.n	8003372 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032d2:	4b2b      	ldr	r3, [pc, #172]	; (8003380 <HAL_RCC_ClockConfig+0x1bc>)
 80032d4:	689b      	ldr	r3, [r3, #8]
 80032d6:	f003 020c 	and.w	r2, r3, #12
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	685b      	ldr	r3, [r3, #4]
 80032de:	009b      	lsls	r3, r3, #2
 80032e0:	429a      	cmp	r2, r3
 80032e2:	d1eb      	bne.n	80032bc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80032e4:	4b25      	ldr	r3, [pc, #148]	; (800337c <HAL_RCC_ClockConfig+0x1b8>)
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f003 030f 	and.w	r3, r3, #15
 80032ec:	683a      	ldr	r2, [r7, #0]
 80032ee:	429a      	cmp	r2, r3
 80032f0:	d20c      	bcs.n	800330c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032f2:	4b22      	ldr	r3, [pc, #136]	; (800337c <HAL_RCC_ClockConfig+0x1b8>)
 80032f4:	683a      	ldr	r2, [r7, #0]
 80032f6:	b2d2      	uxtb	r2, r2
 80032f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80032fa:	4b20      	ldr	r3, [pc, #128]	; (800337c <HAL_RCC_ClockConfig+0x1b8>)
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f003 030f 	and.w	r3, r3, #15
 8003302:	683a      	ldr	r2, [r7, #0]
 8003304:	429a      	cmp	r2, r3
 8003306:	d001      	beq.n	800330c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003308:	2301      	movs	r3, #1
 800330a:	e032      	b.n	8003372 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f003 0304 	and.w	r3, r3, #4
 8003314:	2b00      	cmp	r3, #0
 8003316:	d008      	beq.n	800332a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003318:	4b19      	ldr	r3, [pc, #100]	; (8003380 <HAL_RCC_ClockConfig+0x1bc>)
 800331a:	689b      	ldr	r3, [r3, #8]
 800331c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	68db      	ldr	r3, [r3, #12]
 8003324:	4916      	ldr	r1, [pc, #88]	; (8003380 <HAL_RCC_ClockConfig+0x1bc>)
 8003326:	4313      	orrs	r3, r2
 8003328:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f003 0308 	and.w	r3, r3, #8
 8003332:	2b00      	cmp	r3, #0
 8003334:	d009      	beq.n	800334a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003336:	4b12      	ldr	r3, [pc, #72]	; (8003380 <HAL_RCC_ClockConfig+0x1bc>)
 8003338:	689b      	ldr	r3, [r3, #8]
 800333a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	691b      	ldr	r3, [r3, #16]
 8003342:	00db      	lsls	r3, r3, #3
 8003344:	490e      	ldr	r1, [pc, #56]	; (8003380 <HAL_RCC_ClockConfig+0x1bc>)
 8003346:	4313      	orrs	r3, r2
 8003348:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800334a:	f000 f821 	bl	8003390 <HAL_RCC_GetSysClockFreq>
 800334e:	4602      	mov	r2, r0
 8003350:	4b0b      	ldr	r3, [pc, #44]	; (8003380 <HAL_RCC_ClockConfig+0x1bc>)
 8003352:	689b      	ldr	r3, [r3, #8]
 8003354:	091b      	lsrs	r3, r3, #4
 8003356:	f003 030f 	and.w	r3, r3, #15
 800335a:	490a      	ldr	r1, [pc, #40]	; (8003384 <HAL_RCC_ClockConfig+0x1c0>)
 800335c:	5ccb      	ldrb	r3, [r1, r3]
 800335e:	fa22 f303 	lsr.w	r3, r2, r3
 8003362:	4a09      	ldr	r2, [pc, #36]	; (8003388 <HAL_RCC_ClockConfig+0x1c4>)
 8003364:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003366:	4b09      	ldr	r3, [pc, #36]	; (800338c <HAL_RCC_ClockConfig+0x1c8>)
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	4618      	mov	r0, r3
 800336c:	f7fe f8e0 	bl	8001530 <HAL_InitTick>

  return HAL_OK;
 8003370:	2300      	movs	r3, #0
}
 8003372:	4618      	mov	r0, r3
 8003374:	3710      	adds	r7, #16
 8003376:	46bd      	mov	sp, r7
 8003378:	bd80      	pop	{r7, pc}
 800337a:	bf00      	nop
 800337c:	40023c00 	.word	0x40023c00
 8003380:	40023800 	.word	0x40023800
 8003384:	08005ce8 	.word	0x08005ce8
 8003388:	2000000c 	.word	0x2000000c
 800338c:	20000074 	.word	0x20000074

08003390 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003390:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003394:	b094      	sub	sp, #80	; 0x50
 8003396:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003398:	2300      	movs	r3, #0
 800339a:	647b      	str	r3, [r7, #68]	; 0x44
 800339c:	2300      	movs	r3, #0
 800339e:	64fb      	str	r3, [r7, #76]	; 0x4c
 80033a0:	2300      	movs	r3, #0
 80033a2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80033a4:	2300      	movs	r3, #0
 80033a6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80033a8:	4b79      	ldr	r3, [pc, #484]	; (8003590 <HAL_RCC_GetSysClockFreq+0x200>)
 80033aa:	689b      	ldr	r3, [r3, #8]
 80033ac:	f003 030c 	and.w	r3, r3, #12
 80033b0:	2b08      	cmp	r3, #8
 80033b2:	d00d      	beq.n	80033d0 <HAL_RCC_GetSysClockFreq+0x40>
 80033b4:	2b08      	cmp	r3, #8
 80033b6:	f200 80e1 	bhi.w	800357c <HAL_RCC_GetSysClockFreq+0x1ec>
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d002      	beq.n	80033c4 <HAL_RCC_GetSysClockFreq+0x34>
 80033be:	2b04      	cmp	r3, #4
 80033c0:	d003      	beq.n	80033ca <HAL_RCC_GetSysClockFreq+0x3a>
 80033c2:	e0db      	b.n	800357c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80033c4:	4b73      	ldr	r3, [pc, #460]	; (8003594 <HAL_RCC_GetSysClockFreq+0x204>)
 80033c6:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80033c8:	e0db      	b.n	8003582 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80033ca:	4b73      	ldr	r3, [pc, #460]	; (8003598 <HAL_RCC_GetSysClockFreq+0x208>)
 80033cc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80033ce:	e0d8      	b.n	8003582 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80033d0:	4b6f      	ldr	r3, [pc, #444]	; (8003590 <HAL_RCC_GetSysClockFreq+0x200>)
 80033d2:	685b      	ldr	r3, [r3, #4]
 80033d4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80033d8:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80033da:	4b6d      	ldr	r3, [pc, #436]	; (8003590 <HAL_RCC_GetSysClockFreq+0x200>)
 80033dc:	685b      	ldr	r3, [r3, #4]
 80033de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d063      	beq.n	80034ae <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80033e6:	4b6a      	ldr	r3, [pc, #424]	; (8003590 <HAL_RCC_GetSysClockFreq+0x200>)
 80033e8:	685b      	ldr	r3, [r3, #4]
 80033ea:	099b      	lsrs	r3, r3, #6
 80033ec:	2200      	movs	r2, #0
 80033ee:	63bb      	str	r3, [r7, #56]	; 0x38
 80033f0:	63fa      	str	r2, [r7, #60]	; 0x3c
 80033f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80033f8:	633b      	str	r3, [r7, #48]	; 0x30
 80033fa:	2300      	movs	r3, #0
 80033fc:	637b      	str	r3, [r7, #52]	; 0x34
 80033fe:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003402:	4622      	mov	r2, r4
 8003404:	462b      	mov	r3, r5
 8003406:	f04f 0000 	mov.w	r0, #0
 800340a:	f04f 0100 	mov.w	r1, #0
 800340e:	0159      	lsls	r1, r3, #5
 8003410:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003414:	0150      	lsls	r0, r2, #5
 8003416:	4602      	mov	r2, r0
 8003418:	460b      	mov	r3, r1
 800341a:	4621      	mov	r1, r4
 800341c:	1a51      	subs	r1, r2, r1
 800341e:	6139      	str	r1, [r7, #16]
 8003420:	4629      	mov	r1, r5
 8003422:	eb63 0301 	sbc.w	r3, r3, r1
 8003426:	617b      	str	r3, [r7, #20]
 8003428:	f04f 0200 	mov.w	r2, #0
 800342c:	f04f 0300 	mov.w	r3, #0
 8003430:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003434:	4659      	mov	r1, fp
 8003436:	018b      	lsls	r3, r1, #6
 8003438:	4651      	mov	r1, sl
 800343a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800343e:	4651      	mov	r1, sl
 8003440:	018a      	lsls	r2, r1, #6
 8003442:	4651      	mov	r1, sl
 8003444:	ebb2 0801 	subs.w	r8, r2, r1
 8003448:	4659      	mov	r1, fp
 800344a:	eb63 0901 	sbc.w	r9, r3, r1
 800344e:	f04f 0200 	mov.w	r2, #0
 8003452:	f04f 0300 	mov.w	r3, #0
 8003456:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800345a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800345e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003462:	4690      	mov	r8, r2
 8003464:	4699      	mov	r9, r3
 8003466:	4623      	mov	r3, r4
 8003468:	eb18 0303 	adds.w	r3, r8, r3
 800346c:	60bb      	str	r3, [r7, #8]
 800346e:	462b      	mov	r3, r5
 8003470:	eb49 0303 	adc.w	r3, r9, r3
 8003474:	60fb      	str	r3, [r7, #12]
 8003476:	f04f 0200 	mov.w	r2, #0
 800347a:	f04f 0300 	mov.w	r3, #0
 800347e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003482:	4629      	mov	r1, r5
 8003484:	024b      	lsls	r3, r1, #9
 8003486:	4621      	mov	r1, r4
 8003488:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800348c:	4621      	mov	r1, r4
 800348e:	024a      	lsls	r2, r1, #9
 8003490:	4610      	mov	r0, r2
 8003492:	4619      	mov	r1, r3
 8003494:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003496:	2200      	movs	r2, #0
 8003498:	62bb      	str	r3, [r7, #40]	; 0x28
 800349a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800349c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80034a0:	f7fc fefe 	bl	80002a0 <__aeabi_uldivmod>
 80034a4:	4602      	mov	r2, r0
 80034a6:	460b      	mov	r3, r1
 80034a8:	4613      	mov	r3, r2
 80034aa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80034ac:	e058      	b.n	8003560 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80034ae:	4b38      	ldr	r3, [pc, #224]	; (8003590 <HAL_RCC_GetSysClockFreq+0x200>)
 80034b0:	685b      	ldr	r3, [r3, #4]
 80034b2:	099b      	lsrs	r3, r3, #6
 80034b4:	2200      	movs	r2, #0
 80034b6:	4618      	mov	r0, r3
 80034b8:	4611      	mov	r1, r2
 80034ba:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80034be:	623b      	str	r3, [r7, #32]
 80034c0:	2300      	movs	r3, #0
 80034c2:	627b      	str	r3, [r7, #36]	; 0x24
 80034c4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80034c8:	4642      	mov	r2, r8
 80034ca:	464b      	mov	r3, r9
 80034cc:	f04f 0000 	mov.w	r0, #0
 80034d0:	f04f 0100 	mov.w	r1, #0
 80034d4:	0159      	lsls	r1, r3, #5
 80034d6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80034da:	0150      	lsls	r0, r2, #5
 80034dc:	4602      	mov	r2, r0
 80034de:	460b      	mov	r3, r1
 80034e0:	4641      	mov	r1, r8
 80034e2:	ebb2 0a01 	subs.w	sl, r2, r1
 80034e6:	4649      	mov	r1, r9
 80034e8:	eb63 0b01 	sbc.w	fp, r3, r1
 80034ec:	f04f 0200 	mov.w	r2, #0
 80034f0:	f04f 0300 	mov.w	r3, #0
 80034f4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80034f8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80034fc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003500:	ebb2 040a 	subs.w	r4, r2, sl
 8003504:	eb63 050b 	sbc.w	r5, r3, fp
 8003508:	f04f 0200 	mov.w	r2, #0
 800350c:	f04f 0300 	mov.w	r3, #0
 8003510:	00eb      	lsls	r3, r5, #3
 8003512:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003516:	00e2      	lsls	r2, r4, #3
 8003518:	4614      	mov	r4, r2
 800351a:	461d      	mov	r5, r3
 800351c:	4643      	mov	r3, r8
 800351e:	18e3      	adds	r3, r4, r3
 8003520:	603b      	str	r3, [r7, #0]
 8003522:	464b      	mov	r3, r9
 8003524:	eb45 0303 	adc.w	r3, r5, r3
 8003528:	607b      	str	r3, [r7, #4]
 800352a:	f04f 0200 	mov.w	r2, #0
 800352e:	f04f 0300 	mov.w	r3, #0
 8003532:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003536:	4629      	mov	r1, r5
 8003538:	028b      	lsls	r3, r1, #10
 800353a:	4621      	mov	r1, r4
 800353c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003540:	4621      	mov	r1, r4
 8003542:	028a      	lsls	r2, r1, #10
 8003544:	4610      	mov	r0, r2
 8003546:	4619      	mov	r1, r3
 8003548:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800354a:	2200      	movs	r2, #0
 800354c:	61bb      	str	r3, [r7, #24]
 800354e:	61fa      	str	r2, [r7, #28]
 8003550:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003554:	f7fc fea4 	bl	80002a0 <__aeabi_uldivmod>
 8003558:	4602      	mov	r2, r0
 800355a:	460b      	mov	r3, r1
 800355c:	4613      	mov	r3, r2
 800355e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003560:	4b0b      	ldr	r3, [pc, #44]	; (8003590 <HAL_RCC_GetSysClockFreq+0x200>)
 8003562:	685b      	ldr	r3, [r3, #4]
 8003564:	0c1b      	lsrs	r3, r3, #16
 8003566:	f003 0303 	and.w	r3, r3, #3
 800356a:	3301      	adds	r3, #1
 800356c:	005b      	lsls	r3, r3, #1
 800356e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003570:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003572:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003574:	fbb2 f3f3 	udiv	r3, r2, r3
 8003578:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800357a:	e002      	b.n	8003582 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800357c:	4b05      	ldr	r3, [pc, #20]	; (8003594 <HAL_RCC_GetSysClockFreq+0x204>)
 800357e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003580:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003582:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003584:	4618      	mov	r0, r3
 8003586:	3750      	adds	r7, #80	; 0x50
 8003588:	46bd      	mov	sp, r7
 800358a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800358e:	bf00      	nop
 8003590:	40023800 	.word	0x40023800
 8003594:	00f42400 	.word	0x00f42400
 8003598:	007a1200 	.word	0x007a1200

0800359c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800359c:	b480      	push	{r7}
 800359e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80035a0:	4b03      	ldr	r3, [pc, #12]	; (80035b0 <HAL_RCC_GetHCLKFreq+0x14>)
 80035a2:	681b      	ldr	r3, [r3, #0]
}
 80035a4:	4618      	mov	r0, r3
 80035a6:	46bd      	mov	sp, r7
 80035a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ac:	4770      	bx	lr
 80035ae:	bf00      	nop
 80035b0:	2000000c 	.word	0x2000000c

080035b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80035b4:	b580      	push	{r7, lr}
 80035b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80035b8:	f7ff fff0 	bl	800359c <HAL_RCC_GetHCLKFreq>
 80035bc:	4602      	mov	r2, r0
 80035be:	4b05      	ldr	r3, [pc, #20]	; (80035d4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80035c0:	689b      	ldr	r3, [r3, #8]
 80035c2:	0a9b      	lsrs	r3, r3, #10
 80035c4:	f003 0307 	and.w	r3, r3, #7
 80035c8:	4903      	ldr	r1, [pc, #12]	; (80035d8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80035ca:	5ccb      	ldrb	r3, [r1, r3]
 80035cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80035d0:	4618      	mov	r0, r3
 80035d2:	bd80      	pop	{r7, pc}
 80035d4:	40023800 	.word	0x40023800
 80035d8:	08005cf8 	.word	0x08005cf8

080035dc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80035dc:	b580      	push	{r7, lr}
 80035de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80035e0:	f7ff ffdc 	bl	800359c <HAL_RCC_GetHCLKFreq>
 80035e4:	4602      	mov	r2, r0
 80035e6:	4b05      	ldr	r3, [pc, #20]	; (80035fc <HAL_RCC_GetPCLK2Freq+0x20>)
 80035e8:	689b      	ldr	r3, [r3, #8]
 80035ea:	0b5b      	lsrs	r3, r3, #13
 80035ec:	f003 0307 	and.w	r3, r3, #7
 80035f0:	4903      	ldr	r1, [pc, #12]	; (8003600 <HAL_RCC_GetPCLK2Freq+0x24>)
 80035f2:	5ccb      	ldrb	r3, [r1, r3]
 80035f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80035f8:	4618      	mov	r0, r3
 80035fa:	bd80      	pop	{r7, pc}
 80035fc:	40023800 	.word	0x40023800
 8003600:	08005cf8 	.word	0x08005cf8

08003604 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003604:	b580      	push	{r7, lr}
 8003606:	b082      	sub	sp, #8
 8003608:	af00      	add	r7, sp, #0
 800360a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	2b00      	cmp	r3, #0
 8003610:	d101      	bne.n	8003616 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003612:	2301      	movs	r3, #1
 8003614:	e03f      	b.n	8003696 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800361c:	b2db      	uxtb	r3, r3
 800361e:	2b00      	cmp	r3, #0
 8003620:	d106      	bne.n	8003630 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	2200      	movs	r2, #0
 8003626:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800362a:	6878      	ldr	r0, [r7, #4]
 800362c:	f7ff fab0 	bl	8002b90 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	2224      	movs	r2, #36	; 0x24
 8003634:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	68da      	ldr	r2, [r3, #12]
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003646:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003648:	6878      	ldr	r0, [r7, #4]
 800364a:	f000 f929 	bl	80038a0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	691a      	ldr	r2, [r3, #16]
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800365c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	695a      	ldr	r2, [r3, #20]
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800366c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	68da      	ldr	r2, [r3, #12]
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800367c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	2200      	movs	r2, #0
 8003682:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	2220      	movs	r2, #32
 8003688:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	2220      	movs	r2, #32
 8003690:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003694:	2300      	movs	r3, #0
}
 8003696:	4618      	mov	r0, r3
 8003698:	3708      	adds	r7, #8
 800369a:	46bd      	mov	sp, r7
 800369c:	bd80      	pop	{r7, pc}

0800369e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800369e:	b580      	push	{r7, lr}
 80036a0:	b08a      	sub	sp, #40	; 0x28
 80036a2:	af02      	add	r7, sp, #8
 80036a4:	60f8      	str	r0, [r7, #12]
 80036a6:	60b9      	str	r1, [r7, #8]
 80036a8:	603b      	str	r3, [r7, #0]
 80036aa:	4613      	mov	r3, r2
 80036ac:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80036ae:	2300      	movs	r3, #0
 80036b0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036b8:	b2db      	uxtb	r3, r3
 80036ba:	2b20      	cmp	r3, #32
 80036bc:	d17c      	bne.n	80037b8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80036be:	68bb      	ldr	r3, [r7, #8]
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d002      	beq.n	80036ca <HAL_UART_Transmit+0x2c>
 80036c4:	88fb      	ldrh	r3, [r7, #6]
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d101      	bne.n	80036ce <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80036ca:	2301      	movs	r3, #1
 80036cc:	e075      	b.n	80037ba <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80036d4:	2b01      	cmp	r3, #1
 80036d6:	d101      	bne.n	80036dc <HAL_UART_Transmit+0x3e>
 80036d8:	2302      	movs	r3, #2
 80036da:	e06e      	b.n	80037ba <HAL_UART_Transmit+0x11c>
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	2201      	movs	r2, #1
 80036e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	2200      	movs	r2, #0
 80036e8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	2221      	movs	r2, #33	; 0x21
 80036ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80036f2:	f7fd ff61 	bl	80015b8 <HAL_GetTick>
 80036f6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	88fa      	ldrh	r2, [r7, #6]
 80036fc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	88fa      	ldrh	r2, [r7, #6]
 8003702:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	689b      	ldr	r3, [r3, #8]
 8003708:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800370c:	d108      	bne.n	8003720 <HAL_UART_Transmit+0x82>
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	691b      	ldr	r3, [r3, #16]
 8003712:	2b00      	cmp	r3, #0
 8003714:	d104      	bne.n	8003720 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003716:	2300      	movs	r3, #0
 8003718:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800371a:	68bb      	ldr	r3, [r7, #8]
 800371c:	61bb      	str	r3, [r7, #24]
 800371e:	e003      	b.n	8003728 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003720:	68bb      	ldr	r3, [r7, #8]
 8003722:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003724:	2300      	movs	r3, #0
 8003726:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	2200      	movs	r2, #0
 800372c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003730:	e02a      	b.n	8003788 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003732:	683b      	ldr	r3, [r7, #0]
 8003734:	9300      	str	r3, [sp, #0]
 8003736:	697b      	ldr	r3, [r7, #20]
 8003738:	2200      	movs	r2, #0
 800373a:	2180      	movs	r1, #128	; 0x80
 800373c:	68f8      	ldr	r0, [r7, #12]
 800373e:	f000 f840 	bl	80037c2 <UART_WaitOnFlagUntilTimeout>
 8003742:	4603      	mov	r3, r0
 8003744:	2b00      	cmp	r3, #0
 8003746:	d001      	beq.n	800374c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003748:	2303      	movs	r3, #3
 800374a:	e036      	b.n	80037ba <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800374c:	69fb      	ldr	r3, [r7, #28]
 800374e:	2b00      	cmp	r3, #0
 8003750:	d10b      	bne.n	800376a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003752:	69bb      	ldr	r3, [r7, #24]
 8003754:	881b      	ldrh	r3, [r3, #0]
 8003756:	461a      	mov	r2, r3
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003760:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003762:	69bb      	ldr	r3, [r7, #24]
 8003764:	3302      	adds	r3, #2
 8003766:	61bb      	str	r3, [r7, #24]
 8003768:	e007      	b.n	800377a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800376a:	69fb      	ldr	r3, [r7, #28]
 800376c:	781a      	ldrb	r2, [r3, #0]
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003774:	69fb      	ldr	r3, [r7, #28]
 8003776:	3301      	adds	r3, #1
 8003778:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800377e:	b29b      	uxth	r3, r3
 8003780:	3b01      	subs	r3, #1
 8003782:	b29a      	uxth	r2, r3
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800378c:	b29b      	uxth	r3, r3
 800378e:	2b00      	cmp	r3, #0
 8003790:	d1cf      	bne.n	8003732 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003792:	683b      	ldr	r3, [r7, #0]
 8003794:	9300      	str	r3, [sp, #0]
 8003796:	697b      	ldr	r3, [r7, #20]
 8003798:	2200      	movs	r2, #0
 800379a:	2140      	movs	r1, #64	; 0x40
 800379c:	68f8      	ldr	r0, [r7, #12]
 800379e:	f000 f810 	bl	80037c2 <UART_WaitOnFlagUntilTimeout>
 80037a2:	4603      	mov	r3, r0
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d001      	beq.n	80037ac <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80037a8:	2303      	movs	r3, #3
 80037aa:	e006      	b.n	80037ba <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	2220      	movs	r2, #32
 80037b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80037b4:	2300      	movs	r3, #0
 80037b6:	e000      	b.n	80037ba <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80037b8:	2302      	movs	r3, #2
  }
}
 80037ba:	4618      	mov	r0, r3
 80037bc:	3720      	adds	r7, #32
 80037be:	46bd      	mov	sp, r7
 80037c0:	bd80      	pop	{r7, pc}

080037c2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80037c2:	b580      	push	{r7, lr}
 80037c4:	b090      	sub	sp, #64	; 0x40
 80037c6:	af00      	add	r7, sp, #0
 80037c8:	60f8      	str	r0, [r7, #12]
 80037ca:	60b9      	str	r1, [r7, #8]
 80037cc:	603b      	str	r3, [r7, #0]
 80037ce:	4613      	mov	r3, r2
 80037d0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80037d2:	e050      	b.n	8003876 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80037d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80037d6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80037da:	d04c      	beq.n	8003876 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80037dc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d007      	beq.n	80037f2 <UART_WaitOnFlagUntilTimeout+0x30>
 80037e2:	f7fd fee9 	bl	80015b8 <HAL_GetTick>
 80037e6:	4602      	mov	r2, r0
 80037e8:	683b      	ldr	r3, [r7, #0]
 80037ea:	1ad3      	subs	r3, r2, r3
 80037ec:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80037ee:	429a      	cmp	r2, r3
 80037f0:	d241      	bcs.n	8003876 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	330c      	adds	r3, #12
 80037f8:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037fc:	e853 3f00 	ldrex	r3, [r3]
 8003800:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003804:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003808:	63fb      	str	r3, [r7, #60]	; 0x3c
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	330c      	adds	r3, #12
 8003810:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003812:	637a      	str	r2, [r7, #52]	; 0x34
 8003814:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003816:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003818:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800381a:	e841 2300 	strex	r3, r2, [r1]
 800381e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003820:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003822:	2b00      	cmp	r3, #0
 8003824:	d1e5      	bne.n	80037f2 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	3314      	adds	r3, #20
 800382c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800382e:	697b      	ldr	r3, [r7, #20]
 8003830:	e853 3f00 	ldrex	r3, [r3]
 8003834:	613b      	str	r3, [r7, #16]
   return(result);
 8003836:	693b      	ldr	r3, [r7, #16]
 8003838:	f023 0301 	bic.w	r3, r3, #1
 800383c:	63bb      	str	r3, [r7, #56]	; 0x38
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	3314      	adds	r3, #20
 8003844:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003846:	623a      	str	r2, [r7, #32]
 8003848:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800384a:	69f9      	ldr	r1, [r7, #28]
 800384c:	6a3a      	ldr	r2, [r7, #32]
 800384e:	e841 2300 	strex	r3, r2, [r1]
 8003852:	61bb      	str	r3, [r7, #24]
   return(result);
 8003854:	69bb      	ldr	r3, [r7, #24]
 8003856:	2b00      	cmp	r3, #0
 8003858:	d1e5      	bne.n	8003826 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	2220      	movs	r2, #32
 800385e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	2220      	movs	r2, #32
 8003866:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	2200      	movs	r2, #0
 800386e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003872:	2303      	movs	r3, #3
 8003874:	e00f      	b.n	8003896 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	681a      	ldr	r2, [r3, #0]
 800387c:	68bb      	ldr	r3, [r7, #8]
 800387e:	4013      	ands	r3, r2
 8003880:	68ba      	ldr	r2, [r7, #8]
 8003882:	429a      	cmp	r2, r3
 8003884:	bf0c      	ite	eq
 8003886:	2301      	moveq	r3, #1
 8003888:	2300      	movne	r3, #0
 800388a:	b2db      	uxtb	r3, r3
 800388c:	461a      	mov	r2, r3
 800388e:	79fb      	ldrb	r3, [r7, #7]
 8003890:	429a      	cmp	r2, r3
 8003892:	d09f      	beq.n	80037d4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003894:	2300      	movs	r3, #0
}
 8003896:	4618      	mov	r0, r3
 8003898:	3740      	adds	r7, #64	; 0x40
 800389a:	46bd      	mov	sp, r7
 800389c:	bd80      	pop	{r7, pc}
	...

080038a0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80038a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80038a4:	b0c0      	sub	sp, #256	; 0x100
 80038a6:	af00      	add	r7, sp, #0
 80038a8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80038ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	691b      	ldr	r3, [r3, #16]
 80038b4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80038b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038bc:	68d9      	ldr	r1, [r3, #12]
 80038be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038c2:	681a      	ldr	r2, [r3, #0]
 80038c4:	ea40 0301 	orr.w	r3, r0, r1
 80038c8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80038ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038ce:	689a      	ldr	r2, [r3, #8]
 80038d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038d4:	691b      	ldr	r3, [r3, #16]
 80038d6:	431a      	orrs	r2, r3
 80038d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038dc:	695b      	ldr	r3, [r3, #20]
 80038de:	431a      	orrs	r2, r3
 80038e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038e4:	69db      	ldr	r3, [r3, #28]
 80038e6:	4313      	orrs	r3, r2
 80038e8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80038ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	68db      	ldr	r3, [r3, #12]
 80038f4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80038f8:	f021 010c 	bic.w	r1, r1, #12
 80038fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003900:	681a      	ldr	r2, [r3, #0]
 8003902:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003906:	430b      	orrs	r3, r1
 8003908:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800390a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	695b      	ldr	r3, [r3, #20]
 8003912:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003916:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800391a:	6999      	ldr	r1, [r3, #24]
 800391c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003920:	681a      	ldr	r2, [r3, #0]
 8003922:	ea40 0301 	orr.w	r3, r0, r1
 8003926:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003928:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800392c:	681a      	ldr	r2, [r3, #0]
 800392e:	4b8f      	ldr	r3, [pc, #572]	; (8003b6c <UART_SetConfig+0x2cc>)
 8003930:	429a      	cmp	r2, r3
 8003932:	d005      	beq.n	8003940 <UART_SetConfig+0xa0>
 8003934:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003938:	681a      	ldr	r2, [r3, #0]
 800393a:	4b8d      	ldr	r3, [pc, #564]	; (8003b70 <UART_SetConfig+0x2d0>)
 800393c:	429a      	cmp	r2, r3
 800393e:	d104      	bne.n	800394a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003940:	f7ff fe4c 	bl	80035dc <HAL_RCC_GetPCLK2Freq>
 8003944:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003948:	e003      	b.n	8003952 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800394a:	f7ff fe33 	bl	80035b4 <HAL_RCC_GetPCLK1Freq>
 800394e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003952:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003956:	69db      	ldr	r3, [r3, #28]
 8003958:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800395c:	f040 810c 	bne.w	8003b78 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003960:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003964:	2200      	movs	r2, #0
 8003966:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800396a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800396e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003972:	4622      	mov	r2, r4
 8003974:	462b      	mov	r3, r5
 8003976:	1891      	adds	r1, r2, r2
 8003978:	65b9      	str	r1, [r7, #88]	; 0x58
 800397a:	415b      	adcs	r3, r3
 800397c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800397e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003982:	4621      	mov	r1, r4
 8003984:	eb12 0801 	adds.w	r8, r2, r1
 8003988:	4629      	mov	r1, r5
 800398a:	eb43 0901 	adc.w	r9, r3, r1
 800398e:	f04f 0200 	mov.w	r2, #0
 8003992:	f04f 0300 	mov.w	r3, #0
 8003996:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800399a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800399e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80039a2:	4690      	mov	r8, r2
 80039a4:	4699      	mov	r9, r3
 80039a6:	4623      	mov	r3, r4
 80039a8:	eb18 0303 	adds.w	r3, r8, r3
 80039ac:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80039b0:	462b      	mov	r3, r5
 80039b2:	eb49 0303 	adc.w	r3, r9, r3
 80039b6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80039ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039be:	685b      	ldr	r3, [r3, #4]
 80039c0:	2200      	movs	r2, #0
 80039c2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80039c6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80039ca:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80039ce:	460b      	mov	r3, r1
 80039d0:	18db      	adds	r3, r3, r3
 80039d2:	653b      	str	r3, [r7, #80]	; 0x50
 80039d4:	4613      	mov	r3, r2
 80039d6:	eb42 0303 	adc.w	r3, r2, r3
 80039da:	657b      	str	r3, [r7, #84]	; 0x54
 80039dc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80039e0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80039e4:	f7fc fc5c 	bl	80002a0 <__aeabi_uldivmod>
 80039e8:	4602      	mov	r2, r0
 80039ea:	460b      	mov	r3, r1
 80039ec:	4b61      	ldr	r3, [pc, #388]	; (8003b74 <UART_SetConfig+0x2d4>)
 80039ee:	fba3 2302 	umull	r2, r3, r3, r2
 80039f2:	095b      	lsrs	r3, r3, #5
 80039f4:	011c      	lsls	r4, r3, #4
 80039f6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80039fa:	2200      	movs	r2, #0
 80039fc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003a00:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003a04:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003a08:	4642      	mov	r2, r8
 8003a0a:	464b      	mov	r3, r9
 8003a0c:	1891      	adds	r1, r2, r2
 8003a0e:	64b9      	str	r1, [r7, #72]	; 0x48
 8003a10:	415b      	adcs	r3, r3
 8003a12:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003a14:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003a18:	4641      	mov	r1, r8
 8003a1a:	eb12 0a01 	adds.w	sl, r2, r1
 8003a1e:	4649      	mov	r1, r9
 8003a20:	eb43 0b01 	adc.w	fp, r3, r1
 8003a24:	f04f 0200 	mov.w	r2, #0
 8003a28:	f04f 0300 	mov.w	r3, #0
 8003a2c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003a30:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003a34:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003a38:	4692      	mov	sl, r2
 8003a3a:	469b      	mov	fp, r3
 8003a3c:	4643      	mov	r3, r8
 8003a3e:	eb1a 0303 	adds.w	r3, sl, r3
 8003a42:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003a46:	464b      	mov	r3, r9
 8003a48:	eb4b 0303 	adc.w	r3, fp, r3
 8003a4c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003a50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a54:	685b      	ldr	r3, [r3, #4]
 8003a56:	2200      	movs	r2, #0
 8003a58:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003a5c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003a60:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003a64:	460b      	mov	r3, r1
 8003a66:	18db      	adds	r3, r3, r3
 8003a68:	643b      	str	r3, [r7, #64]	; 0x40
 8003a6a:	4613      	mov	r3, r2
 8003a6c:	eb42 0303 	adc.w	r3, r2, r3
 8003a70:	647b      	str	r3, [r7, #68]	; 0x44
 8003a72:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003a76:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003a7a:	f7fc fc11 	bl	80002a0 <__aeabi_uldivmod>
 8003a7e:	4602      	mov	r2, r0
 8003a80:	460b      	mov	r3, r1
 8003a82:	4611      	mov	r1, r2
 8003a84:	4b3b      	ldr	r3, [pc, #236]	; (8003b74 <UART_SetConfig+0x2d4>)
 8003a86:	fba3 2301 	umull	r2, r3, r3, r1
 8003a8a:	095b      	lsrs	r3, r3, #5
 8003a8c:	2264      	movs	r2, #100	; 0x64
 8003a8e:	fb02 f303 	mul.w	r3, r2, r3
 8003a92:	1acb      	subs	r3, r1, r3
 8003a94:	00db      	lsls	r3, r3, #3
 8003a96:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003a9a:	4b36      	ldr	r3, [pc, #216]	; (8003b74 <UART_SetConfig+0x2d4>)
 8003a9c:	fba3 2302 	umull	r2, r3, r3, r2
 8003aa0:	095b      	lsrs	r3, r3, #5
 8003aa2:	005b      	lsls	r3, r3, #1
 8003aa4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003aa8:	441c      	add	r4, r3
 8003aaa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003aae:	2200      	movs	r2, #0
 8003ab0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003ab4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003ab8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003abc:	4642      	mov	r2, r8
 8003abe:	464b      	mov	r3, r9
 8003ac0:	1891      	adds	r1, r2, r2
 8003ac2:	63b9      	str	r1, [r7, #56]	; 0x38
 8003ac4:	415b      	adcs	r3, r3
 8003ac6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003ac8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003acc:	4641      	mov	r1, r8
 8003ace:	1851      	adds	r1, r2, r1
 8003ad0:	6339      	str	r1, [r7, #48]	; 0x30
 8003ad2:	4649      	mov	r1, r9
 8003ad4:	414b      	adcs	r3, r1
 8003ad6:	637b      	str	r3, [r7, #52]	; 0x34
 8003ad8:	f04f 0200 	mov.w	r2, #0
 8003adc:	f04f 0300 	mov.w	r3, #0
 8003ae0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003ae4:	4659      	mov	r1, fp
 8003ae6:	00cb      	lsls	r3, r1, #3
 8003ae8:	4651      	mov	r1, sl
 8003aea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003aee:	4651      	mov	r1, sl
 8003af0:	00ca      	lsls	r2, r1, #3
 8003af2:	4610      	mov	r0, r2
 8003af4:	4619      	mov	r1, r3
 8003af6:	4603      	mov	r3, r0
 8003af8:	4642      	mov	r2, r8
 8003afa:	189b      	adds	r3, r3, r2
 8003afc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003b00:	464b      	mov	r3, r9
 8003b02:	460a      	mov	r2, r1
 8003b04:	eb42 0303 	adc.w	r3, r2, r3
 8003b08:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003b0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b10:	685b      	ldr	r3, [r3, #4]
 8003b12:	2200      	movs	r2, #0
 8003b14:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003b18:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003b1c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003b20:	460b      	mov	r3, r1
 8003b22:	18db      	adds	r3, r3, r3
 8003b24:	62bb      	str	r3, [r7, #40]	; 0x28
 8003b26:	4613      	mov	r3, r2
 8003b28:	eb42 0303 	adc.w	r3, r2, r3
 8003b2c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003b2e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003b32:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003b36:	f7fc fbb3 	bl	80002a0 <__aeabi_uldivmod>
 8003b3a:	4602      	mov	r2, r0
 8003b3c:	460b      	mov	r3, r1
 8003b3e:	4b0d      	ldr	r3, [pc, #52]	; (8003b74 <UART_SetConfig+0x2d4>)
 8003b40:	fba3 1302 	umull	r1, r3, r3, r2
 8003b44:	095b      	lsrs	r3, r3, #5
 8003b46:	2164      	movs	r1, #100	; 0x64
 8003b48:	fb01 f303 	mul.w	r3, r1, r3
 8003b4c:	1ad3      	subs	r3, r2, r3
 8003b4e:	00db      	lsls	r3, r3, #3
 8003b50:	3332      	adds	r3, #50	; 0x32
 8003b52:	4a08      	ldr	r2, [pc, #32]	; (8003b74 <UART_SetConfig+0x2d4>)
 8003b54:	fba2 2303 	umull	r2, r3, r2, r3
 8003b58:	095b      	lsrs	r3, r3, #5
 8003b5a:	f003 0207 	and.w	r2, r3, #7
 8003b5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	4422      	add	r2, r4
 8003b66:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003b68:	e105      	b.n	8003d76 <UART_SetConfig+0x4d6>
 8003b6a:	bf00      	nop
 8003b6c:	40011000 	.word	0x40011000
 8003b70:	40011400 	.word	0x40011400
 8003b74:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003b78:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003b82:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003b86:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003b8a:	4642      	mov	r2, r8
 8003b8c:	464b      	mov	r3, r9
 8003b8e:	1891      	adds	r1, r2, r2
 8003b90:	6239      	str	r1, [r7, #32]
 8003b92:	415b      	adcs	r3, r3
 8003b94:	627b      	str	r3, [r7, #36]	; 0x24
 8003b96:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003b9a:	4641      	mov	r1, r8
 8003b9c:	1854      	adds	r4, r2, r1
 8003b9e:	4649      	mov	r1, r9
 8003ba0:	eb43 0501 	adc.w	r5, r3, r1
 8003ba4:	f04f 0200 	mov.w	r2, #0
 8003ba8:	f04f 0300 	mov.w	r3, #0
 8003bac:	00eb      	lsls	r3, r5, #3
 8003bae:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003bb2:	00e2      	lsls	r2, r4, #3
 8003bb4:	4614      	mov	r4, r2
 8003bb6:	461d      	mov	r5, r3
 8003bb8:	4643      	mov	r3, r8
 8003bba:	18e3      	adds	r3, r4, r3
 8003bbc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003bc0:	464b      	mov	r3, r9
 8003bc2:	eb45 0303 	adc.w	r3, r5, r3
 8003bc6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003bca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003bce:	685b      	ldr	r3, [r3, #4]
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003bd6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003bda:	f04f 0200 	mov.w	r2, #0
 8003bde:	f04f 0300 	mov.w	r3, #0
 8003be2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003be6:	4629      	mov	r1, r5
 8003be8:	008b      	lsls	r3, r1, #2
 8003bea:	4621      	mov	r1, r4
 8003bec:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003bf0:	4621      	mov	r1, r4
 8003bf2:	008a      	lsls	r2, r1, #2
 8003bf4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003bf8:	f7fc fb52 	bl	80002a0 <__aeabi_uldivmod>
 8003bfc:	4602      	mov	r2, r0
 8003bfe:	460b      	mov	r3, r1
 8003c00:	4b60      	ldr	r3, [pc, #384]	; (8003d84 <UART_SetConfig+0x4e4>)
 8003c02:	fba3 2302 	umull	r2, r3, r3, r2
 8003c06:	095b      	lsrs	r3, r3, #5
 8003c08:	011c      	lsls	r4, r3, #4
 8003c0a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003c0e:	2200      	movs	r2, #0
 8003c10:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003c14:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003c18:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003c1c:	4642      	mov	r2, r8
 8003c1e:	464b      	mov	r3, r9
 8003c20:	1891      	adds	r1, r2, r2
 8003c22:	61b9      	str	r1, [r7, #24]
 8003c24:	415b      	adcs	r3, r3
 8003c26:	61fb      	str	r3, [r7, #28]
 8003c28:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003c2c:	4641      	mov	r1, r8
 8003c2e:	1851      	adds	r1, r2, r1
 8003c30:	6139      	str	r1, [r7, #16]
 8003c32:	4649      	mov	r1, r9
 8003c34:	414b      	adcs	r3, r1
 8003c36:	617b      	str	r3, [r7, #20]
 8003c38:	f04f 0200 	mov.w	r2, #0
 8003c3c:	f04f 0300 	mov.w	r3, #0
 8003c40:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003c44:	4659      	mov	r1, fp
 8003c46:	00cb      	lsls	r3, r1, #3
 8003c48:	4651      	mov	r1, sl
 8003c4a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003c4e:	4651      	mov	r1, sl
 8003c50:	00ca      	lsls	r2, r1, #3
 8003c52:	4610      	mov	r0, r2
 8003c54:	4619      	mov	r1, r3
 8003c56:	4603      	mov	r3, r0
 8003c58:	4642      	mov	r2, r8
 8003c5a:	189b      	adds	r3, r3, r2
 8003c5c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003c60:	464b      	mov	r3, r9
 8003c62:	460a      	mov	r2, r1
 8003c64:	eb42 0303 	adc.w	r3, r2, r3
 8003c68:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003c6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c70:	685b      	ldr	r3, [r3, #4]
 8003c72:	2200      	movs	r2, #0
 8003c74:	67bb      	str	r3, [r7, #120]	; 0x78
 8003c76:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003c78:	f04f 0200 	mov.w	r2, #0
 8003c7c:	f04f 0300 	mov.w	r3, #0
 8003c80:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003c84:	4649      	mov	r1, r9
 8003c86:	008b      	lsls	r3, r1, #2
 8003c88:	4641      	mov	r1, r8
 8003c8a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003c8e:	4641      	mov	r1, r8
 8003c90:	008a      	lsls	r2, r1, #2
 8003c92:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003c96:	f7fc fb03 	bl	80002a0 <__aeabi_uldivmod>
 8003c9a:	4602      	mov	r2, r0
 8003c9c:	460b      	mov	r3, r1
 8003c9e:	4b39      	ldr	r3, [pc, #228]	; (8003d84 <UART_SetConfig+0x4e4>)
 8003ca0:	fba3 1302 	umull	r1, r3, r3, r2
 8003ca4:	095b      	lsrs	r3, r3, #5
 8003ca6:	2164      	movs	r1, #100	; 0x64
 8003ca8:	fb01 f303 	mul.w	r3, r1, r3
 8003cac:	1ad3      	subs	r3, r2, r3
 8003cae:	011b      	lsls	r3, r3, #4
 8003cb0:	3332      	adds	r3, #50	; 0x32
 8003cb2:	4a34      	ldr	r2, [pc, #208]	; (8003d84 <UART_SetConfig+0x4e4>)
 8003cb4:	fba2 2303 	umull	r2, r3, r2, r3
 8003cb8:	095b      	lsrs	r3, r3, #5
 8003cba:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003cbe:	441c      	add	r4, r3
 8003cc0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003cc4:	2200      	movs	r2, #0
 8003cc6:	673b      	str	r3, [r7, #112]	; 0x70
 8003cc8:	677a      	str	r2, [r7, #116]	; 0x74
 8003cca:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003cce:	4642      	mov	r2, r8
 8003cd0:	464b      	mov	r3, r9
 8003cd2:	1891      	adds	r1, r2, r2
 8003cd4:	60b9      	str	r1, [r7, #8]
 8003cd6:	415b      	adcs	r3, r3
 8003cd8:	60fb      	str	r3, [r7, #12]
 8003cda:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003cde:	4641      	mov	r1, r8
 8003ce0:	1851      	adds	r1, r2, r1
 8003ce2:	6039      	str	r1, [r7, #0]
 8003ce4:	4649      	mov	r1, r9
 8003ce6:	414b      	adcs	r3, r1
 8003ce8:	607b      	str	r3, [r7, #4]
 8003cea:	f04f 0200 	mov.w	r2, #0
 8003cee:	f04f 0300 	mov.w	r3, #0
 8003cf2:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003cf6:	4659      	mov	r1, fp
 8003cf8:	00cb      	lsls	r3, r1, #3
 8003cfa:	4651      	mov	r1, sl
 8003cfc:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003d00:	4651      	mov	r1, sl
 8003d02:	00ca      	lsls	r2, r1, #3
 8003d04:	4610      	mov	r0, r2
 8003d06:	4619      	mov	r1, r3
 8003d08:	4603      	mov	r3, r0
 8003d0a:	4642      	mov	r2, r8
 8003d0c:	189b      	adds	r3, r3, r2
 8003d0e:	66bb      	str	r3, [r7, #104]	; 0x68
 8003d10:	464b      	mov	r3, r9
 8003d12:	460a      	mov	r2, r1
 8003d14:	eb42 0303 	adc.w	r3, r2, r3
 8003d18:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003d1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d1e:	685b      	ldr	r3, [r3, #4]
 8003d20:	2200      	movs	r2, #0
 8003d22:	663b      	str	r3, [r7, #96]	; 0x60
 8003d24:	667a      	str	r2, [r7, #100]	; 0x64
 8003d26:	f04f 0200 	mov.w	r2, #0
 8003d2a:	f04f 0300 	mov.w	r3, #0
 8003d2e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003d32:	4649      	mov	r1, r9
 8003d34:	008b      	lsls	r3, r1, #2
 8003d36:	4641      	mov	r1, r8
 8003d38:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003d3c:	4641      	mov	r1, r8
 8003d3e:	008a      	lsls	r2, r1, #2
 8003d40:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003d44:	f7fc faac 	bl	80002a0 <__aeabi_uldivmod>
 8003d48:	4602      	mov	r2, r0
 8003d4a:	460b      	mov	r3, r1
 8003d4c:	4b0d      	ldr	r3, [pc, #52]	; (8003d84 <UART_SetConfig+0x4e4>)
 8003d4e:	fba3 1302 	umull	r1, r3, r3, r2
 8003d52:	095b      	lsrs	r3, r3, #5
 8003d54:	2164      	movs	r1, #100	; 0x64
 8003d56:	fb01 f303 	mul.w	r3, r1, r3
 8003d5a:	1ad3      	subs	r3, r2, r3
 8003d5c:	011b      	lsls	r3, r3, #4
 8003d5e:	3332      	adds	r3, #50	; 0x32
 8003d60:	4a08      	ldr	r2, [pc, #32]	; (8003d84 <UART_SetConfig+0x4e4>)
 8003d62:	fba2 2303 	umull	r2, r3, r2, r3
 8003d66:	095b      	lsrs	r3, r3, #5
 8003d68:	f003 020f 	and.w	r2, r3, #15
 8003d6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	4422      	add	r2, r4
 8003d74:	609a      	str	r2, [r3, #8]
}
 8003d76:	bf00      	nop
 8003d78:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003d7c:	46bd      	mov	sp, r7
 8003d7e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003d82:	bf00      	nop
 8003d84:	51eb851f 	.word	0x51eb851f

08003d88 <main>:
/**
 * @brief  Main program
 * @param  None
 * @retval None
 */
int main(void) {
 8003d88:	b580      	push	{r7, lr}
 8003d8a:	b084      	sub	sp, #16
 8003d8c:	af00      	add	r7, sp, #0
	 duration should be kept 1ms since PPP_TIMEOUT_VALUEs are defined and
	 handled in milliseconds basis.
	 - Set NVIC Group Priority to 4
	 - Low Level Initialization
	 */
	HAL_Init();
 8003d8e:	f7fd fbb3 	bl	80014f8 <HAL_Init>
	SystemClock_Config();
 8003d92:	f000 fafd 	bl	8004390 <SystemClock_Config>

	delay_t delayFSM;

	delayInit(&delayFSM, FSM_UPDATE_PERIOD);
 8003d96:	1d3b      	adds	r3, r7, #4
 8003d98:	210a      	movs	r1, #10
 8003d9a:	4618      	mov	r0, r3
 8003d9c:	f7fc fc16 	bl	80005cc <delayInit>
	fsm_init();
 8003da0:	f000 f8a8 	bl	8003ef4 <fsm_init>

	while(true){
		if (delayRead(&delayFSM)) {	//Acciones al cumplir el periodo de interrupción
 8003da4:	1d3b      	adds	r3, r7, #4
 8003da6:	4618      	mov	r0, r3
 8003da8:	f7fc fc3a 	bl	8000620 <delayRead>
 8003dac:	4603      	mov	r3, r0
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d0f8      	beq.n	8003da4 <main+0x1c>
			fsm_update();
 8003db2:	f000 f801 	bl	8003db8 <fsm_update>
		if (delayRead(&delayFSM)) {	//Acciones al cumplir el periodo de interrupción
 8003db6:	e7f5      	b.n	8003da4 <main+0x1c>

08003db8 <fsm_update>:
		}
	}
}

static void fsm_update(){
 8003db8:	b580      	push	{r7, lr}
 8003dba:	af00      	add	r7, sp, #0
	switch(fsm_state) {
 8003dbc:	4b43      	ldr	r3, [pc, #268]	; (8003ecc <fsm_update+0x114>)
 8003dbe:	781b      	ldrb	r3, [r3, #0]
 8003dc0:	2b08      	cmp	r3, #8
 8003dc2:	d879      	bhi.n	8003eb8 <fsm_update+0x100>
 8003dc4:	a201      	add	r2, pc, #4	; (adr r2, 8003dcc <fsm_update+0x14>)
 8003dc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dca:	bf00      	nop
 8003dcc:	08003df1 	.word	0x08003df1
 8003dd0:	08003e03 	.word	0x08003e03
 8003dd4:	08003e15 	.word	0x08003e15
 8003dd8:	08003e25 	.word	0x08003e25
 8003ddc:	08003e4f 	.word	0x08003e4f
 8003de0:	08003e61 	.word	0x08003e61
 8003de4:	08003e91 	.word	0x08003e91
 8003de8:	08003ea3 	.word	0x08003ea3
 8003dec:	08003eab 	.word	0x08003eab
	case FSM_INIT: {
		LOG("[FSM_INIT]\n");
 8003df0:	4837      	ldr	r0, [pc, #220]	; (8003ed0 <fsm_update+0x118>)
 8003df2:	f000 fac1 	bl	8004378 <LOG>
		fsm_init();
 8003df6:	f000 f87d 	bl	8003ef4 <fsm_init>
		fsm_state = FSM_READ_FIRMWARE_PN532;
 8003dfa:	4b34      	ldr	r3, [pc, #208]	; (8003ecc <fsm_update+0x114>)
 8003dfc:	2201      	movs	r2, #1
 8003dfe:	701a      	strb	r2, [r3, #0]
		break;
 8003e00:	e061      	b.n	8003ec6 <fsm_update+0x10e>
	}
	case FSM_READ_FIRMWARE_PN532: {
		LOG("[FSM_READ_FIRMWARE_PN532]\n");
 8003e02:	4834      	ldr	r0, [pc, #208]	; (8003ed4 <fsm_update+0x11c>)
 8003e04:	f000 fab8 	bl	8004378 <LOG>
		read_firmware_pn532();
 8003e08:	f000 f8a0 	bl	8003f4c <read_firmware_pn532>
		fsm_state=FSM_CONFIGURE_PN532;
 8003e0c:	4b2f      	ldr	r3, [pc, #188]	; (8003ecc <fsm_update+0x114>)
 8003e0e:	2202      	movs	r2, #2
 8003e10:	701a      	strb	r2, [r3, #0]
		break;
 8003e12:	e058      	b.n	8003ec6 <fsm_update+0x10e>
	}
	case FSM_CONFIGURE_PN532: {
		LOG("[FSM_CONFIGURE_PN532]\n");
 8003e14:	4830      	ldr	r0, [pc, #192]	; (8003ed8 <fsm_update+0x120>)
 8003e16:	f000 faaf 	bl	8004378 <LOG>
		configure_pn532();
 8003e1a:	f000 f8e9 	bl	8003ff0 <configure_pn532>
		fsm_state = FSM_READY_TO_READ_FULL;
 8003e1e:	4b2b      	ldr	r3, [pc, #172]	; (8003ecc <fsm_update+0x114>)
 8003e20:	2203      	movs	r2, #3
 8003e22:	701a      	strb	r2, [r3, #0]
	}
	case FSM_READY_TO_READ_FULL: {
		//LOG("[FSM_READY_TO_READ_FULL]\n");
		if(read_button()){
 8003e24:	f7fc fbbe 	bl	80005a4 <read_button>
 8003e28:	4603      	mov	r3, r0
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d003      	beq.n	8003e36 <fsm_update+0x7e>
			fsm_state = FSM_READY_TO_READ_SPECIFIC;
 8003e2e:	4b27      	ldr	r3, [pc, #156]	; (8003ecc <fsm_update+0x114>)
 8003e30:	2205      	movs	r2, #5
 8003e32:	701a      	strb	r2, [r3, #0]
			break;
 8003e34:	e047      	b.n	8003ec6 <fsm_update+0x10e>
		}
		if (pn532_get_card_found()){
 8003e36:	f7fc fded 	bl	8000a14 <pn532_get_card_found>
 8003e3a:	4603      	mov	r3, r0
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d003      	beq.n	8003e48 <fsm_update+0x90>
			fsm_state = FSM_READ_FULL_CARD;
 8003e40:	4b22      	ldr	r3, [pc, #136]	; (8003ecc <fsm_update+0x114>)
 8003e42:	2204      	movs	r2, #4
 8003e44:	701a      	strb	r2, [r3, #0]
			break;
 8003e46:	e03e      	b.n	8003ec6 <fsm_update+0x10e>
		}
		init_read_pn532();
 8003e48:	f000 f942 	bl	80040d0 <init_read_pn532>
		break;
 8003e4c:	e03b      	b.n	8003ec6 <fsm_update+0x10e>
	}
	case FSM_READ_FULL_CARD: {
		LOG("[FSM_READ_FULL_CARD]\n");
 8003e4e:	4823      	ldr	r0, [pc, #140]	; (8003edc <fsm_update+0x124>)
 8003e50:	f000 fa92 	bl	8004378 <LOG>
		read_full_card();
 8003e54:	f000 f9b8 	bl	80041c8 <read_full_card>
		fsm_state=FSM_READY_TO_READ_FULL;
 8003e58:	4b1c      	ldr	r3, [pc, #112]	; (8003ecc <fsm_update+0x114>)
 8003e5a:	2203      	movs	r2, #3
 8003e5c:	701a      	strb	r2, [r3, #0]
		break;
 8003e5e:	e032      	b.n	8003ec6 <fsm_update+0x10e>
	}
	case FSM_READY_TO_READ_SPECIFIC: {
		LOG("[FSM_READY_TO_READ_SPECIFIC]\n");
 8003e60:	481f      	ldr	r0, [pc, #124]	; (8003ee0 <fsm_update+0x128>)
 8003e62:	f000 fa89 	bl	8004378 <LOG>
		if(read_button()){
 8003e66:	f7fc fb9d 	bl	80005a4 <read_button>
 8003e6a:	4603      	mov	r3, r0
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d003      	beq.n	8003e78 <fsm_update+0xc0>
			fsm_state = FSM_READY_TO_READ_FULL;
 8003e70:	4b16      	ldr	r3, [pc, #88]	; (8003ecc <fsm_update+0x114>)
 8003e72:	2203      	movs	r2, #3
 8003e74:	701a      	strb	r2, [r3, #0]
			break;
 8003e76:	e026      	b.n	8003ec6 <fsm_update+0x10e>
		} else if (pn532_get_card_found()){
 8003e78:	f7fc fdcc 	bl	8000a14 <pn532_get_card_found>
 8003e7c:	4603      	mov	r3, r0
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d003      	beq.n	8003e8a <fsm_update+0xd2>
			fsm_state = FSM_READ_SPECIFIC;
 8003e82:	4b12      	ldr	r3, [pc, #72]	; (8003ecc <fsm_update+0x114>)
 8003e84:	2206      	movs	r2, #6
 8003e86:	701a      	strb	r2, [r3, #0]
			break;
 8003e88:	e01d      	b.n	8003ec6 <fsm_update+0x10e>
		}
		init_read_pn532();
 8003e8a:	f000 f921 	bl	80040d0 <init_read_pn532>
		break;
 8003e8e:	e01a      	b.n	8003ec6 <fsm_update+0x10e>
	}
	case FSM_READ_SPECIFIC: {
		LOG("[FSM_READ_SPECIFIC]\n");
 8003e90:	4814      	ldr	r0, [pc, #80]	; (8003ee4 <fsm_update+0x12c>)
 8003e92:	f000 fa71 	bl	8004378 <LOG>
		read_specific_block();
 8003e96:	f000 f9e1 	bl	800425c <read_specific_block>
		fsm_state=FSM_READY_TO_READ_SPECIFIC;
 8003e9a:	4b0c      	ldr	r3, [pc, #48]	; (8003ecc <fsm_update+0x114>)
 8003e9c:	2205      	movs	r2, #5
 8003e9e:	701a      	strb	r2, [r3, #0]
		break;
 8003ea0:	e011      	b.n	8003ec6 <fsm_update+0x10e>
	}
	case FSM_DEINIT: LOG("[FSM_DEINIT]\n");break;
 8003ea2:	4811      	ldr	r0, [pc, #68]	; (8003ee8 <fsm_update+0x130>)
 8003ea4:	f000 fa68 	bl	8004378 <LOG>
 8003ea8:	e00d      	b.n	8003ec6 <fsm_update+0x10e>
	case FSM_ERROR:
		LOG("[FSM_ERROR]\n");
 8003eaa:	4810      	ldr	r0, [pc, #64]	; (8003eec <fsm_update+0x134>)
 8003eac:	f000 fa64 	bl	8004378 <LOG>
		fsm_state=FSM_INIT;
 8003eb0:	4b06      	ldr	r3, [pc, #24]	; (8003ecc <fsm_update+0x114>)
 8003eb2:	2200      	movs	r2, #0
 8003eb4:	701a      	strb	r2, [r3, #0]
		break;
 8003eb6:	e006      	b.n	8003ec6 <fsm_update+0x10e>
	default: {
		LOG("[default]\n");
 8003eb8:	480d      	ldr	r0, [pc, #52]	; (8003ef0 <fsm_update+0x138>)
 8003eba:	f000 fa5d 	bl	8004378 <LOG>
		fsm_state= FSM_ERROR;
 8003ebe:	4b03      	ldr	r3, [pc, #12]	; (8003ecc <fsm_update+0x114>)
 8003ec0:	2208      	movs	r2, #8
 8003ec2:	701a      	strb	r2, [r3, #0]
		break;
 8003ec4:	bf00      	nop
	}
	}
}
 8003ec6:	bf00      	nop
 8003ec8:	bd80      	pop	{r7, pc}
 8003eca:	bf00      	nop
 8003ecc:	200001b0 	.word	0x200001b0
 8003ed0:	08005960 	.word	0x08005960
 8003ed4:	0800596c 	.word	0x0800596c
 8003ed8:	08005988 	.word	0x08005988
 8003edc:	080059a0 	.word	0x080059a0
 8003ee0:	080059b8 	.word	0x080059b8
 8003ee4:	080059d8 	.word	0x080059d8
 8003ee8:	080059f0 	.word	0x080059f0
 8003eec:	08005a00 	.word	0x08005a00
 8003ef0:	08005a10 	.word	0x08005a10

08003ef4 <fsm_init>:


static void fsm_init(){
 8003ef4:	b580      	push	{r7, lr}
 8003ef6:	af00      	add	r7, sp, #0
	if(!uartInit()){
 8003ef8:	f7fc fbca 	bl	8000690 <uartInit>
 8003efc:	4603      	mov	r3, r0
 8003efe:	f083 0301 	eor.w	r3, r3, #1
 8003f02:	b2db      	uxtb	r3, r3
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d002      	beq.n	8003f0e <fsm_init+0x1a>
		LOG("[UART_INIT_ERROR]\n");
 8003f08:	480d      	ldr	r0, [pc, #52]	; (8003f40 <fsm_init+0x4c>)
 8003f0a:	f000 fa35 	bl	8004378 <LOG>
	}
	if(!pn532_get_pn532Driver_initialized()){
 8003f0e:	f7fc fd75 	bl	80009fc <pn532_get_pn532Driver_initialized>
 8003f12:	4603      	mov	r3, r0
 8003f14:	f083 0301 	eor.w	r3, r3, #1
 8003f18:	b2db      	uxtb	r3, r3
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d00a      	beq.n	8003f34 <fsm_init+0x40>
		if(!pn532Driver_I2C_init()){
 8003f1e:	f7fc fd85 	bl	8000a2c <pn532Driver_I2C_init>
 8003f22:	4603      	mov	r3, r0
 8003f24:	f083 0301 	eor.w	r3, r3, #1
 8003f28:	b2db      	uxtb	r3, r3
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d002      	beq.n	8003f34 <fsm_init+0x40>
			LOG("[I2C_INIT_ERROR]\n");
 8003f2e:	4805      	ldr	r0, [pc, #20]	; (8003f44 <fsm_init+0x50>)
 8003f30:	f000 fa22 	bl	8004378 <LOG>
		}
	}
	fsm_state=FSM_READ_FIRMWARE_PN532;
 8003f34:	4b04      	ldr	r3, [pc, #16]	; (8003f48 <fsm_init+0x54>)
 8003f36:	2201      	movs	r2, #1
 8003f38:	701a      	strb	r2, [r3, #0]
}
 8003f3a:	bf00      	nop
 8003f3c:	bd80      	pop	{r7, pc}
 8003f3e:	bf00      	nop
 8003f40:	08005a1c 	.word	0x08005a1c
 8003f44:	08005a30 	.word	0x08005a30
 8003f48:	200001b0 	.word	0x200001b0

08003f4c <read_firmware_pn532>:

static void read_firmware_pn532(){
 8003f4c:	b590      	push	{r4, r7, lr}
 8003f4e:	b093      	sub	sp, #76	; 0x4c
 8003f50:	af02      	add	r7, sp, #8
	PN532_response_t res;
	PN532_firmware_t firmwareBuffer;
	res = pn532Driver_I2C_getFirmware(&firmwareBuffer);
 8003f52:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8003f56:	4618      	mov	r0, r3
 8003f58:	f7fc fdaa 	bl	8000ab0 <pn532Driver_I2C_getFirmware>
 8003f5c:	4603      	mov	r3, r0
 8003f5e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	switch(res) {
 8003f62:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8003f66:	2b04      	cmp	r3, #4
 8003f68:	d82f      	bhi.n	8003fca <read_firmware_pn532+0x7e>
 8003f6a:	a201      	add	r2, pc, #4	; (adr r2, 8003f70 <read_firmware_pn532+0x24>)
 8003f6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f70:	08003f9d 	.word	0x08003f9d
 8003f74:	08003f85 	.word	0x08003f85
 8003f78:	08003f8d 	.word	0x08003f8d
 8003f7c:	08003fcb 	.word	0x08003fcb
 8003f80:	08003f95 	.word	0x08003f95
		case PN532_CMD_ERROR: LOG("FW CMD ERROR \n"); break;
 8003f84:	4815      	ldr	r0, [pc, #84]	; (8003fdc <read_firmware_pn532+0x90>)
 8003f86:	f000 f9f7 	bl	8004378 <LOG>
 8003f8a:	e022      	b.n	8003fd2 <read_firmware_pn532+0x86>
		case PN532_ACK_NOT_RECEIVED: LOG("FW ACK ERROR \n"); break;
 8003f8c:	4814      	ldr	r0, [pc, #80]	; (8003fe0 <read_firmware_pn532+0x94>)
 8003f8e:	f000 f9f3 	bl	8004378 <LOG>
 8003f92:	e01e      	b.n	8003fd2 <read_firmware_pn532+0x86>
		case PN532_RESPONSE_ERROR: LOG("FW RESPONSE ERROR \n"); break;
 8003f94:	4813      	ldr	r0, [pc, #76]	; (8003fe4 <read_firmware_pn532+0x98>)
 8003f96:	f000 f9ef 	bl	8004378 <LOG>
 8003f9a:	e01a      	b.n	8003fd2 <read_firmware_pn532+0x86>
		case PN532_OK: {
			char firmware_string[50];
			sprintf(firmware_string, "Firmware- IC: %02X , ver: %02X, rev: %02X, supp: %02X \n", firmwareBuffer.IC,firmwareBuffer.version,firmwareBuffer.revision,firmwareBuffer.support);
 8003f9c:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8003fa0:	4619      	mov	r1, r3
 8003fa2:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8003fa6:	461c      	mov	r4, r3
 8003fa8:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8003fac:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 8003fb0:	1d38      	adds	r0, r7, #4
 8003fb2:	9201      	str	r2, [sp, #4]
 8003fb4:	9300      	str	r3, [sp, #0]
 8003fb6:	4623      	mov	r3, r4
 8003fb8:	460a      	mov	r2, r1
 8003fba:	490b      	ldr	r1, [pc, #44]	; (8003fe8 <read_firmware_pn532+0x9c>)
 8003fbc:	f000 fec2 	bl	8004d44 <siprintf>
			LOG(firmware_string);
 8003fc0:	1d3b      	adds	r3, r7, #4
 8003fc2:	4618      	mov	r0, r3
 8003fc4:	f000 f9d8 	bl	8004378 <LOG>
			break;
 8003fc8:	e003      	b.n	8003fd2 <read_firmware_pn532+0x86>
		}
		default: LOG("UNKNOWN ERROR");
 8003fca:	4808      	ldr	r0, [pc, #32]	; (8003fec <read_firmware_pn532+0xa0>)
 8003fcc:	f000 f9d4 	bl	8004378 <LOG>
	}
}
 8003fd0:	bf00      	nop
 8003fd2:	bf00      	nop
 8003fd4:	3744      	adds	r7, #68	; 0x44
 8003fd6:	46bd      	mov	sp, r7
 8003fd8:	bd90      	pop	{r4, r7, pc}
 8003fda:	bf00      	nop
 8003fdc:	08005a44 	.word	0x08005a44
 8003fe0:	08005a54 	.word	0x08005a54
 8003fe4:	08005a64 	.word	0x08005a64
 8003fe8:	08005a78 	.word	0x08005a78
 8003fec:	08005ab0 	.word	0x08005ab0

08003ff0 <configure_pn532>:

static void configure_pn532(){
 8003ff0:	b580      	push	{r7, lr}
 8003ff2:	b082      	sub	sp, #8
 8003ff4:	af00      	add	r7, sp, #0
	PN532_response_t res;
	res = pn532Driver_I2C_configureSAM();
 8003ff6:	f7fc fdd5 	bl	8000ba4 <pn532Driver_I2C_configureSAM>
 8003ffa:	4603      	mov	r3, r0
 8003ffc:	71fb      	strb	r3, [r7, #7]
	switch(res) {
 8003ffe:	79fb      	ldrb	r3, [r7, #7]
 8004000:	2b04      	cmp	r3, #4
 8004002:	d81d      	bhi.n	8004040 <configure_pn532+0x50>
 8004004:	a201      	add	r2, pc, #4	; (adr r2, 800400c <configure_pn532+0x1c>)
 8004006:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800400a:	bf00      	nop
 800400c:	08004039 	.word	0x08004039
 8004010:	08004021 	.word	0x08004021
 8004014:	08004029 	.word	0x08004029
 8004018:	08004041 	.word	0x08004041
 800401c:	08004031 	.word	0x08004031
		case PN532_CMD_ERROR: LOG("SAM CMD ERROR \n"); break;
 8004020:	4821      	ldr	r0, [pc, #132]	; (80040a8 <configure_pn532+0xb8>)
 8004022:	f000 f9a9 	bl	8004378 <LOG>
 8004026:	e00f      	b.n	8004048 <configure_pn532+0x58>
		case PN532_ACK_NOT_RECEIVED: LOG("SAM ACK ERROR \n"); break;
 8004028:	4820      	ldr	r0, [pc, #128]	; (80040ac <configure_pn532+0xbc>)
 800402a:	f000 f9a5 	bl	8004378 <LOG>
 800402e:	e00b      	b.n	8004048 <configure_pn532+0x58>
		case PN532_RESPONSE_ERROR: LOG("SAM RESPONSE ERROR \n"); break;
 8004030:	481f      	ldr	r0, [pc, #124]	; (80040b0 <configure_pn532+0xc0>)
 8004032:	f000 f9a1 	bl	8004378 <LOG>
 8004036:	e007      	b.n	8004048 <configure_pn532+0x58>
		case PN532_OK: LOG("SAM SUCCESFULLY CONFIGURED \n"); break;
 8004038:	481e      	ldr	r0, [pc, #120]	; (80040b4 <configure_pn532+0xc4>)
 800403a:	f000 f99d 	bl	8004378 <LOG>
 800403e:	e003      	b.n	8004048 <configure_pn532+0x58>
		default: LOG("SAM UNKNOWN ERROR"); break;
 8004040:	481d      	ldr	r0, [pc, #116]	; (80040b8 <configure_pn532+0xc8>)
 8004042:	f000 f999 	bl	8004378 <LOG>
 8004046:	bf00      	nop
	}
	HAL_Delay(10);
 8004048:	200a      	movs	r0, #10
 800404a:	f7fd fac1 	bl	80015d0 <HAL_Delay>
	res = pn532Driver_I2C_configureTiming();
 800404e:	f7fd f851 	bl	80010f4 <pn532Driver_I2C_configureTiming>
 8004052:	4603      	mov	r3, r0
 8004054:	71fb      	strb	r3, [r7, #7]
	switch(res) {
 8004056:	79fb      	ldrb	r3, [r7, #7]
 8004058:	2b04      	cmp	r3, #4
 800405a:	d81d      	bhi.n	8004098 <configure_pn532+0xa8>
 800405c:	a201      	add	r2, pc, #4	; (adr r2, 8004064 <configure_pn532+0x74>)
 800405e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004062:	bf00      	nop
 8004064:	08004091 	.word	0x08004091
 8004068:	08004079 	.word	0x08004079
 800406c:	08004081 	.word	0x08004081
 8004070:	08004099 	.word	0x08004099
 8004074:	08004089 	.word	0x08004089
		case PN532_CMD_ERROR: LOG("TIME CMD ERROR \n"); break;
 8004078:	4810      	ldr	r0, [pc, #64]	; (80040bc <configure_pn532+0xcc>)
 800407a:	f000 f97d 	bl	8004378 <LOG>
 800407e:	e00f      	b.n	80040a0 <configure_pn532+0xb0>
		case PN532_ACK_NOT_RECEIVED: LOG("TIME ACK ERROR \n"); break;
 8004080:	480f      	ldr	r0, [pc, #60]	; (80040c0 <configure_pn532+0xd0>)
 8004082:	f000 f979 	bl	8004378 <LOG>
 8004086:	e00b      	b.n	80040a0 <configure_pn532+0xb0>
		case PN532_RESPONSE_ERROR: LOG("TIME RESPONSE ERROR \n"); break;
 8004088:	480e      	ldr	r0, [pc, #56]	; (80040c4 <configure_pn532+0xd4>)
 800408a:	f000 f975 	bl	8004378 <LOG>
 800408e:	e007      	b.n	80040a0 <configure_pn532+0xb0>
		case PN532_OK: LOG("TIME SUCCESFULLY CONFIGURED \n"); break;
 8004090:	480d      	ldr	r0, [pc, #52]	; (80040c8 <configure_pn532+0xd8>)
 8004092:	f000 f971 	bl	8004378 <LOG>
 8004096:	e003      	b.n	80040a0 <configure_pn532+0xb0>
		default: LOG("TIME UNKNOWN ERROR"); break;
 8004098:	480c      	ldr	r0, [pc, #48]	; (80040cc <configure_pn532+0xdc>)
 800409a:	f000 f96d 	bl	8004378 <LOG>
 800409e:	bf00      	nop
	}
}
 80040a0:	bf00      	nop
 80040a2:	3708      	adds	r7, #8
 80040a4:	46bd      	mov	sp, r7
 80040a6:	bd80      	pop	{r7, pc}
 80040a8:	08005ac0 	.word	0x08005ac0
 80040ac:	08005ad0 	.word	0x08005ad0
 80040b0:	08005ae0 	.word	0x08005ae0
 80040b4:	08005af8 	.word	0x08005af8
 80040b8:	08005b18 	.word	0x08005b18
 80040bc:	08005b2c 	.word	0x08005b2c
 80040c0:	08005b40 	.word	0x08005b40
 80040c4:	08005b54 	.word	0x08005b54
 80040c8:	08005b6c 	.word	0x08005b6c
 80040cc:	08005b8c 	.word	0x08005b8c

080040d0 <init_read_pn532>:

static void init_read_pn532(){
 80040d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80040d4:	b0a4      	sub	sp, #144	; 0x90
 80040d6:	af08      	add	r7, sp, #32
	PN532_response_t res;
	PN532_target_t targetBuffer;
	res = pn532Driver_I2C_listPassiveTarget(&targetBuffer);
 80040d8:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80040dc:	4618      	mov	r0, r3
 80040de:	f7fc fdc9 	bl	8000c74 <pn532Driver_I2C_listPassiveTarget>
 80040e2:	4603      	mov	r3, r0
 80040e4:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	switch(res) {
 80040e8:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80040ec:	2b06      	cmp	r3, #6
 80040ee:	d851      	bhi.n	8004194 <init_read_pn532+0xc4>
 80040f0:	a201      	add	r2, pc, #4	; (adr r2, 80040f8 <init_read_pn532+0x28>)
 80040f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040f6:	bf00      	nop
 80040f8:	08004135 	.word	0x08004135
 80040fc:	08004115 	.word	0x08004115
 8004100:	0800411d 	.word	0x0800411d
 8004104:	08004195 	.word	0x08004195
 8004108:	08004125 	.word	0x08004125
 800410c:	08004195 	.word	0x08004195
 8004110:	0800412d 	.word	0x0800412d
		case PN532_CMD_ERROR: LOG("LIST CMD ERROR \n"); break;
 8004114:	4824      	ldr	r0, [pc, #144]	; (80041a8 <init_read_pn532+0xd8>)
 8004116:	f000 f92f 	bl	8004378 <LOG>
 800411a:	e03f      	b.n	800419c <init_read_pn532+0xcc>
		case PN532_ACK_NOT_RECEIVED: LOG("LIST ACK ERROR \n"); break;
 800411c:	4823      	ldr	r0, [pc, #140]	; (80041ac <init_read_pn532+0xdc>)
 800411e:	f000 f92b 	bl	8004378 <LOG>
 8004122:	e03b      	b.n	800419c <init_read_pn532+0xcc>
		case PN532_RESPONSE_ERROR: LOG("LIST RESPONSE ERROR \n"); break;
 8004124:	4822      	ldr	r0, [pc, #136]	; (80041b0 <init_read_pn532+0xe0>)
 8004126:	f000 f927 	bl	8004378 <LOG>
 800412a:	e037      	b.n	800419c <init_read_pn532+0xcc>
		case PN532_EMPTY: LOG("."); break;
 800412c:	4821      	ldr	r0, [pc, #132]	; (80041b4 <init_read_pn532+0xe4>)
 800412e:	f000 f923 	bl	8004378 <LOG>
 8004132:	e033      	b.n	800419c <init_read_pn532+0xcc>
		case PN532_OK: {
			LOG("\nCARD FOUND\n");
 8004134:	4820      	ldr	r0, [pc, #128]	; (80041b8 <init_read_pn532+0xe8>)
 8004136:	f000 f91f 	bl	8004378 <LOG>
			char target_string[100];
			sprintf(target_string, "Target- ln: %02X , SENS_RES: %02X %02X, SEL_RES: %02X, NFCID_Length: %02X, NFCID: %02X %02X %02X %02X \n",
					targetBuffer.logical_number,
 800413a:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
			sprintf(target_string, "Target- ln: %02X , SENS_RES: %02X %02X, SEL_RES: %02X, NFCID_Length: %02X, NFCID: %02X %02X %02X %02X \n",
 800413e:	469c      	mov	ip, r3
					targetBuffer.SENS_RES[0],
 8004140:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
			sprintf(target_string, "Target- ln: %02X , SENS_RES: %02X %02X, SEL_RES: %02X, NFCID_Length: %02X, NFCID: %02X %02X %02X %02X \n",
 8004144:	469e      	mov	lr, r3
					targetBuffer.SENS_RES[1],
 8004146:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
					targetBuffer.SEL_RES,
 800414a:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
					targetBuffer.NFCID_length,
 800414e:	f897 1068 	ldrb.w	r1, [r7, #104]	; 0x68
					targetBuffer.NFCID[0],
 8004152:	f897 0069 	ldrb.w	r0, [r7, #105]	; 0x69
			sprintf(target_string, "Target- ln: %02X , SENS_RES: %02X %02X, SEL_RES: %02X, NFCID_Length: %02X, NFCID: %02X %02X %02X %02X \n",
 8004156:	4604      	mov	r4, r0
					targetBuffer.NFCID[1],
 8004158:	f897 006a 	ldrb.w	r0, [r7, #106]	; 0x6a
			sprintf(target_string, "Target- ln: %02X , SENS_RES: %02X %02X, SEL_RES: %02X, NFCID_Length: %02X, NFCID: %02X %02X %02X %02X \n",
 800415c:	4605      	mov	r5, r0
					targetBuffer.NFCID[2],
 800415e:	f897 006b 	ldrb.w	r0, [r7, #107]	; 0x6b
			sprintf(target_string, "Target- ln: %02X , SENS_RES: %02X %02X, SEL_RES: %02X, NFCID_Length: %02X, NFCID: %02X %02X %02X %02X \n",
 8004162:	4606      	mov	r6, r0
					targetBuffer.NFCID[3]
 8004164:	f897 006c 	ldrb.w	r0, [r7, #108]	; 0x6c
			sprintf(target_string, "Target- ln: %02X , SENS_RES: %02X %02X, SEL_RES: %02X, NFCID_Length: %02X, NFCID: %02X %02X %02X %02X \n",
 8004168:	46b8      	mov	r8, r7
 800416a:	9006      	str	r0, [sp, #24]
 800416c:	9605      	str	r6, [sp, #20]
 800416e:	9504      	str	r5, [sp, #16]
 8004170:	9403      	str	r4, [sp, #12]
 8004172:	9102      	str	r1, [sp, #8]
 8004174:	9201      	str	r2, [sp, #4]
 8004176:	9300      	str	r3, [sp, #0]
 8004178:	4673      	mov	r3, lr
 800417a:	4662      	mov	r2, ip
 800417c:	490f      	ldr	r1, [pc, #60]	; (80041bc <init_read_pn532+0xec>)
 800417e:	4640      	mov	r0, r8
 8004180:	f000 fde0 	bl	8004d44 <siprintf>
					);
			LOG(target_string);
 8004184:	463b      	mov	r3, r7
 8004186:	4618      	mov	r0, r3
 8004188:	f000 f8f6 	bl	8004378 <LOG>
			fsm_state=FSM_READ_FULL_CARD;
 800418c:	4b0c      	ldr	r3, [pc, #48]	; (80041c0 <init_read_pn532+0xf0>)
 800418e:	2204      	movs	r2, #4
 8004190:	701a      	strb	r2, [r3, #0]
			break;
 8004192:	e003      	b.n	800419c <init_read_pn532+0xcc>
		}
		default: LOG("LIST UNKNOWN ERROR"); break;
 8004194:	480b      	ldr	r0, [pc, #44]	; (80041c4 <init_read_pn532+0xf4>)
 8004196:	f000 f8ef 	bl	8004378 <LOG>
 800419a:	bf00      	nop
	}
}
 800419c:	bf00      	nop
 800419e:	3770      	adds	r7, #112	; 0x70
 80041a0:	46bd      	mov	sp, r7
 80041a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80041a6:	bf00      	nop
 80041a8:	08005ba0 	.word	0x08005ba0
 80041ac:	08005bb4 	.word	0x08005bb4
 80041b0:	08005bc8 	.word	0x08005bc8
 80041b4:	08005be0 	.word	0x08005be0
 80041b8:	08005be4 	.word	0x08005be4
 80041bc:	08005bf4 	.word	0x08005bf4
 80041c0:	200001b0 	.word	0x200001b0
 80041c4:	08005c5c 	.word	0x08005c5c

080041c8 <read_full_card>:
static void read_full_card(){
 80041c8:	b580      	push	{r7, lr}
 80041ca:	f5ad 6d81 	sub.w	sp, sp, #1032	; 0x408
 80041ce:	af00      	add	r7, sp, #0
	PN532_response_t res;
	uint8_t dataBuffer[1024];
	res = pn532Driver_I2C_readMifareData_full(dataBuffer, sizeof(dataBuffer));
 80041d0:	1d3b      	adds	r3, r7, #4
 80041d2:	2100      	movs	r1, #0
 80041d4:	4618      	mov	r0, r3
 80041d6:	f7fc fec3 	bl	8000f60 <pn532Driver_I2C_readMifareData_full>
 80041da:	4603      	mov	r3, r0
 80041dc:	f887 3407 	strb.w	r3, [r7, #1031]	; 0x407
	switch(res){
 80041e0:	f897 3407 	ldrb.w	r3, [r7, #1031]	; 0x407
 80041e4:	2b06      	cmp	r3, #6
 80041e6:	d828      	bhi.n	800423a <read_full_card+0x72>
 80041e8:	a201      	add	r2, pc, #4	; (adr r2, 80041f0 <read_full_card+0x28>)
 80041ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041ee:	bf00      	nop
 80041f0:	0800420d 	.word	0x0800420d
 80041f4:	0800423b 	.word	0x0800423b
 80041f8:	08004223 	.word	0x08004223
 80041fc:	0800423b 	.word	0x0800423b
 8004200:	0800422b 	.word	0x0800422b
 8004204:	0800423b 	.word	0x0800423b
 8004208:	08004233 	.word	0x08004233
		case PN532_OK: LOG(hex_string(dataBuffer, sizeof(dataBuffer))); break;
 800420c:	1d3b      	adds	r3, r7, #4
 800420e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004212:	4618      	mov	r0, r3
 8004214:	f000 f868 	bl	80042e8 <hex_string>
 8004218:	4603      	mov	r3, r0
 800421a:	4618      	mov	r0, r3
 800421c:	f000 f8ac 	bl	8004378 <LOG>
 8004220:	e00f      	b.n	8004242 <read_full_card+0x7a>
		case PN532_ACK_NOT_RECEIVED: LOG("READ ACK ERROR \n"); break;
 8004222:	480a      	ldr	r0, [pc, #40]	; (800424c <read_full_card+0x84>)
 8004224:	f000 f8a8 	bl	8004378 <LOG>
 8004228:	e00b      	b.n	8004242 <read_full_card+0x7a>
		case PN532_RESPONSE_ERROR: LOG("READ RESPONSE ERROR \n"); break;
 800422a:	4809      	ldr	r0, [pc, #36]	; (8004250 <read_full_card+0x88>)
 800422c:	f000 f8a4 	bl	8004378 <LOG>
 8004230:	e007      	b.n	8004242 <read_full_card+0x7a>
		case PN532_EMPTY: LOG("."); break;
 8004232:	4808      	ldr	r0, [pc, #32]	; (8004254 <read_full_card+0x8c>)
 8004234:	f000 f8a0 	bl	8004378 <LOG>
 8004238:	e003      	b.n	8004242 <read_full_card+0x7a>
		default: LOG("READ UNKNOWN ERROR"); break;
 800423a:	4807      	ldr	r0, [pc, #28]	; (8004258 <read_full_card+0x90>)
 800423c:	f000 f89c 	bl	8004378 <LOG>
 8004240:	bf00      	nop
	}
}
 8004242:	bf00      	nop
 8004244:	f507 6781 	add.w	r7, r7, #1032	; 0x408
 8004248:	46bd      	mov	sp, r7
 800424a:	bd80      	pop	{r7, pc}
 800424c:	08005c70 	.word	0x08005c70
 8004250:	08005c84 	.word	0x08005c84
 8004254:	08005be0 	.word	0x08005be0
 8004258:	08005c9c 	.word	0x08005c9c

0800425c <read_specific_block>:

static void read_specific_block(){
 800425c:	b580      	push	{r7, lr}
 800425e:	b09a      	sub	sp, #104	; 0x68
 8004260:	af00      	add	r7, sp, #0
	PN532_response_t res;
	uint8_t dataBuffer[100];
	res = pn532Driver_I2C_readMifareData_sans_target(dataBuffer, sizeof(dataBuffer));
 8004262:	463b      	mov	r3, r7
 8004264:	2164      	movs	r1, #100	; 0x64
 8004266:	4618      	mov	r0, r3
 8004268:	f7fc fdb0 	bl	8000dcc <pn532Driver_I2C_readMifareData_sans_target>
 800426c:	4603      	mov	r3, r0
 800426e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	switch(res){
 8004272:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8004276:	2b06      	cmp	r3, #6
 8004278:	d826      	bhi.n	80042c8 <read_specific_block+0x6c>
 800427a:	a201      	add	r2, pc, #4	; (adr r2, 8004280 <read_specific_block+0x24>)
 800427c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004280:	0800429d 	.word	0x0800429d
 8004284:	080042c9 	.word	0x080042c9
 8004288:	080042b1 	.word	0x080042b1
 800428c:	080042c9 	.word	0x080042c9
 8004290:	080042b9 	.word	0x080042b9
 8004294:	080042c9 	.word	0x080042c9
 8004298:	080042c1 	.word	0x080042c1
		case PN532_OK: LOG(hex_string(dataBuffer, sizeof(dataBuffer))); break;
 800429c:	463b      	mov	r3, r7
 800429e:	2164      	movs	r1, #100	; 0x64
 80042a0:	4618      	mov	r0, r3
 80042a2:	f000 f821 	bl	80042e8 <hex_string>
 80042a6:	4603      	mov	r3, r0
 80042a8:	4618      	mov	r0, r3
 80042aa:	f000 f865 	bl	8004378 <LOG>
 80042ae:	e00f      	b.n	80042d0 <read_specific_block+0x74>
		case PN532_ACK_NOT_RECEIVED: LOG("READ ACK ERROR \n"); break;
 80042b0:	4809      	ldr	r0, [pc, #36]	; (80042d8 <read_specific_block+0x7c>)
 80042b2:	f000 f861 	bl	8004378 <LOG>
 80042b6:	e00b      	b.n	80042d0 <read_specific_block+0x74>
		case PN532_RESPONSE_ERROR: LOG("READ RESPONSE ERROR \n"); break;
 80042b8:	4808      	ldr	r0, [pc, #32]	; (80042dc <read_specific_block+0x80>)
 80042ba:	f000 f85d 	bl	8004378 <LOG>
 80042be:	e007      	b.n	80042d0 <read_specific_block+0x74>
		case PN532_EMPTY: LOG("."); break;
 80042c0:	4807      	ldr	r0, [pc, #28]	; (80042e0 <read_specific_block+0x84>)
 80042c2:	f000 f859 	bl	8004378 <LOG>
 80042c6:	e003      	b.n	80042d0 <read_specific_block+0x74>
		default: LOG("READ UNKNOWN ERROR"); break;
 80042c8:	4806      	ldr	r0, [pc, #24]	; (80042e4 <read_specific_block+0x88>)
 80042ca:	f000 f855 	bl	8004378 <LOG>
 80042ce:	bf00      	nop
	}
}
 80042d0:	bf00      	nop
 80042d2:	3768      	adds	r7, #104	; 0x68
 80042d4:	46bd      	mov	sp, r7
 80042d6:	bd80      	pop	{r7, pc}
 80042d8:	08005c70 	.word	0x08005c70
 80042dc:	08005c84 	.word	0x08005c84
 80042e0:	08005be0 	.word	0x08005be0
 80042e4:	08005c9c 	.word	0x08005c9c

080042e8 <hex_string>:
char* hex_string(uint8_t *array, size_t length) {
 80042e8:	b580      	push	{r7, lr}
 80042ea:	b086      	sub	sp, #24
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	6078      	str	r0, [r7, #4]
 80042f0:	6039      	str	r1, [r7, #0]
    char *output = malloc(length * 3 + (length / 16) + 1); // allocate space for hex string and newlines
 80042f2:	683a      	ldr	r2, [r7, #0]
 80042f4:	4613      	mov	r3, r2
 80042f6:	005b      	lsls	r3, r3, #1
 80042f8:	441a      	add	r2, r3
 80042fa:	683b      	ldr	r3, [r7, #0]
 80042fc:	091b      	lsrs	r3, r3, #4
 80042fe:	4413      	add	r3, r2
 8004300:	3301      	adds	r3, #1
 8004302:	4618      	mov	r0, r3
 8004304:	f000 f930 	bl	8004568 <malloc>
 8004308:	4603      	mov	r3, r0
 800430a:	60fb      	str	r3, [r7, #12]
    size_t i, j = 0;
 800430c:	2300      	movs	r3, #0
 800430e:	613b      	str	r3, [r7, #16]
    for (i = 0; i < length; i++) {
 8004310:	2300      	movs	r3, #0
 8004312:	617b      	str	r3, [r7, #20]
 8004314:	e01f      	b.n	8004356 <hex_string+0x6e>
        if (i % 16 == 0 && i != 0) { // add newline every 16th item
 8004316:	697b      	ldr	r3, [r7, #20]
 8004318:	f003 030f 	and.w	r3, r3, #15
 800431c:	2b00      	cmp	r3, #0
 800431e:	d109      	bne.n	8004334 <hex_string+0x4c>
 8004320:	697b      	ldr	r3, [r7, #20]
 8004322:	2b00      	cmp	r3, #0
 8004324:	d006      	beq.n	8004334 <hex_string+0x4c>
            output[j++] = '\n';
 8004326:	693b      	ldr	r3, [r7, #16]
 8004328:	1c5a      	adds	r2, r3, #1
 800432a:	613a      	str	r2, [r7, #16]
 800432c:	68fa      	ldr	r2, [r7, #12]
 800432e:	4413      	add	r3, r2
 8004330:	220a      	movs	r2, #10
 8004332:	701a      	strb	r2, [r3, #0]
        }
        sprintf(&output[j], "%02x ", array[i]); // convert byte to hex string
 8004334:	68fa      	ldr	r2, [r7, #12]
 8004336:	693b      	ldr	r3, [r7, #16]
 8004338:	18d0      	adds	r0, r2, r3
 800433a:	687a      	ldr	r2, [r7, #4]
 800433c:	697b      	ldr	r3, [r7, #20]
 800433e:	4413      	add	r3, r2
 8004340:	781b      	ldrb	r3, [r3, #0]
 8004342:	461a      	mov	r2, r3
 8004344:	490b      	ldr	r1, [pc, #44]	; (8004374 <hex_string+0x8c>)
 8004346:	f000 fcfd 	bl	8004d44 <siprintf>
        j += 3; // move index to next hex string position
 800434a:	693b      	ldr	r3, [r7, #16]
 800434c:	3303      	adds	r3, #3
 800434e:	613b      	str	r3, [r7, #16]
    for (i = 0; i < length; i++) {
 8004350:	697b      	ldr	r3, [r7, #20]
 8004352:	3301      	adds	r3, #1
 8004354:	617b      	str	r3, [r7, #20]
 8004356:	697a      	ldr	r2, [r7, #20]
 8004358:	683b      	ldr	r3, [r7, #0]
 800435a:	429a      	cmp	r2, r3
 800435c:	d3db      	bcc.n	8004316 <hex_string+0x2e>
    }
    output[j] = '\0'; // null-terminate the string
 800435e:	68fa      	ldr	r2, [r7, #12]
 8004360:	693b      	ldr	r3, [r7, #16]
 8004362:	4413      	add	r3, r2
 8004364:	2200      	movs	r2, #0
 8004366:	701a      	strb	r2, [r3, #0]
    return output;
 8004368:	68fb      	ldr	r3, [r7, #12]
}
 800436a:	4618      	mov	r0, r3
 800436c:	3718      	adds	r7, #24
 800436e:	46bd      	mov	sp, r7
 8004370:	bd80      	pop	{r7, pc}
 8004372:	bf00      	nop
 8004374:	08005cb0 	.word	0x08005cb0

08004378 <LOG>:

static void LOG(char* string){
 8004378:	b580      	push	{r7, lr}
 800437a:	b082      	sub	sp, #8
 800437c:	af00      	add	r7, sp, #0
 800437e:	6078      	str	r0, [r7, #4]
#ifdef DEBUG
	uartSendString(string);
 8004380:	6878      	ldr	r0, [r7, #4]
 8004382:	f7fc f9af 	bl	80006e4 <uartSendString>
#endif
}
 8004386:	bf00      	nop
 8004388:	3708      	adds	r7, #8
 800438a:	46bd      	mov	sp, r7
 800438c:	bd80      	pop	{r7, pc}
	...

08004390 <SystemClock_Config>:
 *            Main regulator output voltage  = Scale1 mode
 *            Flash Latency(WS)              = 5
 * @param  None
 * @retval None
 */
static void SystemClock_Config(void) {
 8004390:	b580      	push	{r7, lr}
 8004392:	b094      	sub	sp, #80	; 0x50
 8004394:	af00      	add	r7, sp, #0
	RCC_ClkInitTypeDef RCC_ClkInitStruct;
	RCC_OscInitTypeDef RCC_OscInitStruct;

	/* Enable Power Control clock */
	__HAL_RCC_PWR_CLK_ENABLE();
 8004396:	2300      	movs	r3, #0
 8004398:	60bb      	str	r3, [r7, #8]
 800439a:	4b2c      	ldr	r3, [pc, #176]	; (800444c <SystemClock_Config+0xbc>)
 800439c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800439e:	4a2b      	ldr	r2, [pc, #172]	; (800444c <SystemClock_Config+0xbc>)
 80043a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80043a4:	6413      	str	r3, [r2, #64]	; 0x40
 80043a6:	4b29      	ldr	r3, [pc, #164]	; (800444c <SystemClock_Config+0xbc>)
 80043a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043ae:	60bb      	str	r3, [r7, #8]
 80043b0:	68bb      	ldr	r3, [r7, #8]

	/* The voltage scaling allows optimizing the power consumption when the device is
	 clocked below the maximum system frequency, to update the voltage scaling value
	 regarding system frequency refer to product datasheet.  */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80043b2:	2300      	movs	r3, #0
 80043b4:	607b      	str	r3, [r7, #4]
 80043b6:	4b26      	ldr	r3, [pc, #152]	; (8004450 <SystemClock_Config+0xc0>)
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	4a25      	ldr	r2, [pc, #148]	; (8004450 <SystemClock_Config+0xc0>)
 80043bc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80043c0:	6013      	str	r3, [r2, #0]
 80043c2:	4b23      	ldr	r3, [pc, #140]	; (8004450 <SystemClock_Config+0xc0>)
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80043ca:	607b      	str	r3, [r7, #4]
 80043cc:	687b      	ldr	r3, [r7, #4]

	/* Enable HSE Oscillator and activate PLL with HSE as source */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80043ce:	2301      	movs	r3, #1
 80043d0:	60fb      	str	r3, [r7, #12]
	RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80043d2:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80043d6:	613b      	str	r3, [r7, #16]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80043d8:	2302      	movs	r3, #2
 80043da:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80043dc:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80043e0:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLM = 8;
 80043e2:	2308      	movs	r3, #8
 80043e4:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.PLL.PLLN = 360;
 80043e6:	f44f 73b4 	mov.w	r3, #360	; 0x168
 80043ea:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80043ec:	2302      	movs	r3, #2
 80043ee:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLQ = 7;
 80043f0:	2307      	movs	r3, #7
 80043f2:	63bb      	str	r3, [r7, #56]	; 0x38
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80043f4:	f107 030c 	add.w	r3, r7, #12
 80043f8:	4618      	mov	r0, r3
 80043fa:	f7fe fc6b 	bl	8002cd4 <HAL_RCC_OscConfig>
 80043fe:	4603      	mov	r3, r0
 8004400:	2b00      	cmp	r3, #0
 8004402:	d001      	beq.n	8004408 <SystemClock_Config+0x78>
		/* Initialization Error */
		Error_Handler();
 8004404:	f000 f826 	bl	8004454 <Error_Handler>
	}

	if (HAL_PWREx_EnableOverDrive() != HAL_OK) {
 8004408:	f7fe fc14 	bl	8002c34 <HAL_PWREx_EnableOverDrive>
 800440c:	4603      	mov	r3, r0
 800440e:	2b00      	cmp	r3, #0
 8004410:	d001      	beq.n	8004416 <SystemClock_Config+0x86>
		/* Initialization Error */
		Error_Handler();
 8004412:	f000 f81f 	bl	8004454 <Error_Handler>
	}

	/* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2
	 clocks dividers */
	RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK
 8004416:	230f      	movs	r3, #15
 8004418:	63fb      	str	r3, [r7, #60]	; 0x3c
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800441a:	2302      	movs	r3, #2
 800441c:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800441e:	2300      	movs	r3, #0
 8004420:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8004422:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8004426:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8004428:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800442c:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK) {
 800442e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8004432:	2105      	movs	r1, #5
 8004434:	4618      	mov	r0, r3
 8004436:	f7fe fec5 	bl	80031c4 <HAL_RCC_ClockConfig>
 800443a:	4603      	mov	r3, r0
 800443c:	2b00      	cmp	r3, #0
 800443e:	d001      	beq.n	8004444 <SystemClock_Config+0xb4>
		/* Initialization Error */
		Error_Handler();
 8004440:	f000 f808 	bl	8004454 <Error_Handler>
	}
}
 8004444:	bf00      	nop
 8004446:	3750      	adds	r7, #80	; 0x50
 8004448:	46bd      	mov	sp, r7
 800444a:	bd80      	pop	{r7, pc}
 800444c:	40023800 	.word	0x40023800
 8004450:	40007000 	.word	0x40007000

08004454 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @param  None
 * @retval None
 */
static void Error_Handler(void) {
 8004454:	b580      	push	{r7, lr}
 8004456:	af00      	add	r7, sp, #0
	/* Turn LED2 on */
	BSP_LED_On(LED2);
 8004458:	2001      	movs	r0, #1
 800445a:	f7fc f967 	bl	800072c <BSP_LED_On>
	while (1) {
 800445e:	e7fe      	b.n	800445e <Error_Handler+0xa>

08004460 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8004460:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004498 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8004464:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8004466:	e003      	b.n	8004470 <LoopCopyDataInit>

08004468 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8004468:	4b0c      	ldr	r3, [pc, #48]	; (800449c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800446a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800446c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800446e:	3104      	adds	r1, #4

08004470 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8004470:	480b      	ldr	r0, [pc, #44]	; (80044a0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8004472:	4b0c      	ldr	r3, [pc, #48]	; (80044a4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8004474:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8004476:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8004478:	d3f6      	bcc.n	8004468 <CopyDataInit>
  ldr  r2, =_sbss
 800447a:	4a0b      	ldr	r2, [pc, #44]	; (80044a8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800447c:	e002      	b.n	8004484 <LoopFillZerobss>

0800447e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800447e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8004480:	f842 3b04 	str.w	r3, [r2], #4

08004484 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8004484:	4b09      	ldr	r3, [pc, #36]	; (80044ac <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8004486:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8004488:	d3f9      	bcc.n	800447e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800448a:	f7fc f969 	bl	8000760 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800448e:	f000 f847 	bl	8004520 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004492:	f7ff fc79 	bl	8003d88 <main>
  bx  lr    
 8004496:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8004498:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 800449c:	08005df8 	.word	0x08005df8
  ldr  r0, =_sdata
 80044a0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80044a4:	200000e0 	.word	0x200000e0
  ldr  r2, =_sbss
 80044a8:	200000e0 	.word	0x200000e0
  ldr  r3, = _ebss
 80044ac:	200001c4 	.word	0x200001c4

080044b0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80044b0:	e7fe      	b.n	80044b0 <ADC_IRQHandler>
	...

080044b4 <__assert_func>:
 80044b4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80044b6:	4614      	mov	r4, r2
 80044b8:	461a      	mov	r2, r3
 80044ba:	4b09      	ldr	r3, [pc, #36]	; (80044e0 <__assert_func+0x2c>)
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	4605      	mov	r5, r0
 80044c0:	68d8      	ldr	r0, [r3, #12]
 80044c2:	b14c      	cbz	r4, 80044d8 <__assert_func+0x24>
 80044c4:	4b07      	ldr	r3, [pc, #28]	; (80044e4 <__assert_func+0x30>)
 80044c6:	9100      	str	r1, [sp, #0]
 80044c8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80044cc:	4906      	ldr	r1, [pc, #24]	; (80044e8 <__assert_func+0x34>)
 80044ce:	462b      	mov	r3, r5
 80044d0:	f000 f814 	bl	80044fc <fiprintf>
 80044d4:	f000 fd16 	bl	8004f04 <abort>
 80044d8:	4b04      	ldr	r3, [pc, #16]	; (80044ec <__assert_func+0x38>)
 80044da:	461c      	mov	r4, r3
 80044dc:	e7f3      	b.n	80044c6 <__assert_func+0x12>
 80044de:	bf00      	nop
 80044e0:	2000007c 	.word	0x2000007c
 80044e4:	08005d13 	.word	0x08005d13
 80044e8:	08005d20 	.word	0x08005d20
 80044ec:	08005d4e 	.word	0x08005d4e

080044f0 <__errno>:
 80044f0:	4b01      	ldr	r3, [pc, #4]	; (80044f8 <__errno+0x8>)
 80044f2:	6818      	ldr	r0, [r3, #0]
 80044f4:	4770      	bx	lr
 80044f6:	bf00      	nop
 80044f8:	2000007c 	.word	0x2000007c

080044fc <fiprintf>:
 80044fc:	b40e      	push	{r1, r2, r3}
 80044fe:	b503      	push	{r0, r1, lr}
 8004500:	4601      	mov	r1, r0
 8004502:	ab03      	add	r3, sp, #12
 8004504:	4805      	ldr	r0, [pc, #20]	; (800451c <fiprintf+0x20>)
 8004506:	f853 2b04 	ldr.w	r2, [r3], #4
 800450a:	6800      	ldr	r0, [r0, #0]
 800450c:	9301      	str	r3, [sp, #4]
 800450e:	f000 f945 	bl	800479c <_vfiprintf_r>
 8004512:	b002      	add	sp, #8
 8004514:	f85d eb04 	ldr.w	lr, [sp], #4
 8004518:	b003      	add	sp, #12
 800451a:	4770      	bx	lr
 800451c:	2000007c 	.word	0x2000007c

08004520 <__libc_init_array>:
 8004520:	b570      	push	{r4, r5, r6, lr}
 8004522:	4d0d      	ldr	r5, [pc, #52]	; (8004558 <__libc_init_array+0x38>)
 8004524:	4c0d      	ldr	r4, [pc, #52]	; (800455c <__libc_init_array+0x3c>)
 8004526:	1b64      	subs	r4, r4, r5
 8004528:	10a4      	asrs	r4, r4, #2
 800452a:	2600      	movs	r6, #0
 800452c:	42a6      	cmp	r6, r4
 800452e:	d109      	bne.n	8004544 <__libc_init_array+0x24>
 8004530:	4d0b      	ldr	r5, [pc, #44]	; (8004560 <__libc_init_array+0x40>)
 8004532:	4c0c      	ldr	r4, [pc, #48]	; (8004564 <__libc_init_array+0x44>)
 8004534:	f001 f9c4 	bl	80058c0 <_init>
 8004538:	1b64      	subs	r4, r4, r5
 800453a:	10a4      	asrs	r4, r4, #2
 800453c:	2600      	movs	r6, #0
 800453e:	42a6      	cmp	r6, r4
 8004540:	d105      	bne.n	800454e <__libc_init_array+0x2e>
 8004542:	bd70      	pop	{r4, r5, r6, pc}
 8004544:	f855 3b04 	ldr.w	r3, [r5], #4
 8004548:	4798      	blx	r3
 800454a:	3601      	adds	r6, #1
 800454c:	e7ee      	b.n	800452c <__libc_init_array+0xc>
 800454e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004552:	4798      	blx	r3
 8004554:	3601      	adds	r6, #1
 8004556:	e7f2      	b.n	800453e <__libc_init_array+0x1e>
 8004558:	08005df0 	.word	0x08005df0
 800455c:	08005df0 	.word	0x08005df0
 8004560:	08005df0 	.word	0x08005df0
 8004564:	08005df4 	.word	0x08005df4

08004568 <malloc>:
 8004568:	4b02      	ldr	r3, [pc, #8]	; (8004574 <malloc+0xc>)
 800456a:	4601      	mov	r1, r0
 800456c:	6818      	ldr	r0, [r3, #0]
 800456e:	f000 b877 	b.w	8004660 <_malloc_r>
 8004572:	bf00      	nop
 8004574:	2000007c 	.word	0x2000007c

08004578 <memset>:
 8004578:	4402      	add	r2, r0
 800457a:	4603      	mov	r3, r0
 800457c:	4293      	cmp	r3, r2
 800457e:	d100      	bne.n	8004582 <memset+0xa>
 8004580:	4770      	bx	lr
 8004582:	f803 1b01 	strb.w	r1, [r3], #1
 8004586:	e7f9      	b.n	800457c <memset+0x4>

08004588 <_free_r>:
 8004588:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800458a:	2900      	cmp	r1, #0
 800458c:	d044      	beq.n	8004618 <_free_r+0x90>
 800458e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004592:	9001      	str	r0, [sp, #4]
 8004594:	2b00      	cmp	r3, #0
 8004596:	f1a1 0404 	sub.w	r4, r1, #4
 800459a:	bfb8      	it	lt
 800459c:	18e4      	addlt	r4, r4, r3
 800459e:	f000 ff01 	bl	80053a4 <__malloc_lock>
 80045a2:	4a1e      	ldr	r2, [pc, #120]	; (800461c <_free_r+0x94>)
 80045a4:	9801      	ldr	r0, [sp, #4]
 80045a6:	6813      	ldr	r3, [r2, #0]
 80045a8:	b933      	cbnz	r3, 80045b8 <_free_r+0x30>
 80045aa:	6063      	str	r3, [r4, #4]
 80045ac:	6014      	str	r4, [r2, #0]
 80045ae:	b003      	add	sp, #12
 80045b0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80045b4:	f000 befc 	b.w	80053b0 <__malloc_unlock>
 80045b8:	42a3      	cmp	r3, r4
 80045ba:	d908      	bls.n	80045ce <_free_r+0x46>
 80045bc:	6825      	ldr	r5, [r4, #0]
 80045be:	1961      	adds	r1, r4, r5
 80045c0:	428b      	cmp	r3, r1
 80045c2:	bf01      	itttt	eq
 80045c4:	6819      	ldreq	r1, [r3, #0]
 80045c6:	685b      	ldreq	r3, [r3, #4]
 80045c8:	1949      	addeq	r1, r1, r5
 80045ca:	6021      	streq	r1, [r4, #0]
 80045cc:	e7ed      	b.n	80045aa <_free_r+0x22>
 80045ce:	461a      	mov	r2, r3
 80045d0:	685b      	ldr	r3, [r3, #4]
 80045d2:	b10b      	cbz	r3, 80045d8 <_free_r+0x50>
 80045d4:	42a3      	cmp	r3, r4
 80045d6:	d9fa      	bls.n	80045ce <_free_r+0x46>
 80045d8:	6811      	ldr	r1, [r2, #0]
 80045da:	1855      	adds	r5, r2, r1
 80045dc:	42a5      	cmp	r5, r4
 80045de:	d10b      	bne.n	80045f8 <_free_r+0x70>
 80045e0:	6824      	ldr	r4, [r4, #0]
 80045e2:	4421      	add	r1, r4
 80045e4:	1854      	adds	r4, r2, r1
 80045e6:	42a3      	cmp	r3, r4
 80045e8:	6011      	str	r1, [r2, #0]
 80045ea:	d1e0      	bne.n	80045ae <_free_r+0x26>
 80045ec:	681c      	ldr	r4, [r3, #0]
 80045ee:	685b      	ldr	r3, [r3, #4]
 80045f0:	6053      	str	r3, [r2, #4]
 80045f2:	4421      	add	r1, r4
 80045f4:	6011      	str	r1, [r2, #0]
 80045f6:	e7da      	b.n	80045ae <_free_r+0x26>
 80045f8:	d902      	bls.n	8004600 <_free_r+0x78>
 80045fa:	230c      	movs	r3, #12
 80045fc:	6003      	str	r3, [r0, #0]
 80045fe:	e7d6      	b.n	80045ae <_free_r+0x26>
 8004600:	6825      	ldr	r5, [r4, #0]
 8004602:	1961      	adds	r1, r4, r5
 8004604:	428b      	cmp	r3, r1
 8004606:	bf04      	itt	eq
 8004608:	6819      	ldreq	r1, [r3, #0]
 800460a:	685b      	ldreq	r3, [r3, #4]
 800460c:	6063      	str	r3, [r4, #4]
 800460e:	bf04      	itt	eq
 8004610:	1949      	addeq	r1, r1, r5
 8004612:	6021      	streq	r1, [r4, #0]
 8004614:	6054      	str	r4, [r2, #4]
 8004616:	e7ca      	b.n	80045ae <_free_r+0x26>
 8004618:	b003      	add	sp, #12
 800461a:	bd30      	pop	{r4, r5, pc}
 800461c:	200001b4 	.word	0x200001b4

08004620 <sbrk_aligned>:
 8004620:	b570      	push	{r4, r5, r6, lr}
 8004622:	4e0e      	ldr	r6, [pc, #56]	; (800465c <sbrk_aligned+0x3c>)
 8004624:	460c      	mov	r4, r1
 8004626:	6831      	ldr	r1, [r6, #0]
 8004628:	4605      	mov	r5, r0
 800462a:	b911      	cbnz	r1, 8004632 <sbrk_aligned+0x12>
 800462c:	f000 fb7a 	bl	8004d24 <_sbrk_r>
 8004630:	6030      	str	r0, [r6, #0]
 8004632:	4621      	mov	r1, r4
 8004634:	4628      	mov	r0, r5
 8004636:	f000 fb75 	bl	8004d24 <_sbrk_r>
 800463a:	1c43      	adds	r3, r0, #1
 800463c:	d00a      	beq.n	8004654 <sbrk_aligned+0x34>
 800463e:	1cc4      	adds	r4, r0, #3
 8004640:	f024 0403 	bic.w	r4, r4, #3
 8004644:	42a0      	cmp	r0, r4
 8004646:	d007      	beq.n	8004658 <sbrk_aligned+0x38>
 8004648:	1a21      	subs	r1, r4, r0
 800464a:	4628      	mov	r0, r5
 800464c:	f000 fb6a 	bl	8004d24 <_sbrk_r>
 8004650:	3001      	adds	r0, #1
 8004652:	d101      	bne.n	8004658 <sbrk_aligned+0x38>
 8004654:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8004658:	4620      	mov	r0, r4
 800465a:	bd70      	pop	{r4, r5, r6, pc}
 800465c:	200001b8 	.word	0x200001b8

08004660 <_malloc_r>:
 8004660:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004664:	1ccd      	adds	r5, r1, #3
 8004666:	f025 0503 	bic.w	r5, r5, #3
 800466a:	3508      	adds	r5, #8
 800466c:	2d0c      	cmp	r5, #12
 800466e:	bf38      	it	cc
 8004670:	250c      	movcc	r5, #12
 8004672:	2d00      	cmp	r5, #0
 8004674:	4607      	mov	r7, r0
 8004676:	db01      	blt.n	800467c <_malloc_r+0x1c>
 8004678:	42a9      	cmp	r1, r5
 800467a:	d905      	bls.n	8004688 <_malloc_r+0x28>
 800467c:	230c      	movs	r3, #12
 800467e:	603b      	str	r3, [r7, #0]
 8004680:	2600      	movs	r6, #0
 8004682:	4630      	mov	r0, r6
 8004684:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004688:	4e2e      	ldr	r6, [pc, #184]	; (8004744 <_malloc_r+0xe4>)
 800468a:	f000 fe8b 	bl	80053a4 <__malloc_lock>
 800468e:	6833      	ldr	r3, [r6, #0]
 8004690:	461c      	mov	r4, r3
 8004692:	bb34      	cbnz	r4, 80046e2 <_malloc_r+0x82>
 8004694:	4629      	mov	r1, r5
 8004696:	4638      	mov	r0, r7
 8004698:	f7ff ffc2 	bl	8004620 <sbrk_aligned>
 800469c:	1c43      	adds	r3, r0, #1
 800469e:	4604      	mov	r4, r0
 80046a0:	d14d      	bne.n	800473e <_malloc_r+0xde>
 80046a2:	6834      	ldr	r4, [r6, #0]
 80046a4:	4626      	mov	r6, r4
 80046a6:	2e00      	cmp	r6, #0
 80046a8:	d140      	bne.n	800472c <_malloc_r+0xcc>
 80046aa:	6823      	ldr	r3, [r4, #0]
 80046ac:	4631      	mov	r1, r6
 80046ae:	4638      	mov	r0, r7
 80046b0:	eb04 0803 	add.w	r8, r4, r3
 80046b4:	f000 fb36 	bl	8004d24 <_sbrk_r>
 80046b8:	4580      	cmp	r8, r0
 80046ba:	d13a      	bne.n	8004732 <_malloc_r+0xd2>
 80046bc:	6821      	ldr	r1, [r4, #0]
 80046be:	3503      	adds	r5, #3
 80046c0:	1a6d      	subs	r5, r5, r1
 80046c2:	f025 0503 	bic.w	r5, r5, #3
 80046c6:	3508      	adds	r5, #8
 80046c8:	2d0c      	cmp	r5, #12
 80046ca:	bf38      	it	cc
 80046cc:	250c      	movcc	r5, #12
 80046ce:	4629      	mov	r1, r5
 80046d0:	4638      	mov	r0, r7
 80046d2:	f7ff ffa5 	bl	8004620 <sbrk_aligned>
 80046d6:	3001      	adds	r0, #1
 80046d8:	d02b      	beq.n	8004732 <_malloc_r+0xd2>
 80046da:	6823      	ldr	r3, [r4, #0]
 80046dc:	442b      	add	r3, r5
 80046de:	6023      	str	r3, [r4, #0]
 80046e0:	e00e      	b.n	8004700 <_malloc_r+0xa0>
 80046e2:	6822      	ldr	r2, [r4, #0]
 80046e4:	1b52      	subs	r2, r2, r5
 80046e6:	d41e      	bmi.n	8004726 <_malloc_r+0xc6>
 80046e8:	2a0b      	cmp	r2, #11
 80046ea:	d916      	bls.n	800471a <_malloc_r+0xba>
 80046ec:	1961      	adds	r1, r4, r5
 80046ee:	42a3      	cmp	r3, r4
 80046f0:	6025      	str	r5, [r4, #0]
 80046f2:	bf18      	it	ne
 80046f4:	6059      	strne	r1, [r3, #4]
 80046f6:	6863      	ldr	r3, [r4, #4]
 80046f8:	bf08      	it	eq
 80046fa:	6031      	streq	r1, [r6, #0]
 80046fc:	5162      	str	r2, [r4, r5]
 80046fe:	604b      	str	r3, [r1, #4]
 8004700:	4638      	mov	r0, r7
 8004702:	f104 060b 	add.w	r6, r4, #11
 8004706:	f000 fe53 	bl	80053b0 <__malloc_unlock>
 800470a:	f026 0607 	bic.w	r6, r6, #7
 800470e:	1d23      	adds	r3, r4, #4
 8004710:	1af2      	subs	r2, r6, r3
 8004712:	d0b6      	beq.n	8004682 <_malloc_r+0x22>
 8004714:	1b9b      	subs	r3, r3, r6
 8004716:	50a3      	str	r3, [r4, r2]
 8004718:	e7b3      	b.n	8004682 <_malloc_r+0x22>
 800471a:	6862      	ldr	r2, [r4, #4]
 800471c:	42a3      	cmp	r3, r4
 800471e:	bf0c      	ite	eq
 8004720:	6032      	streq	r2, [r6, #0]
 8004722:	605a      	strne	r2, [r3, #4]
 8004724:	e7ec      	b.n	8004700 <_malloc_r+0xa0>
 8004726:	4623      	mov	r3, r4
 8004728:	6864      	ldr	r4, [r4, #4]
 800472a:	e7b2      	b.n	8004692 <_malloc_r+0x32>
 800472c:	4634      	mov	r4, r6
 800472e:	6876      	ldr	r6, [r6, #4]
 8004730:	e7b9      	b.n	80046a6 <_malloc_r+0x46>
 8004732:	230c      	movs	r3, #12
 8004734:	603b      	str	r3, [r7, #0]
 8004736:	4638      	mov	r0, r7
 8004738:	f000 fe3a 	bl	80053b0 <__malloc_unlock>
 800473c:	e7a1      	b.n	8004682 <_malloc_r+0x22>
 800473e:	6025      	str	r5, [r4, #0]
 8004740:	e7de      	b.n	8004700 <_malloc_r+0xa0>
 8004742:	bf00      	nop
 8004744:	200001b4 	.word	0x200001b4

08004748 <__sfputc_r>:
 8004748:	6893      	ldr	r3, [r2, #8]
 800474a:	3b01      	subs	r3, #1
 800474c:	2b00      	cmp	r3, #0
 800474e:	b410      	push	{r4}
 8004750:	6093      	str	r3, [r2, #8]
 8004752:	da08      	bge.n	8004766 <__sfputc_r+0x1e>
 8004754:	6994      	ldr	r4, [r2, #24]
 8004756:	42a3      	cmp	r3, r4
 8004758:	db01      	blt.n	800475e <__sfputc_r+0x16>
 800475a:	290a      	cmp	r1, #10
 800475c:	d103      	bne.n	8004766 <__sfputc_r+0x1e>
 800475e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004762:	f000 bb0f 	b.w	8004d84 <__swbuf_r>
 8004766:	6813      	ldr	r3, [r2, #0]
 8004768:	1c58      	adds	r0, r3, #1
 800476a:	6010      	str	r0, [r2, #0]
 800476c:	7019      	strb	r1, [r3, #0]
 800476e:	4608      	mov	r0, r1
 8004770:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004774:	4770      	bx	lr

08004776 <__sfputs_r>:
 8004776:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004778:	4606      	mov	r6, r0
 800477a:	460f      	mov	r7, r1
 800477c:	4614      	mov	r4, r2
 800477e:	18d5      	adds	r5, r2, r3
 8004780:	42ac      	cmp	r4, r5
 8004782:	d101      	bne.n	8004788 <__sfputs_r+0x12>
 8004784:	2000      	movs	r0, #0
 8004786:	e007      	b.n	8004798 <__sfputs_r+0x22>
 8004788:	f814 1b01 	ldrb.w	r1, [r4], #1
 800478c:	463a      	mov	r2, r7
 800478e:	4630      	mov	r0, r6
 8004790:	f7ff ffda 	bl	8004748 <__sfputc_r>
 8004794:	1c43      	adds	r3, r0, #1
 8004796:	d1f3      	bne.n	8004780 <__sfputs_r+0xa>
 8004798:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800479c <_vfiprintf_r>:
 800479c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80047a0:	460d      	mov	r5, r1
 80047a2:	b09d      	sub	sp, #116	; 0x74
 80047a4:	4614      	mov	r4, r2
 80047a6:	4698      	mov	r8, r3
 80047a8:	4606      	mov	r6, r0
 80047aa:	b118      	cbz	r0, 80047b4 <_vfiprintf_r+0x18>
 80047ac:	6983      	ldr	r3, [r0, #24]
 80047ae:	b90b      	cbnz	r3, 80047b4 <_vfiprintf_r+0x18>
 80047b0:	f000 fcca 	bl	8005148 <__sinit>
 80047b4:	4b89      	ldr	r3, [pc, #548]	; (80049dc <_vfiprintf_r+0x240>)
 80047b6:	429d      	cmp	r5, r3
 80047b8:	d11b      	bne.n	80047f2 <_vfiprintf_r+0x56>
 80047ba:	6875      	ldr	r5, [r6, #4]
 80047bc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80047be:	07d9      	lsls	r1, r3, #31
 80047c0:	d405      	bmi.n	80047ce <_vfiprintf_r+0x32>
 80047c2:	89ab      	ldrh	r3, [r5, #12]
 80047c4:	059a      	lsls	r2, r3, #22
 80047c6:	d402      	bmi.n	80047ce <_vfiprintf_r+0x32>
 80047c8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80047ca:	f000 fd5b 	bl	8005284 <__retarget_lock_acquire_recursive>
 80047ce:	89ab      	ldrh	r3, [r5, #12]
 80047d0:	071b      	lsls	r3, r3, #28
 80047d2:	d501      	bpl.n	80047d8 <_vfiprintf_r+0x3c>
 80047d4:	692b      	ldr	r3, [r5, #16]
 80047d6:	b9eb      	cbnz	r3, 8004814 <_vfiprintf_r+0x78>
 80047d8:	4629      	mov	r1, r5
 80047da:	4630      	mov	r0, r6
 80047dc:	f000 fb24 	bl	8004e28 <__swsetup_r>
 80047e0:	b1c0      	cbz	r0, 8004814 <_vfiprintf_r+0x78>
 80047e2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80047e4:	07dc      	lsls	r4, r3, #31
 80047e6:	d50e      	bpl.n	8004806 <_vfiprintf_r+0x6a>
 80047e8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80047ec:	b01d      	add	sp, #116	; 0x74
 80047ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80047f2:	4b7b      	ldr	r3, [pc, #492]	; (80049e0 <_vfiprintf_r+0x244>)
 80047f4:	429d      	cmp	r5, r3
 80047f6:	d101      	bne.n	80047fc <_vfiprintf_r+0x60>
 80047f8:	68b5      	ldr	r5, [r6, #8]
 80047fa:	e7df      	b.n	80047bc <_vfiprintf_r+0x20>
 80047fc:	4b79      	ldr	r3, [pc, #484]	; (80049e4 <_vfiprintf_r+0x248>)
 80047fe:	429d      	cmp	r5, r3
 8004800:	bf08      	it	eq
 8004802:	68f5      	ldreq	r5, [r6, #12]
 8004804:	e7da      	b.n	80047bc <_vfiprintf_r+0x20>
 8004806:	89ab      	ldrh	r3, [r5, #12]
 8004808:	0598      	lsls	r0, r3, #22
 800480a:	d4ed      	bmi.n	80047e8 <_vfiprintf_r+0x4c>
 800480c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800480e:	f000 fd3a 	bl	8005286 <__retarget_lock_release_recursive>
 8004812:	e7e9      	b.n	80047e8 <_vfiprintf_r+0x4c>
 8004814:	2300      	movs	r3, #0
 8004816:	9309      	str	r3, [sp, #36]	; 0x24
 8004818:	2320      	movs	r3, #32
 800481a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800481e:	f8cd 800c 	str.w	r8, [sp, #12]
 8004822:	2330      	movs	r3, #48	; 0x30
 8004824:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80049e8 <_vfiprintf_r+0x24c>
 8004828:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800482c:	f04f 0901 	mov.w	r9, #1
 8004830:	4623      	mov	r3, r4
 8004832:	469a      	mov	sl, r3
 8004834:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004838:	b10a      	cbz	r2, 800483e <_vfiprintf_r+0xa2>
 800483a:	2a25      	cmp	r2, #37	; 0x25
 800483c:	d1f9      	bne.n	8004832 <_vfiprintf_r+0x96>
 800483e:	ebba 0b04 	subs.w	fp, sl, r4
 8004842:	d00b      	beq.n	800485c <_vfiprintf_r+0xc0>
 8004844:	465b      	mov	r3, fp
 8004846:	4622      	mov	r2, r4
 8004848:	4629      	mov	r1, r5
 800484a:	4630      	mov	r0, r6
 800484c:	f7ff ff93 	bl	8004776 <__sfputs_r>
 8004850:	3001      	adds	r0, #1
 8004852:	f000 80aa 	beq.w	80049aa <_vfiprintf_r+0x20e>
 8004856:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004858:	445a      	add	r2, fp
 800485a:	9209      	str	r2, [sp, #36]	; 0x24
 800485c:	f89a 3000 	ldrb.w	r3, [sl]
 8004860:	2b00      	cmp	r3, #0
 8004862:	f000 80a2 	beq.w	80049aa <_vfiprintf_r+0x20e>
 8004866:	2300      	movs	r3, #0
 8004868:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800486c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004870:	f10a 0a01 	add.w	sl, sl, #1
 8004874:	9304      	str	r3, [sp, #16]
 8004876:	9307      	str	r3, [sp, #28]
 8004878:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800487c:	931a      	str	r3, [sp, #104]	; 0x68
 800487e:	4654      	mov	r4, sl
 8004880:	2205      	movs	r2, #5
 8004882:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004886:	4858      	ldr	r0, [pc, #352]	; (80049e8 <_vfiprintf_r+0x24c>)
 8004888:	f7fb fcba 	bl	8000200 <memchr>
 800488c:	9a04      	ldr	r2, [sp, #16]
 800488e:	b9d8      	cbnz	r0, 80048c8 <_vfiprintf_r+0x12c>
 8004890:	06d1      	lsls	r1, r2, #27
 8004892:	bf44      	itt	mi
 8004894:	2320      	movmi	r3, #32
 8004896:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800489a:	0713      	lsls	r3, r2, #28
 800489c:	bf44      	itt	mi
 800489e:	232b      	movmi	r3, #43	; 0x2b
 80048a0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80048a4:	f89a 3000 	ldrb.w	r3, [sl]
 80048a8:	2b2a      	cmp	r3, #42	; 0x2a
 80048aa:	d015      	beq.n	80048d8 <_vfiprintf_r+0x13c>
 80048ac:	9a07      	ldr	r2, [sp, #28]
 80048ae:	4654      	mov	r4, sl
 80048b0:	2000      	movs	r0, #0
 80048b2:	f04f 0c0a 	mov.w	ip, #10
 80048b6:	4621      	mov	r1, r4
 80048b8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80048bc:	3b30      	subs	r3, #48	; 0x30
 80048be:	2b09      	cmp	r3, #9
 80048c0:	d94e      	bls.n	8004960 <_vfiprintf_r+0x1c4>
 80048c2:	b1b0      	cbz	r0, 80048f2 <_vfiprintf_r+0x156>
 80048c4:	9207      	str	r2, [sp, #28]
 80048c6:	e014      	b.n	80048f2 <_vfiprintf_r+0x156>
 80048c8:	eba0 0308 	sub.w	r3, r0, r8
 80048cc:	fa09 f303 	lsl.w	r3, r9, r3
 80048d0:	4313      	orrs	r3, r2
 80048d2:	9304      	str	r3, [sp, #16]
 80048d4:	46a2      	mov	sl, r4
 80048d6:	e7d2      	b.n	800487e <_vfiprintf_r+0xe2>
 80048d8:	9b03      	ldr	r3, [sp, #12]
 80048da:	1d19      	adds	r1, r3, #4
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	9103      	str	r1, [sp, #12]
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	bfbb      	ittet	lt
 80048e4:	425b      	neglt	r3, r3
 80048e6:	f042 0202 	orrlt.w	r2, r2, #2
 80048ea:	9307      	strge	r3, [sp, #28]
 80048ec:	9307      	strlt	r3, [sp, #28]
 80048ee:	bfb8      	it	lt
 80048f0:	9204      	strlt	r2, [sp, #16]
 80048f2:	7823      	ldrb	r3, [r4, #0]
 80048f4:	2b2e      	cmp	r3, #46	; 0x2e
 80048f6:	d10c      	bne.n	8004912 <_vfiprintf_r+0x176>
 80048f8:	7863      	ldrb	r3, [r4, #1]
 80048fa:	2b2a      	cmp	r3, #42	; 0x2a
 80048fc:	d135      	bne.n	800496a <_vfiprintf_r+0x1ce>
 80048fe:	9b03      	ldr	r3, [sp, #12]
 8004900:	1d1a      	adds	r2, r3, #4
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	9203      	str	r2, [sp, #12]
 8004906:	2b00      	cmp	r3, #0
 8004908:	bfb8      	it	lt
 800490a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800490e:	3402      	adds	r4, #2
 8004910:	9305      	str	r3, [sp, #20]
 8004912:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80049f8 <_vfiprintf_r+0x25c>
 8004916:	7821      	ldrb	r1, [r4, #0]
 8004918:	2203      	movs	r2, #3
 800491a:	4650      	mov	r0, sl
 800491c:	f7fb fc70 	bl	8000200 <memchr>
 8004920:	b140      	cbz	r0, 8004934 <_vfiprintf_r+0x198>
 8004922:	2340      	movs	r3, #64	; 0x40
 8004924:	eba0 000a 	sub.w	r0, r0, sl
 8004928:	fa03 f000 	lsl.w	r0, r3, r0
 800492c:	9b04      	ldr	r3, [sp, #16]
 800492e:	4303      	orrs	r3, r0
 8004930:	3401      	adds	r4, #1
 8004932:	9304      	str	r3, [sp, #16]
 8004934:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004938:	482c      	ldr	r0, [pc, #176]	; (80049ec <_vfiprintf_r+0x250>)
 800493a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800493e:	2206      	movs	r2, #6
 8004940:	f7fb fc5e 	bl	8000200 <memchr>
 8004944:	2800      	cmp	r0, #0
 8004946:	d03f      	beq.n	80049c8 <_vfiprintf_r+0x22c>
 8004948:	4b29      	ldr	r3, [pc, #164]	; (80049f0 <_vfiprintf_r+0x254>)
 800494a:	bb1b      	cbnz	r3, 8004994 <_vfiprintf_r+0x1f8>
 800494c:	9b03      	ldr	r3, [sp, #12]
 800494e:	3307      	adds	r3, #7
 8004950:	f023 0307 	bic.w	r3, r3, #7
 8004954:	3308      	adds	r3, #8
 8004956:	9303      	str	r3, [sp, #12]
 8004958:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800495a:	443b      	add	r3, r7
 800495c:	9309      	str	r3, [sp, #36]	; 0x24
 800495e:	e767      	b.n	8004830 <_vfiprintf_r+0x94>
 8004960:	fb0c 3202 	mla	r2, ip, r2, r3
 8004964:	460c      	mov	r4, r1
 8004966:	2001      	movs	r0, #1
 8004968:	e7a5      	b.n	80048b6 <_vfiprintf_r+0x11a>
 800496a:	2300      	movs	r3, #0
 800496c:	3401      	adds	r4, #1
 800496e:	9305      	str	r3, [sp, #20]
 8004970:	4619      	mov	r1, r3
 8004972:	f04f 0c0a 	mov.w	ip, #10
 8004976:	4620      	mov	r0, r4
 8004978:	f810 2b01 	ldrb.w	r2, [r0], #1
 800497c:	3a30      	subs	r2, #48	; 0x30
 800497e:	2a09      	cmp	r2, #9
 8004980:	d903      	bls.n	800498a <_vfiprintf_r+0x1ee>
 8004982:	2b00      	cmp	r3, #0
 8004984:	d0c5      	beq.n	8004912 <_vfiprintf_r+0x176>
 8004986:	9105      	str	r1, [sp, #20]
 8004988:	e7c3      	b.n	8004912 <_vfiprintf_r+0x176>
 800498a:	fb0c 2101 	mla	r1, ip, r1, r2
 800498e:	4604      	mov	r4, r0
 8004990:	2301      	movs	r3, #1
 8004992:	e7f0      	b.n	8004976 <_vfiprintf_r+0x1da>
 8004994:	ab03      	add	r3, sp, #12
 8004996:	9300      	str	r3, [sp, #0]
 8004998:	462a      	mov	r2, r5
 800499a:	4b16      	ldr	r3, [pc, #88]	; (80049f4 <_vfiprintf_r+0x258>)
 800499c:	a904      	add	r1, sp, #16
 800499e:	4630      	mov	r0, r6
 80049a0:	f3af 8000 	nop.w
 80049a4:	4607      	mov	r7, r0
 80049a6:	1c78      	adds	r0, r7, #1
 80049a8:	d1d6      	bne.n	8004958 <_vfiprintf_r+0x1bc>
 80049aa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80049ac:	07d9      	lsls	r1, r3, #31
 80049ae:	d405      	bmi.n	80049bc <_vfiprintf_r+0x220>
 80049b0:	89ab      	ldrh	r3, [r5, #12]
 80049b2:	059a      	lsls	r2, r3, #22
 80049b4:	d402      	bmi.n	80049bc <_vfiprintf_r+0x220>
 80049b6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80049b8:	f000 fc65 	bl	8005286 <__retarget_lock_release_recursive>
 80049bc:	89ab      	ldrh	r3, [r5, #12]
 80049be:	065b      	lsls	r3, r3, #25
 80049c0:	f53f af12 	bmi.w	80047e8 <_vfiprintf_r+0x4c>
 80049c4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80049c6:	e711      	b.n	80047ec <_vfiprintf_r+0x50>
 80049c8:	ab03      	add	r3, sp, #12
 80049ca:	9300      	str	r3, [sp, #0]
 80049cc:	462a      	mov	r2, r5
 80049ce:	4b09      	ldr	r3, [pc, #36]	; (80049f4 <_vfiprintf_r+0x258>)
 80049d0:	a904      	add	r1, sp, #16
 80049d2:	4630      	mov	r0, r6
 80049d4:	f000 f880 	bl	8004ad8 <_printf_i>
 80049d8:	e7e4      	b.n	80049a4 <_vfiprintf_r+0x208>
 80049da:	bf00      	nop
 80049dc:	08005da8 	.word	0x08005da8
 80049e0:	08005dc8 	.word	0x08005dc8
 80049e4:	08005d88 	.word	0x08005d88
 80049e8:	08005d54 	.word	0x08005d54
 80049ec:	08005d5e 	.word	0x08005d5e
 80049f0:	00000000 	.word	0x00000000
 80049f4:	08004777 	.word	0x08004777
 80049f8:	08005d5a 	.word	0x08005d5a

080049fc <_printf_common>:
 80049fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004a00:	4616      	mov	r6, r2
 8004a02:	4699      	mov	r9, r3
 8004a04:	688a      	ldr	r2, [r1, #8]
 8004a06:	690b      	ldr	r3, [r1, #16]
 8004a08:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004a0c:	4293      	cmp	r3, r2
 8004a0e:	bfb8      	it	lt
 8004a10:	4613      	movlt	r3, r2
 8004a12:	6033      	str	r3, [r6, #0]
 8004a14:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004a18:	4607      	mov	r7, r0
 8004a1a:	460c      	mov	r4, r1
 8004a1c:	b10a      	cbz	r2, 8004a22 <_printf_common+0x26>
 8004a1e:	3301      	adds	r3, #1
 8004a20:	6033      	str	r3, [r6, #0]
 8004a22:	6823      	ldr	r3, [r4, #0]
 8004a24:	0699      	lsls	r1, r3, #26
 8004a26:	bf42      	ittt	mi
 8004a28:	6833      	ldrmi	r3, [r6, #0]
 8004a2a:	3302      	addmi	r3, #2
 8004a2c:	6033      	strmi	r3, [r6, #0]
 8004a2e:	6825      	ldr	r5, [r4, #0]
 8004a30:	f015 0506 	ands.w	r5, r5, #6
 8004a34:	d106      	bne.n	8004a44 <_printf_common+0x48>
 8004a36:	f104 0a19 	add.w	sl, r4, #25
 8004a3a:	68e3      	ldr	r3, [r4, #12]
 8004a3c:	6832      	ldr	r2, [r6, #0]
 8004a3e:	1a9b      	subs	r3, r3, r2
 8004a40:	42ab      	cmp	r3, r5
 8004a42:	dc26      	bgt.n	8004a92 <_printf_common+0x96>
 8004a44:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004a48:	1e13      	subs	r3, r2, #0
 8004a4a:	6822      	ldr	r2, [r4, #0]
 8004a4c:	bf18      	it	ne
 8004a4e:	2301      	movne	r3, #1
 8004a50:	0692      	lsls	r2, r2, #26
 8004a52:	d42b      	bmi.n	8004aac <_printf_common+0xb0>
 8004a54:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004a58:	4649      	mov	r1, r9
 8004a5a:	4638      	mov	r0, r7
 8004a5c:	47c0      	blx	r8
 8004a5e:	3001      	adds	r0, #1
 8004a60:	d01e      	beq.n	8004aa0 <_printf_common+0xa4>
 8004a62:	6823      	ldr	r3, [r4, #0]
 8004a64:	68e5      	ldr	r5, [r4, #12]
 8004a66:	6832      	ldr	r2, [r6, #0]
 8004a68:	f003 0306 	and.w	r3, r3, #6
 8004a6c:	2b04      	cmp	r3, #4
 8004a6e:	bf08      	it	eq
 8004a70:	1aad      	subeq	r5, r5, r2
 8004a72:	68a3      	ldr	r3, [r4, #8]
 8004a74:	6922      	ldr	r2, [r4, #16]
 8004a76:	bf0c      	ite	eq
 8004a78:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004a7c:	2500      	movne	r5, #0
 8004a7e:	4293      	cmp	r3, r2
 8004a80:	bfc4      	itt	gt
 8004a82:	1a9b      	subgt	r3, r3, r2
 8004a84:	18ed      	addgt	r5, r5, r3
 8004a86:	2600      	movs	r6, #0
 8004a88:	341a      	adds	r4, #26
 8004a8a:	42b5      	cmp	r5, r6
 8004a8c:	d11a      	bne.n	8004ac4 <_printf_common+0xc8>
 8004a8e:	2000      	movs	r0, #0
 8004a90:	e008      	b.n	8004aa4 <_printf_common+0xa8>
 8004a92:	2301      	movs	r3, #1
 8004a94:	4652      	mov	r2, sl
 8004a96:	4649      	mov	r1, r9
 8004a98:	4638      	mov	r0, r7
 8004a9a:	47c0      	blx	r8
 8004a9c:	3001      	adds	r0, #1
 8004a9e:	d103      	bne.n	8004aa8 <_printf_common+0xac>
 8004aa0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004aa4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004aa8:	3501      	adds	r5, #1
 8004aaa:	e7c6      	b.n	8004a3a <_printf_common+0x3e>
 8004aac:	18e1      	adds	r1, r4, r3
 8004aae:	1c5a      	adds	r2, r3, #1
 8004ab0:	2030      	movs	r0, #48	; 0x30
 8004ab2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004ab6:	4422      	add	r2, r4
 8004ab8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004abc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004ac0:	3302      	adds	r3, #2
 8004ac2:	e7c7      	b.n	8004a54 <_printf_common+0x58>
 8004ac4:	2301      	movs	r3, #1
 8004ac6:	4622      	mov	r2, r4
 8004ac8:	4649      	mov	r1, r9
 8004aca:	4638      	mov	r0, r7
 8004acc:	47c0      	blx	r8
 8004ace:	3001      	adds	r0, #1
 8004ad0:	d0e6      	beq.n	8004aa0 <_printf_common+0xa4>
 8004ad2:	3601      	adds	r6, #1
 8004ad4:	e7d9      	b.n	8004a8a <_printf_common+0x8e>
	...

08004ad8 <_printf_i>:
 8004ad8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004adc:	7e0f      	ldrb	r7, [r1, #24]
 8004ade:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004ae0:	2f78      	cmp	r7, #120	; 0x78
 8004ae2:	4691      	mov	r9, r2
 8004ae4:	4680      	mov	r8, r0
 8004ae6:	460c      	mov	r4, r1
 8004ae8:	469a      	mov	sl, r3
 8004aea:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004aee:	d807      	bhi.n	8004b00 <_printf_i+0x28>
 8004af0:	2f62      	cmp	r7, #98	; 0x62
 8004af2:	d80a      	bhi.n	8004b0a <_printf_i+0x32>
 8004af4:	2f00      	cmp	r7, #0
 8004af6:	f000 80d8 	beq.w	8004caa <_printf_i+0x1d2>
 8004afa:	2f58      	cmp	r7, #88	; 0x58
 8004afc:	f000 80a3 	beq.w	8004c46 <_printf_i+0x16e>
 8004b00:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004b04:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004b08:	e03a      	b.n	8004b80 <_printf_i+0xa8>
 8004b0a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004b0e:	2b15      	cmp	r3, #21
 8004b10:	d8f6      	bhi.n	8004b00 <_printf_i+0x28>
 8004b12:	a101      	add	r1, pc, #4	; (adr r1, 8004b18 <_printf_i+0x40>)
 8004b14:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004b18:	08004b71 	.word	0x08004b71
 8004b1c:	08004b85 	.word	0x08004b85
 8004b20:	08004b01 	.word	0x08004b01
 8004b24:	08004b01 	.word	0x08004b01
 8004b28:	08004b01 	.word	0x08004b01
 8004b2c:	08004b01 	.word	0x08004b01
 8004b30:	08004b85 	.word	0x08004b85
 8004b34:	08004b01 	.word	0x08004b01
 8004b38:	08004b01 	.word	0x08004b01
 8004b3c:	08004b01 	.word	0x08004b01
 8004b40:	08004b01 	.word	0x08004b01
 8004b44:	08004c91 	.word	0x08004c91
 8004b48:	08004bb5 	.word	0x08004bb5
 8004b4c:	08004c73 	.word	0x08004c73
 8004b50:	08004b01 	.word	0x08004b01
 8004b54:	08004b01 	.word	0x08004b01
 8004b58:	08004cb3 	.word	0x08004cb3
 8004b5c:	08004b01 	.word	0x08004b01
 8004b60:	08004bb5 	.word	0x08004bb5
 8004b64:	08004b01 	.word	0x08004b01
 8004b68:	08004b01 	.word	0x08004b01
 8004b6c:	08004c7b 	.word	0x08004c7b
 8004b70:	682b      	ldr	r3, [r5, #0]
 8004b72:	1d1a      	adds	r2, r3, #4
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	602a      	str	r2, [r5, #0]
 8004b78:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004b7c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004b80:	2301      	movs	r3, #1
 8004b82:	e0a3      	b.n	8004ccc <_printf_i+0x1f4>
 8004b84:	6820      	ldr	r0, [r4, #0]
 8004b86:	6829      	ldr	r1, [r5, #0]
 8004b88:	0606      	lsls	r6, r0, #24
 8004b8a:	f101 0304 	add.w	r3, r1, #4
 8004b8e:	d50a      	bpl.n	8004ba6 <_printf_i+0xce>
 8004b90:	680e      	ldr	r6, [r1, #0]
 8004b92:	602b      	str	r3, [r5, #0]
 8004b94:	2e00      	cmp	r6, #0
 8004b96:	da03      	bge.n	8004ba0 <_printf_i+0xc8>
 8004b98:	232d      	movs	r3, #45	; 0x2d
 8004b9a:	4276      	negs	r6, r6
 8004b9c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004ba0:	485e      	ldr	r0, [pc, #376]	; (8004d1c <_printf_i+0x244>)
 8004ba2:	230a      	movs	r3, #10
 8004ba4:	e019      	b.n	8004bda <_printf_i+0x102>
 8004ba6:	680e      	ldr	r6, [r1, #0]
 8004ba8:	602b      	str	r3, [r5, #0]
 8004baa:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004bae:	bf18      	it	ne
 8004bb0:	b236      	sxthne	r6, r6
 8004bb2:	e7ef      	b.n	8004b94 <_printf_i+0xbc>
 8004bb4:	682b      	ldr	r3, [r5, #0]
 8004bb6:	6820      	ldr	r0, [r4, #0]
 8004bb8:	1d19      	adds	r1, r3, #4
 8004bba:	6029      	str	r1, [r5, #0]
 8004bbc:	0601      	lsls	r1, r0, #24
 8004bbe:	d501      	bpl.n	8004bc4 <_printf_i+0xec>
 8004bc0:	681e      	ldr	r6, [r3, #0]
 8004bc2:	e002      	b.n	8004bca <_printf_i+0xf2>
 8004bc4:	0646      	lsls	r6, r0, #25
 8004bc6:	d5fb      	bpl.n	8004bc0 <_printf_i+0xe8>
 8004bc8:	881e      	ldrh	r6, [r3, #0]
 8004bca:	4854      	ldr	r0, [pc, #336]	; (8004d1c <_printf_i+0x244>)
 8004bcc:	2f6f      	cmp	r7, #111	; 0x6f
 8004bce:	bf0c      	ite	eq
 8004bd0:	2308      	moveq	r3, #8
 8004bd2:	230a      	movne	r3, #10
 8004bd4:	2100      	movs	r1, #0
 8004bd6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004bda:	6865      	ldr	r5, [r4, #4]
 8004bdc:	60a5      	str	r5, [r4, #8]
 8004bde:	2d00      	cmp	r5, #0
 8004be0:	bfa2      	ittt	ge
 8004be2:	6821      	ldrge	r1, [r4, #0]
 8004be4:	f021 0104 	bicge.w	r1, r1, #4
 8004be8:	6021      	strge	r1, [r4, #0]
 8004bea:	b90e      	cbnz	r6, 8004bf0 <_printf_i+0x118>
 8004bec:	2d00      	cmp	r5, #0
 8004bee:	d04d      	beq.n	8004c8c <_printf_i+0x1b4>
 8004bf0:	4615      	mov	r5, r2
 8004bf2:	fbb6 f1f3 	udiv	r1, r6, r3
 8004bf6:	fb03 6711 	mls	r7, r3, r1, r6
 8004bfa:	5dc7      	ldrb	r7, [r0, r7]
 8004bfc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004c00:	4637      	mov	r7, r6
 8004c02:	42bb      	cmp	r3, r7
 8004c04:	460e      	mov	r6, r1
 8004c06:	d9f4      	bls.n	8004bf2 <_printf_i+0x11a>
 8004c08:	2b08      	cmp	r3, #8
 8004c0a:	d10b      	bne.n	8004c24 <_printf_i+0x14c>
 8004c0c:	6823      	ldr	r3, [r4, #0]
 8004c0e:	07de      	lsls	r6, r3, #31
 8004c10:	d508      	bpl.n	8004c24 <_printf_i+0x14c>
 8004c12:	6923      	ldr	r3, [r4, #16]
 8004c14:	6861      	ldr	r1, [r4, #4]
 8004c16:	4299      	cmp	r1, r3
 8004c18:	bfde      	ittt	le
 8004c1a:	2330      	movle	r3, #48	; 0x30
 8004c1c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004c20:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8004c24:	1b52      	subs	r2, r2, r5
 8004c26:	6122      	str	r2, [r4, #16]
 8004c28:	f8cd a000 	str.w	sl, [sp]
 8004c2c:	464b      	mov	r3, r9
 8004c2e:	aa03      	add	r2, sp, #12
 8004c30:	4621      	mov	r1, r4
 8004c32:	4640      	mov	r0, r8
 8004c34:	f7ff fee2 	bl	80049fc <_printf_common>
 8004c38:	3001      	adds	r0, #1
 8004c3a:	d14c      	bne.n	8004cd6 <_printf_i+0x1fe>
 8004c3c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004c40:	b004      	add	sp, #16
 8004c42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c46:	4835      	ldr	r0, [pc, #212]	; (8004d1c <_printf_i+0x244>)
 8004c48:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004c4c:	6829      	ldr	r1, [r5, #0]
 8004c4e:	6823      	ldr	r3, [r4, #0]
 8004c50:	f851 6b04 	ldr.w	r6, [r1], #4
 8004c54:	6029      	str	r1, [r5, #0]
 8004c56:	061d      	lsls	r5, r3, #24
 8004c58:	d514      	bpl.n	8004c84 <_printf_i+0x1ac>
 8004c5a:	07df      	lsls	r7, r3, #31
 8004c5c:	bf44      	itt	mi
 8004c5e:	f043 0320 	orrmi.w	r3, r3, #32
 8004c62:	6023      	strmi	r3, [r4, #0]
 8004c64:	b91e      	cbnz	r6, 8004c6e <_printf_i+0x196>
 8004c66:	6823      	ldr	r3, [r4, #0]
 8004c68:	f023 0320 	bic.w	r3, r3, #32
 8004c6c:	6023      	str	r3, [r4, #0]
 8004c6e:	2310      	movs	r3, #16
 8004c70:	e7b0      	b.n	8004bd4 <_printf_i+0xfc>
 8004c72:	6823      	ldr	r3, [r4, #0]
 8004c74:	f043 0320 	orr.w	r3, r3, #32
 8004c78:	6023      	str	r3, [r4, #0]
 8004c7a:	2378      	movs	r3, #120	; 0x78
 8004c7c:	4828      	ldr	r0, [pc, #160]	; (8004d20 <_printf_i+0x248>)
 8004c7e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004c82:	e7e3      	b.n	8004c4c <_printf_i+0x174>
 8004c84:	0659      	lsls	r1, r3, #25
 8004c86:	bf48      	it	mi
 8004c88:	b2b6      	uxthmi	r6, r6
 8004c8a:	e7e6      	b.n	8004c5a <_printf_i+0x182>
 8004c8c:	4615      	mov	r5, r2
 8004c8e:	e7bb      	b.n	8004c08 <_printf_i+0x130>
 8004c90:	682b      	ldr	r3, [r5, #0]
 8004c92:	6826      	ldr	r6, [r4, #0]
 8004c94:	6961      	ldr	r1, [r4, #20]
 8004c96:	1d18      	adds	r0, r3, #4
 8004c98:	6028      	str	r0, [r5, #0]
 8004c9a:	0635      	lsls	r5, r6, #24
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	d501      	bpl.n	8004ca4 <_printf_i+0x1cc>
 8004ca0:	6019      	str	r1, [r3, #0]
 8004ca2:	e002      	b.n	8004caa <_printf_i+0x1d2>
 8004ca4:	0670      	lsls	r0, r6, #25
 8004ca6:	d5fb      	bpl.n	8004ca0 <_printf_i+0x1c8>
 8004ca8:	8019      	strh	r1, [r3, #0]
 8004caa:	2300      	movs	r3, #0
 8004cac:	6123      	str	r3, [r4, #16]
 8004cae:	4615      	mov	r5, r2
 8004cb0:	e7ba      	b.n	8004c28 <_printf_i+0x150>
 8004cb2:	682b      	ldr	r3, [r5, #0]
 8004cb4:	1d1a      	adds	r2, r3, #4
 8004cb6:	602a      	str	r2, [r5, #0]
 8004cb8:	681d      	ldr	r5, [r3, #0]
 8004cba:	6862      	ldr	r2, [r4, #4]
 8004cbc:	2100      	movs	r1, #0
 8004cbe:	4628      	mov	r0, r5
 8004cc0:	f7fb fa9e 	bl	8000200 <memchr>
 8004cc4:	b108      	cbz	r0, 8004cca <_printf_i+0x1f2>
 8004cc6:	1b40      	subs	r0, r0, r5
 8004cc8:	6060      	str	r0, [r4, #4]
 8004cca:	6863      	ldr	r3, [r4, #4]
 8004ccc:	6123      	str	r3, [r4, #16]
 8004cce:	2300      	movs	r3, #0
 8004cd0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004cd4:	e7a8      	b.n	8004c28 <_printf_i+0x150>
 8004cd6:	6923      	ldr	r3, [r4, #16]
 8004cd8:	462a      	mov	r2, r5
 8004cda:	4649      	mov	r1, r9
 8004cdc:	4640      	mov	r0, r8
 8004cde:	47d0      	blx	sl
 8004ce0:	3001      	adds	r0, #1
 8004ce2:	d0ab      	beq.n	8004c3c <_printf_i+0x164>
 8004ce4:	6823      	ldr	r3, [r4, #0]
 8004ce6:	079b      	lsls	r3, r3, #30
 8004ce8:	d413      	bmi.n	8004d12 <_printf_i+0x23a>
 8004cea:	68e0      	ldr	r0, [r4, #12]
 8004cec:	9b03      	ldr	r3, [sp, #12]
 8004cee:	4298      	cmp	r0, r3
 8004cf0:	bfb8      	it	lt
 8004cf2:	4618      	movlt	r0, r3
 8004cf4:	e7a4      	b.n	8004c40 <_printf_i+0x168>
 8004cf6:	2301      	movs	r3, #1
 8004cf8:	4632      	mov	r2, r6
 8004cfa:	4649      	mov	r1, r9
 8004cfc:	4640      	mov	r0, r8
 8004cfe:	47d0      	blx	sl
 8004d00:	3001      	adds	r0, #1
 8004d02:	d09b      	beq.n	8004c3c <_printf_i+0x164>
 8004d04:	3501      	adds	r5, #1
 8004d06:	68e3      	ldr	r3, [r4, #12]
 8004d08:	9903      	ldr	r1, [sp, #12]
 8004d0a:	1a5b      	subs	r3, r3, r1
 8004d0c:	42ab      	cmp	r3, r5
 8004d0e:	dcf2      	bgt.n	8004cf6 <_printf_i+0x21e>
 8004d10:	e7eb      	b.n	8004cea <_printf_i+0x212>
 8004d12:	2500      	movs	r5, #0
 8004d14:	f104 0619 	add.w	r6, r4, #25
 8004d18:	e7f5      	b.n	8004d06 <_printf_i+0x22e>
 8004d1a:	bf00      	nop
 8004d1c:	08005d65 	.word	0x08005d65
 8004d20:	08005d76 	.word	0x08005d76

08004d24 <_sbrk_r>:
 8004d24:	b538      	push	{r3, r4, r5, lr}
 8004d26:	4d06      	ldr	r5, [pc, #24]	; (8004d40 <_sbrk_r+0x1c>)
 8004d28:	2300      	movs	r3, #0
 8004d2a:	4604      	mov	r4, r0
 8004d2c:	4608      	mov	r0, r1
 8004d2e:	602b      	str	r3, [r5, #0]
 8004d30:	f7fb fe0a 	bl	8000948 <_sbrk>
 8004d34:	1c43      	adds	r3, r0, #1
 8004d36:	d102      	bne.n	8004d3e <_sbrk_r+0x1a>
 8004d38:	682b      	ldr	r3, [r5, #0]
 8004d3a:	b103      	cbz	r3, 8004d3e <_sbrk_r+0x1a>
 8004d3c:	6023      	str	r3, [r4, #0]
 8004d3e:	bd38      	pop	{r3, r4, r5, pc}
 8004d40:	200001c0 	.word	0x200001c0

08004d44 <siprintf>:
 8004d44:	b40e      	push	{r1, r2, r3}
 8004d46:	b500      	push	{lr}
 8004d48:	b09c      	sub	sp, #112	; 0x70
 8004d4a:	ab1d      	add	r3, sp, #116	; 0x74
 8004d4c:	9002      	str	r0, [sp, #8]
 8004d4e:	9006      	str	r0, [sp, #24]
 8004d50:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004d54:	4809      	ldr	r0, [pc, #36]	; (8004d7c <siprintf+0x38>)
 8004d56:	9107      	str	r1, [sp, #28]
 8004d58:	9104      	str	r1, [sp, #16]
 8004d5a:	4909      	ldr	r1, [pc, #36]	; (8004d80 <siprintf+0x3c>)
 8004d5c:	f853 2b04 	ldr.w	r2, [r3], #4
 8004d60:	9105      	str	r1, [sp, #20]
 8004d62:	6800      	ldr	r0, [r0, #0]
 8004d64:	9301      	str	r3, [sp, #4]
 8004d66:	a902      	add	r1, sp, #8
 8004d68:	f000 fbb2 	bl	80054d0 <_svfiprintf_r>
 8004d6c:	9b02      	ldr	r3, [sp, #8]
 8004d6e:	2200      	movs	r2, #0
 8004d70:	701a      	strb	r2, [r3, #0]
 8004d72:	b01c      	add	sp, #112	; 0x70
 8004d74:	f85d eb04 	ldr.w	lr, [sp], #4
 8004d78:	b003      	add	sp, #12
 8004d7a:	4770      	bx	lr
 8004d7c:	2000007c 	.word	0x2000007c
 8004d80:	ffff0208 	.word	0xffff0208

08004d84 <__swbuf_r>:
 8004d84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d86:	460e      	mov	r6, r1
 8004d88:	4614      	mov	r4, r2
 8004d8a:	4605      	mov	r5, r0
 8004d8c:	b118      	cbz	r0, 8004d96 <__swbuf_r+0x12>
 8004d8e:	6983      	ldr	r3, [r0, #24]
 8004d90:	b90b      	cbnz	r3, 8004d96 <__swbuf_r+0x12>
 8004d92:	f000 f9d9 	bl	8005148 <__sinit>
 8004d96:	4b21      	ldr	r3, [pc, #132]	; (8004e1c <__swbuf_r+0x98>)
 8004d98:	429c      	cmp	r4, r3
 8004d9a:	d12b      	bne.n	8004df4 <__swbuf_r+0x70>
 8004d9c:	686c      	ldr	r4, [r5, #4]
 8004d9e:	69a3      	ldr	r3, [r4, #24]
 8004da0:	60a3      	str	r3, [r4, #8]
 8004da2:	89a3      	ldrh	r3, [r4, #12]
 8004da4:	071a      	lsls	r2, r3, #28
 8004da6:	d52f      	bpl.n	8004e08 <__swbuf_r+0x84>
 8004da8:	6923      	ldr	r3, [r4, #16]
 8004daa:	b36b      	cbz	r3, 8004e08 <__swbuf_r+0x84>
 8004dac:	6923      	ldr	r3, [r4, #16]
 8004dae:	6820      	ldr	r0, [r4, #0]
 8004db0:	1ac0      	subs	r0, r0, r3
 8004db2:	6963      	ldr	r3, [r4, #20]
 8004db4:	b2f6      	uxtb	r6, r6
 8004db6:	4283      	cmp	r3, r0
 8004db8:	4637      	mov	r7, r6
 8004dba:	dc04      	bgt.n	8004dc6 <__swbuf_r+0x42>
 8004dbc:	4621      	mov	r1, r4
 8004dbe:	4628      	mov	r0, r5
 8004dc0:	f000 f92e 	bl	8005020 <_fflush_r>
 8004dc4:	bb30      	cbnz	r0, 8004e14 <__swbuf_r+0x90>
 8004dc6:	68a3      	ldr	r3, [r4, #8]
 8004dc8:	3b01      	subs	r3, #1
 8004dca:	60a3      	str	r3, [r4, #8]
 8004dcc:	6823      	ldr	r3, [r4, #0]
 8004dce:	1c5a      	adds	r2, r3, #1
 8004dd0:	6022      	str	r2, [r4, #0]
 8004dd2:	701e      	strb	r6, [r3, #0]
 8004dd4:	6963      	ldr	r3, [r4, #20]
 8004dd6:	3001      	adds	r0, #1
 8004dd8:	4283      	cmp	r3, r0
 8004dda:	d004      	beq.n	8004de6 <__swbuf_r+0x62>
 8004ddc:	89a3      	ldrh	r3, [r4, #12]
 8004dde:	07db      	lsls	r3, r3, #31
 8004de0:	d506      	bpl.n	8004df0 <__swbuf_r+0x6c>
 8004de2:	2e0a      	cmp	r6, #10
 8004de4:	d104      	bne.n	8004df0 <__swbuf_r+0x6c>
 8004de6:	4621      	mov	r1, r4
 8004de8:	4628      	mov	r0, r5
 8004dea:	f000 f919 	bl	8005020 <_fflush_r>
 8004dee:	b988      	cbnz	r0, 8004e14 <__swbuf_r+0x90>
 8004df0:	4638      	mov	r0, r7
 8004df2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004df4:	4b0a      	ldr	r3, [pc, #40]	; (8004e20 <__swbuf_r+0x9c>)
 8004df6:	429c      	cmp	r4, r3
 8004df8:	d101      	bne.n	8004dfe <__swbuf_r+0x7a>
 8004dfa:	68ac      	ldr	r4, [r5, #8]
 8004dfc:	e7cf      	b.n	8004d9e <__swbuf_r+0x1a>
 8004dfe:	4b09      	ldr	r3, [pc, #36]	; (8004e24 <__swbuf_r+0xa0>)
 8004e00:	429c      	cmp	r4, r3
 8004e02:	bf08      	it	eq
 8004e04:	68ec      	ldreq	r4, [r5, #12]
 8004e06:	e7ca      	b.n	8004d9e <__swbuf_r+0x1a>
 8004e08:	4621      	mov	r1, r4
 8004e0a:	4628      	mov	r0, r5
 8004e0c:	f000 f80c 	bl	8004e28 <__swsetup_r>
 8004e10:	2800      	cmp	r0, #0
 8004e12:	d0cb      	beq.n	8004dac <__swbuf_r+0x28>
 8004e14:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8004e18:	e7ea      	b.n	8004df0 <__swbuf_r+0x6c>
 8004e1a:	bf00      	nop
 8004e1c:	08005da8 	.word	0x08005da8
 8004e20:	08005dc8 	.word	0x08005dc8
 8004e24:	08005d88 	.word	0x08005d88

08004e28 <__swsetup_r>:
 8004e28:	4b32      	ldr	r3, [pc, #200]	; (8004ef4 <__swsetup_r+0xcc>)
 8004e2a:	b570      	push	{r4, r5, r6, lr}
 8004e2c:	681d      	ldr	r5, [r3, #0]
 8004e2e:	4606      	mov	r6, r0
 8004e30:	460c      	mov	r4, r1
 8004e32:	b125      	cbz	r5, 8004e3e <__swsetup_r+0x16>
 8004e34:	69ab      	ldr	r3, [r5, #24]
 8004e36:	b913      	cbnz	r3, 8004e3e <__swsetup_r+0x16>
 8004e38:	4628      	mov	r0, r5
 8004e3a:	f000 f985 	bl	8005148 <__sinit>
 8004e3e:	4b2e      	ldr	r3, [pc, #184]	; (8004ef8 <__swsetup_r+0xd0>)
 8004e40:	429c      	cmp	r4, r3
 8004e42:	d10f      	bne.n	8004e64 <__swsetup_r+0x3c>
 8004e44:	686c      	ldr	r4, [r5, #4]
 8004e46:	89a3      	ldrh	r3, [r4, #12]
 8004e48:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004e4c:	0719      	lsls	r1, r3, #28
 8004e4e:	d42c      	bmi.n	8004eaa <__swsetup_r+0x82>
 8004e50:	06dd      	lsls	r5, r3, #27
 8004e52:	d411      	bmi.n	8004e78 <__swsetup_r+0x50>
 8004e54:	2309      	movs	r3, #9
 8004e56:	6033      	str	r3, [r6, #0]
 8004e58:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004e5c:	81a3      	strh	r3, [r4, #12]
 8004e5e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004e62:	e03e      	b.n	8004ee2 <__swsetup_r+0xba>
 8004e64:	4b25      	ldr	r3, [pc, #148]	; (8004efc <__swsetup_r+0xd4>)
 8004e66:	429c      	cmp	r4, r3
 8004e68:	d101      	bne.n	8004e6e <__swsetup_r+0x46>
 8004e6a:	68ac      	ldr	r4, [r5, #8]
 8004e6c:	e7eb      	b.n	8004e46 <__swsetup_r+0x1e>
 8004e6e:	4b24      	ldr	r3, [pc, #144]	; (8004f00 <__swsetup_r+0xd8>)
 8004e70:	429c      	cmp	r4, r3
 8004e72:	bf08      	it	eq
 8004e74:	68ec      	ldreq	r4, [r5, #12]
 8004e76:	e7e6      	b.n	8004e46 <__swsetup_r+0x1e>
 8004e78:	0758      	lsls	r0, r3, #29
 8004e7a:	d512      	bpl.n	8004ea2 <__swsetup_r+0x7a>
 8004e7c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004e7e:	b141      	cbz	r1, 8004e92 <__swsetup_r+0x6a>
 8004e80:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004e84:	4299      	cmp	r1, r3
 8004e86:	d002      	beq.n	8004e8e <__swsetup_r+0x66>
 8004e88:	4630      	mov	r0, r6
 8004e8a:	f7ff fb7d 	bl	8004588 <_free_r>
 8004e8e:	2300      	movs	r3, #0
 8004e90:	6363      	str	r3, [r4, #52]	; 0x34
 8004e92:	89a3      	ldrh	r3, [r4, #12]
 8004e94:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004e98:	81a3      	strh	r3, [r4, #12]
 8004e9a:	2300      	movs	r3, #0
 8004e9c:	6063      	str	r3, [r4, #4]
 8004e9e:	6923      	ldr	r3, [r4, #16]
 8004ea0:	6023      	str	r3, [r4, #0]
 8004ea2:	89a3      	ldrh	r3, [r4, #12]
 8004ea4:	f043 0308 	orr.w	r3, r3, #8
 8004ea8:	81a3      	strh	r3, [r4, #12]
 8004eaa:	6923      	ldr	r3, [r4, #16]
 8004eac:	b94b      	cbnz	r3, 8004ec2 <__swsetup_r+0x9a>
 8004eae:	89a3      	ldrh	r3, [r4, #12]
 8004eb0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004eb4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004eb8:	d003      	beq.n	8004ec2 <__swsetup_r+0x9a>
 8004eba:	4621      	mov	r1, r4
 8004ebc:	4630      	mov	r0, r6
 8004ebe:	f000 fa09 	bl	80052d4 <__smakebuf_r>
 8004ec2:	89a0      	ldrh	r0, [r4, #12]
 8004ec4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004ec8:	f010 0301 	ands.w	r3, r0, #1
 8004ecc:	d00a      	beq.n	8004ee4 <__swsetup_r+0xbc>
 8004ece:	2300      	movs	r3, #0
 8004ed0:	60a3      	str	r3, [r4, #8]
 8004ed2:	6963      	ldr	r3, [r4, #20]
 8004ed4:	425b      	negs	r3, r3
 8004ed6:	61a3      	str	r3, [r4, #24]
 8004ed8:	6923      	ldr	r3, [r4, #16]
 8004eda:	b943      	cbnz	r3, 8004eee <__swsetup_r+0xc6>
 8004edc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004ee0:	d1ba      	bne.n	8004e58 <__swsetup_r+0x30>
 8004ee2:	bd70      	pop	{r4, r5, r6, pc}
 8004ee4:	0781      	lsls	r1, r0, #30
 8004ee6:	bf58      	it	pl
 8004ee8:	6963      	ldrpl	r3, [r4, #20]
 8004eea:	60a3      	str	r3, [r4, #8]
 8004eec:	e7f4      	b.n	8004ed8 <__swsetup_r+0xb0>
 8004eee:	2000      	movs	r0, #0
 8004ef0:	e7f7      	b.n	8004ee2 <__swsetup_r+0xba>
 8004ef2:	bf00      	nop
 8004ef4:	2000007c 	.word	0x2000007c
 8004ef8:	08005da8 	.word	0x08005da8
 8004efc:	08005dc8 	.word	0x08005dc8
 8004f00:	08005d88 	.word	0x08005d88

08004f04 <abort>:
 8004f04:	b508      	push	{r3, lr}
 8004f06:	2006      	movs	r0, #6
 8004f08:	f000 fc0a 	bl	8005720 <raise>
 8004f0c:	2001      	movs	r0, #1
 8004f0e:	f7fb fca3 	bl	8000858 <_exit>
	...

08004f14 <__sflush_r>:
 8004f14:	898a      	ldrh	r2, [r1, #12]
 8004f16:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004f1a:	4605      	mov	r5, r0
 8004f1c:	0710      	lsls	r0, r2, #28
 8004f1e:	460c      	mov	r4, r1
 8004f20:	d458      	bmi.n	8004fd4 <__sflush_r+0xc0>
 8004f22:	684b      	ldr	r3, [r1, #4]
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	dc05      	bgt.n	8004f34 <__sflush_r+0x20>
 8004f28:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	dc02      	bgt.n	8004f34 <__sflush_r+0x20>
 8004f2e:	2000      	movs	r0, #0
 8004f30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004f34:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004f36:	2e00      	cmp	r6, #0
 8004f38:	d0f9      	beq.n	8004f2e <__sflush_r+0x1a>
 8004f3a:	2300      	movs	r3, #0
 8004f3c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004f40:	682f      	ldr	r7, [r5, #0]
 8004f42:	602b      	str	r3, [r5, #0]
 8004f44:	d032      	beq.n	8004fac <__sflush_r+0x98>
 8004f46:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004f48:	89a3      	ldrh	r3, [r4, #12]
 8004f4a:	075a      	lsls	r2, r3, #29
 8004f4c:	d505      	bpl.n	8004f5a <__sflush_r+0x46>
 8004f4e:	6863      	ldr	r3, [r4, #4]
 8004f50:	1ac0      	subs	r0, r0, r3
 8004f52:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004f54:	b10b      	cbz	r3, 8004f5a <__sflush_r+0x46>
 8004f56:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004f58:	1ac0      	subs	r0, r0, r3
 8004f5a:	2300      	movs	r3, #0
 8004f5c:	4602      	mov	r2, r0
 8004f5e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004f60:	6a21      	ldr	r1, [r4, #32]
 8004f62:	4628      	mov	r0, r5
 8004f64:	47b0      	blx	r6
 8004f66:	1c43      	adds	r3, r0, #1
 8004f68:	89a3      	ldrh	r3, [r4, #12]
 8004f6a:	d106      	bne.n	8004f7a <__sflush_r+0x66>
 8004f6c:	6829      	ldr	r1, [r5, #0]
 8004f6e:	291d      	cmp	r1, #29
 8004f70:	d82c      	bhi.n	8004fcc <__sflush_r+0xb8>
 8004f72:	4a2a      	ldr	r2, [pc, #168]	; (800501c <__sflush_r+0x108>)
 8004f74:	40ca      	lsrs	r2, r1
 8004f76:	07d6      	lsls	r6, r2, #31
 8004f78:	d528      	bpl.n	8004fcc <__sflush_r+0xb8>
 8004f7a:	2200      	movs	r2, #0
 8004f7c:	6062      	str	r2, [r4, #4]
 8004f7e:	04d9      	lsls	r1, r3, #19
 8004f80:	6922      	ldr	r2, [r4, #16]
 8004f82:	6022      	str	r2, [r4, #0]
 8004f84:	d504      	bpl.n	8004f90 <__sflush_r+0x7c>
 8004f86:	1c42      	adds	r2, r0, #1
 8004f88:	d101      	bne.n	8004f8e <__sflush_r+0x7a>
 8004f8a:	682b      	ldr	r3, [r5, #0]
 8004f8c:	b903      	cbnz	r3, 8004f90 <__sflush_r+0x7c>
 8004f8e:	6560      	str	r0, [r4, #84]	; 0x54
 8004f90:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004f92:	602f      	str	r7, [r5, #0]
 8004f94:	2900      	cmp	r1, #0
 8004f96:	d0ca      	beq.n	8004f2e <__sflush_r+0x1a>
 8004f98:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004f9c:	4299      	cmp	r1, r3
 8004f9e:	d002      	beq.n	8004fa6 <__sflush_r+0x92>
 8004fa0:	4628      	mov	r0, r5
 8004fa2:	f7ff faf1 	bl	8004588 <_free_r>
 8004fa6:	2000      	movs	r0, #0
 8004fa8:	6360      	str	r0, [r4, #52]	; 0x34
 8004faa:	e7c1      	b.n	8004f30 <__sflush_r+0x1c>
 8004fac:	6a21      	ldr	r1, [r4, #32]
 8004fae:	2301      	movs	r3, #1
 8004fb0:	4628      	mov	r0, r5
 8004fb2:	47b0      	blx	r6
 8004fb4:	1c41      	adds	r1, r0, #1
 8004fb6:	d1c7      	bne.n	8004f48 <__sflush_r+0x34>
 8004fb8:	682b      	ldr	r3, [r5, #0]
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d0c4      	beq.n	8004f48 <__sflush_r+0x34>
 8004fbe:	2b1d      	cmp	r3, #29
 8004fc0:	d001      	beq.n	8004fc6 <__sflush_r+0xb2>
 8004fc2:	2b16      	cmp	r3, #22
 8004fc4:	d101      	bne.n	8004fca <__sflush_r+0xb6>
 8004fc6:	602f      	str	r7, [r5, #0]
 8004fc8:	e7b1      	b.n	8004f2e <__sflush_r+0x1a>
 8004fca:	89a3      	ldrh	r3, [r4, #12]
 8004fcc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004fd0:	81a3      	strh	r3, [r4, #12]
 8004fd2:	e7ad      	b.n	8004f30 <__sflush_r+0x1c>
 8004fd4:	690f      	ldr	r7, [r1, #16]
 8004fd6:	2f00      	cmp	r7, #0
 8004fd8:	d0a9      	beq.n	8004f2e <__sflush_r+0x1a>
 8004fda:	0793      	lsls	r3, r2, #30
 8004fdc:	680e      	ldr	r6, [r1, #0]
 8004fde:	bf08      	it	eq
 8004fe0:	694b      	ldreq	r3, [r1, #20]
 8004fe2:	600f      	str	r7, [r1, #0]
 8004fe4:	bf18      	it	ne
 8004fe6:	2300      	movne	r3, #0
 8004fe8:	eba6 0807 	sub.w	r8, r6, r7
 8004fec:	608b      	str	r3, [r1, #8]
 8004fee:	f1b8 0f00 	cmp.w	r8, #0
 8004ff2:	dd9c      	ble.n	8004f2e <__sflush_r+0x1a>
 8004ff4:	6a21      	ldr	r1, [r4, #32]
 8004ff6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004ff8:	4643      	mov	r3, r8
 8004ffa:	463a      	mov	r2, r7
 8004ffc:	4628      	mov	r0, r5
 8004ffe:	47b0      	blx	r6
 8005000:	2800      	cmp	r0, #0
 8005002:	dc06      	bgt.n	8005012 <__sflush_r+0xfe>
 8005004:	89a3      	ldrh	r3, [r4, #12]
 8005006:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800500a:	81a3      	strh	r3, [r4, #12]
 800500c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005010:	e78e      	b.n	8004f30 <__sflush_r+0x1c>
 8005012:	4407      	add	r7, r0
 8005014:	eba8 0800 	sub.w	r8, r8, r0
 8005018:	e7e9      	b.n	8004fee <__sflush_r+0xda>
 800501a:	bf00      	nop
 800501c:	20400001 	.word	0x20400001

08005020 <_fflush_r>:
 8005020:	b538      	push	{r3, r4, r5, lr}
 8005022:	690b      	ldr	r3, [r1, #16]
 8005024:	4605      	mov	r5, r0
 8005026:	460c      	mov	r4, r1
 8005028:	b913      	cbnz	r3, 8005030 <_fflush_r+0x10>
 800502a:	2500      	movs	r5, #0
 800502c:	4628      	mov	r0, r5
 800502e:	bd38      	pop	{r3, r4, r5, pc}
 8005030:	b118      	cbz	r0, 800503a <_fflush_r+0x1a>
 8005032:	6983      	ldr	r3, [r0, #24]
 8005034:	b90b      	cbnz	r3, 800503a <_fflush_r+0x1a>
 8005036:	f000 f887 	bl	8005148 <__sinit>
 800503a:	4b14      	ldr	r3, [pc, #80]	; (800508c <_fflush_r+0x6c>)
 800503c:	429c      	cmp	r4, r3
 800503e:	d11b      	bne.n	8005078 <_fflush_r+0x58>
 8005040:	686c      	ldr	r4, [r5, #4]
 8005042:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005046:	2b00      	cmp	r3, #0
 8005048:	d0ef      	beq.n	800502a <_fflush_r+0xa>
 800504a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800504c:	07d0      	lsls	r0, r2, #31
 800504e:	d404      	bmi.n	800505a <_fflush_r+0x3a>
 8005050:	0599      	lsls	r1, r3, #22
 8005052:	d402      	bmi.n	800505a <_fflush_r+0x3a>
 8005054:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005056:	f000 f915 	bl	8005284 <__retarget_lock_acquire_recursive>
 800505a:	4628      	mov	r0, r5
 800505c:	4621      	mov	r1, r4
 800505e:	f7ff ff59 	bl	8004f14 <__sflush_r>
 8005062:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005064:	07da      	lsls	r2, r3, #31
 8005066:	4605      	mov	r5, r0
 8005068:	d4e0      	bmi.n	800502c <_fflush_r+0xc>
 800506a:	89a3      	ldrh	r3, [r4, #12]
 800506c:	059b      	lsls	r3, r3, #22
 800506e:	d4dd      	bmi.n	800502c <_fflush_r+0xc>
 8005070:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005072:	f000 f908 	bl	8005286 <__retarget_lock_release_recursive>
 8005076:	e7d9      	b.n	800502c <_fflush_r+0xc>
 8005078:	4b05      	ldr	r3, [pc, #20]	; (8005090 <_fflush_r+0x70>)
 800507a:	429c      	cmp	r4, r3
 800507c:	d101      	bne.n	8005082 <_fflush_r+0x62>
 800507e:	68ac      	ldr	r4, [r5, #8]
 8005080:	e7df      	b.n	8005042 <_fflush_r+0x22>
 8005082:	4b04      	ldr	r3, [pc, #16]	; (8005094 <_fflush_r+0x74>)
 8005084:	429c      	cmp	r4, r3
 8005086:	bf08      	it	eq
 8005088:	68ec      	ldreq	r4, [r5, #12]
 800508a:	e7da      	b.n	8005042 <_fflush_r+0x22>
 800508c:	08005da8 	.word	0x08005da8
 8005090:	08005dc8 	.word	0x08005dc8
 8005094:	08005d88 	.word	0x08005d88

08005098 <std>:
 8005098:	2300      	movs	r3, #0
 800509a:	b510      	push	{r4, lr}
 800509c:	4604      	mov	r4, r0
 800509e:	e9c0 3300 	strd	r3, r3, [r0]
 80050a2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80050a6:	6083      	str	r3, [r0, #8]
 80050a8:	8181      	strh	r1, [r0, #12]
 80050aa:	6643      	str	r3, [r0, #100]	; 0x64
 80050ac:	81c2      	strh	r2, [r0, #14]
 80050ae:	6183      	str	r3, [r0, #24]
 80050b0:	4619      	mov	r1, r3
 80050b2:	2208      	movs	r2, #8
 80050b4:	305c      	adds	r0, #92	; 0x5c
 80050b6:	f7ff fa5f 	bl	8004578 <memset>
 80050ba:	4b05      	ldr	r3, [pc, #20]	; (80050d0 <std+0x38>)
 80050bc:	6263      	str	r3, [r4, #36]	; 0x24
 80050be:	4b05      	ldr	r3, [pc, #20]	; (80050d4 <std+0x3c>)
 80050c0:	62a3      	str	r3, [r4, #40]	; 0x28
 80050c2:	4b05      	ldr	r3, [pc, #20]	; (80050d8 <std+0x40>)
 80050c4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80050c6:	4b05      	ldr	r3, [pc, #20]	; (80050dc <std+0x44>)
 80050c8:	6224      	str	r4, [r4, #32]
 80050ca:	6323      	str	r3, [r4, #48]	; 0x30
 80050cc:	bd10      	pop	{r4, pc}
 80050ce:	bf00      	nop
 80050d0:	08005759 	.word	0x08005759
 80050d4:	0800577b 	.word	0x0800577b
 80050d8:	080057b3 	.word	0x080057b3
 80050dc:	080057d7 	.word	0x080057d7

080050e0 <_cleanup_r>:
 80050e0:	4901      	ldr	r1, [pc, #4]	; (80050e8 <_cleanup_r+0x8>)
 80050e2:	f000 b8af 	b.w	8005244 <_fwalk_reent>
 80050e6:	bf00      	nop
 80050e8:	08005021 	.word	0x08005021

080050ec <__sfmoreglue>:
 80050ec:	b570      	push	{r4, r5, r6, lr}
 80050ee:	2268      	movs	r2, #104	; 0x68
 80050f0:	1e4d      	subs	r5, r1, #1
 80050f2:	4355      	muls	r5, r2
 80050f4:	460e      	mov	r6, r1
 80050f6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80050fa:	f7ff fab1 	bl	8004660 <_malloc_r>
 80050fe:	4604      	mov	r4, r0
 8005100:	b140      	cbz	r0, 8005114 <__sfmoreglue+0x28>
 8005102:	2100      	movs	r1, #0
 8005104:	e9c0 1600 	strd	r1, r6, [r0]
 8005108:	300c      	adds	r0, #12
 800510a:	60a0      	str	r0, [r4, #8]
 800510c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005110:	f7ff fa32 	bl	8004578 <memset>
 8005114:	4620      	mov	r0, r4
 8005116:	bd70      	pop	{r4, r5, r6, pc}

08005118 <__sfp_lock_acquire>:
 8005118:	4801      	ldr	r0, [pc, #4]	; (8005120 <__sfp_lock_acquire+0x8>)
 800511a:	f000 b8b3 	b.w	8005284 <__retarget_lock_acquire_recursive>
 800511e:	bf00      	nop
 8005120:	200001bd 	.word	0x200001bd

08005124 <__sfp_lock_release>:
 8005124:	4801      	ldr	r0, [pc, #4]	; (800512c <__sfp_lock_release+0x8>)
 8005126:	f000 b8ae 	b.w	8005286 <__retarget_lock_release_recursive>
 800512a:	bf00      	nop
 800512c:	200001bd 	.word	0x200001bd

08005130 <__sinit_lock_acquire>:
 8005130:	4801      	ldr	r0, [pc, #4]	; (8005138 <__sinit_lock_acquire+0x8>)
 8005132:	f000 b8a7 	b.w	8005284 <__retarget_lock_acquire_recursive>
 8005136:	bf00      	nop
 8005138:	200001be 	.word	0x200001be

0800513c <__sinit_lock_release>:
 800513c:	4801      	ldr	r0, [pc, #4]	; (8005144 <__sinit_lock_release+0x8>)
 800513e:	f000 b8a2 	b.w	8005286 <__retarget_lock_release_recursive>
 8005142:	bf00      	nop
 8005144:	200001be 	.word	0x200001be

08005148 <__sinit>:
 8005148:	b510      	push	{r4, lr}
 800514a:	4604      	mov	r4, r0
 800514c:	f7ff fff0 	bl	8005130 <__sinit_lock_acquire>
 8005150:	69a3      	ldr	r3, [r4, #24]
 8005152:	b11b      	cbz	r3, 800515c <__sinit+0x14>
 8005154:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005158:	f7ff bff0 	b.w	800513c <__sinit_lock_release>
 800515c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005160:	6523      	str	r3, [r4, #80]	; 0x50
 8005162:	4b13      	ldr	r3, [pc, #76]	; (80051b0 <__sinit+0x68>)
 8005164:	4a13      	ldr	r2, [pc, #76]	; (80051b4 <__sinit+0x6c>)
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	62a2      	str	r2, [r4, #40]	; 0x28
 800516a:	42a3      	cmp	r3, r4
 800516c:	bf04      	itt	eq
 800516e:	2301      	moveq	r3, #1
 8005170:	61a3      	streq	r3, [r4, #24]
 8005172:	4620      	mov	r0, r4
 8005174:	f000 f820 	bl	80051b8 <__sfp>
 8005178:	6060      	str	r0, [r4, #4]
 800517a:	4620      	mov	r0, r4
 800517c:	f000 f81c 	bl	80051b8 <__sfp>
 8005180:	60a0      	str	r0, [r4, #8]
 8005182:	4620      	mov	r0, r4
 8005184:	f000 f818 	bl	80051b8 <__sfp>
 8005188:	2200      	movs	r2, #0
 800518a:	60e0      	str	r0, [r4, #12]
 800518c:	2104      	movs	r1, #4
 800518e:	6860      	ldr	r0, [r4, #4]
 8005190:	f7ff ff82 	bl	8005098 <std>
 8005194:	68a0      	ldr	r0, [r4, #8]
 8005196:	2201      	movs	r2, #1
 8005198:	2109      	movs	r1, #9
 800519a:	f7ff ff7d 	bl	8005098 <std>
 800519e:	68e0      	ldr	r0, [r4, #12]
 80051a0:	2202      	movs	r2, #2
 80051a2:	2112      	movs	r1, #18
 80051a4:	f7ff ff78 	bl	8005098 <std>
 80051a8:	2301      	movs	r3, #1
 80051aa:	61a3      	str	r3, [r4, #24]
 80051ac:	e7d2      	b.n	8005154 <__sinit+0xc>
 80051ae:	bf00      	nop
 80051b0:	08005d50 	.word	0x08005d50
 80051b4:	080050e1 	.word	0x080050e1

080051b8 <__sfp>:
 80051b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80051ba:	4607      	mov	r7, r0
 80051bc:	f7ff ffac 	bl	8005118 <__sfp_lock_acquire>
 80051c0:	4b1e      	ldr	r3, [pc, #120]	; (800523c <__sfp+0x84>)
 80051c2:	681e      	ldr	r6, [r3, #0]
 80051c4:	69b3      	ldr	r3, [r6, #24]
 80051c6:	b913      	cbnz	r3, 80051ce <__sfp+0x16>
 80051c8:	4630      	mov	r0, r6
 80051ca:	f7ff ffbd 	bl	8005148 <__sinit>
 80051ce:	3648      	adds	r6, #72	; 0x48
 80051d0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80051d4:	3b01      	subs	r3, #1
 80051d6:	d503      	bpl.n	80051e0 <__sfp+0x28>
 80051d8:	6833      	ldr	r3, [r6, #0]
 80051da:	b30b      	cbz	r3, 8005220 <__sfp+0x68>
 80051dc:	6836      	ldr	r6, [r6, #0]
 80051de:	e7f7      	b.n	80051d0 <__sfp+0x18>
 80051e0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80051e4:	b9d5      	cbnz	r5, 800521c <__sfp+0x64>
 80051e6:	4b16      	ldr	r3, [pc, #88]	; (8005240 <__sfp+0x88>)
 80051e8:	60e3      	str	r3, [r4, #12]
 80051ea:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80051ee:	6665      	str	r5, [r4, #100]	; 0x64
 80051f0:	f000 f847 	bl	8005282 <__retarget_lock_init_recursive>
 80051f4:	f7ff ff96 	bl	8005124 <__sfp_lock_release>
 80051f8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80051fc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005200:	6025      	str	r5, [r4, #0]
 8005202:	61a5      	str	r5, [r4, #24]
 8005204:	2208      	movs	r2, #8
 8005206:	4629      	mov	r1, r5
 8005208:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800520c:	f7ff f9b4 	bl	8004578 <memset>
 8005210:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005214:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005218:	4620      	mov	r0, r4
 800521a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800521c:	3468      	adds	r4, #104	; 0x68
 800521e:	e7d9      	b.n	80051d4 <__sfp+0x1c>
 8005220:	2104      	movs	r1, #4
 8005222:	4638      	mov	r0, r7
 8005224:	f7ff ff62 	bl	80050ec <__sfmoreglue>
 8005228:	4604      	mov	r4, r0
 800522a:	6030      	str	r0, [r6, #0]
 800522c:	2800      	cmp	r0, #0
 800522e:	d1d5      	bne.n	80051dc <__sfp+0x24>
 8005230:	f7ff ff78 	bl	8005124 <__sfp_lock_release>
 8005234:	230c      	movs	r3, #12
 8005236:	603b      	str	r3, [r7, #0]
 8005238:	e7ee      	b.n	8005218 <__sfp+0x60>
 800523a:	bf00      	nop
 800523c:	08005d50 	.word	0x08005d50
 8005240:	ffff0001 	.word	0xffff0001

08005244 <_fwalk_reent>:
 8005244:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005248:	4606      	mov	r6, r0
 800524a:	4688      	mov	r8, r1
 800524c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005250:	2700      	movs	r7, #0
 8005252:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005256:	f1b9 0901 	subs.w	r9, r9, #1
 800525a:	d505      	bpl.n	8005268 <_fwalk_reent+0x24>
 800525c:	6824      	ldr	r4, [r4, #0]
 800525e:	2c00      	cmp	r4, #0
 8005260:	d1f7      	bne.n	8005252 <_fwalk_reent+0xe>
 8005262:	4638      	mov	r0, r7
 8005264:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005268:	89ab      	ldrh	r3, [r5, #12]
 800526a:	2b01      	cmp	r3, #1
 800526c:	d907      	bls.n	800527e <_fwalk_reent+0x3a>
 800526e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005272:	3301      	adds	r3, #1
 8005274:	d003      	beq.n	800527e <_fwalk_reent+0x3a>
 8005276:	4629      	mov	r1, r5
 8005278:	4630      	mov	r0, r6
 800527a:	47c0      	blx	r8
 800527c:	4307      	orrs	r7, r0
 800527e:	3568      	adds	r5, #104	; 0x68
 8005280:	e7e9      	b.n	8005256 <_fwalk_reent+0x12>

08005282 <__retarget_lock_init_recursive>:
 8005282:	4770      	bx	lr

08005284 <__retarget_lock_acquire_recursive>:
 8005284:	4770      	bx	lr

08005286 <__retarget_lock_release_recursive>:
 8005286:	4770      	bx	lr

08005288 <__swhatbuf_r>:
 8005288:	b570      	push	{r4, r5, r6, lr}
 800528a:	460e      	mov	r6, r1
 800528c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005290:	2900      	cmp	r1, #0
 8005292:	b096      	sub	sp, #88	; 0x58
 8005294:	4614      	mov	r4, r2
 8005296:	461d      	mov	r5, r3
 8005298:	da08      	bge.n	80052ac <__swhatbuf_r+0x24>
 800529a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800529e:	2200      	movs	r2, #0
 80052a0:	602a      	str	r2, [r5, #0]
 80052a2:	061a      	lsls	r2, r3, #24
 80052a4:	d410      	bmi.n	80052c8 <__swhatbuf_r+0x40>
 80052a6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80052aa:	e00e      	b.n	80052ca <__swhatbuf_r+0x42>
 80052ac:	466a      	mov	r2, sp
 80052ae:	f000 fab9 	bl	8005824 <_fstat_r>
 80052b2:	2800      	cmp	r0, #0
 80052b4:	dbf1      	blt.n	800529a <__swhatbuf_r+0x12>
 80052b6:	9a01      	ldr	r2, [sp, #4]
 80052b8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80052bc:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80052c0:	425a      	negs	r2, r3
 80052c2:	415a      	adcs	r2, r3
 80052c4:	602a      	str	r2, [r5, #0]
 80052c6:	e7ee      	b.n	80052a6 <__swhatbuf_r+0x1e>
 80052c8:	2340      	movs	r3, #64	; 0x40
 80052ca:	2000      	movs	r0, #0
 80052cc:	6023      	str	r3, [r4, #0]
 80052ce:	b016      	add	sp, #88	; 0x58
 80052d0:	bd70      	pop	{r4, r5, r6, pc}
	...

080052d4 <__smakebuf_r>:
 80052d4:	898b      	ldrh	r3, [r1, #12]
 80052d6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80052d8:	079d      	lsls	r5, r3, #30
 80052da:	4606      	mov	r6, r0
 80052dc:	460c      	mov	r4, r1
 80052de:	d507      	bpl.n	80052f0 <__smakebuf_r+0x1c>
 80052e0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80052e4:	6023      	str	r3, [r4, #0]
 80052e6:	6123      	str	r3, [r4, #16]
 80052e8:	2301      	movs	r3, #1
 80052ea:	6163      	str	r3, [r4, #20]
 80052ec:	b002      	add	sp, #8
 80052ee:	bd70      	pop	{r4, r5, r6, pc}
 80052f0:	ab01      	add	r3, sp, #4
 80052f2:	466a      	mov	r2, sp
 80052f4:	f7ff ffc8 	bl	8005288 <__swhatbuf_r>
 80052f8:	9900      	ldr	r1, [sp, #0]
 80052fa:	4605      	mov	r5, r0
 80052fc:	4630      	mov	r0, r6
 80052fe:	f7ff f9af 	bl	8004660 <_malloc_r>
 8005302:	b948      	cbnz	r0, 8005318 <__smakebuf_r+0x44>
 8005304:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005308:	059a      	lsls	r2, r3, #22
 800530a:	d4ef      	bmi.n	80052ec <__smakebuf_r+0x18>
 800530c:	f023 0303 	bic.w	r3, r3, #3
 8005310:	f043 0302 	orr.w	r3, r3, #2
 8005314:	81a3      	strh	r3, [r4, #12]
 8005316:	e7e3      	b.n	80052e0 <__smakebuf_r+0xc>
 8005318:	4b0d      	ldr	r3, [pc, #52]	; (8005350 <__smakebuf_r+0x7c>)
 800531a:	62b3      	str	r3, [r6, #40]	; 0x28
 800531c:	89a3      	ldrh	r3, [r4, #12]
 800531e:	6020      	str	r0, [r4, #0]
 8005320:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005324:	81a3      	strh	r3, [r4, #12]
 8005326:	9b00      	ldr	r3, [sp, #0]
 8005328:	6163      	str	r3, [r4, #20]
 800532a:	9b01      	ldr	r3, [sp, #4]
 800532c:	6120      	str	r0, [r4, #16]
 800532e:	b15b      	cbz	r3, 8005348 <__smakebuf_r+0x74>
 8005330:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005334:	4630      	mov	r0, r6
 8005336:	f000 fa87 	bl	8005848 <_isatty_r>
 800533a:	b128      	cbz	r0, 8005348 <__smakebuf_r+0x74>
 800533c:	89a3      	ldrh	r3, [r4, #12]
 800533e:	f023 0303 	bic.w	r3, r3, #3
 8005342:	f043 0301 	orr.w	r3, r3, #1
 8005346:	81a3      	strh	r3, [r4, #12]
 8005348:	89a0      	ldrh	r0, [r4, #12]
 800534a:	4305      	orrs	r5, r0
 800534c:	81a5      	strh	r5, [r4, #12]
 800534e:	e7cd      	b.n	80052ec <__smakebuf_r+0x18>
 8005350:	080050e1 	.word	0x080050e1

08005354 <memcpy>:
 8005354:	440a      	add	r2, r1
 8005356:	4291      	cmp	r1, r2
 8005358:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800535c:	d100      	bne.n	8005360 <memcpy+0xc>
 800535e:	4770      	bx	lr
 8005360:	b510      	push	{r4, lr}
 8005362:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005366:	f803 4f01 	strb.w	r4, [r3, #1]!
 800536a:	4291      	cmp	r1, r2
 800536c:	d1f9      	bne.n	8005362 <memcpy+0xe>
 800536e:	bd10      	pop	{r4, pc}

08005370 <memmove>:
 8005370:	4288      	cmp	r0, r1
 8005372:	b510      	push	{r4, lr}
 8005374:	eb01 0402 	add.w	r4, r1, r2
 8005378:	d902      	bls.n	8005380 <memmove+0x10>
 800537a:	4284      	cmp	r4, r0
 800537c:	4623      	mov	r3, r4
 800537e:	d807      	bhi.n	8005390 <memmove+0x20>
 8005380:	1e43      	subs	r3, r0, #1
 8005382:	42a1      	cmp	r1, r4
 8005384:	d008      	beq.n	8005398 <memmove+0x28>
 8005386:	f811 2b01 	ldrb.w	r2, [r1], #1
 800538a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800538e:	e7f8      	b.n	8005382 <memmove+0x12>
 8005390:	4402      	add	r2, r0
 8005392:	4601      	mov	r1, r0
 8005394:	428a      	cmp	r2, r1
 8005396:	d100      	bne.n	800539a <memmove+0x2a>
 8005398:	bd10      	pop	{r4, pc}
 800539a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800539e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80053a2:	e7f7      	b.n	8005394 <memmove+0x24>

080053a4 <__malloc_lock>:
 80053a4:	4801      	ldr	r0, [pc, #4]	; (80053ac <__malloc_lock+0x8>)
 80053a6:	f7ff bf6d 	b.w	8005284 <__retarget_lock_acquire_recursive>
 80053aa:	bf00      	nop
 80053ac:	200001bc 	.word	0x200001bc

080053b0 <__malloc_unlock>:
 80053b0:	4801      	ldr	r0, [pc, #4]	; (80053b8 <__malloc_unlock+0x8>)
 80053b2:	f7ff bf68 	b.w	8005286 <__retarget_lock_release_recursive>
 80053b6:	bf00      	nop
 80053b8:	200001bc 	.word	0x200001bc

080053bc <_realloc_r>:
 80053bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80053c0:	4680      	mov	r8, r0
 80053c2:	4614      	mov	r4, r2
 80053c4:	460e      	mov	r6, r1
 80053c6:	b921      	cbnz	r1, 80053d2 <_realloc_r+0x16>
 80053c8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80053cc:	4611      	mov	r1, r2
 80053ce:	f7ff b947 	b.w	8004660 <_malloc_r>
 80053d2:	b92a      	cbnz	r2, 80053e0 <_realloc_r+0x24>
 80053d4:	f7ff f8d8 	bl	8004588 <_free_r>
 80053d8:	4625      	mov	r5, r4
 80053da:	4628      	mov	r0, r5
 80053dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80053e0:	f000 fa54 	bl	800588c <_malloc_usable_size_r>
 80053e4:	4284      	cmp	r4, r0
 80053e6:	4607      	mov	r7, r0
 80053e8:	d802      	bhi.n	80053f0 <_realloc_r+0x34>
 80053ea:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80053ee:	d812      	bhi.n	8005416 <_realloc_r+0x5a>
 80053f0:	4621      	mov	r1, r4
 80053f2:	4640      	mov	r0, r8
 80053f4:	f7ff f934 	bl	8004660 <_malloc_r>
 80053f8:	4605      	mov	r5, r0
 80053fa:	2800      	cmp	r0, #0
 80053fc:	d0ed      	beq.n	80053da <_realloc_r+0x1e>
 80053fe:	42bc      	cmp	r4, r7
 8005400:	4622      	mov	r2, r4
 8005402:	4631      	mov	r1, r6
 8005404:	bf28      	it	cs
 8005406:	463a      	movcs	r2, r7
 8005408:	f7ff ffa4 	bl	8005354 <memcpy>
 800540c:	4631      	mov	r1, r6
 800540e:	4640      	mov	r0, r8
 8005410:	f7ff f8ba 	bl	8004588 <_free_r>
 8005414:	e7e1      	b.n	80053da <_realloc_r+0x1e>
 8005416:	4635      	mov	r5, r6
 8005418:	e7df      	b.n	80053da <_realloc_r+0x1e>

0800541a <__ssputs_r>:
 800541a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800541e:	688e      	ldr	r6, [r1, #8]
 8005420:	429e      	cmp	r6, r3
 8005422:	4682      	mov	sl, r0
 8005424:	460c      	mov	r4, r1
 8005426:	4690      	mov	r8, r2
 8005428:	461f      	mov	r7, r3
 800542a:	d838      	bhi.n	800549e <__ssputs_r+0x84>
 800542c:	898a      	ldrh	r2, [r1, #12]
 800542e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005432:	d032      	beq.n	800549a <__ssputs_r+0x80>
 8005434:	6825      	ldr	r5, [r4, #0]
 8005436:	6909      	ldr	r1, [r1, #16]
 8005438:	eba5 0901 	sub.w	r9, r5, r1
 800543c:	6965      	ldr	r5, [r4, #20]
 800543e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005442:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005446:	3301      	adds	r3, #1
 8005448:	444b      	add	r3, r9
 800544a:	106d      	asrs	r5, r5, #1
 800544c:	429d      	cmp	r5, r3
 800544e:	bf38      	it	cc
 8005450:	461d      	movcc	r5, r3
 8005452:	0553      	lsls	r3, r2, #21
 8005454:	d531      	bpl.n	80054ba <__ssputs_r+0xa0>
 8005456:	4629      	mov	r1, r5
 8005458:	f7ff f902 	bl	8004660 <_malloc_r>
 800545c:	4606      	mov	r6, r0
 800545e:	b950      	cbnz	r0, 8005476 <__ssputs_r+0x5c>
 8005460:	230c      	movs	r3, #12
 8005462:	f8ca 3000 	str.w	r3, [sl]
 8005466:	89a3      	ldrh	r3, [r4, #12]
 8005468:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800546c:	81a3      	strh	r3, [r4, #12]
 800546e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005472:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005476:	6921      	ldr	r1, [r4, #16]
 8005478:	464a      	mov	r2, r9
 800547a:	f7ff ff6b 	bl	8005354 <memcpy>
 800547e:	89a3      	ldrh	r3, [r4, #12]
 8005480:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005484:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005488:	81a3      	strh	r3, [r4, #12]
 800548a:	6126      	str	r6, [r4, #16]
 800548c:	6165      	str	r5, [r4, #20]
 800548e:	444e      	add	r6, r9
 8005490:	eba5 0509 	sub.w	r5, r5, r9
 8005494:	6026      	str	r6, [r4, #0]
 8005496:	60a5      	str	r5, [r4, #8]
 8005498:	463e      	mov	r6, r7
 800549a:	42be      	cmp	r6, r7
 800549c:	d900      	bls.n	80054a0 <__ssputs_r+0x86>
 800549e:	463e      	mov	r6, r7
 80054a0:	6820      	ldr	r0, [r4, #0]
 80054a2:	4632      	mov	r2, r6
 80054a4:	4641      	mov	r1, r8
 80054a6:	f7ff ff63 	bl	8005370 <memmove>
 80054aa:	68a3      	ldr	r3, [r4, #8]
 80054ac:	1b9b      	subs	r3, r3, r6
 80054ae:	60a3      	str	r3, [r4, #8]
 80054b0:	6823      	ldr	r3, [r4, #0]
 80054b2:	4433      	add	r3, r6
 80054b4:	6023      	str	r3, [r4, #0]
 80054b6:	2000      	movs	r0, #0
 80054b8:	e7db      	b.n	8005472 <__ssputs_r+0x58>
 80054ba:	462a      	mov	r2, r5
 80054bc:	f7ff ff7e 	bl	80053bc <_realloc_r>
 80054c0:	4606      	mov	r6, r0
 80054c2:	2800      	cmp	r0, #0
 80054c4:	d1e1      	bne.n	800548a <__ssputs_r+0x70>
 80054c6:	6921      	ldr	r1, [r4, #16]
 80054c8:	4650      	mov	r0, sl
 80054ca:	f7ff f85d 	bl	8004588 <_free_r>
 80054ce:	e7c7      	b.n	8005460 <__ssputs_r+0x46>

080054d0 <_svfiprintf_r>:
 80054d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80054d4:	4698      	mov	r8, r3
 80054d6:	898b      	ldrh	r3, [r1, #12]
 80054d8:	061b      	lsls	r3, r3, #24
 80054da:	b09d      	sub	sp, #116	; 0x74
 80054dc:	4607      	mov	r7, r0
 80054de:	460d      	mov	r5, r1
 80054e0:	4614      	mov	r4, r2
 80054e2:	d50e      	bpl.n	8005502 <_svfiprintf_r+0x32>
 80054e4:	690b      	ldr	r3, [r1, #16]
 80054e6:	b963      	cbnz	r3, 8005502 <_svfiprintf_r+0x32>
 80054e8:	2140      	movs	r1, #64	; 0x40
 80054ea:	f7ff f8b9 	bl	8004660 <_malloc_r>
 80054ee:	6028      	str	r0, [r5, #0]
 80054f0:	6128      	str	r0, [r5, #16]
 80054f2:	b920      	cbnz	r0, 80054fe <_svfiprintf_r+0x2e>
 80054f4:	230c      	movs	r3, #12
 80054f6:	603b      	str	r3, [r7, #0]
 80054f8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80054fc:	e0d1      	b.n	80056a2 <_svfiprintf_r+0x1d2>
 80054fe:	2340      	movs	r3, #64	; 0x40
 8005500:	616b      	str	r3, [r5, #20]
 8005502:	2300      	movs	r3, #0
 8005504:	9309      	str	r3, [sp, #36]	; 0x24
 8005506:	2320      	movs	r3, #32
 8005508:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800550c:	f8cd 800c 	str.w	r8, [sp, #12]
 8005510:	2330      	movs	r3, #48	; 0x30
 8005512:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80056bc <_svfiprintf_r+0x1ec>
 8005516:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800551a:	f04f 0901 	mov.w	r9, #1
 800551e:	4623      	mov	r3, r4
 8005520:	469a      	mov	sl, r3
 8005522:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005526:	b10a      	cbz	r2, 800552c <_svfiprintf_r+0x5c>
 8005528:	2a25      	cmp	r2, #37	; 0x25
 800552a:	d1f9      	bne.n	8005520 <_svfiprintf_r+0x50>
 800552c:	ebba 0b04 	subs.w	fp, sl, r4
 8005530:	d00b      	beq.n	800554a <_svfiprintf_r+0x7a>
 8005532:	465b      	mov	r3, fp
 8005534:	4622      	mov	r2, r4
 8005536:	4629      	mov	r1, r5
 8005538:	4638      	mov	r0, r7
 800553a:	f7ff ff6e 	bl	800541a <__ssputs_r>
 800553e:	3001      	adds	r0, #1
 8005540:	f000 80aa 	beq.w	8005698 <_svfiprintf_r+0x1c8>
 8005544:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005546:	445a      	add	r2, fp
 8005548:	9209      	str	r2, [sp, #36]	; 0x24
 800554a:	f89a 3000 	ldrb.w	r3, [sl]
 800554e:	2b00      	cmp	r3, #0
 8005550:	f000 80a2 	beq.w	8005698 <_svfiprintf_r+0x1c8>
 8005554:	2300      	movs	r3, #0
 8005556:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800555a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800555e:	f10a 0a01 	add.w	sl, sl, #1
 8005562:	9304      	str	r3, [sp, #16]
 8005564:	9307      	str	r3, [sp, #28]
 8005566:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800556a:	931a      	str	r3, [sp, #104]	; 0x68
 800556c:	4654      	mov	r4, sl
 800556e:	2205      	movs	r2, #5
 8005570:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005574:	4851      	ldr	r0, [pc, #324]	; (80056bc <_svfiprintf_r+0x1ec>)
 8005576:	f7fa fe43 	bl	8000200 <memchr>
 800557a:	9a04      	ldr	r2, [sp, #16]
 800557c:	b9d8      	cbnz	r0, 80055b6 <_svfiprintf_r+0xe6>
 800557e:	06d0      	lsls	r0, r2, #27
 8005580:	bf44      	itt	mi
 8005582:	2320      	movmi	r3, #32
 8005584:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005588:	0711      	lsls	r1, r2, #28
 800558a:	bf44      	itt	mi
 800558c:	232b      	movmi	r3, #43	; 0x2b
 800558e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005592:	f89a 3000 	ldrb.w	r3, [sl]
 8005596:	2b2a      	cmp	r3, #42	; 0x2a
 8005598:	d015      	beq.n	80055c6 <_svfiprintf_r+0xf6>
 800559a:	9a07      	ldr	r2, [sp, #28]
 800559c:	4654      	mov	r4, sl
 800559e:	2000      	movs	r0, #0
 80055a0:	f04f 0c0a 	mov.w	ip, #10
 80055a4:	4621      	mov	r1, r4
 80055a6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80055aa:	3b30      	subs	r3, #48	; 0x30
 80055ac:	2b09      	cmp	r3, #9
 80055ae:	d94e      	bls.n	800564e <_svfiprintf_r+0x17e>
 80055b0:	b1b0      	cbz	r0, 80055e0 <_svfiprintf_r+0x110>
 80055b2:	9207      	str	r2, [sp, #28]
 80055b4:	e014      	b.n	80055e0 <_svfiprintf_r+0x110>
 80055b6:	eba0 0308 	sub.w	r3, r0, r8
 80055ba:	fa09 f303 	lsl.w	r3, r9, r3
 80055be:	4313      	orrs	r3, r2
 80055c0:	9304      	str	r3, [sp, #16]
 80055c2:	46a2      	mov	sl, r4
 80055c4:	e7d2      	b.n	800556c <_svfiprintf_r+0x9c>
 80055c6:	9b03      	ldr	r3, [sp, #12]
 80055c8:	1d19      	adds	r1, r3, #4
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	9103      	str	r1, [sp, #12]
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	bfbb      	ittet	lt
 80055d2:	425b      	neglt	r3, r3
 80055d4:	f042 0202 	orrlt.w	r2, r2, #2
 80055d8:	9307      	strge	r3, [sp, #28]
 80055da:	9307      	strlt	r3, [sp, #28]
 80055dc:	bfb8      	it	lt
 80055de:	9204      	strlt	r2, [sp, #16]
 80055e0:	7823      	ldrb	r3, [r4, #0]
 80055e2:	2b2e      	cmp	r3, #46	; 0x2e
 80055e4:	d10c      	bne.n	8005600 <_svfiprintf_r+0x130>
 80055e6:	7863      	ldrb	r3, [r4, #1]
 80055e8:	2b2a      	cmp	r3, #42	; 0x2a
 80055ea:	d135      	bne.n	8005658 <_svfiprintf_r+0x188>
 80055ec:	9b03      	ldr	r3, [sp, #12]
 80055ee:	1d1a      	adds	r2, r3, #4
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	9203      	str	r2, [sp, #12]
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	bfb8      	it	lt
 80055f8:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80055fc:	3402      	adds	r4, #2
 80055fe:	9305      	str	r3, [sp, #20]
 8005600:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80056cc <_svfiprintf_r+0x1fc>
 8005604:	7821      	ldrb	r1, [r4, #0]
 8005606:	2203      	movs	r2, #3
 8005608:	4650      	mov	r0, sl
 800560a:	f7fa fdf9 	bl	8000200 <memchr>
 800560e:	b140      	cbz	r0, 8005622 <_svfiprintf_r+0x152>
 8005610:	2340      	movs	r3, #64	; 0x40
 8005612:	eba0 000a 	sub.w	r0, r0, sl
 8005616:	fa03 f000 	lsl.w	r0, r3, r0
 800561a:	9b04      	ldr	r3, [sp, #16]
 800561c:	4303      	orrs	r3, r0
 800561e:	3401      	adds	r4, #1
 8005620:	9304      	str	r3, [sp, #16]
 8005622:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005626:	4826      	ldr	r0, [pc, #152]	; (80056c0 <_svfiprintf_r+0x1f0>)
 8005628:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800562c:	2206      	movs	r2, #6
 800562e:	f7fa fde7 	bl	8000200 <memchr>
 8005632:	2800      	cmp	r0, #0
 8005634:	d038      	beq.n	80056a8 <_svfiprintf_r+0x1d8>
 8005636:	4b23      	ldr	r3, [pc, #140]	; (80056c4 <_svfiprintf_r+0x1f4>)
 8005638:	bb1b      	cbnz	r3, 8005682 <_svfiprintf_r+0x1b2>
 800563a:	9b03      	ldr	r3, [sp, #12]
 800563c:	3307      	adds	r3, #7
 800563e:	f023 0307 	bic.w	r3, r3, #7
 8005642:	3308      	adds	r3, #8
 8005644:	9303      	str	r3, [sp, #12]
 8005646:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005648:	4433      	add	r3, r6
 800564a:	9309      	str	r3, [sp, #36]	; 0x24
 800564c:	e767      	b.n	800551e <_svfiprintf_r+0x4e>
 800564e:	fb0c 3202 	mla	r2, ip, r2, r3
 8005652:	460c      	mov	r4, r1
 8005654:	2001      	movs	r0, #1
 8005656:	e7a5      	b.n	80055a4 <_svfiprintf_r+0xd4>
 8005658:	2300      	movs	r3, #0
 800565a:	3401      	adds	r4, #1
 800565c:	9305      	str	r3, [sp, #20]
 800565e:	4619      	mov	r1, r3
 8005660:	f04f 0c0a 	mov.w	ip, #10
 8005664:	4620      	mov	r0, r4
 8005666:	f810 2b01 	ldrb.w	r2, [r0], #1
 800566a:	3a30      	subs	r2, #48	; 0x30
 800566c:	2a09      	cmp	r2, #9
 800566e:	d903      	bls.n	8005678 <_svfiprintf_r+0x1a8>
 8005670:	2b00      	cmp	r3, #0
 8005672:	d0c5      	beq.n	8005600 <_svfiprintf_r+0x130>
 8005674:	9105      	str	r1, [sp, #20]
 8005676:	e7c3      	b.n	8005600 <_svfiprintf_r+0x130>
 8005678:	fb0c 2101 	mla	r1, ip, r1, r2
 800567c:	4604      	mov	r4, r0
 800567e:	2301      	movs	r3, #1
 8005680:	e7f0      	b.n	8005664 <_svfiprintf_r+0x194>
 8005682:	ab03      	add	r3, sp, #12
 8005684:	9300      	str	r3, [sp, #0]
 8005686:	462a      	mov	r2, r5
 8005688:	4b0f      	ldr	r3, [pc, #60]	; (80056c8 <_svfiprintf_r+0x1f8>)
 800568a:	a904      	add	r1, sp, #16
 800568c:	4638      	mov	r0, r7
 800568e:	f3af 8000 	nop.w
 8005692:	1c42      	adds	r2, r0, #1
 8005694:	4606      	mov	r6, r0
 8005696:	d1d6      	bne.n	8005646 <_svfiprintf_r+0x176>
 8005698:	89ab      	ldrh	r3, [r5, #12]
 800569a:	065b      	lsls	r3, r3, #25
 800569c:	f53f af2c 	bmi.w	80054f8 <_svfiprintf_r+0x28>
 80056a0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80056a2:	b01d      	add	sp, #116	; 0x74
 80056a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80056a8:	ab03      	add	r3, sp, #12
 80056aa:	9300      	str	r3, [sp, #0]
 80056ac:	462a      	mov	r2, r5
 80056ae:	4b06      	ldr	r3, [pc, #24]	; (80056c8 <_svfiprintf_r+0x1f8>)
 80056b0:	a904      	add	r1, sp, #16
 80056b2:	4638      	mov	r0, r7
 80056b4:	f7ff fa10 	bl	8004ad8 <_printf_i>
 80056b8:	e7eb      	b.n	8005692 <_svfiprintf_r+0x1c2>
 80056ba:	bf00      	nop
 80056bc:	08005d54 	.word	0x08005d54
 80056c0:	08005d5e 	.word	0x08005d5e
 80056c4:	00000000 	.word	0x00000000
 80056c8:	0800541b 	.word	0x0800541b
 80056cc:	08005d5a 	.word	0x08005d5a

080056d0 <_raise_r>:
 80056d0:	291f      	cmp	r1, #31
 80056d2:	b538      	push	{r3, r4, r5, lr}
 80056d4:	4604      	mov	r4, r0
 80056d6:	460d      	mov	r5, r1
 80056d8:	d904      	bls.n	80056e4 <_raise_r+0x14>
 80056da:	2316      	movs	r3, #22
 80056dc:	6003      	str	r3, [r0, #0]
 80056de:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80056e2:	bd38      	pop	{r3, r4, r5, pc}
 80056e4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80056e6:	b112      	cbz	r2, 80056ee <_raise_r+0x1e>
 80056e8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80056ec:	b94b      	cbnz	r3, 8005702 <_raise_r+0x32>
 80056ee:	4620      	mov	r0, r4
 80056f0:	f000 f830 	bl	8005754 <_getpid_r>
 80056f4:	462a      	mov	r2, r5
 80056f6:	4601      	mov	r1, r0
 80056f8:	4620      	mov	r0, r4
 80056fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80056fe:	f000 b817 	b.w	8005730 <_kill_r>
 8005702:	2b01      	cmp	r3, #1
 8005704:	d00a      	beq.n	800571c <_raise_r+0x4c>
 8005706:	1c59      	adds	r1, r3, #1
 8005708:	d103      	bne.n	8005712 <_raise_r+0x42>
 800570a:	2316      	movs	r3, #22
 800570c:	6003      	str	r3, [r0, #0]
 800570e:	2001      	movs	r0, #1
 8005710:	e7e7      	b.n	80056e2 <_raise_r+0x12>
 8005712:	2400      	movs	r4, #0
 8005714:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8005718:	4628      	mov	r0, r5
 800571a:	4798      	blx	r3
 800571c:	2000      	movs	r0, #0
 800571e:	e7e0      	b.n	80056e2 <_raise_r+0x12>

08005720 <raise>:
 8005720:	4b02      	ldr	r3, [pc, #8]	; (800572c <raise+0xc>)
 8005722:	4601      	mov	r1, r0
 8005724:	6818      	ldr	r0, [r3, #0]
 8005726:	f7ff bfd3 	b.w	80056d0 <_raise_r>
 800572a:	bf00      	nop
 800572c:	2000007c 	.word	0x2000007c

08005730 <_kill_r>:
 8005730:	b538      	push	{r3, r4, r5, lr}
 8005732:	4d07      	ldr	r5, [pc, #28]	; (8005750 <_kill_r+0x20>)
 8005734:	2300      	movs	r3, #0
 8005736:	4604      	mov	r4, r0
 8005738:	4608      	mov	r0, r1
 800573a:	4611      	mov	r1, r2
 800573c:	602b      	str	r3, [r5, #0]
 800573e:	f7fb f87b 	bl	8000838 <_kill>
 8005742:	1c43      	adds	r3, r0, #1
 8005744:	d102      	bne.n	800574c <_kill_r+0x1c>
 8005746:	682b      	ldr	r3, [r5, #0]
 8005748:	b103      	cbz	r3, 800574c <_kill_r+0x1c>
 800574a:	6023      	str	r3, [r4, #0]
 800574c:	bd38      	pop	{r3, r4, r5, pc}
 800574e:	bf00      	nop
 8005750:	200001c0 	.word	0x200001c0

08005754 <_getpid_r>:
 8005754:	f7fb b868 	b.w	8000828 <_getpid>

08005758 <__sread>:
 8005758:	b510      	push	{r4, lr}
 800575a:	460c      	mov	r4, r1
 800575c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005760:	f000 f89c 	bl	800589c <_read_r>
 8005764:	2800      	cmp	r0, #0
 8005766:	bfab      	itete	ge
 8005768:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800576a:	89a3      	ldrhlt	r3, [r4, #12]
 800576c:	181b      	addge	r3, r3, r0
 800576e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005772:	bfac      	ite	ge
 8005774:	6563      	strge	r3, [r4, #84]	; 0x54
 8005776:	81a3      	strhlt	r3, [r4, #12]
 8005778:	bd10      	pop	{r4, pc}

0800577a <__swrite>:
 800577a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800577e:	461f      	mov	r7, r3
 8005780:	898b      	ldrh	r3, [r1, #12]
 8005782:	05db      	lsls	r3, r3, #23
 8005784:	4605      	mov	r5, r0
 8005786:	460c      	mov	r4, r1
 8005788:	4616      	mov	r6, r2
 800578a:	d505      	bpl.n	8005798 <__swrite+0x1e>
 800578c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005790:	2302      	movs	r3, #2
 8005792:	2200      	movs	r2, #0
 8005794:	f000 f868 	bl	8005868 <_lseek_r>
 8005798:	89a3      	ldrh	r3, [r4, #12]
 800579a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800579e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80057a2:	81a3      	strh	r3, [r4, #12]
 80057a4:	4632      	mov	r2, r6
 80057a6:	463b      	mov	r3, r7
 80057a8:	4628      	mov	r0, r5
 80057aa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80057ae:	f000 b817 	b.w	80057e0 <_write_r>

080057b2 <__sseek>:
 80057b2:	b510      	push	{r4, lr}
 80057b4:	460c      	mov	r4, r1
 80057b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80057ba:	f000 f855 	bl	8005868 <_lseek_r>
 80057be:	1c43      	adds	r3, r0, #1
 80057c0:	89a3      	ldrh	r3, [r4, #12]
 80057c2:	bf15      	itete	ne
 80057c4:	6560      	strne	r0, [r4, #84]	; 0x54
 80057c6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80057ca:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80057ce:	81a3      	strheq	r3, [r4, #12]
 80057d0:	bf18      	it	ne
 80057d2:	81a3      	strhne	r3, [r4, #12]
 80057d4:	bd10      	pop	{r4, pc}

080057d6 <__sclose>:
 80057d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80057da:	f000 b813 	b.w	8005804 <_close_r>
	...

080057e0 <_write_r>:
 80057e0:	b538      	push	{r3, r4, r5, lr}
 80057e2:	4d07      	ldr	r5, [pc, #28]	; (8005800 <_write_r+0x20>)
 80057e4:	4604      	mov	r4, r0
 80057e6:	4608      	mov	r0, r1
 80057e8:	4611      	mov	r1, r2
 80057ea:	2200      	movs	r2, #0
 80057ec:	602a      	str	r2, [r5, #0]
 80057ee:	461a      	mov	r2, r3
 80057f0:	f7fb f859 	bl	80008a6 <_write>
 80057f4:	1c43      	adds	r3, r0, #1
 80057f6:	d102      	bne.n	80057fe <_write_r+0x1e>
 80057f8:	682b      	ldr	r3, [r5, #0]
 80057fa:	b103      	cbz	r3, 80057fe <_write_r+0x1e>
 80057fc:	6023      	str	r3, [r4, #0]
 80057fe:	bd38      	pop	{r3, r4, r5, pc}
 8005800:	200001c0 	.word	0x200001c0

08005804 <_close_r>:
 8005804:	b538      	push	{r3, r4, r5, lr}
 8005806:	4d06      	ldr	r5, [pc, #24]	; (8005820 <_close_r+0x1c>)
 8005808:	2300      	movs	r3, #0
 800580a:	4604      	mov	r4, r0
 800580c:	4608      	mov	r0, r1
 800580e:	602b      	str	r3, [r5, #0]
 8005810:	f7fb f865 	bl	80008de <_close>
 8005814:	1c43      	adds	r3, r0, #1
 8005816:	d102      	bne.n	800581e <_close_r+0x1a>
 8005818:	682b      	ldr	r3, [r5, #0]
 800581a:	b103      	cbz	r3, 800581e <_close_r+0x1a>
 800581c:	6023      	str	r3, [r4, #0]
 800581e:	bd38      	pop	{r3, r4, r5, pc}
 8005820:	200001c0 	.word	0x200001c0

08005824 <_fstat_r>:
 8005824:	b538      	push	{r3, r4, r5, lr}
 8005826:	4d07      	ldr	r5, [pc, #28]	; (8005844 <_fstat_r+0x20>)
 8005828:	2300      	movs	r3, #0
 800582a:	4604      	mov	r4, r0
 800582c:	4608      	mov	r0, r1
 800582e:	4611      	mov	r1, r2
 8005830:	602b      	str	r3, [r5, #0]
 8005832:	f7fb f860 	bl	80008f6 <_fstat>
 8005836:	1c43      	adds	r3, r0, #1
 8005838:	d102      	bne.n	8005840 <_fstat_r+0x1c>
 800583a:	682b      	ldr	r3, [r5, #0]
 800583c:	b103      	cbz	r3, 8005840 <_fstat_r+0x1c>
 800583e:	6023      	str	r3, [r4, #0]
 8005840:	bd38      	pop	{r3, r4, r5, pc}
 8005842:	bf00      	nop
 8005844:	200001c0 	.word	0x200001c0

08005848 <_isatty_r>:
 8005848:	b538      	push	{r3, r4, r5, lr}
 800584a:	4d06      	ldr	r5, [pc, #24]	; (8005864 <_isatty_r+0x1c>)
 800584c:	2300      	movs	r3, #0
 800584e:	4604      	mov	r4, r0
 8005850:	4608      	mov	r0, r1
 8005852:	602b      	str	r3, [r5, #0]
 8005854:	f7fb f85f 	bl	8000916 <_isatty>
 8005858:	1c43      	adds	r3, r0, #1
 800585a:	d102      	bne.n	8005862 <_isatty_r+0x1a>
 800585c:	682b      	ldr	r3, [r5, #0]
 800585e:	b103      	cbz	r3, 8005862 <_isatty_r+0x1a>
 8005860:	6023      	str	r3, [r4, #0]
 8005862:	bd38      	pop	{r3, r4, r5, pc}
 8005864:	200001c0 	.word	0x200001c0

08005868 <_lseek_r>:
 8005868:	b538      	push	{r3, r4, r5, lr}
 800586a:	4d07      	ldr	r5, [pc, #28]	; (8005888 <_lseek_r+0x20>)
 800586c:	4604      	mov	r4, r0
 800586e:	4608      	mov	r0, r1
 8005870:	4611      	mov	r1, r2
 8005872:	2200      	movs	r2, #0
 8005874:	602a      	str	r2, [r5, #0]
 8005876:	461a      	mov	r2, r3
 8005878:	f7fb f858 	bl	800092c <_lseek>
 800587c:	1c43      	adds	r3, r0, #1
 800587e:	d102      	bne.n	8005886 <_lseek_r+0x1e>
 8005880:	682b      	ldr	r3, [r5, #0]
 8005882:	b103      	cbz	r3, 8005886 <_lseek_r+0x1e>
 8005884:	6023      	str	r3, [r4, #0]
 8005886:	bd38      	pop	{r3, r4, r5, pc}
 8005888:	200001c0 	.word	0x200001c0

0800588c <_malloc_usable_size_r>:
 800588c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005890:	1f18      	subs	r0, r3, #4
 8005892:	2b00      	cmp	r3, #0
 8005894:	bfbc      	itt	lt
 8005896:	580b      	ldrlt	r3, [r1, r0]
 8005898:	18c0      	addlt	r0, r0, r3
 800589a:	4770      	bx	lr

0800589c <_read_r>:
 800589c:	b538      	push	{r3, r4, r5, lr}
 800589e:	4d07      	ldr	r5, [pc, #28]	; (80058bc <_read_r+0x20>)
 80058a0:	4604      	mov	r4, r0
 80058a2:	4608      	mov	r0, r1
 80058a4:	4611      	mov	r1, r2
 80058a6:	2200      	movs	r2, #0
 80058a8:	602a      	str	r2, [r5, #0]
 80058aa:	461a      	mov	r2, r3
 80058ac:	f7fa ffde 	bl	800086c <_read>
 80058b0:	1c43      	adds	r3, r0, #1
 80058b2:	d102      	bne.n	80058ba <_read_r+0x1e>
 80058b4:	682b      	ldr	r3, [r5, #0]
 80058b6:	b103      	cbz	r3, 80058ba <_read_r+0x1e>
 80058b8:	6023      	str	r3, [r4, #0]
 80058ba:	bd38      	pop	{r3, r4, r5, pc}
 80058bc:	200001c0 	.word	0x200001c0

080058c0 <_init>:
 80058c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058c2:	bf00      	nop
 80058c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80058c6:	bc08      	pop	{r3}
 80058c8:	469e      	mov	lr, r3
 80058ca:	4770      	bx	lr

080058cc <_fini>:
 80058cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058ce:	bf00      	nop
 80058d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80058d2:	bc08      	pop	{r3}
 80058d4:	469e      	mov	lr, r3
 80058d6:	4770      	bx	lr
