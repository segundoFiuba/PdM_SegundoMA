
Practica4_punto2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002c90  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000158  08002e40  08002e40  00012e40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002f98  08002f98  00020080  2**0
                  CONTENTS
  4 .ARM          00000008  08002f98  08002f98  00012f98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002fa0  08002fa0  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002fa0  08002fa0  00012fa0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002fa4  08002fa4  00012fa4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  08002fa8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020080  2**0
                  CONTENTS
 10 .bss          00000044  20000080  20000080  00020080  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200000c4  200000c4  00020080  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 13 .debug_info   000059bb  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001656  00000000  00000000  00025a6b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000005f8  00000000  00000000  000270c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000510  00000000  00000000  000276c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025f77  00000000  00000000  00027bd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000091d5  00000000  00000000  0004db47  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e2a29  00000000  00000000  00056d1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00139745  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001e38  00000000  00000000  00139798  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000080 	.word	0x20000080
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08002e28 	.word	0x08002e28

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000084 	.word	0x20000084
 80001ec:	08002e28 	.word	0x08002e28

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002a4:	f000 b974 	b.w	8000590 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468e      	mov	lr, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14d      	bne.n	800036a <__udivmoddi4+0xaa>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4694      	mov	ip, r2
 80002d2:	d969      	bls.n	80003a8 <__udivmoddi4+0xe8>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b152      	cbz	r2, 80002f0 <__udivmoddi4+0x30>
 80002da:	fa01 f302 	lsl.w	r3, r1, r2
 80002de:	f1c2 0120 	rsb	r1, r2, #32
 80002e2:	fa20 f101 	lsr.w	r1, r0, r1
 80002e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ea:	ea41 0e03 	orr.w	lr, r1, r3
 80002ee:	4094      	lsls	r4, r2
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	0c21      	lsrs	r1, r4, #16
 80002f6:	fbbe f6f8 	udiv	r6, lr, r8
 80002fa:	fa1f f78c 	uxth.w	r7, ip
 80002fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000306:	fb06 f107 	mul.w	r1, r6, r7
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000316:	f080 811f 	bcs.w	8000558 <__udivmoddi4+0x298>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 811c 	bls.w	8000558 <__udivmoddi4+0x298>
 8000320:	3e02      	subs	r6, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a5b      	subs	r3, r3, r1
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb3 f0f8 	udiv	r0, r3, r8
 800032c:	fb08 3310 	mls	r3, r8, r0, r3
 8000330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000334:	fb00 f707 	mul.w	r7, r0, r7
 8000338:	42a7      	cmp	r7, r4
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x92>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000344:	f080 810a 	bcs.w	800055c <__udivmoddi4+0x29c>
 8000348:	42a7      	cmp	r7, r4
 800034a:	f240 8107 	bls.w	800055c <__udivmoddi4+0x29c>
 800034e:	4464      	add	r4, ip
 8000350:	3802      	subs	r0, #2
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	1be4      	subs	r4, r4, r7
 8000358:	2600      	movs	r6, #0
 800035a:	b11d      	cbz	r5, 8000364 <__udivmoddi4+0xa4>
 800035c:	40d4      	lsrs	r4, r2
 800035e:	2300      	movs	r3, #0
 8000360:	e9c5 4300 	strd	r4, r3, [r5]
 8000364:	4631      	mov	r1, r6
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0xc2>
 800036e:	2d00      	cmp	r5, #0
 8000370:	f000 80ef 	beq.w	8000552 <__udivmoddi4+0x292>
 8000374:	2600      	movs	r6, #0
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	4630      	mov	r0, r6
 800037c:	4631      	mov	r1, r6
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	fab3 f683 	clz	r6, r3
 8000386:	2e00      	cmp	r6, #0
 8000388:	d14a      	bne.n	8000420 <__udivmoddi4+0x160>
 800038a:	428b      	cmp	r3, r1
 800038c:	d302      	bcc.n	8000394 <__udivmoddi4+0xd4>
 800038e:	4282      	cmp	r2, r0
 8000390:	f200 80f9 	bhi.w	8000586 <__udivmoddi4+0x2c6>
 8000394:	1a84      	subs	r4, r0, r2
 8000396:	eb61 0303 	sbc.w	r3, r1, r3
 800039a:	2001      	movs	r0, #1
 800039c:	469e      	mov	lr, r3
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d0e0      	beq.n	8000364 <__udivmoddi4+0xa4>
 80003a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a6:	e7dd      	b.n	8000364 <__udivmoddi4+0xa4>
 80003a8:	b902      	cbnz	r2, 80003ac <__udivmoddi4+0xec>
 80003aa:	deff      	udf	#255	; 0xff
 80003ac:	fab2 f282 	clz	r2, r2
 80003b0:	2a00      	cmp	r2, #0
 80003b2:	f040 8092 	bne.w	80004da <__udivmoddi4+0x21a>
 80003b6:	eba1 010c 	sub.w	r1, r1, ip
 80003ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	2601      	movs	r6, #1
 80003c4:	0c20      	lsrs	r0, r4, #16
 80003c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ca:	fb07 1113 	mls	r1, r7, r3, r1
 80003ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d2:	fb0e f003 	mul.w	r0, lr, r3
 80003d6:	4288      	cmp	r0, r1
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x12c>
 80003da:	eb1c 0101 	adds.w	r1, ip, r1
 80003de:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x12a>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f200 80cb 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 80003ea:	4643      	mov	r3, r8
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003f4:	fb07 1110 	mls	r1, r7, r0, r1
 80003f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000400:	45a6      	cmp	lr, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x156>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800040c:	d202      	bcs.n	8000414 <__udivmoddi4+0x154>
 800040e:	45a6      	cmp	lr, r4
 8000410:	f200 80bb 	bhi.w	800058a <__udivmoddi4+0x2ca>
 8000414:	4608      	mov	r0, r1
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800041e:	e79c      	b.n	800035a <__udivmoddi4+0x9a>
 8000420:	f1c6 0720 	rsb	r7, r6, #32
 8000424:	40b3      	lsls	r3, r6
 8000426:	fa22 fc07 	lsr.w	ip, r2, r7
 800042a:	ea4c 0c03 	orr.w	ip, ip, r3
 800042e:	fa20 f407 	lsr.w	r4, r0, r7
 8000432:	fa01 f306 	lsl.w	r3, r1, r6
 8000436:	431c      	orrs	r4, r3
 8000438:	40f9      	lsrs	r1, r7
 800043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800043e:	fa00 f306 	lsl.w	r3, r0, r6
 8000442:	fbb1 f8f9 	udiv	r8, r1, r9
 8000446:	0c20      	lsrs	r0, r4, #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fb09 1118 	mls	r1, r9, r8, r1
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	fb08 f00e 	mul.w	r0, r8, lr
 8000458:	4288      	cmp	r0, r1
 800045a:	fa02 f206 	lsl.w	r2, r2, r6
 800045e:	d90b      	bls.n	8000478 <__udivmoddi4+0x1b8>
 8000460:	eb1c 0101 	adds.w	r1, ip, r1
 8000464:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000468:	f080 8088 	bcs.w	800057c <__udivmoddi4+0x2bc>
 800046c:	4288      	cmp	r0, r1
 800046e:	f240 8085 	bls.w	800057c <__udivmoddi4+0x2bc>
 8000472:	f1a8 0802 	sub.w	r8, r8, #2
 8000476:	4461      	add	r1, ip
 8000478:	1a09      	subs	r1, r1, r0
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000480:	fb09 1110 	mls	r1, r9, r0, r1
 8000484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000488:	fb00 fe0e 	mul.w	lr, r0, lr
 800048c:	458e      	cmp	lr, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x1e2>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000498:	d26c      	bcs.n	8000574 <__udivmoddi4+0x2b4>
 800049a:	458e      	cmp	lr, r1
 800049c:	d96a      	bls.n	8000574 <__udivmoddi4+0x2b4>
 800049e:	3802      	subs	r0, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004a6:	fba0 9402 	umull	r9, r4, r0, r2
 80004aa:	eba1 010e 	sub.w	r1, r1, lr
 80004ae:	42a1      	cmp	r1, r4
 80004b0:	46c8      	mov	r8, r9
 80004b2:	46a6      	mov	lr, r4
 80004b4:	d356      	bcc.n	8000564 <__udivmoddi4+0x2a4>
 80004b6:	d053      	beq.n	8000560 <__udivmoddi4+0x2a0>
 80004b8:	b15d      	cbz	r5, 80004d2 <__udivmoddi4+0x212>
 80004ba:	ebb3 0208 	subs.w	r2, r3, r8
 80004be:	eb61 010e 	sbc.w	r1, r1, lr
 80004c2:	fa01 f707 	lsl.w	r7, r1, r7
 80004c6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ca:	40f1      	lsrs	r1, r6
 80004cc:	431f      	orrs	r7, r3
 80004ce:	e9c5 7100 	strd	r7, r1, [r5]
 80004d2:	2600      	movs	r6, #0
 80004d4:	4631      	mov	r1, r6
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	40d8      	lsrs	r0, r3
 80004e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e4:	fa21 f303 	lsr.w	r3, r1, r3
 80004e8:	4091      	lsls	r1, r2
 80004ea:	4301      	orrs	r1, r0
 80004ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f0:	fa1f fe8c 	uxth.w	lr, ip
 80004f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004f8:	fb07 3610 	mls	r6, r7, r0, r3
 80004fc:	0c0b      	lsrs	r3, r1, #16
 80004fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000502:	fb00 f60e 	mul.w	r6, r0, lr
 8000506:	429e      	cmp	r6, r3
 8000508:	fa04 f402 	lsl.w	r4, r4, r2
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x260>
 800050e:	eb1c 0303 	adds.w	r3, ip, r3
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000516:	d22f      	bcs.n	8000578 <__udivmoddi4+0x2b8>
 8000518:	429e      	cmp	r6, r3
 800051a:	d92d      	bls.n	8000578 <__udivmoddi4+0x2b8>
 800051c:	3802      	subs	r0, #2
 800051e:	4463      	add	r3, ip
 8000520:	1b9b      	subs	r3, r3, r6
 8000522:	b289      	uxth	r1, r1
 8000524:	fbb3 f6f7 	udiv	r6, r3, r7
 8000528:	fb07 3316 	mls	r3, r7, r6, r3
 800052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000530:	fb06 f30e 	mul.w	r3, r6, lr
 8000534:	428b      	cmp	r3, r1
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x28a>
 8000538:	eb1c 0101 	adds.w	r1, ip, r1
 800053c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000540:	d216      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000542:	428b      	cmp	r3, r1
 8000544:	d914      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	1ac9      	subs	r1, r1, r3
 800054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000550:	e738      	b.n	80003c4 <__udivmoddi4+0x104>
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e705      	b.n	8000364 <__udivmoddi4+0xa4>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e3      	b.n	8000324 <__udivmoddi4+0x64>
 800055c:	4618      	mov	r0, r3
 800055e:	e6f8      	b.n	8000352 <__udivmoddi4+0x92>
 8000560:	454b      	cmp	r3, r9
 8000562:	d2a9      	bcs.n	80004b8 <__udivmoddi4+0x1f8>
 8000564:	ebb9 0802 	subs.w	r8, r9, r2
 8000568:	eb64 0e0c 	sbc.w	lr, r4, ip
 800056c:	3801      	subs	r0, #1
 800056e:	e7a3      	b.n	80004b8 <__udivmoddi4+0x1f8>
 8000570:	4646      	mov	r6, r8
 8000572:	e7ea      	b.n	800054a <__udivmoddi4+0x28a>
 8000574:	4620      	mov	r0, r4
 8000576:	e794      	b.n	80004a2 <__udivmoddi4+0x1e2>
 8000578:	4640      	mov	r0, r8
 800057a:	e7d1      	b.n	8000520 <__udivmoddi4+0x260>
 800057c:	46d0      	mov	r8, sl
 800057e:	e77b      	b.n	8000478 <__udivmoddi4+0x1b8>
 8000580:	3b02      	subs	r3, #2
 8000582:	4461      	add	r1, ip
 8000584:	e732      	b.n	80003ec <__udivmoddi4+0x12c>
 8000586:	4630      	mov	r0, r6
 8000588:	e709      	b.n	800039e <__udivmoddi4+0xde>
 800058a:	4464      	add	r4, ip
 800058c:	3802      	subs	r0, #2
 800058e:	e742      	b.n	8000416 <__udivmoddi4+0x156>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <debounceFSM_init>:
static bool_t pressed = false;		//Variable si el boton se presiono
static delay_t delayFSM;


//Inicializa la maquina de estados con boton en alto, inicializaliza el pulsador
void debounceFSM_init() {
 8000594:	b580      	push	{r7, lr}
 8000596:	af00      	add	r7, sp, #0
	debounce = BUTTON_UP;
 8000598:	4b06      	ldr	r3, [pc, #24]	; (80005b4 <debounceFSM_init+0x20>)
 800059a:	2200      	movs	r2, #0
 800059c:	701a      	strb	r2, [r3, #0]
	BSP_PB_Init(BUTTON_USER, BUTTON_MODE_GPIO);
 800059e:	2100      	movs	r1, #0
 80005a0:	2000      	movs	r0, #0
 80005a2:	f000 f98f 	bl	80008c4 <BSP_PB_Init>
	delayInit(&delayFSM, FSM_UPDATE_PERIOD);
 80005a6:	2128      	movs	r1, #40	; 0x28
 80005a8:	4803      	ldr	r0, [pc, #12]	; (80005b8 <debounceFSM_init+0x24>)
 80005aa:	f000 f87f 	bl	80006ac <delayInit>
}
 80005ae:	bf00      	nop
 80005b0:	bd80      	pop	{r7, pc}
 80005b2:	bf00      	nop
 80005b4:	2000009c 	.word	0x2000009c
 80005b8:	200000a0 	.word	0x200000a0

080005bc <debounceFSM_update>:

//Implementacion de maquina de estados, se debe checkear periodicamente
void debounceFSM_update() {
 80005bc:	b580      	push	{r7, lr}
 80005be:	af00      	add	r7, sp, #0
	switch (debounce) {
 80005c0:	4b2d      	ldr	r3, [pc, #180]	; (8000678 <debounceFSM_update+0xbc>)
 80005c2:	781b      	ldrb	r3, [r3, #0]
 80005c4:	2b03      	cmp	r3, #3
 80005c6:	d850      	bhi.n	800066a <debounceFSM_update+0xae>
 80005c8:	a201      	add	r2, pc, #4	; (adr r2, 80005d0 <debounceFSM_update+0x14>)
 80005ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005ce:	bf00      	nop
 80005d0:	080005e1 	.word	0x080005e1
 80005d4:	080005fb 	.word	0x080005fb
 80005d8:	08000629 	.word	0x08000629
 80005dc:	08000643 	.word	0x08000643
	case BUTTON_UP:
		if (BSP_PB_GetState(BUTTON_USER)) {
 80005e0:	2000      	movs	r0, #0
 80005e2:	f000 f9c5 	bl	8000970 <BSP_PB_GetState>
 80005e6:	4603      	mov	r3, r0
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	d040      	beq.n	800066e <debounceFSM_update+0xb2>
			debounce = BUTTON_FALLING;
 80005ec:	4b22      	ldr	r3, [pc, #136]	; (8000678 <debounceFSM_update+0xbc>)
 80005ee:	2201      	movs	r2, #1
 80005f0:	701a      	strb	r2, [r3, #0]
			delayRead(&delayFSM);
 80005f2:	4822      	ldr	r0, [pc, #136]	; (800067c <debounceFSM_update+0xc0>)
 80005f4:	f000 f884 	bl	8000700 <delayRead>
		}
		break;
 80005f8:	e039      	b.n	800066e <debounceFSM_update+0xb2>
	case BUTTON_FALLING:
		if (delayRead(&delayFSM) && BSP_PB_GetState(BUTTON_USER)) {
 80005fa:	4820      	ldr	r0, [pc, #128]	; (800067c <debounceFSM_update+0xc0>)
 80005fc:	f000 f880 	bl	8000700 <delayRead>
 8000600:	4603      	mov	r3, r0
 8000602:	2b00      	cmp	r3, #0
 8000604:	d00c      	beq.n	8000620 <debounceFSM_update+0x64>
 8000606:	2000      	movs	r0, #0
 8000608:	f000 f9b2 	bl	8000970 <BSP_PB_GetState>
 800060c:	4603      	mov	r3, r0
 800060e:	2b00      	cmp	r3, #0
 8000610:	d006      	beq.n	8000620 <debounceFSM_update+0x64>
			debounce = BUTTON_DOWN;
 8000612:	4b19      	ldr	r3, [pc, #100]	; (8000678 <debounceFSM_update+0xbc>)
 8000614:	2202      	movs	r2, #2
 8000616:	701a      	strb	r2, [r3, #0]
			pressed = true;		//Variable que usuario lee a traves de readKey
 8000618:	4b19      	ldr	r3, [pc, #100]	; (8000680 <debounceFSM_update+0xc4>)
 800061a:	2201      	movs	r2, #1
 800061c:	701a      	strb	r2, [r3, #0]
		} else {
			debounce = BUTTON_UP;
		}
		break;
 800061e:	e029      	b.n	8000674 <debounceFSM_update+0xb8>
			debounce = BUTTON_UP;
 8000620:	4b15      	ldr	r3, [pc, #84]	; (8000678 <debounceFSM_update+0xbc>)
 8000622:	2200      	movs	r2, #0
 8000624:	701a      	strb	r2, [r3, #0]
		break;
 8000626:	e025      	b.n	8000674 <debounceFSM_update+0xb8>
	case BUTTON_DOWN:
		if (!BSP_PB_GetState(BUTTON_USER)) {
 8000628:	2000      	movs	r0, #0
 800062a:	f000 f9a1 	bl	8000970 <BSP_PB_GetState>
 800062e:	4603      	mov	r3, r0
 8000630:	2b00      	cmp	r3, #0
 8000632:	d11e      	bne.n	8000672 <debounceFSM_update+0xb6>
			debounce = BUTTON_RAISING;
 8000634:	4b10      	ldr	r3, [pc, #64]	; (8000678 <debounceFSM_update+0xbc>)
 8000636:	2203      	movs	r2, #3
 8000638:	701a      	strb	r2, [r3, #0]
			delayRead(&delayFSM);
 800063a:	4810      	ldr	r0, [pc, #64]	; (800067c <debounceFSM_update+0xc0>)
 800063c:	f000 f860 	bl	8000700 <delayRead>
		}
		break;
 8000640:	e017      	b.n	8000672 <debounceFSM_update+0xb6>
	case BUTTON_RAISING:
		if (delayRead(&delayFSM) && !BSP_PB_GetState(BUTTON_USER)) {
 8000642:	480e      	ldr	r0, [pc, #56]	; (800067c <debounceFSM_update+0xc0>)
 8000644:	f000 f85c 	bl	8000700 <delayRead>
 8000648:	4603      	mov	r3, r0
 800064a:	2b00      	cmp	r3, #0
 800064c:	d009      	beq.n	8000662 <debounceFSM_update+0xa6>
 800064e:	2000      	movs	r0, #0
 8000650:	f000 f98e 	bl	8000970 <BSP_PB_GetState>
 8000654:	4603      	mov	r3, r0
 8000656:	2b00      	cmp	r3, #0
 8000658:	d103      	bne.n	8000662 <debounceFSM_update+0xa6>
			debounce = BUTTON_UP;
 800065a:	4b07      	ldr	r3, [pc, #28]	; (8000678 <debounceFSM_update+0xbc>)
 800065c:	2200      	movs	r2, #0
 800065e:	701a      	strb	r2, [r3, #0]
		} else {
			debounce = BUTTON_DOWN;
		}
		break;
 8000660:	e008      	b.n	8000674 <debounceFSM_update+0xb8>
			debounce = BUTTON_DOWN;
 8000662:	4b05      	ldr	r3, [pc, #20]	; (8000678 <debounceFSM_update+0xbc>)
 8000664:	2202      	movs	r2, #2
 8000666:	701a      	strb	r2, [r3, #0]
		break;
 8000668:	e004      	b.n	8000674 <debounceFSM_update+0xb8>
	default:
		break;
 800066a:	bf00      	nop
 800066c:	e002      	b.n	8000674 <debounceFSM_update+0xb8>
		break;
 800066e:	bf00      	nop
 8000670:	e000      	b.n	8000674 <debounceFSM_update+0xb8>
		break;
 8000672:	bf00      	nop
	}
}
 8000674:	bf00      	nop
 8000676:	bd80      	pop	{r7, pc}
 8000678:	2000009c 	.word	0x2000009c
 800067c:	200000a0 	.word	0x200000a0
 8000680:	2000009d 	.word	0x2000009d

08000684 <readKey>:

//Funcion intermeria para acceder interna pressed
bool_t readKey() {
 8000684:	b480      	push	{r7}
 8000686:	af00      	add	r7, sp, #0
	if (pressed){
 8000688:	4b07      	ldr	r3, [pc, #28]	; (80006a8 <readKey+0x24>)
 800068a:	781b      	ldrb	r3, [r3, #0]
 800068c:	2b00      	cmp	r3, #0
 800068e:	d004      	beq.n	800069a <readKey+0x16>
		pressed=false;
 8000690:	4b05      	ldr	r3, [pc, #20]	; (80006a8 <readKey+0x24>)
 8000692:	2200      	movs	r2, #0
 8000694:	701a      	strb	r2, [r3, #0]
		return true;
 8000696:	2301      	movs	r3, #1
 8000698:	e000      	b.n	800069c <readKey+0x18>
	}
	else
		return false;
 800069a:	2300      	movs	r3, #0
}
 800069c:	4618      	mov	r0, r3
 800069e:	46bd      	mov	sp, r7
 80006a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a4:	4770      	bx	lr
 80006a6:	bf00      	nop
 80006a8:	2000009d 	.word	0x2000009d

080006ac <delayInit>:
 * con el tiempo indicado.
 *
 * @param delay apunta a la estructura de delay que hay que inicializar
 * @param duration es la duración en milisegundoas del delay
 * */
void delayInit(delay_t *delay, tick_t duration) {
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b082      	sub	sp, #8
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	6078      	str	r0, [r7, #4]
 80006b4:	6039      	str	r1, [r7, #0]
	assert(duration >0);
 80006b6:	683b      	ldr	r3, [r7, #0]
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d105      	bne.n	80006c8 <delayInit+0x1c>
 80006bc:	4b0c      	ldr	r3, [pc, #48]	; (80006f0 <delayInit+0x44>)
 80006be:	4a0d      	ldr	r2, [pc, #52]	; (80006f4 <delayInit+0x48>)
 80006c0:	2114      	movs	r1, #20
 80006c2:	480d      	ldr	r0, [pc, #52]	; (80006f8 <delayInit+0x4c>)
 80006c4:	f001 fb8c 	bl	8001de0 <__assert_func>
	assert(delay != NULL);
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d105      	bne.n	80006da <delayInit+0x2e>
 80006ce:	4b0b      	ldr	r3, [pc, #44]	; (80006fc <delayInit+0x50>)
 80006d0:	4a08      	ldr	r2, [pc, #32]	; (80006f4 <delayInit+0x48>)
 80006d2:	2115      	movs	r1, #21
 80006d4:	4808      	ldr	r0, [pc, #32]	; (80006f8 <delayInit+0x4c>)
 80006d6:	f001 fb83 	bl	8001de0 <__assert_func>
	delay->duration = duration;
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	683a      	ldr	r2, [r7, #0]
 80006de:	605a      	str	r2, [r3, #4]
	delay->running = false;
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	2200      	movs	r2, #0
 80006e4:	721a      	strb	r2, [r3, #8]
}
 80006e6:	bf00      	nop
 80006e8:	3708      	adds	r7, #8
 80006ea:	46bd      	mov	sp, r7
 80006ec:	bd80      	pop	{r7, pc}
 80006ee:	bf00      	nop
 80006f0:	08002e40 	.word	0x08002e40
 80006f4:	08002e88 	.word	0x08002e88
 80006f8:	08002e4c 	.word	0x08002e4c
 80006fc:	08002e6c 	.word	0x08002e6c

08000700 <delayRead>:
 * se encuentra corriendo, verifica que no se haya pasado el tiempo.
 *
 * @param delay apunta a la estructura de delay que se lee
 * @returns true si se cumplió el tiempo o false si no
 * */
bool_t delayRead(delay_t *delay) {
 8000700:	b580      	push	{r7, lr}
 8000702:	b082      	sub	sp, #8
 8000704:	af00      	add	r7, sp, #0
 8000706:	6078      	str	r0, [r7, #4]
	assert(delay!=NULL);
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	2b00      	cmp	r3, #0
 800070c:	d105      	bne.n	800071a <delayRead+0x1a>
 800070e:	4b15      	ldr	r3, [pc, #84]	; (8000764 <delayRead+0x64>)
 8000710:	4a15      	ldr	r2, [pc, #84]	; (8000768 <delayRead+0x68>)
 8000712:	2125      	movs	r1, #37	; 0x25
 8000714:	4815      	ldr	r0, [pc, #84]	; (800076c <delayRead+0x6c>)
 8000716:	f001 fb63 	bl	8001de0 <__assert_func>
	if (!delay->running) {
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	7a1b      	ldrb	r3, [r3, #8]
 800071e:	f083 0301 	eor.w	r3, r3, #1
 8000722:	b2db      	uxtb	r3, r3
 8000724:	2b00      	cmp	r3, #0
 8000726:	d009      	beq.n	800073c <delayRead+0x3c>
		delay->running = true;
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	2201      	movs	r2, #1
 800072c:	721a      	strb	r2, [r3, #8]
		delay->startTime = HAL_GetTick();
 800072e:	f000 fabf 	bl	8000cb0 <HAL_GetTick>
 8000732:	4602      	mov	r2, r0
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	601a      	str	r2, [r3, #0]
		return false;
 8000738:	2300      	movs	r3, #0
 800073a:	e00f      	b.n	800075c <delayRead+0x5c>
	} else {
		if ((HAL_GetTick() - delay->startTime) >= delay->duration) {
 800073c:	f000 fab8 	bl	8000cb0 <HAL_GetTick>
 8000740:	4602      	mov	r2, r0
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	681b      	ldr	r3, [r3, #0]
 8000746:	1ad2      	subs	r2, r2, r3
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	685b      	ldr	r3, [r3, #4]
 800074c:	429a      	cmp	r2, r3
 800074e:	d304      	bcc.n	800075a <delayRead+0x5a>
			delay->running = false;
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	2200      	movs	r2, #0
 8000754:	721a      	strb	r2, [r3, #8]
			return true;
 8000756:	2301      	movs	r3, #1
 8000758:	e000      	b.n	800075c <delayRead+0x5c>
		} else
			return false;
 800075a:	2300      	movs	r3, #0
	}
}
 800075c:	4618      	mov	r0, r3
 800075e:	3708      	adds	r7, #8
 8000760:	46bd      	mov	sp, r7
 8000762:	bd80      	pop	{r7, pc}
 8000764:	08002e7c 	.word	0x08002e7c
 8000768:	08002e94 	.word	0x08002e94
 800076c:	08002e4c 	.word	0x08002e4c

08000770 <delayWrite>:
 *
 * @param delay apunta a la estructura de delay cuya duración se sobreescribe
 * @param duration es la nueva duración que se impone en la estructura de delay
 * @returns void
 * */
void delayWrite(delay_t *delay, tick_t duration) {
 8000770:	b580      	push	{r7, lr}
 8000772:	b082      	sub	sp, #8
 8000774:	af00      	add	r7, sp, #0
 8000776:	6078      	str	r0, [r7, #4]
 8000778:	6039      	str	r1, [r7, #0]
	assert(duration >0);
 800077a:	683b      	ldr	r3, [r7, #0]
 800077c:	2b00      	cmp	r3, #0
 800077e:	d105      	bne.n	800078c <delayWrite+0x1c>
 8000780:	4b0a      	ldr	r3, [pc, #40]	; (80007ac <delayWrite+0x3c>)
 8000782:	4a0b      	ldr	r2, [pc, #44]	; (80007b0 <delayWrite+0x40>)
 8000784:	213e      	movs	r1, #62	; 0x3e
 8000786:	480b      	ldr	r0, [pc, #44]	; (80007b4 <delayWrite+0x44>)
 8000788:	f001 fb2a 	bl	8001de0 <__assert_func>
	assert(delay != NULL);
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	2b00      	cmp	r3, #0
 8000790:	d105      	bne.n	800079e <delayWrite+0x2e>
 8000792:	4b09      	ldr	r3, [pc, #36]	; (80007b8 <delayWrite+0x48>)
 8000794:	4a06      	ldr	r2, [pc, #24]	; (80007b0 <delayWrite+0x40>)
 8000796:	213f      	movs	r1, #63	; 0x3f
 8000798:	4806      	ldr	r0, [pc, #24]	; (80007b4 <delayWrite+0x44>)
 800079a:	f001 fb21 	bl	8001de0 <__assert_func>
	delay->duration = duration;
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	683a      	ldr	r2, [r7, #0]
 80007a2:	605a      	str	r2, [r3, #4]
}
 80007a4:	bf00      	nop
 80007a6:	3708      	adds	r7, #8
 80007a8:	46bd      	mov	sp, r7
 80007aa:	bd80      	pop	{r7, pc}
 80007ac:	08002e40 	.word	0x08002e40
 80007b0:	08002ea0 	.word	0x08002ea0
 80007b4:	08002e4c 	.word	0x08002e4c
 80007b8:	08002e6c 	.word	0x08002e6c

080007bc <BSP_LED_Init>:
  *     @arg  LED1
  *     @arg  LED2
  *     @arg  LED3
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b08a      	sub	sp, #40	; 0x28
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	4603      	mov	r3, r0
 80007c4:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 80007c6:	79fb      	ldrb	r3, [r7, #7]
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d10e      	bne.n	80007ea <BSP_LED_Init+0x2e>
 80007cc:	2300      	movs	r3, #0
 80007ce:	613b      	str	r3, [r7, #16]
 80007d0:	4b1f      	ldr	r3, [pc, #124]	; (8000850 <BSP_LED_Init+0x94>)
 80007d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d4:	4a1e      	ldr	r2, [pc, #120]	; (8000850 <BSP_LED_Init+0x94>)
 80007d6:	f043 0302 	orr.w	r3, r3, #2
 80007da:	6313      	str	r3, [r2, #48]	; 0x30
 80007dc:	4b1c      	ldr	r3, [pc, #112]	; (8000850 <BSP_LED_Init+0x94>)
 80007de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e0:	f003 0302 	and.w	r3, r3, #2
 80007e4:	613b      	str	r3, [r7, #16]
 80007e6:	693b      	ldr	r3, [r7, #16]
 80007e8:	e00d      	b.n	8000806 <BSP_LED_Init+0x4a>
 80007ea:	2300      	movs	r3, #0
 80007ec:	60fb      	str	r3, [r7, #12]
 80007ee:	4b18      	ldr	r3, [pc, #96]	; (8000850 <BSP_LED_Init+0x94>)
 80007f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f2:	4a17      	ldr	r2, [pc, #92]	; (8000850 <BSP_LED_Init+0x94>)
 80007f4:	f043 0302 	orr.w	r3, r3, #2
 80007f8:	6313      	str	r3, [r2, #48]	; 0x30
 80007fa:	4b15      	ldr	r3, [pc, #84]	; (8000850 <BSP_LED_Init+0x94>)
 80007fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fe:	f003 0302 	and.w	r3, r3, #2
 8000802:	60fb      	str	r3, [r7, #12]
 8000804:	68fb      	ldr	r3, [r7, #12]
  
  /* Configure the GPIO_LED pin */
  GPIO_InitStruct.Pin = GPIO_PIN[Led];
 8000806:	79fb      	ldrb	r3, [r7, #7]
 8000808:	4a12      	ldr	r2, [pc, #72]	; (8000854 <BSP_LED_Init+0x98>)
 800080a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800080e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000810:	2301      	movs	r3, #1
 8000812:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000814:	2300      	movs	r3, #0
 8000816:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 8000818:	2302      	movs	r3, #2
 800081a:	623b      	str	r3, [r7, #32]
  
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 800081c:	79fb      	ldrb	r3, [r7, #7]
 800081e:	4a0e      	ldr	r2, [pc, #56]	; (8000858 <BSP_LED_Init+0x9c>)
 8000820:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000824:	f107 0214 	add.w	r2, r7, #20
 8000828:	4611      	mov	r1, r2
 800082a:	4618      	mov	r0, r3
 800082c:	f000 fb5e 	bl	8000eec <HAL_GPIO_Init>
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 8000830:	79fb      	ldrb	r3, [r7, #7]
 8000832:	4a09      	ldr	r2, [pc, #36]	; (8000858 <BSP_LED_Init+0x9c>)
 8000834:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000838:	79fb      	ldrb	r3, [r7, #7]
 800083a:	4a06      	ldr	r2, [pc, #24]	; (8000854 <BSP_LED_Init+0x98>)
 800083c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000840:	2200      	movs	r2, #0
 8000842:	4619      	mov	r1, r3
 8000844:	f000 fd16 	bl	8001274 <HAL_GPIO_WritePin>
}
 8000848:	bf00      	nop
 800084a:	3728      	adds	r7, #40	; 0x28
 800084c:	46bd      	mov	sp, r7
 800084e:	bd80      	pop	{r7, pc}
 8000850:	40023800 	.word	0x40023800
 8000854:	08002eac 	.word	0x08002eac
 8000858:	20000000 	.word	0x20000000

0800085c <BSP_LED_On>:
  * @param  Led: Specifies the Led to be set on. 
  *   This parameter can be one of following parameters:
  *     @arg LED2
  */
void BSP_LED_On(Led_TypeDef Led)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b082      	sub	sp, #8
 8000860:	af00      	add	r7, sp, #0
 8000862:	4603      	mov	r3, r0
 8000864:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET); 
 8000866:	79fb      	ldrb	r3, [r7, #7]
 8000868:	4a07      	ldr	r2, [pc, #28]	; (8000888 <BSP_LED_On+0x2c>)
 800086a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800086e:	79fb      	ldrb	r3, [r7, #7]
 8000870:	4a06      	ldr	r2, [pc, #24]	; (800088c <BSP_LED_On+0x30>)
 8000872:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000876:	2201      	movs	r2, #1
 8000878:	4619      	mov	r1, r3
 800087a:	f000 fcfb 	bl	8001274 <HAL_GPIO_WritePin>
}
 800087e:	bf00      	nop
 8000880:	3708      	adds	r7, #8
 8000882:	46bd      	mov	sp, r7
 8000884:	bd80      	pop	{r7, pc}
 8000886:	bf00      	nop
 8000888:	20000000 	.word	0x20000000
 800088c:	08002eac 	.word	0x08002eac

08000890 <BSP_LED_Toggle>:
  *     @arg  LED1
  *     @arg  LED2
  *     @arg  LED3 
  */
void BSP_LED_Toggle(Led_TypeDef Led)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b082      	sub	sp, #8
 8000894:	af00      	add	r7, sp, #0
 8000896:	4603      	mov	r3, r0
 8000898:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_TogglePin(GPIO_PORT[Led], GPIO_PIN[Led]);
 800089a:	79fb      	ldrb	r3, [r7, #7]
 800089c:	4a07      	ldr	r2, [pc, #28]	; (80008bc <BSP_LED_Toggle+0x2c>)
 800089e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80008a2:	79fb      	ldrb	r3, [r7, #7]
 80008a4:	4906      	ldr	r1, [pc, #24]	; (80008c0 <BSP_LED_Toggle+0x30>)
 80008a6:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80008aa:	4619      	mov	r1, r3
 80008ac:	4610      	mov	r0, r2
 80008ae:	f000 fcfa 	bl	80012a6 <HAL_GPIO_TogglePin>
}
 80008b2:	bf00      	nop
 80008b4:	3708      	adds	r7, #8
 80008b6:	46bd      	mov	sp, r7
 80008b8:	bd80      	pop	{r7, pc}
 80008ba:	bf00      	nop
 80008bc:	20000000 	.word	0x20000000
 80008c0:	08002eac 	.word	0x08002eac

080008c4 <BSP_PB_Init>:
  *     @arg BUTTON_MODE_GPIO: Button will be used as simple IO 
  *     @arg BUTTON_MODE_EXTI: Button will be connected to EXTI line with interrupt
  *                            generation capability  
  */
void BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b088      	sub	sp, #32
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	4603      	mov	r3, r0
 80008cc:	460a      	mov	r2, r1
 80008ce:	71fb      	strb	r3, [r7, #7]
 80008d0:	4613      	mov	r3, r2
 80008d2:	71bb      	strb	r3, [r7, #6]
  GPIO_InitTypeDef GPIO_InitStruct;
  
  /* Enable the BUTTON Clock */
  BUTTONx_GPIO_CLK_ENABLE(Button);
 80008d4:	2300      	movs	r3, #0
 80008d6:	60bb      	str	r3, [r7, #8]
 80008d8:	4b23      	ldr	r3, [pc, #140]	; (8000968 <BSP_PB_Init+0xa4>)
 80008da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008dc:	4a22      	ldr	r2, [pc, #136]	; (8000968 <BSP_PB_Init+0xa4>)
 80008de:	f043 0304 	orr.w	r3, r3, #4
 80008e2:	6313      	str	r3, [r2, #48]	; 0x30
 80008e4:	4b20      	ldr	r3, [pc, #128]	; (8000968 <BSP_PB_Init+0xa4>)
 80008e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e8:	f003 0304 	and.w	r3, r3, #4
 80008ec:	60bb      	str	r3, [r7, #8]
 80008ee:	68bb      	ldr	r3, [r7, #8]
  
  if(ButtonMode == BUTTON_MODE_GPIO)
 80008f0:	79bb      	ldrb	r3, [r7, #6]
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d112      	bne.n	800091c <BSP_PB_Init+0x58>
  {
    /* Configure Button pin as input */
    GPIO_InitStruct.Pin = BUTTON_PIN[Button];
 80008f6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008fa:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008fc:	2300      	movs	r3, #0
 80008fe:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000900:	2302      	movs	r3, #2
 8000902:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 8000904:	2302      	movs	r3, #2
 8000906:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 8000908:	79fb      	ldrb	r3, [r7, #7]
 800090a:	4a18      	ldr	r2, [pc, #96]	; (800096c <BSP_PB_Init+0xa8>)
 800090c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000910:	f107 020c 	add.w	r2, r7, #12
 8000914:	4611      	mov	r1, r2
 8000916:	4618      	mov	r0, r3
 8000918:	f000 fae8 	bl	8000eec <HAL_GPIO_Init>
  }
  
  if(ButtonMode == BUTTON_MODE_EXTI)
 800091c:	79bb      	ldrb	r3, [r7, #6]
 800091e:	2b01      	cmp	r3, #1
 8000920:	d11d      	bne.n	800095e <BSP_PB_Init+0x9a>
  {
    /* Configure Button pin as input with External interrupt */
    GPIO_InitStruct.Pin = BUTTON_PIN[Button];
 8000922:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000926:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000928:	2300      	movs	r3, #0
 800092a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING; 
 800092c:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000930:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 8000932:	79fb      	ldrb	r3, [r7, #7]
 8000934:	4a0d      	ldr	r2, [pc, #52]	; (800096c <BSP_PB_Init+0xa8>)
 8000936:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800093a:	f107 020c 	add.w	r2, r7, #12
 800093e:	4611      	mov	r1, r2
 8000940:	4618      	mov	r0, r3
 8000942:	f000 fad3 	bl	8000eec <HAL_GPIO_Init>
    
    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0x00);
 8000946:	2328      	movs	r3, #40	; 0x28
 8000948:	b25b      	sxtb	r3, r3
 800094a:	2200      	movs	r2, #0
 800094c:	210f      	movs	r1, #15
 800094e:	4618      	mov	r0, r3
 8000950:	f000 fa95 	bl	8000e7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
 8000954:	2328      	movs	r3, #40	; 0x28
 8000956:	b25b      	sxtb	r3, r3
 8000958:	4618      	mov	r0, r3
 800095a:	f000 faac 	bl	8000eb6 <HAL_NVIC_EnableIRQ>
  }
}
 800095e:	bf00      	nop
 8000960:	3720      	adds	r7, #32
 8000962:	46bd      	mov	sp, r7
 8000964:	bd80      	pop	{r7, pc}
 8000966:	bf00      	nop
 8000968:	40023800 	.word	0x40023800
 800096c:	2000000c 	.word	0x2000000c

08000970 <BSP_PB_GetState>:
  * @param  Button: Specifies the Button to be checked.
  *   This parameter should be: BUTTON_USER  
  * @retval The Button GPIO pin value.
  */
uint32_t BSP_PB_GetState(Button_TypeDef Button)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b082      	sub	sp, #8
 8000974:	af00      	add	r7, sp, #0
 8000976:	4603      	mov	r3, r0
 8000978:	71fb      	strb	r3, [r7, #7]
  return HAL_GPIO_ReadPin(BUTTON_PORT[Button], BUTTON_PIN[Button]);
 800097a:	79fb      	ldrb	r3, [r7, #7]
 800097c:	4a06      	ldr	r2, [pc, #24]	; (8000998 <BSP_PB_GetState+0x28>)
 800097e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000982:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000986:	4611      	mov	r1, r2
 8000988:	4618      	mov	r0, r3
 800098a:	f000 fc5b 	bl	8001244 <HAL_GPIO_ReadPin>
 800098e:	4603      	mov	r3, r0
}
 8000990:	4618      	mov	r0, r3
 8000992:	3708      	adds	r7, #8
 8000994:	46bd      	mov	sp, r7
 8000996:	bd80      	pop	{r7, pc}
 8000998:	2000000c 	.word	0x2000000c

0800099c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800099c:	b480      	push	{r7}
 800099e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80009a0:	4b16      	ldr	r3, [pc, #88]	; (80009fc <SystemInit+0x60>)
 80009a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80009a6:	4a15      	ldr	r2, [pc, #84]	; (80009fc <SystemInit+0x60>)
 80009a8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80009ac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80009b0:	4b13      	ldr	r3, [pc, #76]	; (8000a00 <SystemInit+0x64>)
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	4a12      	ldr	r2, [pc, #72]	; (8000a00 <SystemInit+0x64>)
 80009b6:	f043 0301 	orr.w	r3, r3, #1
 80009ba:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80009bc:	4b10      	ldr	r3, [pc, #64]	; (8000a00 <SystemInit+0x64>)
 80009be:	2200      	movs	r2, #0
 80009c0:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80009c2:	4b0f      	ldr	r3, [pc, #60]	; (8000a00 <SystemInit+0x64>)
 80009c4:	681b      	ldr	r3, [r3, #0]
 80009c6:	4a0e      	ldr	r2, [pc, #56]	; (8000a00 <SystemInit+0x64>)
 80009c8:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80009cc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80009d0:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80009d2:	4b0b      	ldr	r3, [pc, #44]	; (8000a00 <SystemInit+0x64>)
 80009d4:	4a0b      	ldr	r2, [pc, #44]	; (8000a04 <SystemInit+0x68>)
 80009d6:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80009d8:	4b09      	ldr	r3, [pc, #36]	; (8000a00 <SystemInit+0x64>)
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	4a08      	ldr	r2, [pc, #32]	; (8000a00 <SystemInit+0x64>)
 80009de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80009e2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80009e4:	4b06      	ldr	r3, [pc, #24]	; (8000a00 <SystemInit+0x64>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80009ea:	4b04      	ldr	r3, [pc, #16]	; (80009fc <SystemInit+0x60>)
 80009ec:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80009f0:	609a      	str	r2, [r3, #8]
#endif
}
 80009f2:	bf00      	nop
 80009f4:	46bd      	mov	sp, r7
 80009f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fa:	4770      	bx	lr
 80009fc:	e000ed00 	.word	0xe000ed00
 8000a00:	40023800 	.word	0x40023800
 8000a04:	24003010 	.word	0x24003010

08000a08 <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	af00      	add	r7, sp, #0
}
 8000a0c:	bf00      	nop
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a14:	4770      	bx	lr

08000a16 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8000a16:	b480      	push	{r7}
 8000a18:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8000a1a:	e7fe      	b.n	8000a1a <HardFault_Handler+0x4>

08000a1c <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8000a20:	e7fe      	b.n	8000a20 <MemManage_Handler+0x4>

08000a22 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8000a22:	b480      	push	{r7}
 8000a24:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8000a26:	e7fe      	b.n	8000a26 <BusFault_Handler+0x4>

08000a28 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8000a2c:	e7fe      	b.n	8000a2c <UsageFault_Handler+0x4>

08000a2e <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8000a2e:	b480      	push	{r7}
 8000a30:	af00      	add	r7, sp, #0
}
 8000a32:	bf00      	nop
 8000a34:	46bd      	mov	sp, r7
 8000a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3a:	4770      	bx	lr

08000a3c <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	af00      	add	r7, sp, #0
}
 8000a40:	bf00      	nop
 8000a42:	46bd      	mov	sp, r7
 8000a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a48:	4770      	bx	lr

08000a4a <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8000a4a:	b480      	push	{r7}
 8000a4c:	af00      	add	r7, sp, #0
}
 8000a4e:	bf00      	nop
 8000a50:	46bd      	mov	sp, r7
 8000a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a56:	4770      	bx	lr

08000a58 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	af00      	add	r7, sp, #0
    HAL_IncTick();
 8000a5c:	f000 f914 	bl	8000c88 <HAL_IncTick>
}
 8000a60:	bf00      	nop
 8000a62:	bd80      	pop	{r7, pc}

08000a64 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000a64:	b480      	push	{r7}
 8000a66:	af00      	add	r7, sp, #0
	return 1;
 8000a68:	2301      	movs	r3, #1
}
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a72:	4770      	bx	lr

08000a74 <_kill>:

int _kill(int pid, int sig)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b082      	sub	sp, #8
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	6078      	str	r0, [r7, #4]
 8000a7c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000a7e:	f001 f9cd 	bl	8001e1c <__errno>
 8000a82:	4603      	mov	r3, r0
 8000a84:	2216      	movs	r2, #22
 8000a86:	601a      	str	r2, [r3, #0]
	return -1;
 8000a88:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000a8c:	4618      	mov	r0, r3
 8000a8e:	3708      	adds	r7, #8
 8000a90:	46bd      	mov	sp, r7
 8000a92:	bd80      	pop	{r7, pc}

08000a94 <_exit>:

void _exit (int status)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b082      	sub	sp, #8
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000a9c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000aa0:	6878      	ldr	r0, [r7, #4]
 8000aa2:	f7ff ffe7 	bl	8000a74 <_kill>
	while (1) {}		/* Make sure we hang here */
 8000aa6:	e7fe      	b.n	8000aa6 <_exit+0x12>

08000aa8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b086      	sub	sp, #24
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	60f8      	str	r0, [r7, #12]
 8000ab0:	60b9      	str	r1, [r7, #8]
 8000ab2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	617b      	str	r3, [r7, #20]
 8000ab8:	e00a      	b.n	8000ad0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000aba:	f3af 8000 	nop.w
 8000abe:	4601      	mov	r1, r0
 8000ac0:	68bb      	ldr	r3, [r7, #8]
 8000ac2:	1c5a      	adds	r2, r3, #1
 8000ac4:	60ba      	str	r2, [r7, #8]
 8000ac6:	b2ca      	uxtb	r2, r1
 8000ac8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000aca:	697b      	ldr	r3, [r7, #20]
 8000acc:	3301      	adds	r3, #1
 8000ace:	617b      	str	r3, [r7, #20]
 8000ad0:	697a      	ldr	r2, [r7, #20]
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	429a      	cmp	r2, r3
 8000ad6:	dbf0      	blt.n	8000aba <_read+0x12>
	}

return len;
 8000ad8:	687b      	ldr	r3, [r7, #4]
}
 8000ada:	4618      	mov	r0, r3
 8000adc:	3718      	adds	r7, #24
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	bd80      	pop	{r7, pc}

08000ae2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000ae2:	b580      	push	{r7, lr}
 8000ae4:	b086      	sub	sp, #24
 8000ae6:	af00      	add	r7, sp, #0
 8000ae8:	60f8      	str	r0, [r7, #12]
 8000aea:	60b9      	str	r1, [r7, #8]
 8000aec:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000aee:	2300      	movs	r3, #0
 8000af0:	617b      	str	r3, [r7, #20]
 8000af2:	e009      	b.n	8000b08 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000af4:	68bb      	ldr	r3, [r7, #8]
 8000af6:	1c5a      	adds	r2, r3, #1
 8000af8:	60ba      	str	r2, [r7, #8]
 8000afa:	781b      	ldrb	r3, [r3, #0]
 8000afc:	4618      	mov	r0, r3
 8000afe:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b02:	697b      	ldr	r3, [r7, #20]
 8000b04:	3301      	adds	r3, #1
 8000b06:	617b      	str	r3, [r7, #20]
 8000b08:	697a      	ldr	r2, [r7, #20]
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	429a      	cmp	r2, r3
 8000b0e:	dbf1      	blt.n	8000af4 <_write+0x12>
	}
	return len;
 8000b10:	687b      	ldr	r3, [r7, #4]
}
 8000b12:	4618      	mov	r0, r3
 8000b14:	3718      	adds	r7, #24
 8000b16:	46bd      	mov	sp, r7
 8000b18:	bd80      	pop	{r7, pc}

08000b1a <_close>:

int _close(int file)
{
 8000b1a:	b480      	push	{r7}
 8000b1c:	b083      	sub	sp, #12
 8000b1e:	af00      	add	r7, sp, #0
 8000b20:	6078      	str	r0, [r7, #4]
	return -1;
 8000b22:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000b26:	4618      	mov	r0, r3
 8000b28:	370c      	adds	r7, #12
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b30:	4770      	bx	lr

08000b32 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000b32:	b480      	push	{r7}
 8000b34:	b083      	sub	sp, #12
 8000b36:	af00      	add	r7, sp, #0
 8000b38:	6078      	str	r0, [r7, #4]
 8000b3a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000b3c:	683b      	ldr	r3, [r7, #0]
 8000b3e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000b42:	605a      	str	r2, [r3, #4]
	return 0;
 8000b44:	2300      	movs	r3, #0
}
 8000b46:	4618      	mov	r0, r3
 8000b48:	370c      	adds	r7, #12
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b50:	4770      	bx	lr

08000b52 <_isatty>:

int _isatty(int file)
{
 8000b52:	b480      	push	{r7}
 8000b54:	b083      	sub	sp, #12
 8000b56:	af00      	add	r7, sp, #0
 8000b58:	6078      	str	r0, [r7, #4]
	return 1;
 8000b5a:	2301      	movs	r3, #1
}
 8000b5c:	4618      	mov	r0, r3
 8000b5e:	370c      	adds	r7, #12
 8000b60:	46bd      	mov	sp, r7
 8000b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b66:	4770      	bx	lr

08000b68 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	b085      	sub	sp, #20
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	60f8      	str	r0, [r7, #12]
 8000b70:	60b9      	str	r1, [r7, #8]
 8000b72:	607a      	str	r2, [r7, #4]
	return 0;
 8000b74:	2300      	movs	r3, #0
}
 8000b76:	4618      	mov	r0, r3
 8000b78:	3714      	adds	r7, #20
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b80:	4770      	bx	lr
	...

08000b84 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b086      	sub	sp, #24
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b8c:	4a14      	ldr	r2, [pc, #80]	; (8000be0 <_sbrk+0x5c>)
 8000b8e:	4b15      	ldr	r3, [pc, #84]	; (8000be4 <_sbrk+0x60>)
 8000b90:	1ad3      	subs	r3, r2, r3
 8000b92:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b94:	697b      	ldr	r3, [r7, #20]
 8000b96:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b98:	4b13      	ldr	r3, [pc, #76]	; (8000be8 <_sbrk+0x64>)
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d102      	bne.n	8000ba6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ba0:	4b11      	ldr	r3, [pc, #68]	; (8000be8 <_sbrk+0x64>)
 8000ba2:	4a12      	ldr	r2, [pc, #72]	; (8000bec <_sbrk+0x68>)
 8000ba4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ba6:	4b10      	ldr	r3, [pc, #64]	; (8000be8 <_sbrk+0x64>)
 8000ba8:	681a      	ldr	r2, [r3, #0]
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	4413      	add	r3, r2
 8000bae:	693a      	ldr	r2, [r7, #16]
 8000bb0:	429a      	cmp	r2, r3
 8000bb2:	d207      	bcs.n	8000bc4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000bb4:	f001 f932 	bl	8001e1c <__errno>
 8000bb8:	4603      	mov	r3, r0
 8000bba:	220c      	movs	r2, #12
 8000bbc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000bbe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000bc2:	e009      	b.n	8000bd8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000bc4:	4b08      	ldr	r3, [pc, #32]	; (8000be8 <_sbrk+0x64>)
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000bca:	4b07      	ldr	r3, [pc, #28]	; (8000be8 <_sbrk+0x64>)
 8000bcc:	681a      	ldr	r2, [r3, #0]
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	4413      	add	r3, r2
 8000bd2:	4a05      	ldr	r2, [pc, #20]	; (8000be8 <_sbrk+0x64>)
 8000bd4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000bd6:	68fb      	ldr	r3, [r7, #12]
}
 8000bd8:	4618      	mov	r0, r3
 8000bda:	3718      	adds	r7, #24
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	bd80      	pop	{r7, pc}
 8000be0:	20030000 	.word	0x20030000
 8000be4:	00000400 	.word	0x00000400
 8000be8:	200000ac 	.word	0x200000ac
 8000bec:	200000c8 	.word	0x200000c8

08000bf0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000bf4:	4b0b      	ldr	r3, [pc, #44]	; (8000c24 <HAL_Init+0x34>)
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	4a0a      	ldr	r2, [pc, #40]	; (8000c24 <HAL_Init+0x34>)
 8000bfa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000bfe:	6013      	str	r3, [r2, #0]
#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c00:	4b08      	ldr	r3, [pc, #32]	; (8000c24 <HAL_Init+0x34>)
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	4a07      	ldr	r2, [pc, #28]	; (8000c24 <HAL_Init+0x34>)
 8000c06:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c0a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c0c:	2003      	movs	r0, #3
 8000c0e:	f000 f92b 	bl	8000e68 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c12:	200f      	movs	r0, #15
 8000c14:	f000 f808 	bl	8000c28 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c18:	f000 fb5f 	bl	80012da <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c1c:	2300      	movs	r3, #0
}
 8000c1e:	4618      	mov	r0, r3
 8000c20:	bd80      	pop	{r7, pc}
 8000c22:	bf00      	nop
 8000c24:	40023c00 	.word	0x40023c00

08000c28 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b082      	sub	sp, #8
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c30:	4b12      	ldr	r3, [pc, #72]	; (8000c7c <HAL_InitTick+0x54>)
 8000c32:	681a      	ldr	r2, [r3, #0]
 8000c34:	4b12      	ldr	r3, [pc, #72]	; (8000c80 <HAL_InitTick+0x58>)
 8000c36:	781b      	ldrb	r3, [r3, #0]
 8000c38:	4619      	mov	r1, r3
 8000c3a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c3e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c42:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c46:	4618      	mov	r0, r3
 8000c48:	f000 f943 	bl	8000ed2 <HAL_SYSTICK_Config>
 8000c4c:	4603      	mov	r3, r0
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d001      	beq.n	8000c56 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c52:	2301      	movs	r3, #1
 8000c54:	e00e      	b.n	8000c74 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	2b0f      	cmp	r3, #15
 8000c5a:	d80a      	bhi.n	8000c72 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	6879      	ldr	r1, [r7, #4]
 8000c60:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c64:	f000 f90b 	bl	8000e7e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c68:	4a06      	ldr	r2, [pc, #24]	; (8000c84 <HAL_InitTick+0x5c>)
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	e000      	b.n	8000c74 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c72:	2301      	movs	r3, #1
}
 8000c74:	4618      	mov	r0, r3
 8000c76:	3708      	adds	r7, #8
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	bd80      	pop	{r7, pc}
 8000c7c:	20000010 	.word	0x20000010
 8000c80:	20000018 	.word	0x20000018
 8000c84:	20000014 	.word	0x20000014

08000c88 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c8c:	4b06      	ldr	r3, [pc, #24]	; (8000ca8 <HAL_IncTick+0x20>)
 8000c8e:	781b      	ldrb	r3, [r3, #0]
 8000c90:	461a      	mov	r2, r3
 8000c92:	4b06      	ldr	r3, [pc, #24]	; (8000cac <HAL_IncTick+0x24>)
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	4413      	add	r3, r2
 8000c98:	4a04      	ldr	r2, [pc, #16]	; (8000cac <HAL_IncTick+0x24>)
 8000c9a:	6013      	str	r3, [r2, #0]
}
 8000c9c:	bf00      	nop
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop
 8000ca8:	20000018 	.word	0x20000018
 8000cac:	200000b0 	.word	0x200000b0

08000cb0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	af00      	add	r7, sp, #0
  return uwTick;
 8000cb4:	4b03      	ldr	r3, [pc, #12]	; (8000cc4 <HAL_GetTick+0x14>)
 8000cb6:	681b      	ldr	r3, [r3, #0]
}
 8000cb8:	4618      	mov	r0, r3
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc0:	4770      	bx	lr
 8000cc2:	bf00      	nop
 8000cc4:	200000b0 	.word	0x200000b0

08000cc8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	b085      	sub	sp, #20
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	f003 0307 	and.w	r3, r3, #7
 8000cd6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000cd8:	4b0c      	ldr	r3, [pc, #48]	; (8000d0c <__NVIC_SetPriorityGrouping+0x44>)
 8000cda:	68db      	ldr	r3, [r3, #12]
 8000cdc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000cde:	68ba      	ldr	r2, [r7, #8]
 8000ce0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ce4:	4013      	ands	r3, r2
 8000ce6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ce8:	68fb      	ldr	r3, [r7, #12]
 8000cea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000cec:	68bb      	ldr	r3, [r7, #8]
 8000cee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000cf0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000cf4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cf8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000cfa:	4a04      	ldr	r2, [pc, #16]	; (8000d0c <__NVIC_SetPriorityGrouping+0x44>)
 8000cfc:	68bb      	ldr	r3, [r7, #8]
 8000cfe:	60d3      	str	r3, [r2, #12]
}
 8000d00:	bf00      	nop
 8000d02:	3714      	adds	r7, #20
 8000d04:	46bd      	mov	sp, r7
 8000d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0a:	4770      	bx	lr
 8000d0c:	e000ed00 	.word	0xe000ed00

08000d10 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d10:	b480      	push	{r7}
 8000d12:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d14:	4b04      	ldr	r3, [pc, #16]	; (8000d28 <__NVIC_GetPriorityGrouping+0x18>)
 8000d16:	68db      	ldr	r3, [r3, #12]
 8000d18:	0a1b      	lsrs	r3, r3, #8
 8000d1a:	f003 0307 	and.w	r3, r3, #7
}
 8000d1e:	4618      	mov	r0, r3
 8000d20:	46bd      	mov	sp, r7
 8000d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d26:	4770      	bx	lr
 8000d28:	e000ed00 	.word	0xe000ed00

08000d2c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	b083      	sub	sp, #12
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	4603      	mov	r3, r0
 8000d34:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	db0b      	blt.n	8000d56 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d3e:	79fb      	ldrb	r3, [r7, #7]
 8000d40:	f003 021f 	and.w	r2, r3, #31
 8000d44:	4907      	ldr	r1, [pc, #28]	; (8000d64 <__NVIC_EnableIRQ+0x38>)
 8000d46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d4a:	095b      	lsrs	r3, r3, #5
 8000d4c:	2001      	movs	r0, #1
 8000d4e:	fa00 f202 	lsl.w	r2, r0, r2
 8000d52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000d56:	bf00      	nop
 8000d58:	370c      	adds	r7, #12
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d60:	4770      	bx	lr
 8000d62:	bf00      	nop
 8000d64:	e000e100 	.word	0xe000e100

08000d68 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	b083      	sub	sp, #12
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	4603      	mov	r3, r0
 8000d70:	6039      	str	r1, [r7, #0]
 8000d72:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	db0a      	blt.n	8000d92 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d7c:	683b      	ldr	r3, [r7, #0]
 8000d7e:	b2da      	uxtb	r2, r3
 8000d80:	490c      	ldr	r1, [pc, #48]	; (8000db4 <__NVIC_SetPriority+0x4c>)
 8000d82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d86:	0112      	lsls	r2, r2, #4
 8000d88:	b2d2      	uxtb	r2, r2
 8000d8a:	440b      	add	r3, r1
 8000d8c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d90:	e00a      	b.n	8000da8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d92:	683b      	ldr	r3, [r7, #0]
 8000d94:	b2da      	uxtb	r2, r3
 8000d96:	4908      	ldr	r1, [pc, #32]	; (8000db8 <__NVIC_SetPriority+0x50>)
 8000d98:	79fb      	ldrb	r3, [r7, #7]
 8000d9a:	f003 030f 	and.w	r3, r3, #15
 8000d9e:	3b04      	subs	r3, #4
 8000da0:	0112      	lsls	r2, r2, #4
 8000da2:	b2d2      	uxtb	r2, r2
 8000da4:	440b      	add	r3, r1
 8000da6:	761a      	strb	r2, [r3, #24]
}
 8000da8:	bf00      	nop
 8000daa:	370c      	adds	r7, #12
 8000dac:	46bd      	mov	sp, r7
 8000dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db2:	4770      	bx	lr
 8000db4:	e000e100 	.word	0xe000e100
 8000db8:	e000ed00 	.word	0xe000ed00

08000dbc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	b089      	sub	sp, #36	; 0x24
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	60f8      	str	r0, [r7, #12]
 8000dc4:	60b9      	str	r1, [r7, #8]
 8000dc6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000dc8:	68fb      	ldr	r3, [r7, #12]
 8000dca:	f003 0307 	and.w	r3, r3, #7
 8000dce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000dd0:	69fb      	ldr	r3, [r7, #28]
 8000dd2:	f1c3 0307 	rsb	r3, r3, #7
 8000dd6:	2b04      	cmp	r3, #4
 8000dd8:	bf28      	it	cs
 8000dda:	2304      	movcs	r3, #4
 8000ddc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000dde:	69fb      	ldr	r3, [r7, #28]
 8000de0:	3304      	adds	r3, #4
 8000de2:	2b06      	cmp	r3, #6
 8000de4:	d902      	bls.n	8000dec <NVIC_EncodePriority+0x30>
 8000de6:	69fb      	ldr	r3, [r7, #28]
 8000de8:	3b03      	subs	r3, #3
 8000dea:	e000      	b.n	8000dee <NVIC_EncodePriority+0x32>
 8000dec:	2300      	movs	r3, #0
 8000dee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000df0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000df4:	69bb      	ldr	r3, [r7, #24]
 8000df6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dfa:	43da      	mvns	r2, r3
 8000dfc:	68bb      	ldr	r3, [r7, #8]
 8000dfe:	401a      	ands	r2, r3
 8000e00:	697b      	ldr	r3, [r7, #20]
 8000e02:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e04:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000e08:	697b      	ldr	r3, [r7, #20]
 8000e0a:	fa01 f303 	lsl.w	r3, r1, r3
 8000e0e:	43d9      	mvns	r1, r3
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e14:	4313      	orrs	r3, r2
         );
}
 8000e16:	4618      	mov	r0, r3
 8000e18:	3724      	adds	r7, #36	; 0x24
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e20:	4770      	bx	lr
	...

08000e24 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b082      	sub	sp, #8
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	3b01      	subs	r3, #1
 8000e30:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e34:	d301      	bcc.n	8000e3a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e36:	2301      	movs	r3, #1
 8000e38:	e00f      	b.n	8000e5a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e3a:	4a0a      	ldr	r2, [pc, #40]	; (8000e64 <SysTick_Config+0x40>)
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	3b01      	subs	r3, #1
 8000e40:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e42:	210f      	movs	r1, #15
 8000e44:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000e48:	f7ff ff8e 	bl	8000d68 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e4c:	4b05      	ldr	r3, [pc, #20]	; (8000e64 <SysTick_Config+0x40>)
 8000e4e:	2200      	movs	r2, #0
 8000e50:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e52:	4b04      	ldr	r3, [pc, #16]	; (8000e64 <SysTick_Config+0x40>)
 8000e54:	2207      	movs	r2, #7
 8000e56:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e58:	2300      	movs	r3, #0
}
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	3708      	adds	r7, #8
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bd80      	pop	{r7, pc}
 8000e62:	bf00      	nop
 8000e64:	e000e010 	.word	0xe000e010

08000e68 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b082      	sub	sp, #8
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e70:	6878      	ldr	r0, [r7, #4]
 8000e72:	f7ff ff29 	bl	8000cc8 <__NVIC_SetPriorityGrouping>
}
 8000e76:	bf00      	nop
 8000e78:	3708      	adds	r7, #8
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	bd80      	pop	{r7, pc}

08000e7e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e7e:	b580      	push	{r7, lr}
 8000e80:	b086      	sub	sp, #24
 8000e82:	af00      	add	r7, sp, #0
 8000e84:	4603      	mov	r3, r0
 8000e86:	60b9      	str	r1, [r7, #8]
 8000e88:	607a      	str	r2, [r7, #4]
 8000e8a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e90:	f7ff ff3e 	bl	8000d10 <__NVIC_GetPriorityGrouping>
 8000e94:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e96:	687a      	ldr	r2, [r7, #4]
 8000e98:	68b9      	ldr	r1, [r7, #8]
 8000e9a:	6978      	ldr	r0, [r7, #20]
 8000e9c:	f7ff ff8e 	bl	8000dbc <NVIC_EncodePriority>
 8000ea0:	4602      	mov	r2, r0
 8000ea2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ea6:	4611      	mov	r1, r2
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	f7ff ff5d 	bl	8000d68 <__NVIC_SetPriority>
}
 8000eae:	bf00      	nop
 8000eb0:	3718      	adds	r7, #24
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bd80      	pop	{r7, pc}

08000eb6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000eb6:	b580      	push	{r7, lr}
 8000eb8:	b082      	sub	sp, #8
 8000eba:	af00      	add	r7, sp, #0
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ec0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	f7ff ff31 	bl	8000d2c <__NVIC_EnableIRQ>
}
 8000eca:	bf00      	nop
 8000ecc:	3708      	adds	r7, #8
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bd80      	pop	{r7, pc}

08000ed2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ed2:	b580      	push	{r7, lr}
 8000ed4:	b082      	sub	sp, #8
 8000ed6:	af00      	add	r7, sp, #0
 8000ed8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000eda:	6878      	ldr	r0, [r7, #4]
 8000edc:	f7ff ffa2 	bl	8000e24 <SysTick_Config>
 8000ee0:	4603      	mov	r3, r0
}
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	3708      	adds	r7, #8
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	bd80      	pop	{r7, pc}
	...

08000eec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000eec:	b480      	push	{r7}
 8000eee:	b089      	sub	sp, #36	; 0x24
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
 8000ef4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000efa:	2300      	movs	r3, #0
 8000efc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000efe:	2300      	movs	r3, #0
 8000f00:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f02:	2300      	movs	r3, #0
 8000f04:	61fb      	str	r3, [r7, #28]
 8000f06:	e177      	b.n	80011f8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000f08:	2201      	movs	r2, #1
 8000f0a:	69fb      	ldr	r3, [r7, #28]
 8000f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f10:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f12:	683b      	ldr	r3, [r7, #0]
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	697a      	ldr	r2, [r7, #20]
 8000f18:	4013      	ands	r3, r2
 8000f1a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000f1c:	693a      	ldr	r2, [r7, #16]
 8000f1e:	697b      	ldr	r3, [r7, #20]
 8000f20:	429a      	cmp	r2, r3
 8000f22:	f040 8166 	bne.w	80011f2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f26:	683b      	ldr	r3, [r7, #0]
 8000f28:	685b      	ldr	r3, [r3, #4]
 8000f2a:	f003 0303 	and.w	r3, r3, #3
 8000f2e:	2b01      	cmp	r3, #1
 8000f30:	d005      	beq.n	8000f3e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f32:	683b      	ldr	r3, [r7, #0]
 8000f34:	685b      	ldr	r3, [r3, #4]
 8000f36:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f3a:	2b02      	cmp	r3, #2
 8000f3c:	d130      	bne.n	8000fa0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	689b      	ldr	r3, [r3, #8]
 8000f42:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000f44:	69fb      	ldr	r3, [r7, #28]
 8000f46:	005b      	lsls	r3, r3, #1
 8000f48:	2203      	movs	r2, #3
 8000f4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f4e:	43db      	mvns	r3, r3
 8000f50:	69ba      	ldr	r2, [r7, #24]
 8000f52:	4013      	ands	r3, r2
 8000f54:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f56:	683b      	ldr	r3, [r7, #0]
 8000f58:	68da      	ldr	r2, [r3, #12]
 8000f5a:	69fb      	ldr	r3, [r7, #28]
 8000f5c:	005b      	lsls	r3, r3, #1
 8000f5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f62:	69ba      	ldr	r2, [r7, #24]
 8000f64:	4313      	orrs	r3, r2
 8000f66:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	69ba      	ldr	r2, [r7, #24]
 8000f6c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	685b      	ldr	r3, [r3, #4]
 8000f72:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f74:	2201      	movs	r2, #1
 8000f76:	69fb      	ldr	r3, [r7, #28]
 8000f78:	fa02 f303 	lsl.w	r3, r2, r3
 8000f7c:	43db      	mvns	r3, r3
 8000f7e:	69ba      	ldr	r2, [r7, #24]
 8000f80:	4013      	ands	r3, r2
 8000f82:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f84:	683b      	ldr	r3, [r7, #0]
 8000f86:	685b      	ldr	r3, [r3, #4]
 8000f88:	091b      	lsrs	r3, r3, #4
 8000f8a:	f003 0201 	and.w	r2, r3, #1
 8000f8e:	69fb      	ldr	r3, [r7, #28]
 8000f90:	fa02 f303 	lsl.w	r3, r2, r3
 8000f94:	69ba      	ldr	r2, [r7, #24]
 8000f96:	4313      	orrs	r3, r2
 8000f98:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	69ba      	ldr	r2, [r7, #24]
 8000f9e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000fa0:	683b      	ldr	r3, [r7, #0]
 8000fa2:	685b      	ldr	r3, [r3, #4]
 8000fa4:	f003 0303 	and.w	r3, r3, #3
 8000fa8:	2b03      	cmp	r3, #3
 8000faa:	d017      	beq.n	8000fdc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	68db      	ldr	r3, [r3, #12]
 8000fb0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000fb2:	69fb      	ldr	r3, [r7, #28]
 8000fb4:	005b      	lsls	r3, r3, #1
 8000fb6:	2203      	movs	r2, #3
 8000fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fbc:	43db      	mvns	r3, r3
 8000fbe:	69ba      	ldr	r2, [r7, #24]
 8000fc0:	4013      	ands	r3, r2
 8000fc2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000fc4:	683b      	ldr	r3, [r7, #0]
 8000fc6:	689a      	ldr	r2, [r3, #8]
 8000fc8:	69fb      	ldr	r3, [r7, #28]
 8000fca:	005b      	lsls	r3, r3, #1
 8000fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd0:	69ba      	ldr	r2, [r7, #24]
 8000fd2:	4313      	orrs	r3, r2
 8000fd4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	69ba      	ldr	r2, [r7, #24]
 8000fda:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000fdc:	683b      	ldr	r3, [r7, #0]
 8000fde:	685b      	ldr	r3, [r3, #4]
 8000fe0:	f003 0303 	and.w	r3, r3, #3
 8000fe4:	2b02      	cmp	r3, #2
 8000fe6:	d123      	bne.n	8001030 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000fe8:	69fb      	ldr	r3, [r7, #28]
 8000fea:	08da      	lsrs	r2, r3, #3
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	3208      	adds	r2, #8
 8000ff0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ff4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000ff6:	69fb      	ldr	r3, [r7, #28]
 8000ff8:	f003 0307 	and.w	r3, r3, #7
 8000ffc:	009b      	lsls	r3, r3, #2
 8000ffe:	220f      	movs	r2, #15
 8001000:	fa02 f303 	lsl.w	r3, r2, r3
 8001004:	43db      	mvns	r3, r3
 8001006:	69ba      	ldr	r2, [r7, #24]
 8001008:	4013      	ands	r3, r2
 800100a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800100c:	683b      	ldr	r3, [r7, #0]
 800100e:	691a      	ldr	r2, [r3, #16]
 8001010:	69fb      	ldr	r3, [r7, #28]
 8001012:	f003 0307 	and.w	r3, r3, #7
 8001016:	009b      	lsls	r3, r3, #2
 8001018:	fa02 f303 	lsl.w	r3, r2, r3
 800101c:	69ba      	ldr	r2, [r7, #24]
 800101e:	4313      	orrs	r3, r2
 8001020:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001022:	69fb      	ldr	r3, [r7, #28]
 8001024:	08da      	lsrs	r2, r3, #3
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	3208      	adds	r2, #8
 800102a:	69b9      	ldr	r1, [r7, #24]
 800102c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001036:	69fb      	ldr	r3, [r7, #28]
 8001038:	005b      	lsls	r3, r3, #1
 800103a:	2203      	movs	r2, #3
 800103c:	fa02 f303 	lsl.w	r3, r2, r3
 8001040:	43db      	mvns	r3, r3
 8001042:	69ba      	ldr	r2, [r7, #24]
 8001044:	4013      	ands	r3, r2
 8001046:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001048:	683b      	ldr	r3, [r7, #0]
 800104a:	685b      	ldr	r3, [r3, #4]
 800104c:	f003 0203 	and.w	r2, r3, #3
 8001050:	69fb      	ldr	r3, [r7, #28]
 8001052:	005b      	lsls	r3, r3, #1
 8001054:	fa02 f303 	lsl.w	r3, r2, r3
 8001058:	69ba      	ldr	r2, [r7, #24]
 800105a:	4313      	orrs	r3, r2
 800105c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	69ba      	ldr	r2, [r7, #24]
 8001062:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001064:	683b      	ldr	r3, [r7, #0]
 8001066:	685b      	ldr	r3, [r3, #4]
 8001068:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800106c:	2b00      	cmp	r3, #0
 800106e:	f000 80c0 	beq.w	80011f2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001072:	2300      	movs	r3, #0
 8001074:	60fb      	str	r3, [r7, #12]
 8001076:	4b66      	ldr	r3, [pc, #408]	; (8001210 <HAL_GPIO_Init+0x324>)
 8001078:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800107a:	4a65      	ldr	r2, [pc, #404]	; (8001210 <HAL_GPIO_Init+0x324>)
 800107c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001080:	6453      	str	r3, [r2, #68]	; 0x44
 8001082:	4b63      	ldr	r3, [pc, #396]	; (8001210 <HAL_GPIO_Init+0x324>)
 8001084:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001086:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800108a:	60fb      	str	r3, [r7, #12]
 800108c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800108e:	4a61      	ldr	r2, [pc, #388]	; (8001214 <HAL_GPIO_Init+0x328>)
 8001090:	69fb      	ldr	r3, [r7, #28]
 8001092:	089b      	lsrs	r3, r3, #2
 8001094:	3302      	adds	r3, #2
 8001096:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800109a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800109c:	69fb      	ldr	r3, [r7, #28]
 800109e:	f003 0303 	and.w	r3, r3, #3
 80010a2:	009b      	lsls	r3, r3, #2
 80010a4:	220f      	movs	r2, #15
 80010a6:	fa02 f303 	lsl.w	r3, r2, r3
 80010aa:	43db      	mvns	r3, r3
 80010ac:	69ba      	ldr	r2, [r7, #24]
 80010ae:	4013      	ands	r3, r2
 80010b0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	4a58      	ldr	r2, [pc, #352]	; (8001218 <HAL_GPIO_Init+0x32c>)
 80010b6:	4293      	cmp	r3, r2
 80010b8:	d037      	beq.n	800112a <HAL_GPIO_Init+0x23e>
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	4a57      	ldr	r2, [pc, #348]	; (800121c <HAL_GPIO_Init+0x330>)
 80010be:	4293      	cmp	r3, r2
 80010c0:	d031      	beq.n	8001126 <HAL_GPIO_Init+0x23a>
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	4a56      	ldr	r2, [pc, #344]	; (8001220 <HAL_GPIO_Init+0x334>)
 80010c6:	4293      	cmp	r3, r2
 80010c8:	d02b      	beq.n	8001122 <HAL_GPIO_Init+0x236>
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	4a55      	ldr	r2, [pc, #340]	; (8001224 <HAL_GPIO_Init+0x338>)
 80010ce:	4293      	cmp	r3, r2
 80010d0:	d025      	beq.n	800111e <HAL_GPIO_Init+0x232>
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	4a54      	ldr	r2, [pc, #336]	; (8001228 <HAL_GPIO_Init+0x33c>)
 80010d6:	4293      	cmp	r3, r2
 80010d8:	d01f      	beq.n	800111a <HAL_GPIO_Init+0x22e>
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	4a53      	ldr	r2, [pc, #332]	; (800122c <HAL_GPIO_Init+0x340>)
 80010de:	4293      	cmp	r3, r2
 80010e0:	d019      	beq.n	8001116 <HAL_GPIO_Init+0x22a>
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	4a52      	ldr	r2, [pc, #328]	; (8001230 <HAL_GPIO_Init+0x344>)
 80010e6:	4293      	cmp	r3, r2
 80010e8:	d013      	beq.n	8001112 <HAL_GPIO_Init+0x226>
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	4a51      	ldr	r2, [pc, #324]	; (8001234 <HAL_GPIO_Init+0x348>)
 80010ee:	4293      	cmp	r3, r2
 80010f0:	d00d      	beq.n	800110e <HAL_GPIO_Init+0x222>
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	4a50      	ldr	r2, [pc, #320]	; (8001238 <HAL_GPIO_Init+0x34c>)
 80010f6:	4293      	cmp	r3, r2
 80010f8:	d007      	beq.n	800110a <HAL_GPIO_Init+0x21e>
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	4a4f      	ldr	r2, [pc, #316]	; (800123c <HAL_GPIO_Init+0x350>)
 80010fe:	4293      	cmp	r3, r2
 8001100:	d101      	bne.n	8001106 <HAL_GPIO_Init+0x21a>
 8001102:	2309      	movs	r3, #9
 8001104:	e012      	b.n	800112c <HAL_GPIO_Init+0x240>
 8001106:	230a      	movs	r3, #10
 8001108:	e010      	b.n	800112c <HAL_GPIO_Init+0x240>
 800110a:	2308      	movs	r3, #8
 800110c:	e00e      	b.n	800112c <HAL_GPIO_Init+0x240>
 800110e:	2307      	movs	r3, #7
 8001110:	e00c      	b.n	800112c <HAL_GPIO_Init+0x240>
 8001112:	2306      	movs	r3, #6
 8001114:	e00a      	b.n	800112c <HAL_GPIO_Init+0x240>
 8001116:	2305      	movs	r3, #5
 8001118:	e008      	b.n	800112c <HAL_GPIO_Init+0x240>
 800111a:	2304      	movs	r3, #4
 800111c:	e006      	b.n	800112c <HAL_GPIO_Init+0x240>
 800111e:	2303      	movs	r3, #3
 8001120:	e004      	b.n	800112c <HAL_GPIO_Init+0x240>
 8001122:	2302      	movs	r3, #2
 8001124:	e002      	b.n	800112c <HAL_GPIO_Init+0x240>
 8001126:	2301      	movs	r3, #1
 8001128:	e000      	b.n	800112c <HAL_GPIO_Init+0x240>
 800112a:	2300      	movs	r3, #0
 800112c:	69fa      	ldr	r2, [r7, #28]
 800112e:	f002 0203 	and.w	r2, r2, #3
 8001132:	0092      	lsls	r2, r2, #2
 8001134:	4093      	lsls	r3, r2
 8001136:	69ba      	ldr	r2, [r7, #24]
 8001138:	4313      	orrs	r3, r2
 800113a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800113c:	4935      	ldr	r1, [pc, #212]	; (8001214 <HAL_GPIO_Init+0x328>)
 800113e:	69fb      	ldr	r3, [r7, #28]
 8001140:	089b      	lsrs	r3, r3, #2
 8001142:	3302      	adds	r3, #2
 8001144:	69ba      	ldr	r2, [r7, #24]
 8001146:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800114a:	4b3d      	ldr	r3, [pc, #244]	; (8001240 <HAL_GPIO_Init+0x354>)
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001150:	693b      	ldr	r3, [r7, #16]
 8001152:	43db      	mvns	r3, r3
 8001154:	69ba      	ldr	r2, [r7, #24]
 8001156:	4013      	ands	r3, r2
 8001158:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800115a:	683b      	ldr	r3, [r7, #0]
 800115c:	685b      	ldr	r3, [r3, #4]
 800115e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001162:	2b00      	cmp	r3, #0
 8001164:	d003      	beq.n	800116e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001166:	69ba      	ldr	r2, [r7, #24]
 8001168:	693b      	ldr	r3, [r7, #16]
 800116a:	4313      	orrs	r3, r2
 800116c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800116e:	4a34      	ldr	r2, [pc, #208]	; (8001240 <HAL_GPIO_Init+0x354>)
 8001170:	69bb      	ldr	r3, [r7, #24]
 8001172:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001174:	4b32      	ldr	r3, [pc, #200]	; (8001240 <HAL_GPIO_Init+0x354>)
 8001176:	685b      	ldr	r3, [r3, #4]
 8001178:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800117a:	693b      	ldr	r3, [r7, #16]
 800117c:	43db      	mvns	r3, r3
 800117e:	69ba      	ldr	r2, [r7, #24]
 8001180:	4013      	ands	r3, r2
 8001182:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001184:	683b      	ldr	r3, [r7, #0]
 8001186:	685b      	ldr	r3, [r3, #4]
 8001188:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800118c:	2b00      	cmp	r3, #0
 800118e:	d003      	beq.n	8001198 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001190:	69ba      	ldr	r2, [r7, #24]
 8001192:	693b      	ldr	r3, [r7, #16]
 8001194:	4313      	orrs	r3, r2
 8001196:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001198:	4a29      	ldr	r2, [pc, #164]	; (8001240 <HAL_GPIO_Init+0x354>)
 800119a:	69bb      	ldr	r3, [r7, #24]
 800119c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800119e:	4b28      	ldr	r3, [pc, #160]	; (8001240 <HAL_GPIO_Init+0x354>)
 80011a0:	689b      	ldr	r3, [r3, #8]
 80011a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011a4:	693b      	ldr	r3, [r7, #16]
 80011a6:	43db      	mvns	r3, r3
 80011a8:	69ba      	ldr	r2, [r7, #24]
 80011aa:	4013      	ands	r3, r2
 80011ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80011ae:	683b      	ldr	r3, [r7, #0]
 80011b0:	685b      	ldr	r3, [r3, #4]
 80011b2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d003      	beq.n	80011c2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80011ba:	69ba      	ldr	r2, [r7, #24]
 80011bc:	693b      	ldr	r3, [r7, #16]
 80011be:	4313      	orrs	r3, r2
 80011c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80011c2:	4a1f      	ldr	r2, [pc, #124]	; (8001240 <HAL_GPIO_Init+0x354>)
 80011c4:	69bb      	ldr	r3, [r7, #24]
 80011c6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80011c8:	4b1d      	ldr	r3, [pc, #116]	; (8001240 <HAL_GPIO_Init+0x354>)
 80011ca:	68db      	ldr	r3, [r3, #12]
 80011cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011ce:	693b      	ldr	r3, [r7, #16]
 80011d0:	43db      	mvns	r3, r3
 80011d2:	69ba      	ldr	r2, [r7, #24]
 80011d4:	4013      	ands	r3, r2
 80011d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80011d8:	683b      	ldr	r3, [r7, #0]
 80011da:	685b      	ldr	r3, [r3, #4]
 80011dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d003      	beq.n	80011ec <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80011e4:	69ba      	ldr	r2, [r7, #24]
 80011e6:	693b      	ldr	r3, [r7, #16]
 80011e8:	4313      	orrs	r3, r2
 80011ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80011ec:	4a14      	ldr	r2, [pc, #80]	; (8001240 <HAL_GPIO_Init+0x354>)
 80011ee:	69bb      	ldr	r3, [r7, #24]
 80011f0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011f2:	69fb      	ldr	r3, [r7, #28]
 80011f4:	3301      	adds	r3, #1
 80011f6:	61fb      	str	r3, [r7, #28]
 80011f8:	69fb      	ldr	r3, [r7, #28]
 80011fa:	2b0f      	cmp	r3, #15
 80011fc:	f67f ae84 	bls.w	8000f08 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001200:	bf00      	nop
 8001202:	bf00      	nop
 8001204:	3724      	adds	r7, #36	; 0x24
 8001206:	46bd      	mov	sp, r7
 8001208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120c:	4770      	bx	lr
 800120e:	bf00      	nop
 8001210:	40023800 	.word	0x40023800
 8001214:	40013800 	.word	0x40013800
 8001218:	40020000 	.word	0x40020000
 800121c:	40020400 	.word	0x40020400
 8001220:	40020800 	.word	0x40020800
 8001224:	40020c00 	.word	0x40020c00
 8001228:	40021000 	.word	0x40021000
 800122c:	40021400 	.word	0x40021400
 8001230:	40021800 	.word	0x40021800
 8001234:	40021c00 	.word	0x40021c00
 8001238:	40022000 	.word	0x40022000
 800123c:	40022400 	.word	0x40022400
 8001240:	40013c00 	.word	0x40013c00

08001244 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001244:	b480      	push	{r7}
 8001246:	b085      	sub	sp, #20
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
 800124c:	460b      	mov	r3, r1
 800124e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	691a      	ldr	r2, [r3, #16]
 8001254:	887b      	ldrh	r3, [r7, #2]
 8001256:	4013      	ands	r3, r2
 8001258:	2b00      	cmp	r3, #0
 800125a:	d002      	beq.n	8001262 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800125c:	2301      	movs	r3, #1
 800125e:	73fb      	strb	r3, [r7, #15]
 8001260:	e001      	b.n	8001266 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001262:	2300      	movs	r3, #0
 8001264:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001266:	7bfb      	ldrb	r3, [r7, #15]
}
 8001268:	4618      	mov	r0, r3
 800126a:	3714      	adds	r7, #20
 800126c:	46bd      	mov	sp, r7
 800126e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001272:	4770      	bx	lr

08001274 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001274:	b480      	push	{r7}
 8001276:	b083      	sub	sp, #12
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
 800127c:	460b      	mov	r3, r1
 800127e:	807b      	strh	r3, [r7, #2]
 8001280:	4613      	mov	r3, r2
 8001282:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001284:	787b      	ldrb	r3, [r7, #1]
 8001286:	2b00      	cmp	r3, #0
 8001288:	d003      	beq.n	8001292 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800128a:	887a      	ldrh	r2, [r7, #2]
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001290:	e003      	b.n	800129a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001292:	887b      	ldrh	r3, [r7, #2]
 8001294:	041a      	lsls	r2, r3, #16
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	619a      	str	r2, [r3, #24]
}
 800129a:	bf00      	nop
 800129c:	370c      	adds	r7, #12
 800129e:	46bd      	mov	sp, r7
 80012a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a4:	4770      	bx	lr

080012a6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80012a6:	b480      	push	{r7}
 80012a8:	b085      	sub	sp, #20
 80012aa:	af00      	add	r7, sp, #0
 80012ac:	6078      	str	r0, [r7, #4]
 80012ae:	460b      	mov	r3, r1
 80012b0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	695b      	ldr	r3, [r3, #20]
 80012b6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80012b8:	887a      	ldrh	r2, [r7, #2]
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	4013      	ands	r3, r2
 80012be:	041a      	lsls	r2, r3, #16
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	43d9      	mvns	r1, r3
 80012c4:	887b      	ldrh	r3, [r7, #2]
 80012c6:	400b      	ands	r3, r1
 80012c8:	431a      	orrs	r2, r3
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	619a      	str	r2, [r3, #24]
}
 80012ce:	bf00      	nop
 80012d0:	3714      	adds	r7, #20
 80012d2:	46bd      	mov	sp, r7
 80012d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d8:	4770      	bx	lr

080012da <HAL_MspInit>:
  * @note   This function is called from HAL_Init() function to perform system
  *         level initialization (GPIOs, clock, DMA, interrupt).
  * @retval None
  */
void HAL_MspInit(void)
{
 80012da:	b480      	push	{r7}
 80012dc:	af00      	add	r7, sp, #0

}
 80012de:	bf00      	nop
 80012e0:	46bd      	mov	sp, r7
 80012e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e6:	4770      	bx	lr

080012e8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b082      	sub	sp, #8
 80012ec:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 80012ee:	2300      	movs	r3, #0
 80012f0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80012f2:	2300      	movs	r3, #0
 80012f4:	603b      	str	r3, [r7, #0]
 80012f6:	4b20      	ldr	r3, [pc, #128]	; (8001378 <HAL_PWREx_EnableOverDrive+0x90>)
 80012f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012fa:	4a1f      	ldr	r2, [pc, #124]	; (8001378 <HAL_PWREx_EnableOverDrive+0x90>)
 80012fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001300:	6413      	str	r3, [r2, #64]	; 0x40
 8001302:	4b1d      	ldr	r3, [pc, #116]	; (8001378 <HAL_PWREx_EnableOverDrive+0x90>)
 8001304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001306:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800130a:	603b      	str	r3, [r7, #0]
 800130c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800130e:	4b1b      	ldr	r3, [pc, #108]	; (800137c <HAL_PWREx_EnableOverDrive+0x94>)
 8001310:	2201      	movs	r2, #1
 8001312:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001314:	f7ff fccc 	bl	8000cb0 <HAL_GetTick>
 8001318:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800131a:	e009      	b.n	8001330 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800131c:	f7ff fcc8 	bl	8000cb0 <HAL_GetTick>
 8001320:	4602      	mov	r2, r0
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	1ad3      	subs	r3, r2, r3
 8001326:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800132a:	d901      	bls.n	8001330 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 800132c:	2303      	movs	r3, #3
 800132e:	e01f      	b.n	8001370 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001330:	4b13      	ldr	r3, [pc, #76]	; (8001380 <HAL_PWREx_EnableOverDrive+0x98>)
 8001332:	685b      	ldr	r3, [r3, #4]
 8001334:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001338:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800133c:	d1ee      	bne.n	800131c <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800133e:	4b11      	ldr	r3, [pc, #68]	; (8001384 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001340:	2201      	movs	r2, #1
 8001342:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001344:	f7ff fcb4 	bl	8000cb0 <HAL_GetTick>
 8001348:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800134a:	e009      	b.n	8001360 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800134c:	f7ff fcb0 	bl	8000cb0 <HAL_GetTick>
 8001350:	4602      	mov	r2, r0
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	1ad3      	subs	r3, r2, r3
 8001356:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800135a:	d901      	bls.n	8001360 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 800135c:	2303      	movs	r3, #3
 800135e:	e007      	b.n	8001370 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001360:	4b07      	ldr	r3, [pc, #28]	; (8001380 <HAL_PWREx_EnableOverDrive+0x98>)
 8001362:	685b      	ldr	r3, [r3, #4]
 8001364:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001368:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800136c:	d1ee      	bne.n	800134c <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800136e:	2300      	movs	r3, #0
}
 8001370:	4618      	mov	r0, r3
 8001372:	3708      	adds	r7, #8
 8001374:	46bd      	mov	sp, r7
 8001376:	bd80      	pop	{r7, pc}
 8001378:	40023800 	.word	0x40023800
 800137c:	420e0040 	.word	0x420e0040
 8001380:	40007000 	.word	0x40007000
 8001384:	420e0044 	.word	0x420e0044

08001388 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b086      	sub	sp, #24
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	2b00      	cmp	r3, #0
 8001394:	d101      	bne.n	800139a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001396:	2301      	movs	r3, #1
 8001398:	e267      	b.n	800186a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	f003 0301 	and.w	r3, r3, #1
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d075      	beq.n	8001492 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80013a6:	4b88      	ldr	r3, [pc, #544]	; (80015c8 <HAL_RCC_OscConfig+0x240>)
 80013a8:	689b      	ldr	r3, [r3, #8]
 80013aa:	f003 030c 	and.w	r3, r3, #12
 80013ae:	2b04      	cmp	r3, #4
 80013b0:	d00c      	beq.n	80013cc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80013b2:	4b85      	ldr	r3, [pc, #532]	; (80015c8 <HAL_RCC_OscConfig+0x240>)
 80013b4:	689b      	ldr	r3, [r3, #8]
 80013b6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80013ba:	2b08      	cmp	r3, #8
 80013bc:	d112      	bne.n	80013e4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80013be:	4b82      	ldr	r3, [pc, #520]	; (80015c8 <HAL_RCC_OscConfig+0x240>)
 80013c0:	685b      	ldr	r3, [r3, #4]
 80013c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80013c6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80013ca:	d10b      	bne.n	80013e4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013cc:	4b7e      	ldr	r3, [pc, #504]	; (80015c8 <HAL_RCC_OscConfig+0x240>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d05b      	beq.n	8001490 <HAL_RCC_OscConfig+0x108>
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	685b      	ldr	r3, [r3, #4]
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d157      	bne.n	8001490 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80013e0:	2301      	movs	r3, #1
 80013e2:	e242      	b.n	800186a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	685b      	ldr	r3, [r3, #4]
 80013e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80013ec:	d106      	bne.n	80013fc <HAL_RCC_OscConfig+0x74>
 80013ee:	4b76      	ldr	r3, [pc, #472]	; (80015c8 <HAL_RCC_OscConfig+0x240>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	4a75      	ldr	r2, [pc, #468]	; (80015c8 <HAL_RCC_OscConfig+0x240>)
 80013f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013f8:	6013      	str	r3, [r2, #0]
 80013fa:	e01d      	b.n	8001438 <HAL_RCC_OscConfig+0xb0>
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	685b      	ldr	r3, [r3, #4]
 8001400:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001404:	d10c      	bne.n	8001420 <HAL_RCC_OscConfig+0x98>
 8001406:	4b70      	ldr	r3, [pc, #448]	; (80015c8 <HAL_RCC_OscConfig+0x240>)
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	4a6f      	ldr	r2, [pc, #444]	; (80015c8 <HAL_RCC_OscConfig+0x240>)
 800140c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001410:	6013      	str	r3, [r2, #0]
 8001412:	4b6d      	ldr	r3, [pc, #436]	; (80015c8 <HAL_RCC_OscConfig+0x240>)
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	4a6c      	ldr	r2, [pc, #432]	; (80015c8 <HAL_RCC_OscConfig+0x240>)
 8001418:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800141c:	6013      	str	r3, [r2, #0]
 800141e:	e00b      	b.n	8001438 <HAL_RCC_OscConfig+0xb0>
 8001420:	4b69      	ldr	r3, [pc, #420]	; (80015c8 <HAL_RCC_OscConfig+0x240>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	4a68      	ldr	r2, [pc, #416]	; (80015c8 <HAL_RCC_OscConfig+0x240>)
 8001426:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800142a:	6013      	str	r3, [r2, #0]
 800142c:	4b66      	ldr	r3, [pc, #408]	; (80015c8 <HAL_RCC_OscConfig+0x240>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	4a65      	ldr	r2, [pc, #404]	; (80015c8 <HAL_RCC_OscConfig+0x240>)
 8001432:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001436:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	685b      	ldr	r3, [r3, #4]
 800143c:	2b00      	cmp	r3, #0
 800143e:	d013      	beq.n	8001468 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001440:	f7ff fc36 	bl	8000cb0 <HAL_GetTick>
 8001444:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001446:	e008      	b.n	800145a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001448:	f7ff fc32 	bl	8000cb0 <HAL_GetTick>
 800144c:	4602      	mov	r2, r0
 800144e:	693b      	ldr	r3, [r7, #16]
 8001450:	1ad3      	subs	r3, r2, r3
 8001452:	2b64      	cmp	r3, #100	; 0x64
 8001454:	d901      	bls.n	800145a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001456:	2303      	movs	r3, #3
 8001458:	e207      	b.n	800186a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800145a:	4b5b      	ldr	r3, [pc, #364]	; (80015c8 <HAL_RCC_OscConfig+0x240>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001462:	2b00      	cmp	r3, #0
 8001464:	d0f0      	beq.n	8001448 <HAL_RCC_OscConfig+0xc0>
 8001466:	e014      	b.n	8001492 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001468:	f7ff fc22 	bl	8000cb0 <HAL_GetTick>
 800146c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800146e:	e008      	b.n	8001482 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001470:	f7ff fc1e 	bl	8000cb0 <HAL_GetTick>
 8001474:	4602      	mov	r2, r0
 8001476:	693b      	ldr	r3, [r7, #16]
 8001478:	1ad3      	subs	r3, r2, r3
 800147a:	2b64      	cmp	r3, #100	; 0x64
 800147c:	d901      	bls.n	8001482 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800147e:	2303      	movs	r3, #3
 8001480:	e1f3      	b.n	800186a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001482:	4b51      	ldr	r3, [pc, #324]	; (80015c8 <HAL_RCC_OscConfig+0x240>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800148a:	2b00      	cmp	r3, #0
 800148c:	d1f0      	bne.n	8001470 <HAL_RCC_OscConfig+0xe8>
 800148e:	e000      	b.n	8001492 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001490:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	f003 0302 	and.w	r3, r3, #2
 800149a:	2b00      	cmp	r3, #0
 800149c:	d063      	beq.n	8001566 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800149e:	4b4a      	ldr	r3, [pc, #296]	; (80015c8 <HAL_RCC_OscConfig+0x240>)
 80014a0:	689b      	ldr	r3, [r3, #8]
 80014a2:	f003 030c 	and.w	r3, r3, #12
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d00b      	beq.n	80014c2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80014aa:	4b47      	ldr	r3, [pc, #284]	; (80015c8 <HAL_RCC_OscConfig+0x240>)
 80014ac:	689b      	ldr	r3, [r3, #8]
 80014ae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80014b2:	2b08      	cmp	r3, #8
 80014b4:	d11c      	bne.n	80014f0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80014b6:	4b44      	ldr	r3, [pc, #272]	; (80015c8 <HAL_RCC_OscConfig+0x240>)
 80014b8:	685b      	ldr	r3, [r3, #4]
 80014ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d116      	bne.n	80014f0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014c2:	4b41      	ldr	r3, [pc, #260]	; (80015c8 <HAL_RCC_OscConfig+0x240>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	f003 0302 	and.w	r3, r3, #2
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d005      	beq.n	80014da <HAL_RCC_OscConfig+0x152>
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	68db      	ldr	r3, [r3, #12]
 80014d2:	2b01      	cmp	r3, #1
 80014d4:	d001      	beq.n	80014da <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80014d6:	2301      	movs	r3, #1
 80014d8:	e1c7      	b.n	800186a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014da:	4b3b      	ldr	r3, [pc, #236]	; (80015c8 <HAL_RCC_OscConfig+0x240>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	691b      	ldr	r3, [r3, #16]
 80014e6:	00db      	lsls	r3, r3, #3
 80014e8:	4937      	ldr	r1, [pc, #220]	; (80015c8 <HAL_RCC_OscConfig+0x240>)
 80014ea:	4313      	orrs	r3, r2
 80014ec:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014ee:	e03a      	b.n	8001566 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	68db      	ldr	r3, [r3, #12]
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d020      	beq.n	800153a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80014f8:	4b34      	ldr	r3, [pc, #208]	; (80015cc <HAL_RCC_OscConfig+0x244>)
 80014fa:	2201      	movs	r2, #1
 80014fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014fe:	f7ff fbd7 	bl	8000cb0 <HAL_GetTick>
 8001502:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001504:	e008      	b.n	8001518 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001506:	f7ff fbd3 	bl	8000cb0 <HAL_GetTick>
 800150a:	4602      	mov	r2, r0
 800150c:	693b      	ldr	r3, [r7, #16]
 800150e:	1ad3      	subs	r3, r2, r3
 8001510:	2b02      	cmp	r3, #2
 8001512:	d901      	bls.n	8001518 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001514:	2303      	movs	r3, #3
 8001516:	e1a8      	b.n	800186a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001518:	4b2b      	ldr	r3, [pc, #172]	; (80015c8 <HAL_RCC_OscConfig+0x240>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	f003 0302 	and.w	r3, r3, #2
 8001520:	2b00      	cmp	r3, #0
 8001522:	d0f0      	beq.n	8001506 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001524:	4b28      	ldr	r3, [pc, #160]	; (80015c8 <HAL_RCC_OscConfig+0x240>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	691b      	ldr	r3, [r3, #16]
 8001530:	00db      	lsls	r3, r3, #3
 8001532:	4925      	ldr	r1, [pc, #148]	; (80015c8 <HAL_RCC_OscConfig+0x240>)
 8001534:	4313      	orrs	r3, r2
 8001536:	600b      	str	r3, [r1, #0]
 8001538:	e015      	b.n	8001566 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800153a:	4b24      	ldr	r3, [pc, #144]	; (80015cc <HAL_RCC_OscConfig+0x244>)
 800153c:	2200      	movs	r2, #0
 800153e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001540:	f7ff fbb6 	bl	8000cb0 <HAL_GetTick>
 8001544:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001546:	e008      	b.n	800155a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001548:	f7ff fbb2 	bl	8000cb0 <HAL_GetTick>
 800154c:	4602      	mov	r2, r0
 800154e:	693b      	ldr	r3, [r7, #16]
 8001550:	1ad3      	subs	r3, r2, r3
 8001552:	2b02      	cmp	r3, #2
 8001554:	d901      	bls.n	800155a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001556:	2303      	movs	r3, #3
 8001558:	e187      	b.n	800186a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800155a:	4b1b      	ldr	r3, [pc, #108]	; (80015c8 <HAL_RCC_OscConfig+0x240>)
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	f003 0302 	and.w	r3, r3, #2
 8001562:	2b00      	cmp	r3, #0
 8001564:	d1f0      	bne.n	8001548 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	f003 0308 	and.w	r3, r3, #8
 800156e:	2b00      	cmp	r3, #0
 8001570:	d036      	beq.n	80015e0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	695b      	ldr	r3, [r3, #20]
 8001576:	2b00      	cmp	r3, #0
 8001578:	d016      	beq.n	80015a8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800157a:	4b15      	ldr	r3, [pc, #84]	; (80015d0 <HAL_RCC_OscConfig+0x248>)
 800157c:	2201      	movs	r2, #1
 800157e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001580:	f7ff fb96 	bl	8000cb0 <HAL_GetTick>
 8001584:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001586:	e008      	b.n	800159a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001588:	f7ff fb92 	bl	8000cb0 <HAL_GetTick>
 800158c:	4602      	mov	r2, r0
 800158e:	693b      	ldr	r3, [r7, #16]
 8001590:	1ad3      	subs	r3, r2, r3
 8001592:	2b02      	cmp	r3, #2
 8001594:	d901      	bls.n	800159a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001596:	2303      	movs	r3, #3
 8001598:	e167      	b.n	800186a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800159a:	4b0b      	ldr	r3, [pc, #44]	; (80015c8 <HAL_RCC_OscConfig+0x240>)
 800159c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800159e:	f003 0302 	and.w	r3, r3, #2
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d0f0      	beq.n	8001588 <HAL_RCC_OscConfig+0x200>
 80015a6:	e01b      	b.n	80015e0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80015a8:	4b09      	ldr	r3, [pc, #36]	; (80015d0 <HAL_RCC_OscConfig+0x248>)
 80015aa:	2200      	movs	r2, #0
 80015ac:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015ae:	f7ff fb7f 	bl	8000cb0 <HAL_GetTick>
 80015b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015b4:	e00e      	b.n	80015d4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80015b6:	f7ff fb7b 	bl	8000cb0 <HAL_GetTick>
 80015ba:	4602      	mov	r2, r0
 80015bc:	693b      	ldr	r3, [r7, #16]
 80015be:	1ad3      	subs	r3, r2, r3
 80015c0:	2b02      	cmp	r3, #2
 80015c2:	d907      	bls.n	80015d4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80015c4:	2303      	movs	r3, #3
 80015c6:	e150      	b.n	800186a <HAL_RCC_OscConfig+0x4e2>
 80015c8:	40023800 	.word	0x40023800
 80015cc:	42470000 	.word	0x42470000
 80015d0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015d4:	4b88      	ldr	r3, [pc, #544]	; (80017f8 <HAL_RCC_OscConfig+0x470>)
 80015d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80015d8:	f003 0302 	and.w	r3, r3, #2
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d1ea      	bne.n	80015b6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	f003 0304 	and.w	r3, r3, #4
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	f000 8097 	beq.w	800171c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80015ee:	2300      	movs	r3, #0
 80015f0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80015f2:	4b81      	ldr	r3, [pc, #516]	; (80017f8 <HAL_RCC_OscConfig+0x470>)
 80015f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d10f      	bne.n	800161e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80015fe:	2300      	movs	r3, #0
 8001600:	60bb      	str	r3, [r7, #8]
 8001602:	4b7d      	ldr	r3, [pc, #500]	; (80017f8 <HAL_RCC_OscConfig+0x470>)
 8001604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001606:	4a7c      	ldr	r2, [pc, #496]	; (80017f8 <HAL_RCC_OscConfig+0x470>)
 8001608:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800160c:	6413      	str	r3, [r2, #64]	; 0x40
 800160e:	4b7a      	ldr	r3, [pc, #488]	; (80017f8 <HAL_RCC_OscConfig+0x470>)
 8001610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001612:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001616:	60bb      	str	r3, [r7, #8]
 8001618:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800161a:	2301      	movs	r3, #1
 800161c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800161e:	4b77      	ldr	r3, [pc, #476]	; (80017fc <HAL_RCC_OscConfig+0x474>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001626:	2b00      	cmp	r3, #0
 8001628:	d118      	bne.n	800165c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800162a:	4b74      	ldr	r3, [pc, #464]	; (80017fc <HAL_RCC_OscConfig+0x474>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	4a73      	ldr	r2, [pc, #460]	; (80017fc <HAL_RCC_OscConfig+0x474>)
 8001630:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001634:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001636:	f7ff fb3b 	bl	8000cb0 <HAL_GetTick>
 800163a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800163c:	e008      	b.n	8001650 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800163e:	f7ff fb37 	bl	8000cb0 <HAL_GetTick>
 8001642:	4602      	mov	r2, r0
 8001644:	693b      	ldr	r3, [r7, #16]
 8001646:	1ad3      	subs	r3, r2, r3
 8001648:	2b02      	cmp	r3, #2
 800164a:	d901      	bls.n	8001650 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800164c:	2303      	movs	r3, #3
 800164e:	e10c      	b.n	800186a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001650:	4b6a      	ldr	r3, [pc, #424]	; (80017fc <HAL_RCC_OscConfig+0x474>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001658:	2b00      	cmp	r3, #0
 800165a:	d0f0      	beq.n	800163e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	689b      	ldr	r3, [r3, #8]
 8001660:	2b01      	cmp	r3, #1
 8001662:	d106      	bne.n	8001672 <HAL_RCC_OscConfig+0x2ea>
 8001664:	4b64      	ldr	r3, [pc, #400]	; (80017f8 <HAL_RCC_OscConfig+0x470>)
 8001666:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001668:	4a63      	ldr	r2, [pc, #396]	; (80017f8 <HAL_RCC_OscConfig+0x470>)
 800166a:	f043 0301 	orr.w	r3, r3, #1
 800166e:	6713      	str	r3, [r2, #112]	; 0x70
 8001670:	e01c      	b.n	80016ac <HAL_RCC_OscConfig+0x324>
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	689b      	ldr	r3, [r3, #8]
 8001676:	2b05      	cmp	r3, #5
 8001678:	d10c      	bne.n	8001694 <HAL_RCC_OscConfig+0x30c>
 800167a:	4b5f      	ldr	r3, [pc, #380]	; (80017f8 <HAL_RCC_OscConfig+0x470>)
 800167c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800167e:	4a5e      	ldr	r2, [pc, #376]	; (80017f8 <HAL_RCC_OscConfig+0x470>)
 8001680:	f043 0304 	orr.w	r3, r3, #4
 8001684:	6713      	str	r3, [r2, #112]	; 0x70
 8001686:	4b5c      	ldr	r3, [pc, #368]	; (80017f8 <HAL_RCC_OscConfig+0x470>)
 8001688:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800168a:	4a5b      	ldr	r2, [pc, #364]	; (80017f8 <HAL_RCC_OscConfig+0x470>)
 800168c:	f043 0301 	orr.w	r3, r3, #1
 8001690:	6713      	str	r3, [r2, #112]	; 0x70
 8001692:	e00b      	b.n	80016ac <HAL_RCC_OscConfig+0x324>
 8001694:	4b58      	ldr	r3, [pc, #352]	; (80017f8 <HAL_RCC_OscConfig+0x470>)
 8001696:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001698:	4a57      	ldr	r2, [pc, #348]	; (80017f8 <HAL_RCC_OscConfig+0x470>)
 800169a:	f023 0301 	bic.w	r3, r3, #1
 800169e:	6713      	str	r3, [r2, #112]	; 0x70
 80016a0:	4b55      	ldr	r3, [pc, #340]	; (80017f8 <HAL_RCC_OscConfig+0x470>)
 80016a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016a4:	4a54      	ldr	r2, [pc, #336]	; (80017f8 <HAL_RCC_OscConfig+0x470>)
 80016a6:	f023 0304 	bic.w	r3, r3, #4
 80016aa:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	689b      	ldr	r3, [r3, #8]
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d015      	beq.n	80016e0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016b4:	f7ff fafc 	bl	8000cb0 <HAL_GetTick>
 80016b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016ba:	e00a      	b.n	80016d2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80016bc:	f7ff faf8 	bl	8000cb0 <HAL_GetTick>
 80016c0:	4602      	mov	r2, r0
 80016c2:	693b      	ldr	r3, [r7, #16]
 80016c4:	1ad3      	subs	r3, r2, r3
 80016c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80016ca:	4293      	cmp	r3, r2
 80016cc:	d901      	bls.n	80016d2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80016ce:	2303      	movs	r3, #3
 80016d0:	e0cb      	b.n	800186a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016d2:	4b49      	ldr	r3, [pc, #292]	; (80017f8 <HAL_RCC_OscConfig+0x470>)
 80016d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016d6:	f003 0302 	and.w	r3, r3, #2
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d0ee      	beq.n	80016bc <HAL_RCC_OscConfig+0x334>
 80016de:	e014      	b.n	800170a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016e0:	f7ff fae6 	bl	8000cb0 <HAL_GetTick>
 80016e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016e6:	e00a      	b.n	80016fe <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80016e8:	f7ff fae2 	bl	8000cb0 <HAL_GetTick>
 80016ec:	4602      	mov	r2, r0
 80016ee:	693b      	ldr	r3, [r7, #16]
 80016f0:	1ad3      	subs	r3, r2, r3
 80016f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80016f6:	4293      	cmp	r3, r2
 80016f8:	d901      	bls.n	80016fe <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80016fa:	2303      	movs	r3, #3
 80016fc:	e0b5      	b.n	800186a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016fe:	4b3e      	ldr	r3, [pc, #248]	; (80017f8 <HAL_RCC_OscConfig+0x470>)
 8001700:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001702:	f003 0302 	and.w	r3, r3, #2
 8001706:	2b00      	cmp	r3, #0
 8001708:	d1ee      	bne.n	80016e8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800170a:	7dfb      	ldrb	r3, [r7, #23]
 800170c:	2b01      	cmp	r3, #1
 800170e:	d105      	bne.n	800171c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001710:	4b39      	ldr	r3, [pc, #228]	; (80017f8 <HAL_RCC_OscConfig+0x470>)
 8001712:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001714:	4a38      	ldr	r2, [pc, #224]	; (80017f8 <HAL_RCC_OscConfig+0x470>)
 8001716:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800171a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	699b      	ldr	r3, [r3, #24]
 8001720:	2b00      	cmp	r3, #0
 8001722:	f000 80a1 	beq.w	8001868 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001726:	4b34      	ldr	r3, [pc, #208]	; (80017f8 <HAL_RCC_OscConfig+0x470>)
 8001728:	689b      	ldr	r3, [r3, #8]
 800172a:	f003 030c 	and.w	r3, r3, #12
 800172e:	2b08      	cmp	r3, #8
 8001730:	d05c      	beq.n	80017ec <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	699b      	ldr	r3, [r3, #24]
 8001736:	2b02      	cmp	r3, #2
 8001738:	d141      	bne.n	80017be <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800173a:	4b31      	ldr	r3, [pc, #196]	; (8001800 <HAL_RCC_OscConfig+0x478>)
 800173c:	2200      	movs	r2, #0
 800173e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001740:	f7ff fab6 	bl	8000cb0 <HAL_GetTick>
 8001744:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001746:	e008      	b.n	800175a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001748:	f7ff fab2 	bl	8000cb0 <HAL_GetTick>
 800174c:	4602      	mov	r2, r0
 800174e:	693b      	ldr	r3, [r7, #16]
 8001750:	1ad3      	subs	r3, r2, r3
 8001752:	2b02      	cmp	r3, #2
 8001754:	d901      	bls.n	800175a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001756:	2303      	movs	r3, #3
 8001758:	e087      	b.n	800186a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800175a:	4b27      	ldr	r3, [pc, #156]	; (80017f8 <HAL_RCC_OscConfig+0x470>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001762:	2b00      	cmp	r3, #0
 8001764:	d1f0      	bne.n	8001748 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	69da      	ldr	r2, [r3, #28]
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	6a1b      	ldr	r3, [r3, #32]
 800176e:	431a      	orrs	r2, r3
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001774:	019b      	lsls	r3, r3, #6
 8001776:	431a      	orrs	r2, r3
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800177c:	085b      	lsrs	r3, r3, #1
 800177e:	3b01      	subs	r3, #1
 8001780:	041b      	lsls	r3, r3, #16
 8001782:	431a      	orrs	r2, r3
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001788:	061b      	lsls	r3, r3, #24
 800178a:	491b      	ldr	r1, [pc, #108]	; (80017f8 <HAL_RCC_OscConfig+0x470>)
 800178c:	4313      	orrs	r3, r2
 800178e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001790:	4b1b      	ldr	r3, [pc, #108]	; (8001800 <HAL_RCC_OscConfig+0x478>)
 8001792:	2201      	movs	r2, #1
 8001794:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001796:	f7ff fa8b 	bl	8000cb0 <HAL_GetTick>
 800179a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800179c:	e008      	b.n	80017b0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800179e:	f7ff fa87 	bl	8000cb0 <HAL_GetTick>
 80017a2:	4602      	mov	r2, r0
 80017a4:	693b      	ldr	r3, [r7, #16]
 80017a6:	1ad3      	subs	r3, r2, r3
 80017a8:	2b02      	cmp	r3, #2
 80017aa:	d901      	bls.n	80017b0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80017ac:	2303      	movs	r3, #3
 80017ae:	e05c      	b.n	800186a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017b0:	4b11      	ldr	r3, [pc, #68]	; (80017f8 <HAL_RCC_OscConfig+0x470>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d0f0      	beq.n	800179e <HAL_RCC_OscConfig+0x416>
 80017bc:	e054      	b.n	8001868 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017be:	4b10      	ldr	r3, [pc, #64]	; (8001800 <HAL_RCC_OscConfig+0x478>)
 80017c0:	2200      	movs	r2, #0
 80017c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017c4:	f7ff fa74 	bl	8000cb0 <HAL_GetTick>
 80017c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017ca:	e008      	b.n	80017de <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80017cc:	f7ff fa70 	bl	8000cb0 <HAL_GetTick>
 80017d0:	4602      	mov	r2, r0
 80017d2:	693b      	ldr	r3, [r7, #16]
 80017d4:	1ad3      	subs	r3, r2, r3
 80017d6:	2b02      	cmp	r3, #2
 80017d8:	d901      	bls.n	80017de <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80017da:	2303      	movs	r3, #3
 80017dc:	e045      	b.n	800186a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017de:	4b06      	ldr	r3, [pc, #24]	; (80017f8 <HAL_RCC_OscConfig+0x470>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d1f0      	bne.n	80017cc <HAL_RCC_OscConfig+0x444>
 80017ea:	e03d      	b.n	8001868 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	699b      	ldr	r3, [r3, #24]
 80017f0:	2b01      	cmp	r3, #1
 80017f2:	d107      	bne.n	8001804 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80017f4:	2301      	movs	r3, #1
 80017f6:	e038      	b.n	800186a <HAL_RCC_OscConfig+0x4e2>
 80017f8:	40023800 	.word	0x40023800
 80017fc:	40007000 	.word	0x40007000
 8001800:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001804:	4b1b      	ldr	r3, [pc, #108]	; (8001874 <HAL_RCC_OscConfig+0x4ec>)
 8001806:	685b      	ldr	r3, [r3, #4]
 8001808:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	699b      	ldr	r3, [r3, #24]
 800180e:	2b01      	cmp	r3, #1
 8001810:	d028      	beq.n	8001864 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800181c:	429a      	cmp	r2, r3
 800181e:	d121      	bne.n	8001864 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800182a:	429a      	cmp	r2, r3
 800182c:	d11a      	bne.n	8001864 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800182e:	68fa      	ldr	r2, [r7, #12]
 8001830:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001834:	4013      	ands	r3, r2
 8001836:	687a      	ldr	r2, [r7, #4]
 8001838:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800183a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800183c:	4293      	cmp	r3, r2
 800183e:	d111      	bne.n	8001864 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800184a:	085b      	lsrs	r3, r3, #1
 800184c:	3b01      	subs	r3, #1
 800184e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001850:	429a      	cmp	r2, r3
 8001852:	d107      	bne.n	8001864 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800185e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001860:	429a      	cmp	r2, r3
 8001862:	d001      	beq.n	8001868 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001864:	2301      	movs	r3, #1
 8001866:	e000      	b.n	800186a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001868:	2300      	movs	r3, #0
}
 800186a:	4618      	mov	r0, r3
 800186c:	3718      	adds	r7, #24
 800186e:	46bd      	mov	sp, r7
 8001870:	bd80      	pop	{r7, pc}
 8001872:	bf00      	nop
 8001874:	40023800 	.word	0x40023800

08001878 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b084      	sub	sp, #16
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
 8001880:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	2b00      	cmp	r3, #0
 8001886:	d101      	bne.n	800188c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001888:	2301      	movs	r3, #1
 800188a:	e0cc      	b.n	8001a26 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800188c:	4b68      	ldr	r3, [pc, #416]	; (8001a30 <HAL_RCC_ClockConfig+0x1b8>)
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	f003 030f 	and.w	r3, r3, #15
 8001894:	683a      	ldr	r2, [r7, #0]
 8001896:	429a      	cmp	r2, r3
 8001898:	d90c      	bls.n	80018b4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800189a:	4b65      	ldr	r3, [pc, #404]	; (8001a30 <HAL_RCC_ClockConfig+0x1b8>)
 800189c:	683a      	ldr	r2, [r7, #0]
 800189e:	b2d2      	uxtb	r2, r2
 80018a0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80018a2:	4b63      	ldr	r3, [pc, #396]	; (8001a30 <HAL_RCC_ClockConfig+0x1b8>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	f003 030f 	and.w	r3, r3, #15
 80018aa:	683a      	ldr	r2, [r7, #0]
 80018ac:	429a      	cmp	r2, r3
 80018ae:	d001      	beq.n	80018b4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80018b0:	2301      	movs	r3, #1
 80018b2:	e0b8      	b.n	8001a26 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	f003 0302 	and.w	r3, r3, #2
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d020      	beq.n	8001902 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	f003 0304 	and.w	r3, r3, #4
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d005      	beq.n	80018d8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80018cc:	4b59      	ldr	r3, [pc, #356]	; (8001a34 <HAL_RCC_ClockConfig+0x1bc>)
 80018ce:	689b      	ldr	r3, [r3, #8]
 80018d0:	4a58      	ldr	r2, [pc, #352]	; (8001a34 <HAL_RCC_ClockConfig+0x1bc>)
 80018d2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80018d6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	f003 0308 	and.w	r3, r3, #8
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d005      	beq.n	80018f0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80018e4:	4b53      	ldr	r3, [pc, #332]	; (8001a34 <HAL_RCC_ClockConfig+0x1bc>)
 80018e6:	689b      	ldr	r3, [r3, #8]
 80018e8:	4a52      	ldr	r2, [pc, #328]	; (8001a34 <HAL_RCC_ClockConfig+0x1bc>)
 80018ea:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80018ee:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80018f0:	4b50      	ldr	r3, [pc, #320]	; (8001a34 <HAL_RCC_ClockConfig+0x1bc>)
 80018f2:	689b      	ldr	r3, [r3, #8]
 80018f4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	689b      	ldr	r3, [r3, #8]
 80018fc:	494d      	ldr	r1, [pc, #308]	; (8001a34 <HAL_RCC_ClockConfig+0x1bc>)
 80018fe:	4313      	orrs	r3, r2
 8001900:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f003 0301 	and.w	r3, r3, #1
 800190a:	2b00      	cmp	r3, #0
 800190c:	d044      	beq.n	8001998 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	685b      	ldr	r3, [r3, #4]
 8001912:	2b01      	cmp	r3, #1
 8001914:	d107      	bne.n	8001926 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001916:	4b47      	ldr	r3, [pc, #284]	; (8001a34 <HAL_RCC_ClockConfig+0x1bc>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800191e:	2b00      	cmp	r3, #0
 8001920:	d119      	bne.n	8001956 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001922:	2301      	movs	r3, #1
 8001924:	e07f      	b.n	8001a26 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	685b      	ldr	r3, [r3, #4]
 800192a:	2b02      	cmp	r3, #2
 800192c:	d003      	beq.n	8001936 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001932:	2b03      	cmp	r3, #3
 8001934:	d107      	bne.n	8001946 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001936:	4b3f      	ldr	r3, [pc, #252]	; (8001a34 <HAL_RCC_ClockConfig+0x1bc>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800193e:	2b00      	cmp	r3, #0
 8001940:	d109      	bne.n	8001956 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001942:	2301      	movs	r3, #1
 8001944:	e06f      	b.n	8001a26 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001946:	4b3b      	ldr	r3, [pc, #236]	; (8001a34 <HAL_RCC_ClockConfig+0x1bc>)
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f003 0302 	and.w	r3, r3, #2
 800194e:	2b00      	cmp	r3, #0
 8001950:	d101      	bne.n	8001956 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001952:	2301      	movs	r3, #1
 8001954:	e067      	b.n	8001a26 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001956:	4b37      	ldr	r3, [pc, #220]	; (8001a34 <HAL_RCC_ClockConfig+0x1bc>)
 8001958:	689b      	ldr	r3, [r3, #8]
 800195a:	f023 0203 	bic.w	r2, r3, #3
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	685b      	ldr	r3, [r3, #4]
 8001962:	4934      	ldr	r1, [pc, #208]	; (8001a34 <HAL_RCC_ClockConfig+0x1bc>)
 8001964:	4313      	orrs	r3, r2
 8001966:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001968:	f7ff f9a2 	bl	8000cb0 <HAL_GetTick>
 800196c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800196e:	e00a      	b.n	8001986 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001970:	f7ff f99e 	bl	8000cb0 <HAL_GetTick>
 8001974:	4602      	mov	r2, r0
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	1ad3      	subs	r3, r2, r3
 800197a:	f241 3288 	movw	r2, #5000	; 0x1388
 800197e:	4293      	cmp	r3, r2
 8001980:	d901      	bls.n	8001986 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001982:	2303      	movs	r3, #3
 8001984:	e04f      	b.n	8001a26 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001986:	4b2b      	ldr	r3, [pc, #172]	; (8001a34 <HAL_RCC_ClockConfig+0x1bc>)
 8001988:	689b      	ldr	r3, [r3, #8]
 800198a:	f003 020c 	and.w	r2, r3, #12
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	685b      	ldr	r3, [r3, #4]
 8001992:	009b      	lsls	r3, r3, #2
 8001994:	429a      	cmp	r2, r3
 8001996:	d1eb      	bne.n	8001970 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001998:	4b25      	ldr	r3, [pc, #148]	; (8001a30 <HAL_RCC_ClockConfig+0x1b8>)
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	f003 030f 	and.w	r3, r3, #15
 80019a0:	683a      	ldr	r2, [r7, #0]
 80019a2:	429a      	cmp	r2, r3
 80019a4:	d20c      	bcs.n	80019c0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019a6:	4b22      	ldr	r3, [pc, #136]	; (8001a30 <HAL_RCC_ClockConfig+0x1b8>)
 80019a8:	683a      	ldr	r2, [r7, #0]
 80019aa:	b2d2      	uxtb	r2, r2
 80019ac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80019ae:	4b20      	ldr	r3, [pc, #128]	; (8001a30 <HAL_RCC_ClockConfig+0x1b8>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f003 030f 	and.w	r3, r3, #15
 80019b6:	683a      	ldr	r2, [r7, #0]
 80019b8:	429a      	cmp	r2, r3
 80019ba:	d001      	beq.n	80019c0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80019bc:	2301      	movs	r3, #1
 80019be:	e032      	b.n	8001a26 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	f003 0304 	and.w	r3, r3, #4
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d008      	beq.n	80019de <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80019cc:	4b19      	ldr	r3, [pc, #100]	; (8001a34 <HAL_RCC_ClockConfig+0x1bc>)
 80019ce:	689b      	ldr	r3, [r3, #8]
 80019d0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	68db      	ldr	r3, [r3, #12]
 80019d8:	4916      	ldr	r1, [pc, #88]	; (8001a34 <HAL_RCC_ClockConfig+0x1bc>)
 80019da:	4313      	orrs	r3, r2
 80019dc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f003 0308 	and.w	r3, r3, #8
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d009      	beq.n	80019fe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80019ea:	4b12      	ldr	r3, [pc, #72]	; (8001a34 <HAL_RCC_ClockConfig+0x1bc>)
 80019ec:	689b      	ldr	r3, [r3, #8]
 80019ee:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	691b      	ldr	r3, [r3, #16]
 80019f6:	00db      	lsls	r3, r3, #3
 80019f8:	490e      	ldr	r1, [pc, #56]	; (8001a34 <HAL_RCC_ClockConfig+0x1bc>)
 80019fa:	4313      	orrs	r3, r2
 80019fc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80019fe:	f000 f821 	bl	8001a44 <HAL_RCC_GetSysClockFreq>
 8001a02:	4602      	mov	r2, r0
 8001a04:	4b0b      	ldr	r3, [pc, #44]	; (8001a34 <HAL_RCC_ClockConfig+0x1bc>)
 8001a06:	689b      	ldr	r3, [r3, #8]
 8001a08:	091b      	lsrs	r3, r3, #4
 8001a0a:	f003 030f 	and.w	r3, r3, #15
 8001a0e:	490a      	ldr	r1, [pc, #40]	; (8001a38 <HAL_RCC_ClockConfig+0x1c0>)
 8001a10:	5ccb      	ldrb	r3, [r1, r3]
 8001a12:	fa22 f303 	lsr.w	r3, r2, r3
 8001a16:	4a09      	ldr	r2, [pc, #36]	; (8001a3c <HAL_RCC_ClockConfig+0x1c4>)
 8001a18:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001a1a:	4b09      	ldr	r3, [pc, #36]	; (8001a40 <HAL_RCC_ClockConfig+0x1c8>)
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	4618      	mov	r0, r3
 8001a20:	f7ff f902 	bl	8000c28 <HAL_InitTick>

  return HAL_OK;
 8001a24:	2300      	movs	r3, #0
}
 8001a26:	4618      	mov	r0, r3
 8001a28:	3710      	adds	r7, #16
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bd80      	pop	{r7, pc}
 8001a2e:	bf00      	nop
 8001a30:	40023c00 	.word	0x40023c00
 8001a34:	40023800 	.word	0x40023800
 8001a38:	08002eb4 	.word	0x08002eb4
 8001a3c:	20000010 	.word	0x20000010
 8001a40:	20000014 	.word	0x20000014

08001a44 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a44:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001a48:	b094      	sub	sp, #80	; 0x50
 8001a4a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	647b      	str	r3, [r7, #68]	; 0x44
 8001a50:	2300      	movs	r3, #0
 8001a52:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001a54:	2300      	movs	r3, #0
 8001a56:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001a58:	2300      	movs	r3, #0
 8001a5a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001a5c:	4b79      	ldr	r3, [pc, #484]	; (8001c44 <HAL_RCC_GetSysClockFreq+0x200>)
 8001a5e:	689b      	ldr	r3, [r3, #8]
 8001a60:	f003 030c 	and.w	r3, r3, #12
 8001a64:	2b08      	cmp	r3, #8
 8001a66:	d00d      	beq.n	8001a84 <HAL_RCC_GetSysClockFreq+0x40>
 8001a68:	2b08      	cmp	r3, #8
 8001a6a:	f200 80e1 	bhi.w	8001c30 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d002      	beq.n	8001a78 <HAL_RCC_GetSysClockFreq+0x34>
 8001a72:	2b04      	cmp	r3, #4
 8001a74:	d003      	beq.n	8001a7e <HAL_RCC_GetSysClockFreq+0x3a>
 8001a76:	e0db      	b.n	8001c30 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001a78:	4b73      	ldr	r3, [pc, #460]	; (8001c48 <HAL_RCC_GetSysClockFreq+0x204>)
 8001a7a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001a7c:	e0db      	b.n	8001c36 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001a7e:	4b73      	ldr	r3, [pc, #460]	; (8001c4c <HAL_RCC_GetSysClockFreq+0x208>)
 8001a80:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001a82:	e0d8      	b.n	8001c36 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001a84:	4b6f      	ldr	r3, [pc, #444]	; (8001c44 <HAL_RCC_GetSysClockFreq+0x200>)
 8001a86:	685b      	ldr	r3, [r3, #4]
 8001a88:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001a8c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001a8e:	4b6d      	ldr	r3, [pc, #436]	; (8001c44 <HAL_RCC_GetSysClockFreq+0x200>)
 8001a90:	685b      	ldr	r3, [r3, #4]
 8001a92:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d063      	beq.n	8001b62 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a9a:	4b6a      	ldr	r3, [pc, #424]	; (8001c44 <HAL_RCC_GetSysClockFreq+0x200>)
 8001a9c:	685b      	ldr	r3, [r3, #4]
 8001a9e:	099b      	lsrs	r3, r3, #6
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	63bb      	str	r3, [r7, #56]	; 0x38
 8001aa4:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001aa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001aa8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001aac:	633b      	str	r3, [r7, #48]	; 0x30
 8001aae:	2300      	movs	r3, #0
 8001ab0:	637b      	str	r3, [r7, #52]	; 0x34
 8001ab2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001ab6:	4622      	mov	r2, r4
 8001ab8:	462b      	mov	r3, r5
 8001aba:	f04f 0000 	mov.w	r0, #0
 8001abe:	f04f 0100 	mov.w	r1, #0
 8001ac2:	0159      	lsls	r1, r3, #5
 8001ac4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001ac8:	0150      	lsls	r0, r2, #5
 8001aca:	4602      	mov	r2, r0
 8001acc:	460b      	mov	r3, r1
 8001ace:	4621      	mov	r1, r4
 8001ad0:	1a51      	subs	r1, r2, r1
 8001ad2:	6139      	str	r1, [r7, #16]
 8001ad4:	4629      	mov	r1, r5
 8001ad6:	eb63 0301 	sbc.w	r3, r3, r1
 8001ada:	617b      	str	r3, [r7, #20]
 8001adc:	f04f 0200 	mov.w	r2, #0
 8001ae0:	f04f 0300 	mov.w	r3, #0
 8001ae4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001ae8:	4659      	mov	r1, fp
 8001aea:	018b      	lsls	r3, r1, #6
 8001aec:	4651      	mov	r1, sl
 8001aee:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001af2:	4651      	mov	r1, sl
 8001af4:	018a      	lsls	r2, r1, #6
 8001af6:	4651      	mov	r1, sl
 8001af8:	ebb2 0801 	subs.w	r8, r2, r1
 8001afc:	4659      	mov	r1, fp
 8001afe:	eb63 0901 	sbc.w	r9, r3, r1
 8001b02:	f04f 0200 	mov.w	r2, #0
 8001b06:	f04f 0300 	mov.w	r3, #0
 8001b0a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001b0e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001b12:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001b16:	4690      	mov	r8, r2
 8001b18:	4699      	mov	r9, r3
 8001b1a:	4623      	mov	r3, r4
 8001b1c:	eb18 0303 	adds.w	r3, r8, r3
 8001b20:	60bb      	str	r3, [r7, #8]
 8001b22:	462b      	mov	r3, r5
 8001b24:	eb49 0303 	adc.w	r3, r9, r3
 8001b28:	60fb      	str	r3, [r7, #12]
 8001b2a:	f04f 0200 	mov.w	r2, #0
 8001b2e:	f04f 0300 	mov.w	r3, #0
 8001b32:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001b36:	4629      	mov	r1, r5
 8001b38:	024b      	lsls	r3, r1, #9
 8001b3a:	4621      	mov	r1, r4
 8001b3c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001b40:	4621      	mov	r1, r4
 8001b42:	024a      	lsls	r2, r1, #9
 8001b44:	4610      	mov	r0, r2
 8001b46:	4619      	mov	r1, r3
 8001b48:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	62bb      	str	r3, [r7, #40]	; 0x28
 8001b4e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001b50:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001b54:	f7fe fb9c 	bl	8000290 <__aeabi_uldivmod>
 8001b58:	4602      	mov	r2, r0
 8001b5a:	460b      	mov	r3, r1
 8001b5c:	4613      	mov	r3, r2
 8001b5e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001b60:	e058      	b.n	8001c14 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b62:	4b38      	ldr	r3, [pc, #224]	; (8001c44 <HAL_RCC_GetSysClockFreq+0x200>)
 8001b64:	685b      	ldr	r3, [r3, #4]
 8001b66:	099b      	lsrs	r3, r3, #6
 8001b68:	2200      	movs	r2, #0
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	4611      	mov	r1, r2
 8001b6e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001b72:	623b      	str	r3, [r7, #32]
 8001b74:	2300      	movs	r3, #0
 8001b76:	627b      	str	r3, [r7, #36]	; 0x24
 8001b78:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001b7c:	4642      	mov	r2, r8
 8001b7e:	464b      	mov	r3, r9
 8001b80:	f04f 0000 	mov.w	r0, #0
 8001b84:	f04f 0100 	mov.w	r1, #0
 8001b88:	0159      	lsls	r1, r3, #5
 8001b8a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001b8e:	0150      	lsls	r0, r2, #5
 8001b90:	4602      	mov	r2, r0
 8001b92:	460b      	mov	r3, r1
 8001b94:	4641      	mov	r1, r8
 8001b96:	ebb2 0a01 	subs.w	sl, r2, r1
 8001b9a:	4649      	mov	r1, r9
 8001b9c:	eb63 0b01 	sbc.w	fp, r3, r1
 8001ba0:	f04f 0200 	mov.w	r2, #0
 8001ba4:	f04f 0300 	mov.w	r3, #0
 8001ba8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001bac:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001bb0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001bb4:	ebb2 040a 	subs.w	r4, r2, sl
 8001bb8:	eb63 050b 	sbc.w	r5, r3, fp
 8001bbc:	f04f 0200 	mov.w	r2, #0
 8001bc0:	f04f 0300 	mov.w	r3, #0
 8001bc4:	00eb      	lsls	r3, r5, #3
 8001bc6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001bca:	00e2      	lsls	r2, r4, #3
 8001bcc:	4614      	mov	r4, r2
 8001bce:	461d      	mov	r5, r3
 8001bd0:	4643      	mov	r3, r8
 8001bd2:	18e3      	adds	r3, r4, r3
 8001bd4:	603b      	str	r3, [r7, #0]
 8001bd6:	464b      	mov	r3, r9
 8001bd8:	eb45 0303 	adc.w	r3, r5, r3
 8001bdc:	607b      	str	r3, [r7, #4]
 8001bde:	f04f 0200 	mov.w	r2, #0
 8001be2:	f04f 0300 	mov.w	r3, #0
 8001be6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001bea:	4629      	mov	r1, r5
 8001bec:	028b      	lsls	r3, r1, #10
 8001bee:	4621      	mov	r1, r4
 8001bf0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001bf4:	4621      	mov	r1, r4
 8001bf6:	028a      	lsls	r2, r1, #10
 8001bf8:	4610      	mov	r0, r2
 8001bfa:	4619      	mov	r1, r3
 8001bfc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001bfe:	2200      	movs	r2, #0
 8001c00:	61bb      	str	r3, [r7, #24]
 8001c02:	61fa      	str	r2, [r7, #28]
 8001c04:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001c08:	f7fe fb42 	bl	8000290 <__aeabi_uldivmod>
 8001c0c:	4602      	mov	r2, r0
 8001c0e:	460b      	mov	r3, r1
 8001c10:	4613      	mov	r3, r2
 8001c12:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001c14:	4b0b      	ldr	r3, [pc, #44]	; (8001c44 <HAL_RCC_GetSysClockFreq+0x200>)
 8001c16:	685b      	ldr	r3, [r3, #4]
 8001c18:	0c1b      	lsrs	r3, r3, #16
 8001c1a:	f003 0303 	and.w	r3, r3, #3
 8001c1e:	3301      	adds	r3, #1
 8001c20:	005b      	lsls	r3, r3, #1
 8001c22:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001c24:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001c26:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001c28:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c2c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001c2e:	e002      	b.n	8001c36 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001c30:	4b05      	ldr	r3, [pc, #20]	; (8001c48 <HAL_RCC_GetSysClockFreq+0x204>)
 8001c32:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001c34:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001c36:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001c38:	4618      	mov	r0, r3
 8001c3a:	3750      	adds	r7, #80	; 0x50
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001c42:	bf00      	nop
 8001c44:	40023800 	.word	0x40023800
 8001c48:	00f42400 	.word	0x00f42400
 8001c4c:	007a1200 	.word	0x007a1200

08001c50 <main>:
/**
 * @brief  Main program
 * @param  None
 * @retval None
 */
int main(void) {
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b084      	sub	sp, #16
 8001c54:	af00      	add	r7, sp, #0
	 duration should be kept 1ms since PPP_TIMEOUT_VALUEs are defined and
	 handled in milliseconds basis.
	 - Set NVIC Group Priority to 4
	 - Low Level Initialization
	 */
	HAL_Init();
 8001c56:	f7fe ffcb 	bl	8000bf0 <HAL_Init>

	/* Configure the system clock to 180 MHz */
	SystemClock_Config();
 8001c5a:	f000 f82f 	bl	8001cbc <SystemClock_Config>
	/* Internal loop variables*/
	delay_t delayLED;

	/* Initialize BSP Led for LED ARRAY */

	BSP_LED_Init(LED_TOGGLE);
 8001c5e:	2001      	movs	r0, #1
 8001c60:	f7fe fdac 	bl	80007bc <BSP_LED_Init>

	delayInit(&delayLED, LED_PERIOD_1);
 8001c64:	1d3b      	adds	r3, r7, #4
 8001c66:	2164      	movs	r1, #100	; 0x64
 8001c68:	4618      	mov	r0, r3
 8001c6a:	f7fe fd1f 	bl	80006ac <delayInit>

	debounceFSM_init();
 8001c6e:	f7fe fc91 	bl	8000594 <debounceFSM_init>

	/* Infinite loop */
	while (1) {
		if (delayRead(&delayLED)) {	//Acciones al cumplir el periodo de interrupción
 8001c72:	1d3b      	adds	r3, r7, #4
 8001c74:	4618      	mov	r0, r3
 8001c76:	f7fe fd43 	bl	8000700 <delayRead>
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d002      	beq.n	8001c86 <main+0x36>
			BSP_LED_Toggle(LED_TOGGLE);
 8001c80:	2001      	movs	r0, #1
 8001c82:	f7fe fe05 	bl	8000890 <BSP_LED_Toggle>
		}

		debounceFSM_update();
 8001c86:	f7fe fc99 	bl	80005bc <debounceFSM_update>
		if (readKey()) {
 8001c8a:	f7fe fcfb 	bl	8000684 <readKey>
 8001c8e:	4603      	mov	r3, r0
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d0ee      	beq.n	8001c72 <main+0x22>
			if (delayLED.duration == LED_PERIOD_1) {
 8001c94:	68bb      	ldr	r3, [r7, #8]
 8001c96:	2b64      	cmp	r3, #100	; 0x64
 8001c98:	d106      	bne.n	8001ca8 <main+0x58>
				delayWrite(&delayLED, LED_PERIOD_2);
 8001c9a:	1d3b      	adds	r3, r7, #4
 8001c9c:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	f7fe fd65 	bl	8000770 <delayWrite>
 8001ca6:	e7e4      	b.n	8001c72 <main+0x22>
			}

			else if (delayLED.duration == LED_PERIOD_2) {
 8001ca8:	68bb      	ldr	r3, [r7, #8]
 8001caa:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001cae:	d1e0      	bne.n	8001c72 <main+0x22>
				delayWrite(&delayLED, LED_PERIOD_1);
 8001cb0:	1d3b      	adds	r3, r7, #4
 8001cb2:	2164      	movs	r1, #100	; 0x64
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	f7fe fd5b 	bl	8000770 <delayWrite>
		if (delayRead(&delayLED)) {	//Acciones al cumplir el periodo de interrupción
 8001cba:	e7da      	b.n	8001c72 <main+0x22>

08001cbc <SystemClock_Config>:
 *            Main regulator output voltage  = Scale1 mode
 *            Flash Latency(WS)              = 5
 * @param  None
 * @retval None
 */
static void SystemClock_Config(void) {
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b094      	sub	sp, #80	; 0x50
 8001cc0:	af00      	add	r7, sp, #0
	RCC_ClkInitTypeDef RCC_ClkInitStruct;
	RCC_OscInitTypeDef RCC_OscInitStruct;

	/* Enable Power Control clock */
	__HAL_RCC_PWR_CLK_ENABLE();
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	60bb      	str	r3, [r7, #8]
 8001cc6:	4b2c      	ldr	r3, [pc, #176]	; (8001d78 <SystemClock_Config+0xbc>)
 8001cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cca:	4a2b      	ldr	r2, [pc, #172]	; (8001d78 <SystemClock_Config+0xbc>)
 8001ccc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cd0:	6413      	str	r3, [r2, #64]	; 0x40
 8001cd2:	4b29      	ldr	r3, [pc, #164]	; (8001d78 <SystemClock_Config+0xbc>)
 8001cd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cda:	60bb      	str	r3, [r7, #8]
 8001cdc:	68bb      	ldr	r3, [r7, #8]

	/* The voltage scaling allows optimizing the power consumption when the device is
	 clocked below the maximum system frequency, to update the voltage scaling value
	 regarding system frequency refer to product datasheet.  */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001cde:	2300      	movs	r3, #0
 8001ce0:	607b      	str	r3, [r7, #4]
 8001ce2:	4b26      	ldr	r3, [pc, #152]	; (8001d7c <SystemClock_Config+0xc0>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	4a25      	ldr	r2, [pc, #148]	; (8001d7c <SystemClock_Config+0xc0>)
 8001ce8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001cec:	6013      	str	r3, [r2, #0]
 8001cee:	4b23      	ldr	r3, [pc, #140]	; (8001d7c <SystemClock_Config+0xc0>)
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001cf6:	607b      	str	r3, [r7, #4]
 8001cf8:	687b      	ldr	r3, [r7, #4]

	/* Enable HSE Oscillator and activate PLL with HSE as source */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001cfa:	2301      	movs	r3, #1
 8001cfc:	60fb      	str	r3, [r7, #12]
	RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001cfe:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001d02:	613b      	str	r3, [r7, #16]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001d04:	2302      	movs	r3, #2
 8001d06:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001d08:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001d0c:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLM = 8;
 8001d0e:	2308      	movs	r3, #8
 8001d10:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.PLL.PLLN = 360;
 8001d12:	f44f 73b4 	mov.w	r3, #360	; 0x168
 8001d16:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001d18:	2302      	movs	r3, #2
 8001d1a:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLQ = 7;
 8001d1c:	2307      	movs	r3, #7
 8001d1e:	63bb      	str	r3, [r7, #56]	; 0x38
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001d20:	f107 030c 	add.w	r3, r7, #12
 8001d24:	4618      	mov	r0, r3
 8001d26:	f7ff fb2f 	bl	8001388 <HAL_RCC_OscConfig>
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d001      	beq.n	8001d34 <SystemClock_Config+0x78>
		/* Initialization Error */
		Error_Handler();
 8001d30:	f000 f826 	bl	8001d80 <Error_Handler>
	}

	if (HAL_PWREx_EnableOverDrive() != HAL_OK) {
 8001d34:	f7ff fad8 	bl	80012e8 <HAL_PWREx_EnableOverDrive>
 8001d38:	4603      	mov	r3, r0
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d001      	beq.n	8001d42 <SystemClock_Config+0x86>
		/* Initialization Error */
		Error_Handler();
 8001d3e:	f000 f81f 	bl	8001d80 <Error_Handler>
	}

	/* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2
	 clocks dividers */
	RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK
 8001d42:	230f      	movs	r3, #15
 8001d44:	63fb      	str	r3, [r7, #60]	; 0x3c
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001d46:	2302      	movs	r3, #2
 8001d48:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001d4e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001d52:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001d54:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d58:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK) {
 8001d5a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001d5e:	2105      	movs	r1, #5
 8001d60:	4618      	mov	r0, r3
 8001d62:	f7ff fd89 	bl	8001878 <HAL_RCC_ClockConfig>
 8001d66:	4603      	mov	r3, r0
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d001      	beq.n	8001d70 <SystemClock_Config+0xb4>
		/* Initialization Error */
		Error_Handler();
 8001d6c:	f000 f808 	bl	8001d80 <Error_Handler>
	}
}
 8001d70:	bf00      	nop
 8001d72:	3750      	adds	r7, #80	; 0x50
 8001d74:	46bd      	mov	sp, r7
 8001d76:	bd80      	pop	{r7, pc}
 8001d78:	40023800 	.word	0x40023800
 8001d7c:	40007000 	.word	0x40007000

08001d80 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @param  None
 * @retval None
 */
static void Error_Handler(void) {
 8001d80:	b580      	push	{r7, lr}
 8001d82:	af00      	add	r7, sp, #0
	/* Turn LED2 on */
	BSP_LED_On(LED2);
 8001d84:	2001      	movs	r0, #1
 8001d86:	f7fe fd69 	bl	800085c <BSP_LED_On>
	while (1) {
 8001d8a:	e7fe      	b.n	8001d8a <Error_Handler+0xa>

08001d8c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001d8c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001dc4 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001d90:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001d92:	e003      	b.n	8001d9c <LoopCopyDataInit>

08001d94 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001d94:	4b0c      	ldr	r3, [pc, #48]	; (8001dc8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001d96:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001d98:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001d9a:	3104      	adds	r1, #4

08001d9c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001d9c:	480b      	ldr	r0, [pc, #44]	; (8001dcc <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001d9e:	4b0c      	ldr	r3, [pc, #48]	; (8001dd0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001da0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001da2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001da4:	d3f6      	bcc.n	8001d94 <CopyDataInit>
  ldr  r2, =_sbss
 8001da6:	4a0b      	ldr	r2, [pc, #44]	; (8001dd4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001da8:	e002      	b.n	8001db0 <LoopFillZerobss>

08001daa <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001daa:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001dac:	f842 3b04 	str.w	r3, [r2], #4

08001db0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001db0:	4b09      	ldr	r3, [pc, #36]	; (8001dd8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001db2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001db4:	d3f9      	bcc.n	8001daa <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001db6:	f7fe fdf1 	bl	800099c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001dba:	f000 f847 	bl	8001e4c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001dbe:	f7ff ff47 	bl	8001c50 <main>
  bx  lr    
 8001dc2:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001dc4:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8001dc8:	08002fa8 	.word	0x08002fa8
  ldr  r0, =_sdata
 8001dcc:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001dd0:	20000080 	.word	0x20000080
  ldr  r2, =_sbss
 8001dd4:	20000080 	.word	0x20000080
  ldr  r3, = _ebss
 8001dd8:	200000c4 	.word	0x200000c4

08001ddc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001ddc:	e7fe      	b.n	8001ddc <ADC_IRQHandler>
	...

08001de0 <__assert_func>:
 8001de0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8001de2:	4614      	mov	r4, r2
 8001de4:	461a      	mov	r2, r3
 8001de6:	4b09      	ldr	r3, [pc, #36]	; (8001e0c <__assert_func+0x2c>)
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	4605      	mov	r5, r0
 8001dec:	68d8      	ldr	r0, [r3, #12]
 8001dee:	b14c      	cbz	r4, 8001e04 <__assert_func+0x24>
 8001df0:	4b07      	ldr	r3, [pc, #28]	; (8001e10 <__assert_func+0x30>)
 8001df2:	9100      	str	r1, [sp, #0]
 8001df4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8001df8:	4906      	ldr	r1, [pc, #24]	; (8001e14 <__assert_func+0x34>)
 8001dfa:	462b      	mov	r3, r5
 8001dfc:	f000 f814 	bl	8001e28 <fiprintf>
 8001e00:	f000 fbfe 	bl	8002600 <abort>
 8001e04:	4b04      	ldr	r3, [pc, #16]	; (8001e18 <__assert_func+0x38>)
 8001e06:	461c      	mov	r4, r3
 8001e08:	e7f3      	b.n	8001df2 <__assert_func+0x12>
 8001e0a:	bf00      	nop
 8001e0c:	2000001c 	.word	0x2000001c
 8001e10:	08002ec4 	.word	0x08002ec4
 8001e14:	08002ed1 	.word	0x08002ed1
 8001e18:	08002eff 	.word	0x08002eff

08001e1c <__errno>:
 8001e1c:	4b01      	ldr	r3, [pc, #4]	; (8001e24 <__errno+0x8>)
 8001e1e:	6818      	ldr	r0, [r3, #0]
 8001e20:	4770      	bx	lr
 8001e22:	bf00      	nop
 8001e24:	2000001c 	.word	0x2000001c

08001e28 <fiprintf>:
 8001e28:	b40e      	push	{r1, r2, r3}
 8001e2a:	b503      	push	{r0, r1, lr}
 8001e2c:	4601      	mov	r1, r0
 8001e2e:	ab03      	add	r3, sp, #12
 8001e30:	4805      	ldr	r0, [pc, #20]	; (8001e48 <fiprintf+0x20>)
 8001e32:	f853 2b04 	ldr.w	r2, [r3], #4
 8001e36:	6800      	ldr	r0, [r0, #0]
 8001e38:	9301      	str	r3, [sp, #4]
 8001e3a:	f000 f85d 	bl	8001ef8 <_vfiprintf_r>
 8001e3e:	b002      	add	sp, #8
 8001e40:	f85d eb04 	ldr.w	lr, [sp], #4
 8001e44:	b003      	add	sp, #12
 8001e46:	4770      	bx	lr
 8001e48:	2000001c 	.word	0x2000001c

08001e4c <__libc_init_array>:
 8001e4c:	b570      	push	{r4, r5, r6, lr}
 8001e4e:	4d0d      	ldr	r5, [pc, #52]	; (8001e84 <__libc_init_array+0x38>)
 8001e50:	4c0d      	ldr	r4, [pc, #52]	; (8001e88 <__libc_init_array+0x3c>)
 8001e52:	1b64      	subs	r4, r4, r5
 8001e54:	10a4      	asrs	r4, r4, #2
 8001e56:	2600      	movs	r6, #0
 8001e58:	42a6      	cmp	r6, r4
 8001e5a:	d109      	bne.n	8001e70 <__libc_init_array+0x24>
 8001e5c:	4d0b      	ldr	r5, [pc, #44]	; (8001e8c <__libc_init_array+0x40>)
 8001e5e:	4c0c      	ldr	r4, [pc, #48]	; (8001e90 <__libc_init_array+0x44>)
 8001e60:	f000 ffe2 	bl	8002e28 <_init>
 8001e64:	1b64      	subs	r4, r4, r5
 8001e66:	10a4      	asrs	r4, r4, #2
 8001e68:	2600      	movs	r6, #0
 8001e6a:	42a6      	cmp	r6, r4
 8001e6c:	d105      	bne.n	8001e7a <__libc_init_array+0x2e>
 8001e6e:	bd70      	pop	{r4, r5, r6, pc}
 8001e70:	f855 3b04 	ldr.w	r3, [r5], #4
 8001e74:	4798      	blx	r3
 8001e76:	3601      	adds	r6, #1
 8001e78:	e7ee      	b.n	8001e58 <__libc_init_array+0xc>
 8001e7a:	f855 3b04 	ldr.w	r3, [r5], #4
 8001e7e:	4798      	blx	r3
 8001e80:	3601      	adds	r6, #1
 8001e82:	e7f2      	b.n	8001e6a <__libc_init_array+0x1e>
 8001e84:	08002fa0 	.word	0x08002fa0
 8001e88:	08002fa0 	.word	0x08002fa0
 8001e8c:	08002fa0 	.word	0x08002fa0
 8001e90:	08002fa4 	.word	0x08002fa4

08001e94 <memset>:
 8001e94:	4402      	add	r2, r0
 8001e96:	4603      	mov	r3, r0
 8001e98:	4293      	cmp	r3, r2
 8001e9a:	d100      	bne.n	8001e9e <memset+0xa>
 8001e9c:	4770      	bx	lr
 8001e9e:	f803 1b01 	strb.w	r1, [r3], #1
 8001ea2:	e7f9      	b.n	8001e98 <memset+0x4>

08001ea4 <__sfputc_r>:
 8001ea4:	6893      	ldr	r3, [r2, #8]
 8001ea6:	3b01      	subs	r3, #1
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	b410      	push	{r4}
 8001eac:	6093      	str	r3, [r2, #8]
 8001eae:	da08      	bge.n	8001ec2 <__sfputc_r+0x1e>
 8001eb0:	6994      	ldr	r4, [r2, #24]
 8001eb2:	42a3      	cmp	r3, r4
 8001eb4:	db01      	blt.n	8001eba <__sfputc_r+0x16>
 8001eb6:	290a      	cmp	r1, #10
 8001eb8:	d103      	bne.n	8001ec2 <__sfputc_r+0x1e>
 8001eba:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001ebe:	f000 badf 	b.w	8002480 <__swbuf_r>
 8001ec2:	6813      	ldr	r3, [r2, #0]
 8001ec4:	1c58      	adds	r0, r3, #1
 8001ec6:	6010      	str	r0, [r2, #0]
 8001ec8:	7019      	strb	r1, [r3, #0]
 8001eca:	4608      	mov	r0, r1
 8001ecc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001ed0:	4770      	bx	lr

08001ed2 <__sfputs_r>:
 8001ed2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001ed4:	4606      	mov	r6, r0
 8001ed6:	460f      	mov	r7, r1
 8001ed8:	4614      	mov	r4, r2
 8001eda:	18d5      	adds	r5, r2, r3
 8001edc:	42ac      	cmp	r4, r5
 8001ede:	d101      	bne.n	8001ee4 <__sfputs_r+0x12>
 8001ee0:	2000      	movs	r0, #0
 8001ee2:	e007      	b.n	8001ef4 <__sfputs_r+0x22>
 8001ee4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001ee8:	463a      	mov	r2, r7
 8001eea:	4630      	mov	r0, r6
 8001eec:	f7ff ffda 	bl	8001ea4 <__sfputc_r>
 8001ef0:	1c43      	adds	r3, r0, #1
 8001ef2:	d1f3      	bne.n	8001edc <__sfputs_r+0xa>
 8001ef4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08001ef8 <_vfiprintf_r>:
 8001ef8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001efc:	460d      	mov	r5, r1
 8001efe:	b09d      	sub	sp, #116	; 0x74
 8001f00:	4614      	mov	r4, r2
 8001f02:	4698      	mov	r8, r3
 8001f04:	4606      	mov	r6, r0
 8001f06:	b118      	cbz	r0, 8001f10 <_vfiprintf_r+0x18>
 8001f08:	6983      	ldr	r3, [r0, #24]
 8001f0a:	b90b      	cbnz	r3, 8001f10 <_vfiprintf_r+0x18>
 8001f0c:	f000 fc9a 	bl	8002844 <__sinit>
 8001f10:	4b89      	ldr	r3, [pc, #548]	; (8002138 <_vfiprintf_r+0x240>)
 8001f12:	429d      	cmp	r5, r3
 8001f14:	d11b      	bne.n	8001f4e <_vfiprintf_r+0x56>
 8001f16:	6875      	ldr	r5, [r6, #4]
 8001f18:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8001f1a:	07d9      	lsls	r1, r3, #31
 8001f1c:	d405      	bmi.n	8001f2a <_vfiprintf_r+0x32>
 8001f1e:	89ab      	ldrh	r3, [r5, #12]
 8001f20:	059a      	lsls	r2, r3, #22
 8001f22:	d402      	bmi.n	8001f2a <_vfiprintf_r+0x32>
 8001f24:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8001f26:	f000 fd2b 	bl	8002980 <__retarget_lock_acquire_recursive>
 8001f2a:	89ab      	ldrh	r3, [r5, #12]
 8001f2c:	071b      	lsls	r3, r3, #28
 8001f2e:	d501      	bpl.n	8001f34 <_vfiprintf_r+0x3c>
 8001f30:	692b      	ldr	r3, [r5, #16]
 8001f32:	b9eb      	cbnz	r3, 8001f70 <_vfiprintf_r+0x78>
 8001f34:	4629      	mov	r1, r5
 8001f36:	4630      	mov	r0, r6
 8001f38:	f000 faf4 	bl	8002524 <__swsetup_r>
 8001f3c:	b1c0      	cbz	r0, 8001f70 <_vfiprintf_r+0x78>
 8001f3e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8001f40:	07dc      	lsls	r4, r3, #31
 8001f42:	d50e      	bpl.n	8001f62 <_vfiprintf_r+0x6a>
 8001f44:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001f48:	b01d      	add	sp, #116	; 0x74
 8001f4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001f4e:	4b7b      	ldr	r3, [pc, #492]	; (800213c <_vfiprintf_r+0x244>)
 8001f50:	429d      	cmp	r5, r3
 8001f52:	d101      	bne.n	8001f58 <_vfiprintf_r+0x60>
 8001f54:	68b5      	ldr	r5, [r6, #8]
 8001f56:	e7df      	b.n	8001f18 <_vfiprintf_r+0x20>
 8001f58:	4b79      	ldr	r3, [pc, #484]	; (8002140 <_vfiprintf_r+0x248>)
 8001f5a:	429d      	cmp	r5, r3
 8001f5c:	bf08      	it	eq
 8001f5e:	68f5      	ldreq	r5, [r6, #12]
 8001f60:	e7da      	b.n	8001f18 <_vfiprintf_r+0x20>
 8001f62:	89ab      	ldrh	r3, [r5, #12]
 8001f64:	0598      	lsls	r0, r3, #22
 8001f66:	d4ed      	bmi.n	8001f44 <_vfiprintf_r+0x4c>
 8001f68:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8001f6a:	f000 fd0a 	bl	8002982 <__retarget_lock_release_recursive>
 8001f6e:	e7e9      	b.n	8001f44 <_vfiprintf_r+0x4c>
 8001f70:	2300      	movs	r3, #0
 8001f72:	9309      	str	r3, [sp, #36]	; 0x24
 8001f74:	2320      	movs	r3, #32
 8001f76:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8001f7a:	f8cd 800c 	str.w	r8, [sp, #12]
 8001f7e:	2330      	movs	r3, #48	; 0x30
 8001f80:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8002144 <_vfiprintf_r+0x24c>
 8001f84:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8001f88:	f04f 0901 	mov.w	r9, #1
 8001f8c:	4623      	mov	r3, r4
 8001f8e:	469a      	mov	sl, r3
 8001f90:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001f94:	b10a      	cbz	r2, 8001f9a <_vfiprintf_r+0xa2>
 8001f96:	2a25      	cmp	r2, #37	; 0x25
 8001f98:	d1f9      	bne.n	8001f8e <_vfiprintf_r+0x96>
 8001f9a:	ebba 0b04 	subs.w	fp, sl, r4
 8001f9e:	d00b      	beq.n	8001fb8 <_vfiprintf_r+0xc0>
 8001fa0:	465b      	mov	r3, fp
 8001fa2:	4622      	mov	r2, r4
 8001fa4:	4629      	mov	r1, r5
 8001fa6:	4630      	mov	r0, r6
 8001fa8:	f7ff ff93 	bl	8001ed2 <__sfputs_r>
 8001fac:	3001      	adds	r0, #1
 8001fae:	f000 80aa 	beq.w	8002106 <_vfiprintf_r+0x20e>
 8001fb2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8001fb4:	445a      	add	r2, fp
 8001fb6:	9209      	str	r2, [sp, #36]	; 0x24
 8001fb8:	f89a 3000 	ldrb.w	r3, [sl]
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	f000 80a2 	beq.w	8002106 <_vfiprintf_r+0x20e>
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001fc8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001fcc:	f10a 0a01 	add.w	sl, sl, #1
 8001fd0:	9304      	str	r3, [sp, #16]
 8001fd2:	9307      	str	r3, [sp, #28]
 8001fd4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8001fd8:	931a      	str	r3, [sp, #104]	; 0x68
 8001fda:	4654      	mov	r4, sl
 8001fdc:	2205      	movs	r2, #5
 8001fde:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001fe2:	4858      	ldr	r0, [pc, #352]	; (8002144 <_vfiprintf_r+0x24c>)
 8001fe4:	f7fe f904 	bl	80001f0 <memchr>
 8001fe8:	9a04      	ldr	r2, [sp, #16]
 8001fea:	b9d8      	cbnz	r0, 8002024 <_vfiprintf_r+0x12c>
 8001fec:	06d1      	lsls	r1, r2, #27
 8001fee:	bf44      	itt	mi
 8001ff0:	2320      	movmi	r3, #32
 8001ff2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001ff6:	0713      	lsls	r3, r2, #28
 8001ff8:	bf44      	itt	mi
 8001ffa:	232b      	movmi	r3, #43	; 0x2b
 8001ffc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002000:	f89a 3000 	ldrb.w	r3, [sl]
 8002004:	2b2a      	cmp	r3, #42	; 0x2a
 8002006:	d015      	beq.n	8002034 <_vfiprintf_r+0x13c>
 8002008:	9a07      	ldr	r2, [sp, #28]
 800200a:	4654      	mov	r4, sl
 800200c:	2000      	movs	r0, #0
 800200e:	f04f 0c0a 	mov.w	ip, #10
 8002012:	4621      	mov	r1, r4
 8002014:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002018:	3b30      	subs	r3, #48	; 0x30
 800201a:	2b09      	cmp	r3, #9
 800201c:	d94e      	bls.n	80020bc <_vfiprintf_r+0x1c4>
 800201e:	b1b0      	cbz	r0, 800204e <_vfiprintf_r+0x156>
 8002020:	9207      	str	r2, [sp, #28]
 8002022:	e014      	b.n	800204e <_vfiprintf_r+0x156>
 8002024:	eba0 0308 	sub.w	r3, r0, r8
 8002028:	fa09 f303 	lsl.w	r3, r9, r3
 800202c:	4313      	orrs	r3, r2
 800202e:	9304      	str	r3, [sp, #16]
 8002030:	46a2      	mov	sl, r4
 8002032:	e7d2      	b.n	8001fda <_vfiprintf_r+0xe2>
 8002034:	9b03      	ldr	r3, [sp, #12]
 8002036:	1d19      	adds	r1, r3, #4
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	9103      	str	r1, [sp, #12]
 800203c:	2b00      	cmp	r3, #0
 800203e:	bfbb      	ittet	lt
 8002040:	425b      	neglt	r3, r3
 8002042:	f042 0202 	orrlt.w	r2, r2, #2
 8002046:	9307      	strge	r3, [sp, #28]
 8002048:	9307      	strlt	r3, [sp, #28]
 800204a:	bfb8      	it	lt
 800204c:	9204      	strlt	r2, [sp, #16]
 800204e:	7823      	ldrb	r3, [r4, #0]
 8002050:	2b2e      	cmp	r3, #46	; 0x2e
 8002052:	d10c      	bne.n	800206e <_vfiprintf_r+0x176>
 8002054:	7863      	ldrb	r3, [r4, #1]
 8002056:	2b2a      	cmp	r3, #42	; 0x2a
 8002058:	d135      	bne.n	80020c6 <_vfiprintf_r+0x1ce>
 800205a:	9b03      	ldr	r3, [sp, #12]
 800205c:	1d1a      	adds	r2, r3, #4
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	9203      	str	r2, [sp, #12]
 8002062:	2b00      	cmp	r3, #0
 8002064:	bfb8      	it	lt
 8002066:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800206a:	3402      	adds	r4, #2
 800206c:	9305      	str	r3, [sp, #20]
 800206e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8002154 <_vfiprintf_r+0x25c>
 8002072:	7821      	ldrb	r1, [r4, #0]
 8002074:	2203      	movs	r2, #3
 8002076:	4650      	mov	r0, sl
 8002078:	f7fe f8ba 	bl	80001f0 <memchr>
 800207c:	b140      	cbz	r0, 8002090 <_vfiprintf_r+0x198>
 800207e:	2340      	movs	r3, #64	; 0x40
 8002080:	eba0 000a 	sub.w	r0, r0, sl
 8002084:	fa03 f000 	lsl.w	r0, r3, r0
 8002088:	9b04      	ldr	r3, [sp, #16]
 800208a:	4303      	orrs	r3, r0
 800208c:	3401      	adds	r4, #1
 800208e:	9304      	str	r3, [sp, #16]
 8002090:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002094:	482c      	ldr	r0, [pc, #176]	; (8002148 <_vfiprintf_r+0x250>)
 8002096:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800209a:	2206      	movs	r2, #6
 800209c:	f7fe f8a8 	bl	80001f0 <memchr>
 80020a0:	2800      	cmp	r0, #0
 80020a2:	d03f      	beq.n	8002124 <_vfiprintf_r+0x22c>
 80020a4:	4b29      	ldr	r3, [pc, #164]	; (800214c <_vfiprintf_r+0x254>)
 80020a6:	bb1b      	cbnz	r3, 80020f0 <_vfiprintf_r+0x1f8>
 80020a8:	9b03      	ldr	r3, [sp, #12]
 80020aa:	3307      	adds	r3, #7
 80020ac:	f023 0307 	bic.w	r3, r3, #7
 80020b0:	3308      	adds	r3, #8
 80020b2:	9303      	str	r3, [sp, #12]
 80020b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80020b6:	443b      	add	r3, r7
 80020b8:	9309      	str	r3, [sp, #36]	; 0x24
 80020ba:	e767      	b.n	8001f8c <_vfiprintf_r+0x94>
 80020bc:	fb0c 3202 	mla	r2, ip, r2, r3
 80020c0:	460c      	mov	r4, r1
 80020c2:	2001      	movs	r0, #1
 80020c4:	e7a5      	b.n	8002012 <_vfiprintf_r+0x11a>
 80020c6:	2300      	movs	r3, #0
 80020c8:	3401      	adds	r4, #1
 80020ca:	9305      	str	r3, [sp, #20]
 80020cc:	4619      	mov	r1, r3
 80020ce:	f04f 0c0a 	mov.w	ip, #10
 80020d2:	4620      	mov	r0, r4
 80020d4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80020d8:	3a30      	subs	r2, #48	; 0x30
 80020da:	2a09      	cmp	r2, #9
 80020dc:	d903      	bls.n	80020e6 <_vfiprintf_r+0x1ee>
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d0c5      	beq.n	800206e <_vfiprintf_r+0x176>
 80020e2:	9105      	str	r1, [sp, #20]
 80020e4:	e7c3      	b.n	800206e <_vfiprintf_r+0x176>
 80020e6:	fb0c 2101 	mla	r1, ip, r1, r2
 80020ea:	4604      	mov	r4, r0
 80020ec:	2301      	movs	r3, #1
 80020ee:	e7f0      	b.n	80020d2 <_vfiprintf_r+0x1da>
 80020f0:	ab03      	add	r3, sp, #12
 80020f2:	9300      	str	r3, [sp, #0]
 80020f4:	462a      	mov	r2, r5
 80020f6:	4b16      	ldr	r3, [pc, #88]	; (8002150 <_vfiprintf_r+0x258>)
 80020f8:	a904      	add	r1, sp, #16
 80020fa:	4630      	mov	r0, r6
 80020fc:	f3af 8000 	nop.w
 8002100:	4607      	mov	r7, r0
 8002102:	1c78      	adds	r0, r7, #1
 8002104:	d1d6      	bne.n	80020b4 <_vfiprintf_r+0x1bc>
 8002106:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002108:	07d9      	lsls	r1, r3, #31
 800210a:	d405      	bmi.n	8002118 <_vfiprintf_r+0x220>
 800210c:	89ab      	ldrh	r3, [r5, #12]
 800210e:	059a      	lsls	r2, r3, #22
 8002110:	d402      	bmi.n	8002118 <_vfiprintf_r+0x220>
 8002112:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002114:	f000 fc35 	bl	8002982 <__retarget_lock_release_recursive>
 8002118:	89ab      	ldrh	r3, [r5, #12]
 800211a:	065b      	lsls	r3, r3, #25
 800211c:	f53f af12 	bmi.w	8001f44 <_vfiprintf_r+0x4c>
 8002120:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002122:	e711      	b.n	8001f48 <_vfiprintf_r+0x50>
 8002124:	ab03      	add	r3, sp, #12
 8002126:	9300      	str	r3, [sp, #0]
 8002128:	462a      	mov	r2, r5
 800212a:	4b09      	ldr	r3, [pc, #36]	; (8002150 <_vfiprintf_r+0x258>)
 800212c:	a904      	add	r1, sp, #16
 800212e:	4630      	mov	r0, r6
 8002130:	f000 f880 	bl	8002234 <_printf_i>
 8002134:	e7e4      	b.n	8002100 <_vfiprintf_r+0x208>
 8002136:	bf00      	nop
 8002138:	08002f58 	.word	0x08002f58
 800213c:	08002f78 	.word	0x08002f78
 8002140:	08002f38 	.word	0x08002f38
 8002144:	08002f04 	.word	0x08002f04
 8002148:	08002f0e 	.word	0x08002f0e
 800214c:	00000000 	.word	0x00000000
 8002150:	08001ed3 	.word	0x08001ed3
 8002154:	08002f0a 	.word	0x08002f0a

08002158 <_printf_common>:
 8002158:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800215c:	4616      	mov	r6, r2
 800215e:	4699      	mov	r9, r3
 8002160:	688a      	ldr	r2, [r1, #8]
 8002162:	690b      	ldr	r3, [r1, #16]
 8002164:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002168:	4293      	cmp	r3, r2
 800216a:	bfb8      	it	lt
 800216c:	4613      	movlt	r3, r2
 800216e:	6033      	str	r3, [r6, #0]
 8002170:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002174:	4607      	mov	r7, r0
 8002176:	460c      	mov	r4, r1
 8002178:	b10a      	cbz	r2, 800217e <_printf_common+0x26>
 800217a:	3301      	adds	r3, #1
 800217c:	6033      	str	r3, [r6, #0]
 800217e:	6823      	ldr	r3, [r4, #0]
 8002180:	0699      	lsls	r1, r3, #26
 8002182:	bf42      	ittt	mi
 8002184:	6833      	ldrmi	r3, [r6, #0]
 8002186:	3302      	addmi	r3, #2
 8002188:	6033      	strmi	r3, [r6, #0]
 800218a:	6825      	ldr	r5, [r4, #0]
 800218c:	f015 0506 	ands.w	r5, r5, #6
 8002190:	d106      	bne.n	80021a0 <_printf_common+0x48>
 8002192:	f104 0a19 	add.w	sl, r4, #25
 8002196:	68e3      	ldr	r3, [r4, #12]
 8002198:	6832      	ldr	r2, [r6, #0]
 800219a:	1a9b      	subs	r3, r3, r2
 800219c:	42ab      	cmp	r3, r5
 800219e:	dc26      	bgt.n	80021ee <_printf_common+0x96>
 80021a0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80021a4:	1e13      	subs	r3, r2, #0
 80021a6:	6822      	ldr	r2, [r4, #0]
 80021a8:	bf18      	it	ne
 80021aa:	2301      	movne	r3, #1
 80021ac:	0692      	lsls	r2, r2, #26
 80021ae:	d42b      	bmi.n	8002208 <_printf_common+0xb0>
 80021b0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80021b4:	4649      	mov	r1, r9
 80021b6:	4638      	mov	r0, r7
 80021b8:	47c0      	blx	r8
 80021ba:	3001      	adds	r0, #1
 80021bc:	d01e      	beq.n	80021fc <_printf_common+0xa4>
 80021be:	6823      	ldr	r3, [r4, #0]
 80021c0:	68e5      	ldr	r5, [r4, #12]
 80021c2:	6832      	ldr	r2, [r6, #0]
 80021c4:	f003 0306 	and.w	r3, r3, #6
 80021c8:	2b04      	cmp	r3, #4
 80021ca:	bf08      	it	eq
 80021cc:	1aad      	subeq	r5, r5, r2
 80021ce:	68a3      	ldr	r3, [r4, #8]
 80021d0:	6922      	ldr	r2, [r4, #16]
 80021d2:	bf0c      	ite	eq
 80021d4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80021d8:	2500      	movne	r5, #0
 80021da:	4293      	cmp	r3, r2
 80021dc:	bfc4      	itt	gt
 80021de:	1a9b      	subgt	r3, r3, r2
 80021e0:	18ed      	addgt	r5, r5, r3
 80021e2:	2600      	movs	r6, #0
 80021e4:	341a      	adds	r4, #26
 80021e6:	42b5      	cmp	r5, r6
 80021e8:	d11a      	bne.n	8002220 <_printf_common+0xc8>
 80021ea:	2000      	movs	r0, #0
 80021ec:	e008      	b.n	8002200 <_printf_common+0xa8>
 80021ee:	2301      	movs	r3, #1
 80021f0:	4652      	mov	r2, sl
 80021f2:	4649      	mov	r1, r9
 80021f4:	4638      	mov	r0, r7
 80021f6:	47c0      	blx	r8
 80021f8:	3001      	adds	r0, #1
 80021fa:	d103      	bne.n	8002204 <_printf_common+0xac>
 80021fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002200:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002204:	3501      	adds	r5, #1
 8002206:	e7c6      	b.n	8002196 <_printf_common+0x3e>
 8002208:	18e1      	adds	r1, r4, r3
 800220a:	1c5a      	adds	r2, r3, #1
 800220c:	2030      	movs	r0, #48	; 0x30
 800220e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002212:	4422      	add	r2, r4
 8002214:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002218:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800221c:	3302      	adds	r3, #2
 800221e:	e7c7      	b.n	80021b0 <_printf_common+0x58>
 8002220:	2301      	movs	r3, #1
 8002222:	4622      	mov	r2, r4
 8002224:	4649      	mov	r1, r9
 8002226:	4638      	mov	r0, r7
 8002228:	47c0      	blx	r8
 800222a:	3001      	adds	r0, #1
 800222c:	d0e6      	beq.n	80021fc <_printf_common+0xa4>
 800222e:	3601      	adds	r6, #1
 8002230:	e7d9      	b.n	80021e6 <_printf_common+0x8e>
	...

08002234 <_printf_i>:
 8002234:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002238:	7e0f      	ldrb	r7, [r1, #24]
 800223a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800223c:	2f78      	cmp	r7, #120	; 0x78
 800223e:	4691      	mov	r9, r2
 8002240:	4680      	mov	r8, r0
 8002242:	460c      	mov	r4, r1
 8002244:	469a      	mov	sl, r3
 8002246:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800224a:	d807      	bhi.n	800225c <_printf_i+0x28>
 800224c:	2f62      	cmp	r7, #98	; 0x62
 800224e:	d80a      	bhi.n	8002266 <_printf_i+0x32>
 8002250:	2f00      	cmp	r7, #0
 8002252:	f000 80d8 	beq.w	8002406 <_printf_i+0x1d2>
 8002256:	2f58      	cmp	r7, #88	; 0x58
 8002258:	f000 80a3 	beq.w	80023a2 <_printf_i+0x16e>
 800225c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002260:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002264:	e03a      	b.n	80022dc <_printf_i+0xa8>
 8002266:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800226a:	2b15      	cmp	r3, #21
 800226c:	d8f6      	bhi.n	800225c <_printf_i+0x28>
 800226e:	a101      	add	r1, pc, #4	; (adr r1, 8002274 <_printf_i+0x40>)
 8002270:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002274:	080022cd 	.word	0x080022cd
 8002278:	080022e1 	.word	0x080022e1
 800227c:	0800225d 	.word	0x0800225d
 8002280:	0800225d 	.word	0x0800225d
 8002284:	0800225d 	.word	0x0800225d
 8002288:	0800225d 	.word	0x0800225d
 800228c:	080022e1 	.word	0x080022e1
 8002290:	0800225d 	.word	0x0800225d
 8002294:	0800225d 	.word	0x0800225d
 8002298:	0800225d 	.word	0x0800225d
 800229c:	0800225d 	.word	0x0800225d
 80022a0:	080023ed 	.word	0x080023ed
 80022a4:	08002311 	.word	0x08002311
 80022a8:	080023cf 	.word	0x080023cf
 80022ac:	0800225d 	.word	0x0800225d
 80022b0:	0800225d 	.word	0x0800225d
 80022b4:	0800240f 	.word	0x0800240f
 80022b8:	0800225d 	.word	0x0800225d
 80022bc:	08002311 	.word	0x08002311
 80022c0:	0800225d 	.word	0x0800225d
 80022c4:	0800225d 	.word	0x0800225d
 80022c8:	080023d7 	.word	0x080023d7
 80022cc:	682b      	ldr	r3, [r5, #0]
 80022ce:	1d1a      	adds	r2, r3, #4
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	602a      	str	r2, [r5, #0]
 80022d4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80022d8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80022dc:	2301      	movs	r3, #1
 80022de:	e0a3      	b.n	8002428 <_printf_i+0x1f4>
 80022e0:	6820      	ldr	r0, [r4, #0]
 80022e2:	6829      	ldr	r1, [r5, #0]
 80022e4:	0606      	lsls	r6, r0, #24
 80022e6:	f101 0304 	add.w	r3, r1, #4
 80022ea:	d50a      	bpl.n	8002302 <_printf_i+0xce>
 80022ec:	680e      	ldr	r6, [r1, #0]
 80022ee:	602b      	str	r3, [r5, #0]
 80022f0:	2e00      	cmp	r6, #0
 80022f2:	da03      	bge.n	80022fc <_printf_i+0xc8>
 80022f4:	232d      	movs	r3, #45	; 0x2d
 80022f6:	4276      	negs	r6, r6
 80022f8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80022fc:	485e      	ldr	r0, [pc, #376]	; (8002478 <_printf_i+0x244>)
 80022fe:	230a      	movs	r3, #10
 8002300:	e019      	b.n	8002336 <_printf_i+0x102>
 8002302:	680e      	ldr	r6, [r1, #0]
 8002304:	602b      	str	r3, [r5, #0]
 8002306:	f010 0f40 	tst.w	r0, #64	; 0x40
 800230a:	bf18      	it	ne
 800230c:	b236      	sxthne	r6, r6
 800230e:	e7ef      	b.n	80022f0 <_printf_i+0xbc>
 8002310:	682b      	ldr	r3, [r5, #0]
 8002312:	6820      	ldr	r0, [r4, #0]
 8002314:	1d19      	adds	r1, r3, #4
 8002316:	6029      	str	r1, [r5, #0]
 8002318:	0601      	lsls	r1, r0, #24
 800231a:	d501      	bpl.n	8002320 <_printf_i+0xec>
 800231c:	681e      	ldr	r6, [r3, #0]
 800231e:	e002      	b.n	8002326 <_printf_i+0xf2>
 8002320:	0646      	lsls	r6, r0, #25
 8002322:	d5fb      	bpl.n	800231c <_printf_i+0xe8>
 8002324:	881e      	ldrh	r6, [r3, #0]
 8002326:	4854      	ldr	r0, [pc, #336]	; (8002478 <_printf_i+0x244>)
 8002328:	2f6f      	cmp	r7, #111	; 0x6f
 800232a:	bf0c      	ite	eq
 800232c:	2308      	moveq	r3, #8
 800232e:	230a      	movne	r3, #10
 8002330:	2100      	movs	r1, #0
 8002332:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002336:	6865      	ldr	r5, [r4, #4]
 8002338:	60a5      	str	r5, [r4, #8]
 800233a:	2d00      	cmp	r5, #0
 800233c:	bfa2      	ittt	ge
 800233e:	6821      	ldrge	r1, [r4, #0]
 8002340:	f021 0104 	bicge.w	r1, r1, #4
 8002344:	6021      	strge	r1, [r4, #0]
 8002346:	b90e      	cbnz	r6, 800234c <_printf_i+0x118>
 8002348:	2d00      	cmp	r5, #0
 800234a:	d04d      	beq.n	80023e8 <_printf_i+0x1b4>
 800234c:	4615      	mov	r5, r2
 800234e:	fbb6 f1f3 	udiv	r1, r6, r3
 8002352:	fb03 6711 	mls	r7, r3, r1, r6
 8002356:	5dc7      	ldrb	r7, [r0, r7]
 8002358:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800235c:	4637      	mov	r7, r6
 800235e:	42bb      	cmp	r3, r7
 8002360:	460e      	mov	r6, r1
 8002362:	d9f4      	bls.n	800234e <_printf_i+0x11a>
 8002364:	2b08      	cmp	r3, #8
 8002366:	d10b      	bne.n	8002380 <_printf_i+0x14c>
 8002368:	6823      	ldr	r3, [r4, #0]
 800236a:	07de      	lsls	r6, r3, #31
 800236c:	d508      	bpl.n	8002380 <_printf_i+0x14c>
 800236e:	6923      	ldr	r3, [r4, #16]
 8002370:	6861      	ldr	r1, [r4, #4]
 8002372:	4299      	cmp	r1, r3
 8002374:	bfde      	ittt	le
 8002376:	2330      	movle	r3, #48	; 0x30
 8002378:	f805 3c01 	strble.w	r3, [r5, #-1]
 800237c:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8002380:	1b52      	subs	r2, r2, r5
 8002382:	6122      	str	r2, [r4, #16]
 8002384:	f8cd a000 	str.w	sl, [sp]
 8002388:	464b      	mov	r3, r9
 800238a:	aa03      	add	r2, sp, #12
 800238c:	4621      	mov	r1, r4
 800238e:	4640      	mov	r0, r8
 8002390:	f7ff fee2 	bl	8002158 <_printf_common>
 8002394:	3001      	adds	r0, #1
 8002396:	d14c      	bne.n	8002432 <_printf_i+0x1fe>
 8002398:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800239c:	b004      	add	sp, #16
 800239e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80023a2:	4835      	ldr	r0, [pc, #212]	; (8002478 <_printf_i+0x244>)
 80023a4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80023a8:	6829      	ldr	r1, [r5, #0]
 80023aa:	6823      	ldr	r3, [r4, #0]
 80023ac:	f851 6b04 	ldr.w	r6, [r1], #4
 80023b0:	6029      	str	r1, [r5, #0]
 80023b2:	061d      	lsls	r5, r3, #24
 80023b4:	d514      	bpl.n	80023e0 <_printf_i+0x1ac>
 80023b6:	07df      	lsls	r7, r3, #31
 80023b8:	bf44      	itt	mi
 80023ba:	f043 0320 	orrmi.w	r3, r3, #32
 80023be:	6023      	strmi	r3, [r4, #0]
 80023c0:	b91e      	cbnz	r6, 80023ca <_printf_i+0x196>
 80023c2:	6823      	ldr	r3, [r4, #0]
 80023c4:	f023 0320 	bic.w	r3, r3, #32
 80023c8:	6023      	str	r3, [r4, #0]
 80023ca:	2310      	movs	r3, #16
 80023cc:	e7b0      	b.n	8002330 <_printf_i+0xfc>
 80023ce:	6823      	ldr	r3, [r4, #0]
 80023d0:	f043 0320 	orr.w	r3, r3, #32
 80023d4:	6023      	str	r3, [r4, #0]
 80023d6:	2378      	movs	r3, #120	; 0x78
 80023d8:	4828      	ldr	r0, [pc, #160]	; (800247c <_printf_i+0x248>)
 80023da:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80023de:	e7e3      	b.n	80023a8 <_printf_i+0x174>
 80023e0:	0659      	lsls	r1, r3, #25
 80023e2:	bf48      	it	mi
 80023e4:	b2b6      	uxthmi	r6, r6
 80023e6:	e7e6      	b.n	80023b6 <_printf_i+0x182>
 80023e8:	4615      	mov	r5, r2
 80023ea:	e7bb      	b.n	8002364 <_printf_i+0x130>
 80023ec:	682b      	ldr	r3, [r5, #0]
 80023ee:	6826      	ldr	r6, [r4, #0]
 80023f0:	6961      	ldr	r1, [r4, #20]
 80023f2:	1d18      	adds	r0, r3, #4
 80023f4:	6028      	str	r0, [r5, #0]
 80023f6:	0635      	lsls	r5, r6, #24
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	d501      	bpl.n	8002400 <_printf_i+0x1cc>
 80023fc:	6019      	str	r1, [r3, #0]
 80023fe:	e002      	b.n	8002406 <_printf_i+0x1d2>
 8002400:	0670      	lsls	r0, r6, #25
 8002402:	d5fb      	bpl.n	80023fc <_printf_i+0x1c8>
 8002404:	8019      	strh	r1, [r3, #0]
 8002406:	2300      	movs	r3, #0
 8002408:	6123      	str	r3, [r4, #16]
 800240a:	4615      	mov	r5, r2
 800240c:	e7ba      	b.n	8002384 <_printf_i+0x150>
 800240e:	682b      	ldr	r3, [r5, #0]
 8002410:	1d1a      	adds	r2, r3, #4
 8002412:	602a      	str	r2, [r5, #0]
 8002414:	681d      	ldr	r5, [r3, #0]
 8002416:	6862      	ldr	r2, [r4, #4]
 8002418:	2100      	movs	r1, #0
 800241a:	4628      	mov	r0, r5
 800241c:	f7fd fee8 	bl	80001f0 <memchr>
 8002420:	b108      	cbz	r0, 8002426 <_printf_i+0x1f2>
 8002422:	1b40      	subs	r0, r0, r5
 8002424:	6060      	str	r0, [r4, #4]
 8002426:	6863      	ldr	r3, [r4, #4]
 8002428:	6123      	str	r3, [r4, #16]
 800242a:	2300      	movs	r3, #0
 800242c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002430:	e7a8      	b.n	8002384 <_printf_i+0x150>
 8002432:	6923      	ldr	r3, [r4, #16]
 8002434:	462a      	mov	r2, r5
 8002436:	4649      	mov	r1, r9
 8002438:	4640      	mov	r0, r8
 800243a:	47d0      	blx	sl
 800243c:	3001      	adds	r0, #1
 800243e:	d0ab      	beq.n	8002398 <_printf_i+0x164>
 8002440:	6823      	ldr	r3, [r4, #0]
 8002442:	079b      	lsls	r3, r3, #30
 8002444:	d413      	bmi.n	800246e <_printf_i+0x23a>
 8002446:	68e0      	ldr	r0, [r4, #12]
 8002448:	9b03      	ldr	r3, [sp, #12]
 800244a:	4298      	cmp	r0, r3
 800244c:	bfb8      	it	lt
 800244e:	4618      	movlt	r0, r3
 8002450:	e7a4      	b.n	800239c <_printf_i+0x168>
 8002452:	2301      	movs	r3, #1
 8002454:	4632      	mov	r2, r6
 8002456:	4649      	mov	r1, r9
 8002458:	4640      	mov	r0, r8
 800245a:	47d0      	blx	sl
 800245c:	3001      	adds	r0, #1
 800245e:	d09b      	beq.n	8002398 <_printf_i+0x164>
 8002460:	3501      	adds	r5, #1
 8002462:	68e3      	ldr	r3, [r4, #12]
 8002464:	9903      	ldr	r1, [sp, #12]
 8002466:	1a5b      	subs	r3, r3, r1
 8002468:	42ab      	cmp	r3, r5
 800246a:	dcf2      	bgt.n	8002452 <_printf_i+0x21e>
 800246c:	e7eb      	b.n	8002446 <_printf_i+0x212>
 800246e:	2500      	movs	r5, #0
 8002470:	f104 0619 	add.w	r6, r4, #25
 8002474:	e7f5      	b.n	8002462 <_printf_i+0x22e>
 8002476:	bf00      	nop
 8002478:	08002f15 	.word	0x08002f15
 800247c:	08002f26 	.word	0x08002f26

08002480 <__swbuf_r>:
 8002480:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002482:	460e      	mov	r6, r1
 8002484:	4614      	mov	r4, r2
 8002486:	4605      	mov	r5, r0
 8002488:	b118      	cbz	r0, 8002492 <__swbuf_r+0x12>
 800248a:	6983      	ldr	r3, [r0, #24]
 800248c:	b90b      	cbnz	r3, 8002492 <__swbuf_r+0x12>
 800248e:	f000 f9d9 	bl	8002844 <__sinit>
 8002492:	4b21      	ldr	r3, [pc, #132]	; (8002518 <__swbuf_r+0x98>)
 8002494:	429c      	cmp	r4, r3
 8002496:	d12b      	bne.n	80024f0 <__swbuf_r+0x70>
 8002498:	686c      	ldr	r4, [r5, #4]
 800249a:	69a3      	ldr	r3, [r4, #24]
 800249c:	60a3      	str	r3, [r4, #8]
 800249e:	89a3      	ldrh	r3, [r4, #12]
 80024a0:	071a      	lsls	r2, r3, #28
 80024a2:	d52f      	bpl.n	8002504 <__swbuf_r+0x84>
 80024a4:	6923      	ldr	r3, [r4, #16]
 80024a6:	b36b      	cbz	r3, 8002504 <__swbuf_r+0x84>
 80024a8:	6923      	ldr	r3, [r4, #16]
 80024aa:	6820      	ldr	r0, [r4, #0]
 80024ac:	1ac0      	subs	r0, r0, r3
 80024ae:	6963      	ldr	r3, [r4, #20]
 80024b0:	b2f6      	uxtb	r6, r6
 80024b2:	4283      	cmp	r3, r0
 80024b4:	4637      	mov	r7, r6
 80024b6:	dc04      	bgt.n	80024c2 <__swbuf_r+0x42>
 80024b8:	4621      	mov	r1, r4
 80024ba:	4628      	mov	r0, r5
 80024bc:	f000 f92e 	bl	800271c <_fflush_r>
 80024c0:	bb30      	cbnz	r0, 8002510 <__swbuf_r+0x90>
 80024c2:	68a3      	ldr	r3, [r4, #8]
 80024c4:	3b01      	subs	r3, #1
 80024c6:	60a3      	str	r3, [r4, #8]
 80024c8:	6823      	ldr	r3, [r4, #0]
 80024ca:	1c5a      	adds	r2, r3, #1
 80024cc:	6022      	str	r2, [r4, #0]
 80024ce:	701e      	strb	r6, [r3, #0]
 80024d0:	6963      	ldr	r3, [r4, #20]
 80024d2:	3001      	adds	r0, #1
 80024d4:	4283      	cmp	r3, r0
 80024d6:	d004      	beq.n	80024e2 <__swbuf_r+0x62>
 80024d8:	89a3      	ldrh	r3, [r4, #12]
 80024da:	07db      	lsls	r3, r3, #31
 80024dc:	d506      	bpl.n	80024ec <__swbuf_r+0x6c>
 80024de:	2e0a      	cmp	r6, #10
 80024e0:	d104      	bne.n	80024ec <__swbuf_r+0x6c>
 80024e2:	4621      	mov	r1, r4
 80024e4:	4628      	mov	r0, r5
 80024e6:	f000 f919 	bl	800271c <_fflush_r>
 80024ea:	b988      	cbnz	r0, 8002510 <__swbuf_r+0x90>
 80024ec:	4638      	mov	r0, r7
 80024ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80024f0:	4b0a      	ldr	r3, [pc, #40]	; (800251c <__swbuf_r+0x9c>)
 80024f2:	429c      	cmp	r4, r3
 80024f4:	d101      	bne.n	80024fa <__swbuf_r+0x7a>
 80024f6:	68ac      	ldr	r4, [r5, #8]
 80024f8:	e7cf      	b.n	800249a <__swbuf_r+0x1a>
 80024fa:	4b09      	ldr	r3, [pc, #36]	; (8002520 <__swbuf_r+0xa0>)
 80024fc:	429c      	cmp	r4, r3
 80024fe:	bf08      	it	eq
 8002500:	68ec      	ldreq	r4, [r5, #12]
 8002502:	e7ca      	b.n	800249a <__swbuf_r+0x1a>
 8002504:	4621      	mov	r1, r4
 8002506:	4628      	mov	r0, r5
 8002508:	f000 f80c 	bl	8002524 <__swsetup_r>
 800250c:	2800      	cmp	r0, #0
 800250e:	d0cb      	beq.n	80024a8 <__swbuf_r+0x28>
 8002510:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8002514:	e7ea      	b.n	80024ec <__swbuf_r+0x6c>
 8002516:	bf00      	nop
 8002518:	08002f58 	.word	0x08002f58
 800251c:	08002f78 	.word	0x08002f78
 8002520:	08002f38 	.word	0x08002f38

08002524 <__swsetup_r>:
 8002524:	4b32      	ldr	r3, [pc, #200]	; (80025f0 <__swsetup_r+0xcc>)
 8002526:	b570      	push	{r4, r5, r6, lr}
 8002528:	681d      	ldr	r5, [r3, #0]
 800252a:	4606      	mov	r6, r0
 800252c:	460c      	mov	r4, r1
 800252e:	b125      	cbz	r5, 800253a <__swsetup_r+0x16>
 8002530:	69ab      	ldr	r3, [r5, #24]
 8002532:	b913      	cbnz	r3, 800253a <__swsetup_r+0x16>
 8002534:	4628      	mov	r0, r5
 8002536:	f000 f985 	bl	8002844 <__sinit>
 800253a:	4b2e      	ldr	r3, [pc, #184]	; (80025f4 <__swsetup_r+0xd0>)
 800253c:	429c      	cmp	r4, r3
 800253e:	d10f      	bne.n	8002560 <__swsetup_r+0x3c>
 8002540:	686c      	ldr	r4, [r5, #4]
 8002542:	89a3      	ldrh	r3, [r4, #12]
 8002544:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002548:	0719      	lsls	r1, r3, #28
 800254a:	d42c      	bmi.n	80025a6 <__swsetup_r+0x82>
 800254c:	06dd      	lsls	r5, r3, #27
 800254e:	d411      	bmi.n	8002574 <__swsetup_r+0x50>
 8002550:	2309      	movs	r3, #9
 8002552:	6033      	str	r3, [r6, #0]
 8002554:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8002558:	81a3      	strh	r3, [r4, #12]
 800255a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800255e:	e03e      	b.n	80025de <__swsetup_r+0xba>
 8002560:	4b25      	ldr	r3, [pc, #148]	; (80025f8 <__swsetup_r+0xd4>)
 8002562:	429c      	cmp	r4, r3
 8002564:	d101      	bne.n	800256a <__swsetup_r+0x46>
 8002566:	68ac      	ldr	r4, [r5, #8]
 8002568:	e7eb      	b.n	8002542 <__swsetup_r+0x1e>
 800256a:	4b24      	ldr	r3, [pc, #144]	; (80025fc <__swsetup_r+0xd8>)
 800256c:	429c      	cmp	r4, r3
 800256e:	bf08      	it	eq
 8002570:	68ec      	ldreq	r4, [r5, #12]
 8002572:	e7e6      	b.n	8002542 <__swsetup_r+0x1e>
 8002574:	0758      	lsls	r0, r3, #29
 8002576:	d512      	bpl.n	800259e <__swsetup_r+0x7a>
 8002578:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800257a:	b141      	cbz	r1, 800258e <__swsetup_r+0x6a>
 800257c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002580:	4299      	cmp	r1, r3
 8002582:	d002      	beq.n	800258a <__swsetup_r+0x66>
 8002584:	4630      	mov	r0, r6
 8002586:	f000 fa63 	bl	8002a50 <_free_r>
 800258a:	2300      	movs	r3, #0
 800258c:	6363      	str	r3, [r4, #52]	; 0x34
 800258e:	89a3      	ldrh	r3, [r4, #12]
 8002590:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8002594:	81a3      	strh	r3, [r4, #12]
 8002596:	2300      	movs	r3, #0
 8002598:	6063      	str	r3, [r4, #4]
 800259a:	6923      	ldr	r3, [r4, #16]
 800259c:	6023      	str	r3, [r4, #0]
 800259e:	89a3      	ldrh	r3, [r4, #12]
 80025a0:	f043 0308 	orr.w	r3, r3, #8
 80025a4:	81a3      	strh	r3, [r4, #12]
 80025a6:	6923      	ldr	r3, [r4, #16]
 80025a8:	b94b      	cbnz	r3, 80025be <__swsetup_r+0x9a>
 80025aa:	89a3      	ldrh	r3, [r4, #12]
 80025ac:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80025b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80025b4:	d003      	beq.n	80025be <__swsetup_r+0x9a>
 80025b6:	4621      	mov	r1, r4
 80025b8:	4630      	mov	r0, r6
 80025ba:	f000 fa09 	bl	80029d0 <__smakebuf_r>
 80025be:	89a0      	ldrh	r0, [r4, #12]
 80025c0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80025c4:	f010 0301 	ands.w	r3, r0, #1
 80025c8:	d00a      	beq.n	80025e0 <__swsetup_r+0xbc>
 80025ca:	2300      	movs	r3, #0
 80025cc:	60a3      	str	r3, [r4, #8]
 80025ce:	6963      	ldr	r3, [r4, #20]
 80025d0:	425b      	negs	r3, r3
 80025d2:	61a3      	str	r3, [r4, #24]
 80025d4:	6923      	ldr	r3, [r4, #16]
 80025d6:	b943      	cbnz	r3, 80025ea <__swsetup_r+0xc6>
 80025d8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80025dc:	d1ba      	bne.n	8002554 <__swsetup_r+0x30>
 80025de:	bd70      	pop	{r4, r5, r6, pc}
 80025e0:	0781      	lsls	r1, r0, #30
 80025e2:	bf58      	it	pl
 80025e4:	6963      	ldrpl	r3, [r4, #20]
 80025e6:	60a3      	str	r3, [r4, #8]
 80025e8:	e7f4      	b.n	80025d4 <__swsetup_r+0xb0>
 80025ea:	2000      	movs	r0, #0
 80025ec:	e7f7      	b.n	80025de <__swsetup_r+0xba>
 80025ee:	bf00      	nop
 80025f0:	2000001c 	.word	0x2000001c
 80025f4:	08002f58 	.word	0x08002f58
 80025f8:	08002f78 	.word	0x08002f78
 80025fc:	08002f38 	.word	0x08002f38

08002600 <abort>:
 8002600:	b508      	push	{r3, lr}
 8002602:	2006      	movs	r0, #6
 8002604:	f000 fb3c 	bl	8002c80 <raise>
 8002608:	2001      	movs	r0, #1
 800260a:	f7fe fa43 	bl	8000a94 <_exit>
	...

08002610 <__sflush_r>:
 8002610:	898a      	ldrh	r2, [r1, #12]
 8002612:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002616:	4605      	mov	r5, r0
 8002618:	0710      	lsls	r0, r2, #28
 800261a:	460c      	mov	r4, r1
 800261c:	d458      	bmi.n	80026d0 <__sflush_r+0xc0>
 800261e:	684b      	ldr	r3, [r1, #4]
 8002620:	2b00      	cmp	r3, #0
 8002622:	dc05      	bgt.n	8002630 <__sflush_r+0x20>
 8002624:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8002626:	2b00      	cmp	r3, #0
 8002628:	dc02      	bgt.n	8002630 <__sflush_r+0x20>
 800262a:	2000      	movs	r0, #0
 800262c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002630:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002632:	2e00      	cmp	r6, #0
 8002634:	d0f9      	beq.n	800262a <__sflush_r+0x1a>
 8002636:	2300      	movs	r3, #0
 8002638:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800263c:	682f      	ldr	r7, [r5, #0]
 800263e:	602b      	str	r3, [r5, #0]
 8002640:	d032      	beq.n	80026a8 <__sflush_r+0x98>
 8002642:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002644:	89a3      	ldrh	r3, [r4, #12]
 8002646:	075a      	lsls	r2, r3, #29
 8002648:	d505      	bpl.n	8002656 <__sflush_r+0x46>
 800264a:	6863      	ldr	r3, [r4, #4]
 800264c:	1ac0      	subs	r0, r0, r3
 800264e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002650:	b10b      	cbz	r3, 8002656 <__sflush_r+0x46>
 8002652:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002654:	1ac0      	subs	r0, r0, r3
 8002656:	2300      	movs	r3, #0
 8002658:	4602      	mov	r2, r0
 800265a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800265c:	6a21      	ldr	r1, [r4, #32]
 800265e:	4628      	mov	r0, r5
 8002660:	47b0      	blx	r6
 8002662:	1c43      	adds	r3, r0, #1
 8002664:	89a3      	ldrh	r3, [r4, #12]
 8002666:	d106      	bne.n	8002676 <__sflush_r+0x66>
 8002668:	6829      	ldr	r1, [r5, #0]
 800266a:	291d      	cmp	r1, #29
 800266c:	d82c      	bhi.n	80026c8 <__sflush_r+0xb8>
 800266e:	4a2a      	ldr	r2, [pc, #168]	; (8002718 <__sflush_r+0x108>)
 8002670:	40ca      	lsrs	r2, r1
 8002672:	07d6      	lsls	r6, r2, #31
 8002674:	d528      	bpl.n	80026c8 <__sflush_r+0xb8>
 8002676:	2200      	movs	r2, #0
 8002678:	6062      	str	r2, [r4, #4]
 800267a:	04d9      	lsls	r1, r3, #19
 800267c:	6922      	ldr	r2, [r4, #16]
 800267e:	6022      	str	r2, [r4, #0]
 8002680:	d504      	bpl.n	800268c <__sflush_r+0x7c>
 8002682:	1c42      	adds	r2, r0, #1
 8002684:	d101      	bne.n	800268a <__sflush_r+0x7a>
 8002686:	682b      	ldr	r3, [r5, #0]
 8002688:	b903      	cbnz	r3, 800268c <__sflush_r+0x7c>
 800268a:	6560      	str	r0, [r4, #84]	; 0x54
 800268c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800268e:	602f      	str	r7, [r5, #0]
 8002690:	2900      	cmp	r1, #0
 8002692:	d0ca      	beq.n	800262a <__sflush_r+0x1a>
 8002694:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002698:	4299      	cmp	r1, r3
 800269a:	d002      	beq.n	80026a2 <__sflush_r+0x92>
 800269c:	4628      	mov	r0, r5
 800269e:	f000 f9d7 	bl	8002a50 <_free_r>
 80026a2:	2000      	movs	r0, #0
 80026a4:	6360      	str	r0, [r4, #52]	; 0x34
 80026a6:	e7c1      	b.n	800262c <__sflush_r+0x1c>
 80026a8:	6a21      	ldr	r1, [r4, #32]
 80026aa:	2301      	movs	r3, #1
 80026ac:	4628      	mov	r0, r5
 80026ae:	47b0      	blx	r6
 80026b0:	1c41      	adds	r1, r0, #1
 80026b2:	d1c7      	bne.n	8002644 <__sflush_r+0x34>
 80026b4:	682b      	ldr	r3, [r5, #0]
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d0c4      	beq.n	8002644 <__sflush_r+0x34>
 80026ba:	2b1d      	cmp	r3, #29
 80026bc:	d001      	beq.n	80026c2 <__sflush_r+0xb2>
 80026be:	2b16      	cmp	r3, #22
 80026c0:	d101      	bne.n	80026c6 <__sflush_r+0xb6>
 80026c2:	602f      	str	r7, [r5, #0]
 80026c4:	e7b1      	b.n	800262a <__sflush_r+0x1a>
 80026c6:	89a3      	ldrh	r3, [r4, #12]
 80026c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80026cc:	81a3      	strh	r3, [r4, #12]
 80026ce:	e7ad      	b.n	800262c <__sflush_r+0x1c>
 80026d0:	690f      	ldr	r7, [r1, #16]
 80026d2:	2f00      	cmp	r7, #0
 80026d4:	d0a9      	beq.n	800262a <__sflush_r+0x1a>
 80026d6:	0793      	lsls	r3, r2, #30
 80026d8:	680e      	ldr	r6, [r1, #0]
 80026da:	bf08      	it	eq
 80026dc:	694b      	ldreq	r3, [r1, #20]
 80026de:	600f      	str	r7, [r1, #0]
 80026e0:	bf18      	it	ne
 80026e2:	2300      	movne	r3, #0
 80026e4:	eba6 0807 	sub.w	r8, r6, r7
 80026e8:	608b      	str	r3, [r1, #8]
 80026ea:	f1b8 0f00 	cmp.w	r8, #0
 80026ee:	dd9c      	ble.n	800262a <__sflush_r+0x1a>
 80026f0:	6a21      	ldr	r1, [r4, #32]
 80026f2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80026f4:	4643      	mov	r3, r8
 80026f6:	463a      	mov	r2, r7
 80026f8:	4628      	mov	r0, r5
 80026fa:	47b0      	blx	r6
 80026fc:	2800      	cmp	r0, #0
 80026fe:	dc06      	bgt.n	800270e <__sflush_r+0xfe>
 8002700:	89a3      	ldrh	r3, [r4, #12]
 8002702:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002706:	81a3      	strh	r3, [r4, #12]
 8002708:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800270c:	e78e      	b.n	800262c <__sflush_r+0x1c>
 800270e:	4407      	add	r7, r0
 8002710:	eba8 0800 	sub.w	r8, r8, r0
 8002714:	e7e9      	b.n	80026ea <__sflush_r+0xda>
 8002716:	bf00      	nop
 8002718:	20400001 	.word	0x20400001

0800271c <_fflush_r>:
 800271c:	b538      	push	{r3, r4, r5, lr}
 800271e:	690b      	ldr	r3, [r1, #16]
 8002720:	4605      	mov	r5, r0
 8002722:	460c      	mov	r4, r1
 8002724:	b913      	cbnz	r3, 800272c <_fflush_r+0x10>
 8002726:	2500      	movs	r5, #0
 8002728:	4628      	mov	r0, r5
 800272a:	bd38      	pop	{r3, r4, r5, pc}
 800272c:	b118      	cbz	r0, 8002736 <_fflush_r+0x1a>
 800272e:	6983      	ldr	r3, [r0, #24]
 8002730:	b90b      	cbnz	r3, 8002736 <_fflush_r+0x1a>
 8002732:	f000 f887 	bl	8002844 <__sinit>
 8002736:	4b14      	ldr	r3, [pc, #80]	; (8002788 <_fflush_r+0x6c>)
 8002738:	429c      	cmp	r4, r3
 800273a:	d11b      	bne.n	8002774 <_fflush_r+0x58>
 800273c:	686c      	ldr	r4, [r5, #4]
 800273e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002742:	2b00      	cmp	r3, #0
 8002744:	d0ef      	beq.n	8002726 <_fflush_r+0xa>
 8002746:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8002748:	07d0      	lsls	r0, r2, #31
 800274a:	d404      	bmi.n	8002756 <_fflush_r+0x3a>
 800274c:	0599      	lsls	r1, r3, #22
 800274e:	d402      	bmi.n	8002756 <_fflush_r+0x3a>
 8002750:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002752:	f000 f915 	bl	8002980 <__retarget_lock_acquire_recursive>
 8002756:	4628      	mov	r0, r5
 8002758:	4621      	mov	r1, r4
 800275a:	f7ff ff59 	bl	8002610 <__sflush_r>
 800275e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002760:	07da      	lsls	r2, r3, #31
 8002762:	4605      	mov	r5, r0
 8002764:	d4e0      	bmi.n	8002728 <_fflush_r+0xc>
 8002766:	89a3      	ldrh	r3, [r4, #12]
 8002768:	059b      	lsls	r3, r3, #22
 800276a:	d4dd      	bmi.n	8002728 <_fflush_r+0xc>
 800276c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800276e:	f000 f908 	bl	8002982 <__retarget_lock_release_recursive>
 8002772:	e7d9      	b.n	8002728 <_fflush_r+0xc>
 8002774:	4b05      	ldr	r3, [pc, #20]	; (800278c <_fflush_r+0x70>)
 8002776:	429c      	cmp	r4, r3
 8002778:	d101      	bne.n	800277e <_fflush_r+0x62>
 800277a:	68ac      	ldr	r4, [r5, #8]
 800277c:	e7df      	b.n	800273e <_fflush_r+0x22>
 800277e:	4b04      	ldr	r3, [pc, #16]	; (8002790 <_fflush_r+0x74>)
 8002780:	429c      	cmp	r4, r3
 8002782:	bf08      	it	eq
 8002784:	68ec      	ldreq	r4, [r5, #12]
 8002786:	e7da      	b.n	800273e <_fflush_r+0x22>
 8002788:	08002f58 	.word	0x08002f58
 800278c:	08002f78 	.word	0x08002f78
 8002790:	08002f38 	.word	0x08002f38

08002794 <std>:
 8002794:	2300      	movs	r3, #0
 8002796:	b510      	push	{r4, lr}
 8002798:	4604      	mov	r4, r0
 800279a:	e9c0 3300 	strd	r3, r3, [r0]
 800279e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80027a2:	6083      	str	r3, [r0, #8]
 80027a4:	8181      	strh	r1, [r0, #12]
 80027a6:	6643      	str	r3, [r0, #100]	; 0x64
 80027a8:	81c2      	strh	r2, [r0, #14]
 80027aa:	6183      	str	r3, [r0, #24]
 80027ac:	4619      	mov	r1, r3
 80027ae:	2208      	movs	r2, #8
 80027b0:	305c      	adds	r0, #92	; 0x5c
 80027b2:	f7ff fb6f 	bl	8001e94 <memset>
 80027b6:	4b05      	ldr	r3, [pc, #20]	; (80027cc <std+0x38>)
 80027b8:	6263      	str	r3, [r4, #36]	; 0x24
 80027ba:	4b05      	ldr	r3, [pc, #20]	; (80027d0 <std+0x3c>)
 80027bc:	62a3      	str	r3, [r4, #40]	; 0x28
 80027be:	4b05      	ldr	r3, [pc, #20]	; (80027d4 <std+0x40>)
 80027c0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80027c2:	4b05      	ldr	r3, [pc, #20]	; (80027d8 <std+0x44>)
 80027c4:	6224      	str	r4, [r4, #32]
 80027c6:	6323      	str	r3, [r4, #48]	; 0x30
 80027c8:	bd10      	pop	{r4, pc}
 80027ca:	bf00      	nop
 80027cc:	08002cb9 	.word	0x08002cb9
 80027d0:	08002cdb 	.word	0x08002cdb
 80027d4:	08002d13 	.word	0x08002d13
 80027d8:	08002d37 	.word	0x08002d37

080027dc <_cleanup_r>:
 80027dc:	4901      	ldr	r1, [pc, #4]	; (80027e4 <_cleanup_r+0x8>)
 80027de:	f000 b8af 	b.w	8002940 <_fwalk_reent>
 80027e2:	bf00      	nop
 80027e4:	0800271d 	.word	0x0800271d

080027e8 <__sfmoreglue>:
 80027e8:	b570      	push	{r4, r5, r6, lr}
 80027ea:	2268      	movs	r2, #104	; 0x68
 80027ec:	1e4d      	subs	r5, r1, #1
 80027ee:	4355      	muls	r5, r2
 80027f0:	460e      	mov	r6, r1
 80027f2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80027f6:	f000 f997 	bl	8002b28 <_malloc_r>
 80027fa:	4604      	mov	r4, r0
 80027fc:	b140      	cbz	r0, 8002810 <__sfmoreglue+0x28>
 80027fe:	2100      	movs	r1, #0
 8002800:	e9c0 1600 	strd	r1, r6, [r0]
 8002804:	300c      	adds	r0, #12
 8002806:	60a0      	str	r0, [r4, #8]
 8002808:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800280c:	f7ff fb42 	bl	8001e94 <memset>
 8002810:	4620      	mov	r0, r4
 8002812:	bd70      	pop	{r4, r5, r6, pc}

08002814 <__sfp_lock_acquire>:
 8002814:	4801      	ldr	r0, [pc, #4]	; (800281c <__sfp_lock_acquire+0x8>)
 8002816:	f000 b8b3 	b.w	8002980 <__retarget_lock_acquire_recursive>
 800281a:	bf00      	nop
 800281c:	200000b5 	.word	0x200000b5

08002820 <__sfp_lock_release>:
 8002820:	4801      	ldr	r0, [pc, #4]	; (8002828 <__sfp_lock_release+0x8>)
 8002822:	f000 b8ae 	b.w	8002982 <__retarget_lock_release_recursive>
 8002826:	bf00      	nop
 8002828:	200000b5 	.word	0x200000b5

0800282c <__sinit_lock_acquire>:
 800282c:	4801      	ldr	r0, [pc, #4]	; (8002834 <__sinit_lock_acquire+0x8>)
 800282e:	f000 b8a7 	b.w	8002980 <__retarget_lock_acquire_recursive>
 8002832:	bf00      	nop
 8002834:	200000b6 	.word	0x200000b6

08002838 <__sinit_lock_release>:
 8002838:	4801      	ldr	r0, [pc, #4]	; (8002840 <__sinit_lock_release+0x8>)
 800283a:	f000 b8a2 	b.w	8002982 <__retarget_lock_release_recursive>
 800283e:	bf00      	nop
 8002840:	200000b6 	.word	0x200000b6

08002844 <__sinit>:
 8002844:	b510      	push	{r4, lr}
 8002846:	4604      	mov	r4, r0
 8002848:	f7ff fff0 	bl	800282c <__sinit_lock_acquire>
 800284c:	69a3      	ldr	r3, [r4, #24]
 800284e:	b11b      	cbz	r3, 8002858 <__sinit+0x14>
 8002850:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002854:	f7ff bff0 	b.w	8002838 <__sinit_lock_release>
 8002858:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800285c:	6523      	str	r3, [r4, #80]	; 0x50
 800285e:	4b13      	ldr	r3, [pc, #76]	; (80028ac <__sinit+0x68>)
 8002860:	4a13      	ldr	r2, [pc, #76]	; (80028b0 <__sinit+0x6c>)
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	62a2      	str	r2, [r4, #40]	; 0x28
 8002866:	42a3      	cmp	r3, r4
 8002868:	bf04      	itt	eq
 800286a:	2301      	moveq	r3, #1
 800286c:	61a3      	streq	r3, [r4, #24]
 800286e:	4620      	mov	r0, r4
 8002870:	f000 f820 	bl	80028b4 <__sfp>
 8002874:	6060      	str	r0, [r4, #4]
 8002876:	4620      	mov	r0, r4
 8002878:	f000 f81c 	bl	80028b4 <__sfp>
 800287c:	60a0      	str	r0, [r4, #8]
 800287e:	4620      	mov	r0, r4
 8002880:	f000 f818 	bl	80028b4 <__sfp>
 8002884:	2200      	movs	r2, #0
 8002886:	60e0      	str	r0, [r4, #12]
 8002888:	2104      	movs	r1, #4
 800288a:	6860      	ldr	r0, [r4, #4]
 800288c:	f7ff ff82 	bl	8002794 <std>
 8002890:	68a0      	ldr	r0, [r4, #8]
 8002892:	2201      	movs	r2, #1
 8002894:	2109      	movs	r1, #9
 8002896:	f7ff ff7d 	bl	8002794 <std>
 800289a:	68e0      	ldr	r0, [r4, #12]
 800289c:	2202      	movs	r2, #2
 800289e:	2112      	movs	r1, #18
 80028a0:	f7ff ff78 	bl	8002794 <std>
 80028a4:	2301      	movs	r3, #1
 80028a6:	61a3      	str	r3, [r4, #24]
 80028a8:	e7d2      	b.n	8002850 <__sinit+0xc>
 80028aa:	bf00      	nop
 80028ac:	08002f00 	.word	0x08002f00
 80028b0:	080027dd 	.word	0x080027dd

080028b4 <__sfp>:
 80028b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80028b6:	4607      	mov	r7, r0
 80028b8:	f7ff ffac 	bl	8002814 <__sfp_lock_acquire>
 80028bc:	4b1e      	ldr	r3, [pc, #120]	; (8002938 <__sfp+0x84>)
 80028be:	681e      	ldr	r6, [r3, #0]
 80028c0:	69b3      	ldr	r3, [r6, #24]
 80028c2:	b913      	cbnz	r3, 80028ca <__sfp+0x16>
 80028c4:	4630      	mov	r0, r6
 80028c6:	f7ff ffbd 	bl	8002844 <__sinit>
 80028ca:	3648      	adds	r6, #72	; 0x48
 80028cc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80028d0:	3b01      	subs	r3, #1
 80028d2:	d503      	bpl.n	80028dc <__sfp+0x28>
 80028d4:	6833      	ldr	r3, [r6, #0]
 80028d6:	b30b      	cbz	r3, 800291c <__sfp+0x68>
 80028d8:	6836      	ldr	r6, [r6, #0]
 80028da:	e7f7      	b.n	80028cc <__sfp+0x18>
 80028dc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80028e0:	b9d5      	cbnz	r5, 8002918 <__sfp+0x64>
 80028e2:	4b16      	ldr	r3, [pc, #88]	; (800293c <__sfp+0x88>)
 80028e4:	60e3      	str	r3, [r4, #12]
 80028e6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80028ea:	6665      	str	r5, [r4, #100]	; 0x64
 80028ec:	f000 f847 	bl	800297e <__retarget_lock_init_recursive>
 80028f0:	f7ff ff96 	bl	8002820 <__sfp_lock_release>
 80028f4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80028f8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80028fc:	6025      	str	r5, [r4, #0]
 80028fe:	61a5      	str	r5, [r4, #24]
 8002900:	2208      	movs	r2, #8
 8002902:	4629      	mov	r1, r5
 8002904:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8002908:	f7ff fac4 	bl	8001e94 <memset>
 800290c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8002910:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8002914:	4620      	mov	r0, r4
 8002916:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002918:	3468      	adds	r4, #104	; 0x68
 800291a:	e7d9      	b.n	80028d0 <__sfp+0x1c>
 800291c:	2104      	movs	r1, #4
 800291e:	4638      	mov	r0, r7
 8002920:	f7ff ff62 	bl	80027e8 <__sfmoreglue>
 8002924:	4604      	mov	r4, r0
 8002926:	6030      	str	r0, [r6, #0]
 8002928:	2800      	cmp	r0, #0
 800292a:	d1d5      	bne.n	80028d8 <__sfp+0x24>
 800292c:	f7ff ff78 	bl	8002820 <__sfp_lock_release>
 8002930:	230c      	movs	r3, #12
 8002932:	603b      	str	r3, [r7, #0]
 8002934:	e7ee      	b.n	8002914 <__sfp+0x60>
 8002936:	bf00      	nop
 8002938:	08002f00 	.word	0x08002f00
 800293c:	ffff0001 	.word	0xffff0001

08002940 <_fwalk_reent>:
 8002940:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002944:	4606      	mov	r6, r0
 8002946:	4688      	mov	r8, r1
 8002948:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800294c:	2700      	movs	r7, #0
 800294e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002952:	f1b9 0901 	subs.w	r9, r9, #1
 8002956:	d505      	bpl.n	8002964 <_fwalk_reent+0x24>
 8002958:	6824      	ldr	r4, [r4, #0]
 800295a:	2c00      	cmp	r4, #0
 800295c:	d1f7      	bne.n	800294e <_fwalk_reent+0xe>
 800295e:	4638      	mov	r0, r7
 8002960:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002964:	89ab      	ldrh	r3, [r5, #12]
 8002966:	2b01      	cmp	r3, #1
 8002968:	d907      	bls.n	800297a <_fwalk_reent+0x3a>
 800296a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800296e:	3301      	adds	r3, #1
 8002970:	d003      	beq.n	800297a <_fwalk_reent+0x3a>
 8002972:	4629      	mov	r1, r5
 8002974:	4630      	mov	r0, r6
 8002976:	47c0      	blx	r8
 8002978:	4307      	orrs	r7, r0
 800297a:	3568      	adds	r5, #104	; 0x68
 800297c:	e7e9      	b.n	8002952 <_fwalk_reent+0x12>

0800297e <__retarget_lock_init_recursive>:
 800297e:	4770      	bx	lr

08002980 <__retarget_lock_acquire_recursive>:
 8002980:	4770      	bx	lr

08002982 <__retarget_lock_release_recursive>:
 8002982:	4770      	bx	lr

08002984 <__swhatbuf_r>:
 8002984:	b570      	push	{r4, r5, r6, lr}
 8002986:	460e      	mov	r6, r1
 8002988:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800298c:	2900      	cmp	r1, #0
 800298e:	b096      	sub	sp, #88	; 0x58
 8002990:	4614      	mov	r4, r2
 8002992:	461d      	mov	r5, r3
 8002994:	da08      	bge.n	80029a8 <__swhatbuf_r+0x24>
 8002996:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800299a:	2200      	movs	r2, #0
 800299c:	602a      	str	r2, [r5, #0]
 800299e:	061a      	lsls	r2, r3, #24
 80029a0:	d410      	bmi.n	80029c4 <__swhatbuf_r+0x40>
 80029a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80029a6:	e00e      	b.n	80029c6 <__swhatbuf_r+0x42>
 80029a8:	466a      	mov	r2, sp
 80029aa:	f000 f9eb 	bl	8002d84 <_fstat_r>
 80029ae:	2800      	cmp	r0, #0
 80029b0:	dbf1      	blt.n	8002996 <__swhatbuf_r+0x12>
 80029b2:	9a01      	ldr	r2, [sp, #4]
 80029b4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80029b8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80029bc:	425a      	negs	r2, r3
 80029be:	415a      	adcs	r2, r3
 80029c0:	602a      	str	r2, [r5, #0]
 80029c2:	e7ee      	b.n	80029a2 <__swhatbuf_r+0x1e>
 80029c4:	2340      	movs	r3, #64	; 0x40
 80029c6:	2000      	movs	r0, #0
 80029c8:	6023      	str	r3, [r4, #0]
 80029ca:	b016      	add	sp, #88	; 0x58
 80029cc:	bd70      	pop	{r4, r5, r6, pc}
	...

080029d0 <__smakebuf_r>:
 80029d0:	898b      	ldrh	r3, [r1, #12]
 80029d2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80029d4:	079d      	lsls	r5, r3, #30
 80029d6:	4606      	mov	r6, r0
 80029d8:	460c      	mov	r4, r1
 80029da:	d507      	bpl.n	80029ec <__smakebuf_r+0x1c>
 80029dc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80029e0:	6023      	str	r3, [r4, #0]
 80029e2:	6123      	str	r3, [r4, #16]
 80029e4:	2301      	movs	r3, #1
 80029e6:	6163      	str	r3, [r4, #20]
 80029e8:	b002      	add	sp, #8
 80029ea:	bd70      	pop	{r4, r5, r6, pc}
 80029ec:	ab01      	add	r3, sp, #4
 80029ee:	466a      	mov	r2, sp
 80029f0:	f7ff ffc8 	bl	8002984 <__swhatbuf_r>
 80029f4:	9900      	ldr	r1, [sp, #0]
 80029f6:	4605      	mov	r5, r0
 80029f8:	4630      	mov	r0, r6
 80029fa:	f000 f895 	bl	8002b28 <_malloc_r>
 80029fe:	b948      	cbnz	r0, 8002a14 <__smakebuf_r+0x44>
 8002a00:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002a04:	059a      	lsls	r2, r3, #22
 8002a06:	d4ef      	bmi.n	80029e8 <__smakebuf_r+0x18>
 8002a08:	f023 0303 	bic.w	r3, r3, #3
 8002a0c:	f043 0302 	orr.w	r3, r3, #2
 8002a10:	81a3      	strh	r3, [r4, #12]
 8002a12:	e7e3      	b.n	80029dc <__smakebuf_r+0xc>
 8002a14:	4b0d      	ldr	r3, [pc, #52]	; (8002a4c <__smakebuf_r+0x7c>)
 8002a16:	62b3      	str	r3, [r6, #40]	; 0x28
 8002a18:	89a3      	ldrh	r3, [r4, #12]
 8002a1a:	6020      	str	r0, [r4, #0]
 8002a1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a20:	81a3      	strh	r3, [r4, #12]
 8002a22:	9b00      	ldr	r3, [sp, #0]
 8002a24:	6163      	str	r3, [r4, #20]
 8002a26:	9b01      	ldr	r3, [sp, #4]
 8002a28:	6120      	str	r0, [r4, #16]
 8002a2a:	b15b      	cbz	r3, 8002a44 <__smakebuf_r+0x74>
 8002a2c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002a30:	4630      	mov	r0, r6
 8002a32:	f000 f9b9 	bl	8002da8 <_isatty_r>
 8002a36:	b128      	cbz	r0, 8002a44 <__smakebuf_r+0x74>
 8002a38:	89a3      	ldrh	r3, [r4, #12]
 8002a3a:	f023 0303 	bic.w	r3, r3, #3
 8002a3e:	f043 0301 	orr.w	r3, r3, #1
 8002a42:	81a3      	strh	r3, [r4, #12]
 8002a44:	89a0      	ldrh	r0, [r4, #12]
 8002a46:	4305      	orrs	r5, r0
 8002a48:	81a5      	strh	r5, [r4, #12]
 8002a4a:	e7cd      	b.n	80029e8 <__smakebuf_r+0x18>
 8002a4c:	080027dd 	.word	0x080027dd

08002a50 <_free_r>:
 8002a50:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002a52:	2900      	cmp	r1, #0
 8002a54:	d044      	beq.n	8002ae0 <_free_r+0x90>
 8002a56:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002a5a:	9001      	str	r0, [sp, #4]
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	f1a1 0404 	sub.w	r4, r1, #4
 8002a62:	bfb8      	it	lt
 8002a64:	18e4      	addlt	r4, r4, r3
 8002a66:	f000 f9c1 	bl	8002dec <__malloc_lock>
 8002a6a:	4a1e      	ldr	r2, [pc, #120]	; (8002ae4 <_free_r+0x94>)
 8002a6c:	9801      	ldr	r0, [sp, #4]
 8002a6e:	6813      	ldr	r3, [r2, #0]
 8002a70:	b933      	cbnz	r3, 8002a80 <_free_r+0x30>
 8002a72:	6063      	str	r3, [r4, #4]
 8002a74:	6014      	str	r4, [r2, #0]
 8002a76:	b003      	add	sp, #12
 8002a78:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002a7c:	f000 b9bc 	b.w	8002df8 <__malloc_unlock>
 8002a80:	42a3      	cmp	r3, r4
 8002a82:	d908      	bls.n	8002a96 <_free_r+0x46>
 8002a84:	6825      	ldr	r5, [r4, #0]
 8002a86:	1961      	adds	r1, r4, r5
 8002a88:	428b      	cmp	r3, r1
 8002a8a:	bf01      	itttt	eq
 8002a8c:	6819      	ldreq	r1, [r3, #0]
 8002a8e:	685b      	ldreq	r3, [r3, #4]
 8002a90:	1949      	addeq	r1, r1, r5
 8002a92:	6021      	streq	r1, [r4, #0]
 8002a94:	e7ed      	b.n	8002a72 <_free_r+0x22>
 8002a96:	461a      	mov	r2, r3
 8002a98:	685b      	ldr	r3, [r3, #4]
 8002a9a:	b10b      	cbz	r3, 8002aa0 <_free_r+0x50>
 8002a9c:	42a3      	cmp	r3, r4
 8002a9e:	d9fa      	bls.n	8002a96 <_free_r+0x46>
 8002aa0:	6811      	ldr	r1, [r2, #0]
 8002aa2:	1855      	adds	r5, r2, r1
 8002aa4:	42a5      	cmp	r5, r4
 8002aa6:	d10b      	bne.n	8002ac0 <_free_r+0x70>
 8002aa8:	6824      	ldr	r4, [r4, #0]
 8002aaa:	4421      	add	r1, r4
 8002aac:	1854      	adds	r4, r2, r1
 8002aae:	42a3      	cmp	r3, r4
 8002ab0:	6011      	str	r1, [r2, #0]
 8002ab2:	d1e0      	bne.n	8002a76 <_free_r+0x26>
 8002ab4:	681c      	ldr	r4, [r3, #0]
 8002ab6:	685b      	ldr	r3, [r3, #4]
 8002ab8:	6053      	str	r3, [r2, #4]
 8002aba:	4421      	add	r1, r4
 8002abc:	6011      	str	r1, [r2, #0]
 8002abe:	e7da      	b.n	8002a76 <_free_r+0x26>
 8002ac0:	d902      	bls.n	8002ac8 <_free_r+0x78>
 8002ac2:	230c      	movs	r3, #12
 8002ac4:	6003      	str	r3, [r0, #0]
 8002ac6:	e7d6      	b.n	8002a76 <_free_r+0x26>
 8002ac8:	6825      	ldr	r5, [r4, #0]
 8002aca:	1961      	adds	r1, r4, r5
 8002acc:	428b      	cmp	r3, r1
 8002ace:	bf04      	itt	eq
 8002ad0:	6819      	ldreq	r1, [r3, #0]
 8002ad2:	685b      	ldreq	r3, [r3, #4]
 8002ad4:	6063      	str	r3, [r4, #4]
 8002ad6:	bf04      	itt	eq
 8002ad8:	1949      	addeq	r1, r1, r5
 8002ada:	6021      	streq	r1, [r4, #0]
 8002adc:	6054      	str	r4, [r2, #4]
 8002ade:	e7ca      	b.n	8002a76 <_free_r+0x26>
 8002ae0:	b003      	add	sp, #12
 8002ae2:	bd30      	pop	{r4, r5, pc}
 8002ae4:	200000b8 	.word	0x200000b8

08002ae8 <sbrk_aligned>:
 8002ae8:	b570      	push	{r4, r5, r6, lr}
 8002aea:	4e0e      	ldr	r6, [pc, #56]	; (8002b24 <sbrk_aligned+0x3c>)
 8002aec:	460c      	mov	r4, r1
 8002aee:	6831      	ldr	r1, [r6, #0]
 8002af0:	4605      	mov	r5, r0
 8002af2:	b911      	cbnz	r1, 8002afa <sbrk_aligned+0x12>
 8002af4:	f000 f88c 	bl	8002c10 <_sbrk_r>
 8002af8:	6030      	str	r0, [r6, #0]
 8002afa:	4621      	mov	r1, r4
 8002afc:	4628      	mov	r0, r5
 8002afe:	f000 f887 	bl	8002c10 <_sbrk_r>
 8002b02:	1c43      	adds	r3, r0, #1
 8002b04:	d00a      	beq.n	8002b1c <sbrk_aligned+0x34>
 8002b06:	1cc4      	adds	r4, r0, #3
 8002b08:	f024 0403 	bic.w	r4, r4, #3
 8002b0c:	42a0      	cmp	r0, r4
 8002b0e:	d007      	beq.n	8002b20 <sbrk_aligned+0x38>
 8002b10:	1a21      	subs	r1, r4, r0
 8002b12:	4628      	mov	r0, r5
 8002b14:	f000 f87c 	bl	8002c10 <_sbrk_r>
 8002b18:	3001      	adds	r0, #1
 8002b1a:	d101      	bne.n	8002b20 <sbrk_aligned+0x38>
 8002b1c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8002b20:	4620      	mov	r0, r4
 8002b22:	bd70      	pop	{r4, r5, r6, pc}
 8002b24:	200000bc 	.word	0x200000bc

08002b28 <_malloc_r>:
 8002b28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002b2c:	1ccd      	adds	r5, r1, #3
 8002b2e:	f025 0503 	bic.w	r5, r5, #3
 8002b32:	3508      	adds	r5, #8
 8002b34:	2d0c      	cmp	r5, #12
 8002b36:	bf38      	it	cc
 8002b38:	250c      	movcc	r5, #12
 8002b3a:	2d00      	cmp	r5, #0
 8002b3c:	4607      	mov	r7, r0
 8002b3e:	db01      	blt.n	8002b44 <_malloc_r+0x1c>
 8002b40:	42a9      	cmp	r1, r5
 8002b42:	d905      	bls.n	8002b50 <_malloc_r+0x28>
 8002b44:	230c      	movs	r3, #12
 8002b46:	603b      	str	r3, [r7, #0]
 8002b48:	2600      	movs	r6, #0
 8002b4a:	4630      	mov	r0, r6
 8002b4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002b50:	4e2e      	ldr	r6, [pc, #184]	; (8002c0c <_malloc_r+0xe4>)
 8002b52:	f000 f94b 	bl	8002dec <__malloc_lock>
 8002b56:	6833      	ldr	r3, [r6, #0]
 8002b58:	461c      	mov	r4, r3
 8002b5a:	bb34      	cbnz	r4, 8002baa <_malloc_r+0x82>
 8002b5c:	4629      	mov	r1, r5
 8002b5e:	4638      	mov	r0, r7
 8002b60:	f7ff ffc2 	bl	8002ae8 <sbrk_aligned>
 8002b64:	1c43      	adds	r3, r0, #1
 8002b66:	4604      	mov	r4, r0
 8002b68:	d14d      	bne.n	8002c06 <_malloc_r+0xde>
 8002b6a:	6834      	ldr	r4, [r6, #0]
 8002b6c:	4626      	mov	r6, r4
 8002b6e:	2e00      	cmp	r6, #0
 8002b70:	d140      	bne.n	8002bf4 <_malloc_r+0xcc>
 8002b72:	6823      	ldr	r3, [r4, #0]
 8002b74:	4631      	mov	r1, r6
 8002b76:	4638      	mov	r0, r7
 8002b78:	eb04 0803 	add.w	r8, r4, r3
 8002b7c:	f000 f848 	bl	8002c10 <_sbrk_r>
 8002b80:	4580      	cmp	r8, r0
 8002b82:	d13a      	bne.n	8002bfa <_malloc_r+0xd2>
 8002b84:	6821      	ldr	r1, [r4, #0]
 8002b86:	3503      	adds	r5, #3
 8002b88:	1a6d      	subs	r5, r5, r1
 8002b8a:	f025 0503 	bic.w	r5, r5, #3
 8002b8e:	3508      	adds	r5, #8
 8002b90:	2d0c      	cmp	r5, #12
 8002b92:	bf38      	it	cc
 8002b94:	250c      	movcc	r5, #12
 8002b96:	4629      	mov	r1, r5
 8002b98:	4638      	mov	r0, r7
 8002b9a:	f7ff ffa5 	bl	8002ae8 <sbrk_aligned>
 8002b9e:	3001      	adds	r0, #1
 8002ba0:	d02b      	beq.n	8002bfa <_malloc_r+0xd2>
 8002ba2:	6823      	ldr	r3, [r4, #0]
 8002ba4:	442b      	add	r3, r5
 8002ba6:	6023      	str	r3, [r4, #0]
 8002ba8:	e00e      	b.n	8002bc8 <_malloc_r+0xa0>
 8002baa:	6822      	ldr	r2, [r4, #0]
 8002bac:	1b52      	subs	r2, r2, r5
 8002bae:	d41e      	bmi.n	8002bee <_malloc_r+0xc6>
 8002bb0:	2a0b      	cmp	r2, #11
 8002bb2:	d916      	bls.n	8002be2 <_malloc_r+0xba>
 8002bb4:	1961      	adds	r1, r4, r5
 8002bb6:	42a3      	cmp	r3, r4
 8002bb8:	6025      	str	r5, [r4, #0]
 8002bba:	bf18      	it	ne
 8002bbc:	6059      	strne	r1, [r3, #4]
 8002bbe:	6863      	ldr	r3, [r4, #4]
 8002bc0:	bf08      	it	eq
 8002bc2:	6031      	streq	r1, [r6, #0]
 8002bc4:	5162      	str	r2, [r4, r5]
 8002bc6:	604b      	str	r3, [r1, #4]
 8002bc8:	4638      	mov	r0, r7
 8002bca:	f104 060b 	add.w	r6, r4, #11
 8002bce:	f000 f913 	bl	8002df8 <__malloc_unlock>
 8002bd2:	f026 0607 	bic.w	r6, r6, #7
 8002bd6:	1d23      	adds	r3, r4, #4
 8002bd8:	1af2      	subs	r2, r6, r3
 8002bda:	d0b6      	beq.n	8002b4a <_malloc_r+0x22>
 8002bdc:	1b9b      	subs	r3, r3, r6
 8002bde:	50a3      	str	r3, [r4, r2]
 8002be0:	e7b3      	b.n	8002b4a <_malloc_r+0x22>
 8002be2:	6862      	ldr	r2, [r4, #4]
 8002be4:	42a3      	cmp	r3, r4
 8002be6:	bf0c      	ite	eq
 8002be8:	6032      	streq	r2, [r6, #0]
 8002bea:	605a      	strne	r2, [r3, #4]
 8002bec:	e7ec      	b.n	8002bc8 <_malloc_r+0xa0>
 8002bee:	4623      	mov	r3, r4
 8002bf0:	6864      	ldr	r4, [r4, #4]
 8002bf2:	e7b2      	b.n	8002b5a <_malloc_r+0x32>
 8002bf4:	4634      	mov	r4, r6
 8002bf6:	6876      	ldr	r6, [r6, #4]
 8002bf8:	e7b9      	b.n	8002b6e <_malloc_r+0x46>
 8002bfa:	230c      	movs	r3, #12
 8002bfc:	603b      	str	r3, [r7, #0]
 8002bfe:	4638      	mov	r0, r7
 8002c00:	f000 f8fa 	bl	8002df8 <__malloc_unlock>
 8002c04:	e7a1      	b.n	8002b4a <_malloc_r+0x22>
 8002c06:	6025      	str	r5, [r4, #0]
 8002c08:	e7de      	b.n	8002bc8 <_malloc_r+0xa0>
 8002c0a:	bf00      	nop
 8002c0c:	200000b8 	.word	0x200000b8

08002c10 <_sbrk_r>:
 8002c10:	b538      	push	{r3, r4, r5, lr}
 8002c12:	4d06      	ldr	r5, [pc, #24]	; (8002c2c <_sbrk_r+0x1c>)
 8002c14:	2300      	movs	r3, #0
 8002c16:	4604      	mov	r4, r0
 8002c18:	4608      	mov	r0, r1
 8002c1a:	602b      	str	r3, [r5, #0]
 8002c1c:	f7fd ffb2 	bl	8000b84 <_sbrk>
 8002c20:	1c43      	adds	r3, r0, #1
 8002c22:	d102      	bne.n	8002c2a <_sbrk_r+0x1a>
 8002c24:	682b      	ldr	r3, [r5, #0]
 8002c26:	b103      	cbz	r3, 8002c2a <_sbrk_r+0x1a>
 8002c28:	6023      	str	r3, [r4, #0]
 8002c2a:	bd38      	pop	{r3, r4, r5, pc}
 8002c2c:	200000c0 	.word	0x200000c0

08002c30 <_raise_r>:
 8002c30:	291f      	cmp	r1, #31
 8002c32:	b538      	push	{r3, r4, r5, lr}
 8002c34:	4604      	mov	r4, r0
 8002c36:	460d      	mov	r5, r1
 8002c38:	d904      	bls.n	8002c44 <_raise_r+0x14>
 8002c3a:	2316      	movs	r3, #22
 8002c3c:	6003      	str	r3, [r0, #0]
 8002c3e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002c42:	bd38      	pop	{r3, r4, r5, pc}
 8002c44:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8002c46:	b112      	cbz	r2, 8002c4e <_raise_r+0x1e>
 8002c48:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8002c4c:	b94b      	cbnz	r3, 8002c62 <_raise_r+0x32>
 8002c4e:	4620      	mov	r0, r4
 8002c50:	f000 f830 	bl	8002cb4 <_getpid_r>
 8002c54:	462a      	mov	r2, r5
 8002c56:	4601      	mov	r1, r0
 8002c58:	4620      	mov	r0, r4
 8002c5a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002c5e:	f000 b817 	b.w	8002c90 <_kill_r>
 8002c62:	2b01      	cmp	r3, #1
 8002c64:	d00a      	beq.n	8002c7c <_raise_r+0x4c>
 8002c66:	1c59      	adds	r1, r3, #1
 8002c68:	d103      	bne.n	8002c72 <_raise_r+0x42>
 8002c6a:	2316      	movs	r3, #22
 8002c6c:	6003      	str	r3, [r0, #0]
 8002c6e:	2001      	movs	r0, #1
 8002c70:	e7e7      	b.n	8002c42 <_raise_r+0x12>
 8002c72:	2400      	movs	r4, #0
 8002c74:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8002c78:	4628      	mov	r0, r5
 8002c7a:	4798      	blx	r3
 8002c7c:	2000      	movs	r0, #0
 8002c7e:	e7e0      	b.n	8002c42 <_raise_r+0x12>

08002c80 <raise>:
 8002c80:	4b02      	ldr	r3, [pc, #8]	; (8002c8c <raise+0xc>)
 8002c82:	4601      	mov	r1, r0
 8002c84:	6818      	ldr	r0, [r3, #0]
 8002c86:	f7ff bfd3 	b.w	8002c30 <_raise_r>
 8002c8a:	bf00      	nop
 8002c8c:	2000001c 	.word	0x2000001c

08002c90 <_kill_r>:
 8002c90:	b538      	push	{r3, r4, r5, lr}
 8002c92:	4d07      	ldr	r5, [pc, #28]	; (8002cb0 <_kill_r+0x20>)
 8002c94:	2300      	movs	r3, #0
 8002c96:	4604      	mov	r4, r0
 8002c98:	4608      	mov	r0, r1
 8002c9a:	4611      	mov	r1, r2
 8002c9c:	602b      	str	r3, [r5, #0]
 8002c9e:	f7fd fee9 	bl	8000a74 <_kill>
 8002ca2:	1c43      	adds	r3, r0, #1
 8002ca4:	d102      	bne.n	8002cac <_kill_r+0x1c>
 8002ca6:	682b      	ldr	r3, [r5, #0]
 8002ca8:	b103      	cbz	r3, 8002cac <_kill_r+0x1c>
 8002caa:	6023      	str	r3, [r4, #0]
 8002cac:	bd38      	pop	{r3, r4, r5, pc}
 8002cae:	bf00      	nop
 8002cb0:	200000c0 	.word	0x200000c0

08002cb4 <_getpid_r>:
 8002cb4:	f7fd bed6 	b.w	8000a64 <_getpid>

08002cb8 <__sread>:
 8002cb8:	b510      	push	{r4, lr}
 8002cba:	460c      	mov	r4, r1
 8002cbc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002cc0:	f000 f8a0 	bl	8002e04 <_read_r>
 8002cc4:	2800      	cmp	r0, #0
 8002cc6:	bfab      	itete	ge
 8002cc8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8002cca:	89a3      	ldrhlt	r3, [r4, #12]
 8002ccc:	181b      	addge	r3, r3, r0
 8002cce:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8002cd2:	bfac      	ite	ge
 8002cd4:	6563      	strge	r3, [r4, #84]	; 0x54
 8002cd6:	81a3      	strhlt	r3, [r4, #12]
 8002cd8:	bd10      	pop	{r4, pc}

08002cda <__swrite>:
 8002cda:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002cde:	461f      	mov	r7, r3
 8002ce0:	898b      	ldrh	r3, [r1, #12]
 8002ce2:	05db      	lsls	r3, r3, #23
 8002ce4:	4605      	mov	r5, r0
 8002ce6:	460c      	mov	r4, r1
 8002ce8:	4616      	mov	r6, r2
 8002cea:	d505      	bpl.n	8002cf8 <__swrite+0x1e>
 8002cec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002cf0:	2302      	movs	r3, #2
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	f000 f868 	bl	8002dc8 <_lseek_r>
 8002cf8:	89a3      	ldrh	r3, [r4, #12]
 8002cfa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002cfe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002d02:	81a3      	strh	r3, [r4, #12]
 8002d04:	4632      	mov	r2, r6
 8002d06:	463b      	mov	r3, r7
 8002d08:	4628      	mov	r0, r5
 8002d0a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002d0e:	f000 b817 	b.w	8002d40 <_write_r>

08002d12 <__sseek>:
 8002d12:	b510      	push	{r4, lr}
 8002d14:	460c      	mov	r4, r1
 8002d16:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002d1a:	f000 f855 	bl	8002dc8 <_lseek_r>
 8002d1e:	1c43      	adds	r3, r0, #1
 8002d20:	89a3      	ldrh	r3, [r4, #12]
 8002d22:	bf15      	itete	ne
 8002d24:	6560      	strne	r0, [r4, #84]	; 0x54
 8002d26:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8002d2a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8002d2e:	81a3      	strheq	r3, [r4, #12]
 8002d30:	bf18      	it	ne
 8002d32:	81a3      	strhne	r3, [r4, #12]
 8002d34:	bd10      	pop	{r4, pc}

08002d36 <__sclose>:
 8002d36:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002d3a:	f000 b813 	b.w	8002d64 <_close_r>
	...

08002d40 <_write_r>:
 8002d40:	b538      	push	{r3, r4, r5, lr}
 8002d42:	4d07      	ldr	r5, [pc, #28]	; (8002d60 <_write_r+0x20>)
 8002d44:	4604      	mov	r4, r0
 8002d46:	4608      	mov	r0, r1
 8002d48:	4611      	mov	r1, r2
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	602a      	str	r2, [r5, #0]
 8002d4e:	461a      	mov	r2, r3
 8002d50:	f7fd fec7 	bl	8000ae2 <_write>
 8002d54:	1c43      	adds	r3, r0, #1
 8002d56:	d102      	bne.n	8002d5e <_write_r+0x1e>
 8002d58:	682b      	ldr	r3, [r5, #0]
 8002d5a:	b103      	cbz	r3, 8002d5e <_write_r+0x1e>
 8002d5c:	6023      	str	r3, [r4, #0]
 8002d5e:	bd38      	pop	{r3, r4, r5, pc}
 8002d60:	200000c0 	.word	0x200000c0

08002d64 <_close_r>:
 8002d64:	b538      	push	{r3, r4, r5, lr}
 8002d66:	4d06      	ldr	r5, [pc, #24]	; (8002d80 <_close_r+0x1c>)
 8002d68:	2300      	movs	r3, #0
 8002d6a:	4604      	mov	r4, r0
 8002d6c:	4608      	mov	r0, r1
 8002d6e:	602b      	str	r3, [r5, #0]
 8002d70:	f7fd fed3 	bl	8000b1a <_close>
 8002d74:	1c43      	adds	r3, r0, #1
 8002d76:	d102      	bne.n	8002d7e <_close_r+0x1a>
 8002d78:	682b      	ldr	r3, [r5, #0]
 8002d7a:	b103      	cbz	r3, 8002d7e <_close_r+0x1a>
 8002d7c:	6023      	str	r3, [r4, #0]
 8002d7e:	bd38      	pop	{r3, r4, r5, pc}
 8002d80:	200000c0 	.word	0x200000c0

08002d84 <_fstat_r>:
 8002d84:	b538      	push	{r3, r4, r5, lr}
 8002d86:	4d07      	ldr	r5, [pc, #28]	; (8002da4 <_fstat_r+0x20>)
 8002d88:	2300      	movs	r3, #0
 8002d8a:	4604      	mov	r4, r0
 8002d8c:	4608      	mov	r0, r1
 8002d8e:	4611      	mov	r1, r2
 8002d90:	602b      	str	r3, [r5, #0]
 8002d92:	f7fd fece 	bl	8000b32 <_fstat>
 8002d96:	1c43      	adds	r3, r0, #1
 8002d98:	d102      	bne.n	8002da0 <_fstat_r+0x1c>
 8002d9a:	682b      	ldr	r3, [r5, #0]
 8002d9c:	b103      	cbz	r3, 8002da0 <_fstat_r+0x1c>
 8002d9e:	6023      	str	r3, [r4, #0]
 8002da0:	bd38      	pop	{r3, r4, r5, pc}
 8002da2:	bf00      	nop
 8002da4:	200000c0 	.word	0x200000c0

08002da8 <_isatty_r>:
 8002da8:	b538      	push	{r3, r4, r5, lr}
 8002daa:	4d06      	ldr	r5, [pc, #24]	; (8002dc4 <_isatty_r+0x1c>)
 8002dac:	2300      	movs	r3, #0
 8002dae:	4604      	mov	r4, r0
 8002db0:	4608      	mov	r0, r1
 8002db2:	602b      	str	r3, [r5, #0]
 8002db4:	f7fd fecd 	bl	8000b52 <_isatty>
 8002db8:	1c43      	adds	r3, r0, #1
 8002dba:	d102      	bne.n	8002dc2 <_isatty_r+0x1a>
 8002dbc:	682b      	ldr	r3, [r5, #0]
 8002dbe:	b103      	cbz	r3, 8002dc2 <_isatty_r+0x1a>
 8002dc0:	6023      	str	r3, [r4, #0]
 8002dc2:	bd38      	pop	{r3, r4, r5, pc}
 8002dc4:	200000c0 	.word	0x200000c0

08002dc8 <_lseek_r>:
 8002dc8:	b538      	push	{r3, r4, r5, lr}
 8002dca:	4d07      	ldr	r5, [pc, #28]	; (8002de8 <_lseek_r+0x20>)
 8002dcc:	4604      	mov	r4, r0
 8002dce:	4608      	mov	r0, r1
 8002dd0:	4611      	mov	r1, r2
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	602a      	str	r2, [r5, #0]
 8002dd6:	461a      	mov	r2, r3
 8002dd8:	f7fd fec6 	bl	8000b68 <_lseek>
 8002ddc:	1c43      	adds	r3, r0, #1
 8002dde:	d102      	bne.n	8002de6 <_lseek_r+0x1e>
 8002de0:	682b      	ldr	r3, [r5, #0]
 8002de2:	b103      	cbz	r3, 8002de6 <_lseek_r+0x1e>
 8002de4:	6023      	str	r3, [r4, #0]
 8002de6:	bd38      	pop	{r3, r4, r5, pc}
 8002de8:	200000c0 	.word	0x200000c0

08002dec <__malloc_lock>:
 8002dec:	4801      	ldr	r0, [pc, #4]	; (8002df4 <__malloc_lock+0x8>)
 8002dee:	f7ff bdc7 	b.w	8002980 <__retarget_lock_acquire_recursive>
 8002df2:	bf00      	nop
 8002df4:	200000b4 	.word	0x200000b4

08002df8 <__malloc_unlock>:
 8002df8:	4801      	ldr	r0, [pc, #4]	; (8002e00 <__malloc_unlock+0x8>)
 8002dfa:	f7ff bdc2 	b.w	8002982 <__retarget_lock_release_recursive>
 8002dfe:	bf00      	nop
 8002e00:	200000b4 	.word	0x200000b4

08002e04 <_read_r>:
 8002e04:	b538      	push	{r3, r4, r5, lr}
 8002e06:	4d07      	ldr	r5, [pc, #28]	; (8002e24 <_read_r+0x20>)
 8002e08:	4604      	mov	r4, r0
 8002e0a:	4608      	mov	r0, r1
 8002e0c:	4611      	mov	r1, r2
 8002e0e:	2200      	movs	r2, #0
 8002e10:	602a      	str	r2, [r5, #0]
 8002e12:	461a      	mov	r2, r3
 8002e14:	f7fd fe48 	bl	8000aa8 <_read>
 8002e18:	1c43      	adds	r3, r0, #1
 8002e1a:	d102      	bne.n	8002e22 <_read_r+0x1e>
 8002e1c:	682b      	ldr	r3, [r5, #0]
 8002e1e:	b103      	cbz	r3, 8002e22 <_read_r+0x1e>
 8002e20:	6023      	str	r3, [r4, #0]
 8002e22:	bd38      	pop	{r3, r4, r5, pc}
 8002e24:	200000c0 	.word	0x200000c0

08002e28 <_init>:
 8002e28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e2a:	bf00      	nop
 8002e2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e2e:	bc08      	pop	{r3}
 8002e30:	469e      	mov	lr, r3
 8002e32:	4770      	bx	lr

08002e34 <_fini>:
 8002e34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e36:	bf00      	nop
 8002e38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e3a:	bc08      	pop	{r3}
 8002e3c:	469e      	mov	lr, r3
 8002e3e:	4770      	bx	lr
